
L01_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bf8  08002bf8  00012bf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c10  08002c10  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c18  08002c18  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c18  08002c18  00012c18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c1c  08002c1c  00012c1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002c20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002c2c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002c2c  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009fd3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017ac  00000000  00000000  0002a00f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000770  00000000  00000000  0002b7c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  0002bf30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024e50  00000000  00000000  0002c5f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a355  00000000  00000000  00051448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e52cb  00000000  00000000  0005b79d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00140a68  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c74  00000000  00000000  00140ab8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002be0 	.word	0x08002be0

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002be0 	.word	0x08002be0

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b7b      	ldr	r3, [pc, #492]	; (8000710 <MX_GPIO_Init+0x204>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a7a      	ldr	r2, [pc, #488]	; (8000710 <MX_GPIO_Init+0x204>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b78      	ldr	r3, [pc, #480]	; (8000710 <MX_GPIO_Init+0x204>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b75      	ldr	r3, [pc, #468]	; (8000710 <MX_GPIO_Init+0x204>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a74      	ldr	r2, [pc, #464]	; (8000710 <MX_GPIO_Init+0x204>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b72      	ldr	r3, [pc, #456]	; (8000710 <MX_GPIO_Init+0x204>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b6f      	ldr	r3, [pc, #444]	; (8000710 <MX_GPIO_Init+0x204>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a6e      	ldr	r2, [pc, #440]	; (8000710 <MX_GPIO_Init+0x204>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b6c      	ldr	r3, [pc, #432]	; (8000710 <MX_GPIO_Init+0x204>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b69      	ldr	r3, [pc, #420]	; (8000710 <MX_GPIO_Init+0x204>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a68      	ldr	r2, [pc, #416]	; (8000710 <MX_GPIO_Init+0x204>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b66      	ldr	r3, [pc, #408]	; (8000710 <MX_GPIO_Init+0x204>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000582:	4b63      	ldr	r3, [pc, #396]	; (8000710 <MX_GPIO_Init+0x204>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a62      	ldr	r2, [pc, #392]	; (8000710 <MX_GPIO_Init+0x204>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b60      	ldr	r3, [pc, #384]	; (8000710 <MX_GPIO_Init+0x204>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800059a:	4b5d      	ldr	r3, [pc, #372]	; (8000710 <MX_GPIO_Init+0x204>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a5c      	ldr	r2, [pc, #368]	; (8000710 <MX_GPIO_Init+0x204>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b5a      	ldr	r3, [pc, #360]	; (8000710 <MX_GPIO_Init+0x204>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f244 0181 	movw	r1, #16513	; 0x4081
 80005b8:	4856      	ldr	r0, [pc, #344]	; (8000714 <MX_GPIO_Init+0x208>)
 80005ba:	f000 fd7d 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	4855      	ldr	r0, [pc, #340]	; (8000718 <MX_GPIO_Init+0x20c>)
 80005c4:	f000 fd78 	bl	80010b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d4:	2300      	movs	r3, #0
 80005d6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005d8:	f107 031c 	add.w	r3, r7, #28
 80005dc:	4619      	mov	r1, r3
 80005de:	484f      	ldr	r0, [pc, #316]	; (800071c <MX_GPIO_Init+0x210>)
 80005e0:	f000 fbbe 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80005e4:	2332      	movs	r3, #50	; 0x32
 80005e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ec:	2300      	movs	r3, #0
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f0:	2303      	movs	r3, #3
 80005f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80005f4:	230b      	movs	r3, #11
 80005f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005f8:	f107 031c 	add.w	r3, r7, #28
 80005fc:	4619      	mov	r1, r3
 80005fe:	4847      	ldr	r0, [pc, #284]	; (800071c <MX_GPIO_Init+0x210>)
 8000600:	f000 fbae 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000604:	2386      	movs	r3, #134	; 0x86
 8000606:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800060c:	2300      	movs	r3, #0
 800060e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000610:	2303      	movs	r3, #3
 8000612:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000614:	230b      	movs	r3, #11
 8000616:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000618:	f107 031c 	add.w	r3, r7, #28
 800061c:	4619      	mov	r1, r3
 800061e:	4840      	ldr	r0, [pc, #256]	; (8000720 <MX_GPIO_Init+0x214>)
 8000620:	f000 fb9e 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000624:	f244 0381 	movw	r3, #16513	; 0x4081
 8000628:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800062a:	2301      	movs	r3, #1
 800062c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800062e:	2300      	movs	r3, #0
 8000630:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000632:	2300      	movs	r3, #0
 8000634:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	4835      	ldr	r0, [pc, #212]	; (8000714 <MX_GPIO_Init+0x208>)
 800063e:	f000 fb8f 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000642:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000646:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000648:	2302      	movs	r3, #2
 800064a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064c:	2300      	movs	r3, #0
 800064e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000650:	2303      	movs	r3, #3
 8000652:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000654:	230b      	movs	r3, #11
 8000656:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000658:	f107 031c 	add.w	r3, r7, #28
 800065c:	4619      	mov	r1, r3
 800065e:	482d      	ldr	r0, [pc, #180]	; (8000714 <MX_GPIO_Init+0x208>)
 8000660:	f000 fb7e 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000664:	2340      	movs	r3, #64	; 0x40
 8000666:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000668:	2301      	movs	r3, #1
 800066a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066c:	2300      	movs	r3, #0
 800066e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000670:	2300      	movs	r3, #0
 8000672:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000674:	f107 031c 	add.w	r3, r7, #28
 8000678:	4619      	mov	r1, r3
 800067a:	4827      	ldr	r0, [pc, #156]	; (8000718 <MX_GPIO_Init+0x20c>)
 800067c:	f000 fb70 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000680:	2380      	movs	r3, #128	; 0x80
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800068c:	f107 031c 	add.w	r3, r7, #28
 8000690:	4619      	mov	r1, r3
 8000692:	4821      	ldr	r0, [pc, #132]	; (8000718 <MX_GPIO_Init+0x20c>)
 8000694:	f000 fb64 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000698:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800069c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800069e:	2302      	movs	r3, #2
 80006a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006a6:	2303      	movs	r3, #3
 80006a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80006aa:	230a      	movs	r3, #10
 80006ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ae:	f107 031c 	add.w	r3, r7, #28
 80006b2:	4619      	mov	r1, r3
 80006b4:	481a      	ldr	r0, [pc, #104]	; (8000720 <MX_GPIO_Init+0x214>)
 80006b6:	f000 fb53 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80006ba:	f44f 7300 	mov.w	r3, #512	; 0x200
 80006be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006c0:	2300      	movs	r3, #0
 80006c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80006c8:	f107 031c 	add.w	r3, r7, #28
 80006cc:	4619      	mov	r1, r3
 80006ce:	4814      	ldr	r0, [pc, #80]	; (8000720 <MX_GPIO_Init+0x214>)
 80006d0:	f000 fb46 	bl	8000d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80006d4:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80006d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006da:	2302      	movs	r3, #2
 80006dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	2300      	movs	r3, #0
 80006e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e2:	2303      	movs	r3, #3
 80006e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006e6:	230b      	movs	r3, #11
 80006e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ea:	f107 031c 	add.w	r3, r7, #28
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <MX_GPIO_Init+0x20c>)
 80006f2:	f000 fb35 	bl	8000d60 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2028      	movs	r0, #40	; 0x28
 80006fc:	f000 faf9 	bl	8000cf2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000700:	2028      	movs	r0, #40	; 0x28
 8000702:	f000 fb12 	bl	8000d2a <HAL_NVIC_EnableIRQ>

}
 8000706:	bf00      	nop
 8000708:	3730      	adds	r7, #48	; 0x30
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40023800 	.word	0x40023800
 8000714:	40020400 	.word	0x40020400
 8000718:	40021800 	.word	0x40021800
 800071c:	40020800 	.word	0x40020800
 8000720:	40020000 	.word	0x40020000

08000724 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_Btn_Pin)
 800072e:	88fb      	ldrh	r3, [r7, #6]
 8000730:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000734:	d103      	bne.n	800073e <HAL_GPIO_EXTI_Callback+0x1a>
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 8000736:	2101      	movs	r1, #1
 8000738:	4803      	ldr	r0, [pc, #12]	; (8000748 <HAL_GPIO_EXTI_Callback+0x24>)
 800073a:	f000 fcd6 	bl	80010ea <HAL_GPIO_TogglePin>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40020400 	.word	0x40020400

0800074c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000750:	f000 f997 	bl	8000a82 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000754:	f000 f806 	bl	8000764 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000758:	f7ff fed8 	bl	800050c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800075c:	f000 f8d8 	bl	8000910 <MX_USART3_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000760:	e7fe      	b.n	8000760 <main+0x14>
	...

08000764 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b094      	sub	sp, #80	; 0x50
 8000768:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076a:	f107 0320 	add.w	r3, r7, #32
 800076e:	2230      	movs	r2, #48	; 0x30
 8000770:	2100      	movs	r1, #0
 8000772:	4618      	mov	r0, r3
 8000774:	f002 fa2c 	bl	8002bd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000778:	f107 030c 	add.w	r3, r7, #12
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
 8000780:	605a      	str	r2, [r3, #4]
 8000782:	609a      	str	r2, [r3, #8]
 8000784:	60da      	str	r2, [r3, #12]
 8000786:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000788:	f000 fce2 	bl	8001150 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	4b27      	ldr	r3, [pc, #156]	; (800082c <SystemClock_Config+0xc8>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	4a26      	ldr	r2, [pc, #152]	; (800082c <SystemClock_Config+0xc8>)
 8000792:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000796:	6413      	str	r3, [r2, #64]	; 0x40
 8000798:	4b24      	ldr	r3, [pc, #144]	; (800082c <SystemClock_Config+0xc8>)
 800079a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a0:	60bb      	str	r3, [r7, #8]
 80007a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007a4:	4b22      	ldr	r3, [pc, #136]	; (8000830 <SystemClock_Config+0xcc>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007ac:	4a20      	ldr	r2, [pc, #128]	; (8000830 <SystemClock_Config+0xcc>)
 80007ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007b2:	6013      	str	r3, [r2, #0]
 80007b4:	4b1e      	ldr	r3, [pc, #120]	; (8000830 <SystemClock_Config+0xcc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007bc:	607b      	str	r3, [r7, #4]
 80007be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c0:	2301      	movs	r3, #1
 80007c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007c4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d8:	2348      	movs	r3, #72	; 0x48
 80007da:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f000 fcc1 	bl	8001170 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80007f4:	f000 f81e 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007fc:	2302      	movs	r3, #2
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f000 ff4f 	bl	80016b8 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000820:	f000 f808 	bl	8000834 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	; 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	e7fe      	b.n	800083c <Error_Handler+0x8>
	...

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <HAL_MspInit+0x44>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a0e      	ldr	r2, [pc, #56]	; (8000884 <HAL_MspInit+0x44>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <HAL_MspInit+0x44>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	607b      	str	r3, [r7, #4]
 800085c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x44>)
 8000860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x44>)
 8000864:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000868:	6453      	str	r3, [r2, #68]	; 0x44
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x44>)
 800086c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800088c:	e7fe      	b.n	800088c <NMI_Handler+0x4>

0800088e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000892:	e7fe      	b.n	8000892 <HardFault_Handler+0x4>

08000894 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000898:	e7fe      	b.n	8000898 <MemManage_Handler+0x4>

0800089a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800089a:	b480      	push	{r7}
 800089c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800089e:	e7fe      	b.n	800089e <BusFault_Handler+0x4>

080008a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008a4:	e7fe      	b.n	80008a4 <UsageFault_Handler+0x4>

080008a6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008a6:	b480      	push	{r7}
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	46bd      	mov	sp, r7
 80008ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b2:	4770      	bx	lr

080008b4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr

080008c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008d4:	f000 f912 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	bd80      	pop	{r7, pc}

080008dc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80008e0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80008e4:	f000 fc1c 	bl	8001120 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}

080008ec <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008f0:	4b06      	ldr	r3, [pc, #24]	; (800090c <SystemInit+0x20>)
 80008f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008f6:	4a05      	ldr	r2, [pc, #20]	; (800090c <SystemInit+0x20>)
 80008f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000ed00 	.word	0xe000ed00

08000910 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART3_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800091c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000920:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART3_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000952:	4805      	ldr	r0, [pc, #20]	; (8000968 <MX_USART3_UART_Init+0x58>)
 8000954:	f001 fcc6 	bl	80022e4 <HAL_UART_Init>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f7ff ff69 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000962:	bf00      	nop
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	20000028 	.word	0x20000028
 800096c:	40004800 	.word	0x40004800

08000970 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b0aa      	sub	sp, #168	; 0xa8
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000978:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000988:	f107 0310 	add.w	r3, r7, #16
 800098c:	2284      	movs	r2, #132	; 0x84
 800098e:	2100      	movs	r1, #0
 8000990:	4618      	mov	r0, r3
 8000992:	f002 f91d 	bl	8002bd0 <memset>
  if(uartHandle->Instance==USART3)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a22      	ldr	r2, [pc, #136]	; (8000a24 <HAL_UART_MspInit+0xb4>)
 800099c:	4293      	cmp	r3, r2
 800099e:	d13c      	bne.n	8000a1a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80009a0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80009a6:	2300      	movs	r3, #0
 80009a8:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009aa:	f107 0310 	add.w	r3, r7, #16
 80009ae:	4618      	mov	r0, r3
 80009b0:	f001 f8a8 	bl	8001b04 <HAL_RCCEx_PeriphCLKConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80009ba:	f7ff ff3b 	bl	8000834 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009be:	4b1a      	ldr	r3, [pc, #104]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a19      	ldr	r2, [pc, #100]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b17      	ldr	r3, [pc, #92]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	4a13      	ldr	r2, [pc, #76]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009dc:	f043 0308 	orr.w	r3, r3, #8
 80009e0:	6313      	str	r3, [r2, #48]	; 0x30
 80009e2:	4b11      	ldr	r3, [pc, #68]	; (8000a28 <HAL_UART_MspInit+0xb8>)
 80009e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e6:	f003 0308 	and.w	r3, r3, #8
 80009ea:	60bb      	str	r3, [r7, #8]
 80009ec:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009ee:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f6:	2302      	movs	r3, #2
 80009f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a08:	2307      	movs	r3, #7
 8000a0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	; (8000a2c <HAL_UART_MspInit+0xbc>)
 8000a16:	f000 f9a3 	bl	8000d60 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000a1a:	bf00      	nop
 8000a1c:	37a8      	adds	r7, #168	; 0xa8
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40004800 	.word	0x40004800
 8000a28:	40023800 	.word	0x40023800
 8000a2c:	40020c00 	.word	0x40020c00

08000a30 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a68 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a36:	490e      	ldr	r1, [pc, #56]	; (8000a70 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a38:	4a0e      	ldr	r2, [pc, #56]	; (8000a74 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a3c:	e002      	b.n	8000a44 <LoopCopyDataInit>

08000a3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a42:	3304      	adds	r3, #4

08000a44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a48:	d3f9      	bcc.n	8000a3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a4a:	4a0b      	ldr	r2, [pc, #44]	; (8000a78 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a4c:	4c0b      	ldr	r4, [pc, #44]	; (8000a7c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a50:	e001      	b.n	8000a56 <LoopFillZerobss>

08000a52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a54:	3204      	adds	r2, #4

08000a56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a58:	d3fb      	bcc.n	8000a52 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a5a:	f7ff ff47 	bl	80008ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a5e:	f002 f893 	bl	8002b88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a62:	f7ff fe73 	bl	800074c <main>
  bx  lr    
 8000a66:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a68:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a6c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a70:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a74:	08002c20 	.word	0x08002c20
  ldr r2, =_sbss
 8000a78:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a7c:	200000b4 	.word	0x200000b4

08000a80 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a80:	e7fe      	b.n	8000a80 <ADC_IRQHandler>

08000a82 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a86:	2003      	movs	r0, #3
 8000a88:	f000 f928 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f000 f805 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a92:	f7ff fed5 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a96:	2300      	movs	r3, #0
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	bd80      	pop	{r7, pc}

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 f943 	bl	8000d46 <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 f90b 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200000b0 	.word	0x200000b0

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000b0 	.word	0x200000b0

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	05fa0000 	.word	0x05fa0000

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	79fb      	ldrb	r3, [r7, #7]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	79fb      	ldrb	r3, [r7, #7]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d00:	2300      	movs	r3, #0
 8000d02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d04:	f7ff ff3e 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	68b9      	ldr	r1, [r7, #8]
 8000d0e:	6978      	ldr	r0, [r7, #20]
 8000d10:	f7ff ff8e 	bl	8000c30 <NVIC_EncodePriority>
 8000d14:	4602      	mov	r2, r0
 8000d16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d1a:	4611      	mov	r1, r2
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff ff5d 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b082      	sub	sp, #8
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	4603      	mov	r3, r0
 8000d32:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff ff31 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3e:	bf00      	nop
 8000d40:	3708      	adds	r7, #8
 8000d42:	46bd      	mov	sp, r7
 8000d44:	bd80      	pop	{r7, pc}

08000d46 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d46:	b580      	push	{r7, lr}
 8000d48:	b082      	sub	sp, #8
 8000d4a:	af00      	add	r7, sp, #0
 8000d4c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4e:	6878      	ldr	r0, [r7, #4]
 8000d50:	f7ff ffa2 	bl	8000c98 <SysTick_Config>
 8000d54:	4603      	mov	r3, r0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b089      	sub	sp, #36	; 0x24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
 8000d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000d72:	2300      	movs	r3, #0
 8000d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61fb      	str	r3, [r7, #28]
 8000d7e:	e175      	b.n	800106c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000d80:	2201      	movs	r2, #1
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8a:	683b      	ldr	r3, [r7, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	697a      	ldr	r2, [r7, #20]
 8000d90:	4013      	ands	r3, r2
 8000d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	f040 8164 	bne.w	8001066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	f003 0303 	and.w	r3, r3, #3
 8000da6:	2b01      	cmp	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_GPIO_Init+0x56>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	2b02      	cmp	r3, #2
 8000db4:	d130      	bne.n	8000e18 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	689b      	ldr	r3, [r3, #8]
 8000dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	2203      	movs	r2, #3
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	69ba      	ldr	r2, [r7, #24]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	68da      	ldr	r2, [r3, #12]
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	69ba      	ldr	r2, [r7, #24]
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dec:	2201      	movs	r2, #1
 8000dee:	69fb      	ldr	r3, [r7, #28]
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	69ba      	ldr	r2, [r7, #24]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	685b      	ldr	r3, [r3, #4]
 8000e00:	091b      	lsrs	r3, r3, #4
 8000e02:	f003 0201 	and.w	r2, r3, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	69ba      	ldr	r2, [r7, #24]
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	69ba      	ldr	r2, [r7, #24]
 8000e16:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	685b      	ldr	r3, [r3, #4]
 8000e1c:	f003 0303 	and.w	r3, r3, #3
 8000e20:	2b03      	cmp	r3, #3
 8000e22:	d017      	beq.n	8000e54 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	68db      	ldr	r3, [r3, #12]
 8000e28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000e2a:	69fb      	ldr	r3, [r7, #28]
 8000e2c:	005b      	lsls	r3, r3, #1
 8000e2e:	2203      	movs	r2, #3
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	43db      	mvns	r3, r3
 8000e36:	69ba      	ldr	r2, [r7, #24]
 8000e38:	4013      	ands	r3, r2
 8000e3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	689a      	ldr	r2, [r3, #8]
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	005b      	lsls	r3, r3, #1
 8000e44:	fa02 f303 	lsl.w	r3, r2, r3
 8000e48:	69ba      	ldr	r2, [r7, #24]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	69ba      	ldr	r2, [r7, #24]
 8000e52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	f003 0303 	and.w	r3, r3, #3
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d123      	bne.n	8000ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	08da      	lsrs	r2, r3, #3
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3208      	adds	r2, #8
 8000e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000e6e:	69fb      	ldr	r3, [r7, #28]
 8000e70:	f003 0307 	and.w	r3, r3, #7
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	220f      	movs	r2, #15
 8000e78:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	691a      	ldr	r2, [r3, #16]
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f003 0307 	and.w	r3, r3, #7
 8000e8e:	009b      	lsls	r3, r3, #2
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	69ba      	ldr	r2, [r7, #24]
 8000e96:	4313      	orrs	r3, r2
 8000e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	69b9      	ldr	r1, [r7, #24]
 8000ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000eae:	69fb      	ldr	r3, [r7, #28]
 8000eb0:	005b      	lsls	r3, r3, #1
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	43db      	mvns	r3, r3
 8000eba:	69ba      	ldr	r2, [r7, #24]
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685b      	ldr	r3, [r3, #4]
 8000ec4:	f003 0203 	and.w	r2, r3, #3
 8000ec8:	69fb      	ldr	r3, [r7, #28]
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	69ba      	ldr	r2, [r7, #24]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f000 80be 	beq.w	8001066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eea:	4b66      	ldr	r3, [pc, #408]	; (8001084 <HAL_GPIO_Init+0x324>)
 8000eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eee:	4a65      	ldr	r2, [pc, #404]	; (8001084 <HAL_GPIO_Init+0x324>)
 8000ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ef6:	4b63      	ldr	r3, [pc, #396]	; (8001084 <HAL_GPIO_Init+0x324>)
 8000ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f02:	4a61      	ldr	r2, [pc, #388]	; (8001088 <HAL_GPIO_Init+0x328>)
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	089b      	lsrs	r3, r3, #2
 8000f08:	3302      	adds	r3, #2
 8000f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	f003 0303 	and.w	r3, r3, #3
 8000f16:	009b      	lsls	r3, r3, #2
 8000f18:	220f      	movs	r2, #15
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	43db      	mvns	r3, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4013      	ands	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a58      	ldr	r2, [pc, #352]	; (800108c <HAL_GPIO_Init+0x32c>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d037      	beq.n	8000f9e <HAL_GPIO_Init+0x23e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_GPIO_Init+0x330>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d031      	beq.n	8000f9a <HAL_GPIO_Init+0x23a>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a56      	ldr	r2, [pc, #344]	; (8001094 <HAL_GPIO_Init+0x334>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d02b      	beq.n	8000f96 <HAL_GPIO_Init+0x236>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a55      	ldr	r2, [pc, #340]	; (8001098 <HAL_GPIO_Init+0x338>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d025      	beq.n	8000f92 <HAL_GPIO_Init+0x232>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a54      	ldr	r2, [pc, #336]	; (800109c <HAL_GPIO_Init+0x33c>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d01f      	beq.n	8000f8e <HAL_GPIO_Init+0x22e>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a53      	ldr	r2, [pc, #332]	; (80010a0 <HAL_GPIO_Init+0x340>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d019      	beq.n	8000f8a <HAL_GPIO_Init+0x22a>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	4a52      	ldr	r2, [pc, #328]	; (80010a4 <HAL_GPIO_Init+0x344>)
 8000f5a:	4293      	cmp	r3, r2
 8000f5c:	d013      	beq.n	8000f86 <HAL_GPIO_Init+0x226>
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4a51      	ldr	r2, [pc, #324]	; (80010a8 <HAL_GPIO_Init+0x348>)
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d00d      	beq.n	8000f82 <HAL_GPIO_Init+0x222>
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	4a50      	ldr	r2, [pc, #320]	; (80010ac <HAL_GPIO_Init+0x34c>)
 8000f6a:	4293      	cmp	r3, r2
 8000f6c:	d007      	beq.n	8000f7e <HAL_GPIO_Init+0x21e>
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4a4f      	ldr	r2, [pc, #316]	; (80010b0 <HAL_GPIO_Init+0x350>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d101      	bne.n	8000f7a <HAL_GPIO_Init+0x21a>
 8000f76:	2309      	movs	r3, #9
 8000f78:	e012      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f7a:	230a      	movs	r3, #10
 8000f7c:	e010      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f7e:	2308      	movs	r3, #8
 8000f80:	e00e      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f82:	2307      	movs	r3, #7
 8000f84:	e00c      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f86:	2306      	movs	r3, #6
 8000f88:	e00a      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f8a:	2305      	movs	r3, #5
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f8e:	2304      	movs	r3, #4
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x240>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	69fa      	ldr	r2, [r7, #28]
 8000fa2:	f002 0203 	and.w	r2, r2, #3
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	69ba      	ldr	r2, [r7, #24]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x328>)
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b3d      	ldr	r3, [pc, #244]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	43db      	mvns	r3, r3
 8000fc8:	69ba      	ldr	r2, [r7, #24]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000fda:	69ba      	ldr	r2, [r7, #24]
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fe2:	4a34      	ldr	r2, [pc, #208]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b32      	ldr	r3, [pc, #200]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001000:	2b00      	cmp	r3, #0
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	4313      	orrs	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800100c:	4a29      	ldr	r2, [pc, #164]	; (80010b4 <HAL_GPIO_Init+0x354>)
 800100e:	69bb      	ldr	r3, [r7, #24]
 8001010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001012:	4b28      	ldr	r3, [pc, #160]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001018:	693b      	ldr	r3, [r7, #16]
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800102a:	2b00      	cmp	r3, #0
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	693b      	ldr	r3, [r7, #16]
 8001032:	4313      	orrs	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001036:	4a1f      	ldr	r2, [pc, #124]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800103c:	4b1d      	ldr	r3, [pc, #116]	; (80010b4 <HAL_GPIO_Init+0x354>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	43db      	mvns	r3, r3
 8001046:	69ba      	ldr	r2, [r7, #24]
 8001048:	4013      	ands	r3, r2
 800104a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001054:	2b00      	cmp	r3, #0
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	693b      	ldr	r3, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001060:	4a14      	ldr	r2, [pc, #80]	; (80010b4 <HAL_GPIO_Init+0x354>)
 8001062:	69bb      	ldr	r3, [r7, #24]
 8001064:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3301      	adds	r3, #1
 800106a:	61fb      	str	r3, [r7, #28]
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	2b0f      	cmp	r3, #15
 8001070:	f67f ae86 	bls.w	8000d80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001074:	bf00      	nop
 8001076:	bf00      	nop
 8001078:	3724      	adds	r7, #36	; 0x24
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	40023800 	.word	0x40023800
 8001088:	40013800 	.word	0x40013800
 800108c:	40020000 	.word	0x40020000
 8001090:	40020400 	.word	0x40020400
 8001094:	40020800 	.word	0x40020800
 8001098:	40020c00 	.word	0x40020c00
 800109c:	40021000 	.word	0x40021000
 80010a0:	40021400 	.word	0x40021400
 80010a4:	40021800 	.word	0x40021800
 80010a8:	40021c00 	.word	0x40021c00
 80010ac:	40022000 	.word	0x40022000
 80010b0:	40022400 	.word	0x40022400
 80010b4:	40013c00 	.word	0x40013c00

080010b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
 80010c0:	460b      	mov	r3, r1
 80010c2:	807b      	strh	r3, [r7, #2]
 80010c4:	4613      	mov	r3, r2
 80010c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80010c8:	787b      	ldrb	r3, [r7, #1]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80010d4:	e003      	b.n	80010de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80010d6:	887b      	ldrh	r3, [r7, #2]
 80010d8:	041a      	lsls	r2, r3, #16
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	619a      	str	r2, [r3, #24]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr

080010ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80010ea:	b480      	push	{r7}
 80010ec:	b085      	sub	sp, #20
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	6078      	str	r0, [r7, #4]
 80010f2:	460b      	mov	r3, r1
 80010f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80010fc:	887a      	ldrh	r2, [r7, #2]
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	4013      	ands	r3, r2
 8001102:	041a      	lsls	r2, r3, #16
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	43d9      	mvns	r1, r3
 8001108:	887b      	ldrh	r3, [r7, #2]
 800110a:	400b      	ands	r3, r1
 800110c:	431a      	orrs	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	619a      	str	r2, [r3, #24]
}
 8001112:	bf00      	nop
 8001114:	3714      	adds	r7, #20
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
	...

08001120 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b082      	sub	sp, #8
 8001124:	af00      	add	r7, sp, #0
 8001126:	4603      	mov	r3, r0
 8001128:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800112a:	4b08      	ldr	r3, [pc, #32]	; (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800112c:	695a      	ldr	r2, [r3, #20]
 800112e:	88fb      	ldrh	r3, [r7, #6]
 8001130:	4013      	ands	r3, r2
 8001132:	2b00      	cmp	r3, #0
 8001134:	d006      	beq.n	8001144 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001136:	4a05      	ldr	r2, [pc, #20]	; (800114c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001138:	88fb      	ldrh	r3, [r7, #6]
 800113a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800113c:	88fb      	ldrh	r3, [r7, #6]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff faf0 	bl	8000724 <HAL_GPIO_EXTI_Callback>
  }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40013c00 	.word	0x40013c00

08001150 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800115a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800115e:	6013      	str	r3, [r2, #0]
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	40007000 	.word	0x40007000

08001170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001178:	2300      	movs	r3, #0
 800117a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b00      	cmp	r3, #0
 8001180:	d101      	bne.n	8001186 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e291      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	2b00      	cmp	r3, #0
 8001190:	f000 8087 	beq.w	80012a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001194:	4b96      	ldr	r3, [pc, #600]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b04      	cmp	r3, #4
 800119e:	d00c      	beq.n	80011ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80011a0:	4b93      	ldr	r3, [pc, #588]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011a2:	689b      	ldr	r3, [r3, #8]
 80011a4:	f003 030c 	and.w	r3, r3, #12
 80011a8:	2b08      	cmp	r3, #8
 80011aa:	d112      	bne.n	80011d2 <HAL_RCC_OscConfig+0x62>
 80011ac:	4b90      	ldr	r3, [pc, #576]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011b8:	d10b      	bne.n	80011d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ba:	4b8d      	ldr	r3, [pc, #564]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d06c      	beq.n	80012a0 <HAL_RCC_OscConfig+0x130>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d168      	bne.n	80012a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e26b      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011da:	d106      	bne.n	80011ea <HAL_RCC_OscConfig+0x7a>
 80011dc:	4b84      	ldr	r3, [pc, #528]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a83      	ldr	r2, [pc, #524]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011e6:	6013      	str	r3, [r2, #0]
 80011e8:	e02e      	b.n	8001248 <HAL_RCC_OscConfig+0xd8>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10c      	bne.n	800120c <HAL_RCC_OscConfig+0x9c>
 80011f2:	4b7f      	ldr	r3, [pc, #508]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7e      	ldr	r2, [pc, #504]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80011f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	4b7c      	ldr	r3, [pc, #496]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a7b      	ldr	r2, [pc, #492]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e01d      	b.n	8001248 <HAL_RCC_OscConfig+0xd8>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001214:	d10c      	bne.n	8001230 <HAL_RCC_OscConfig+0xc0>
 8001216:	4b76      	ldr	r3, [pc, #472]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a75      	ldr	r2, [pc, #468]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800121c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	4b73      	ldr	r3, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	4a72      	ldr	r2, [pc, #456]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800122c:	6013      	str	r3, [r2, #0]
 800122e:	e00b      	b.n	8001248 <HAL_RCC_OscConfig+0xd8>
 8001230:	4b6f      	ldr	r3, [pc, #444]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6e      	ldr	r2, [pc, #440]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b6c      	ldr	r3, [pc, #432]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a6b      	ldr	r2, [pc, #428]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	685b      	ldr	r3, [r3, #4]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d013      	beq.n	8001278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001250:	f7ff fc68 	bl	8000b24 <HAL_GetTick>
 8001254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001256:	e008      	b.n	800126a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001258:	f7ff fc64 	bl	8000b24 <HAL_GetTick>
 800125c:	4602      	mov	r2, r0
 800125e:	693b      	ldr	r3, [r7, #16]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	2b64      	cmp	r3, #100	; 0x64
 8001264:	d901      	bls.n	800126a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001266:	2303      	movs	r3, #3
 8001268:	e21f      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800126a:	4b61      	ldr	r3, [pc, #388]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d0f0      	beq.n	8001258 <HAL_RCC_OscConfig+0xe8>
 8001276:	e014      	b.n	80012a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001278:	f7ff fc54 	bl	8000b24 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001280:	f7ff fc50 	bl	8000b24 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b64      	cmp	r3, #100	; 0x64
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e20b      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001292:	4b57      	ldr	r3, [pc, #348]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d1f0      	bne.n	8001280 <HAL_RCC_OscConfig+0x110>
 800129e:	e000      	b.n	80012a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d069      	beq.n	8001382 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012ae:	4b50      	ldr	r3, [pc, #320]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d00b      	beq.n	80012d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ba:	4b4d      	ldr	r3, [pc, #308]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 030c 	and.w	r3, r3, #12
 80012c2:	2b08      	cmp	r3, #8
 80012c4:	d11c      	bne.n	8001300 <HAL_RCC_OscConfig+0x190>
 80012c6:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d116      	bne.n	8001300 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012d2:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f003 0302 	and.w	r3, r3, #2
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d005      	beq.n	80012ea <HAL_RCC_OscConfig+0x17a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	68db      	ldr	r3, [r3, #12]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d001      	beq.n	80012ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e1df      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012ea:	4b41      	ldr	r3, [pc, #260]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	691b      	ldr	r3, [r3, #16]
 80012f6:	00db      	lsls	r3, r3, #3
 80012f8:	493d      	ldr	r1, [pc, #244]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80012fa:	4313      	orrs	r3, r2
 80012fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012fe:	e040      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	2b00      	cmp	r3, #0
 8001306:	d023      	beq.n	8001350 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001308:	4b39      	ldr	r3, [pc, #228]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a38      	ldr	r2, [pc, #224]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800130e:	f043 0301 	orr.w	r3, r3, #1
 8001312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001314:	f7ff fc06 	bl	8000b24 <HAL_GetTick>
 8001318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800131a:	e008      	b.n	800132e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800131c:	f7ff fc02 	bl	8000b24 <HAL_GetTick>
 8001320:	4602      	mov	r2, r0
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	1ad3      	subs	r3, r2, r3
 8001326:	2b02      	cmp	r3, #2
 8001328:	d901      	bls.n	800132e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800132a:	2303      	movs	r3, #3
 800132c:	e1bd      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800132e:	4b30      	ldr	r3, [pc, #192]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f003 0302 	and.w	r3, r3, #2
 8001336:	2b00      	cmp	r3, #0
 8001338:	d0f0      	beq.n	800131c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	691b      	ldr	r3, [r3, #16]
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4929      	ldr	r1, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800134a:	4313      	orrs	r3, r2
 800134c:	600b      	str	r3, [r1, #0]
 800134e:	e018      	b.n	8001382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001350:	4b27      	ldr	r3, [pc, #156]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a26      	ldr	r2, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001356:	f023 0301 	bic.w	r3, r3, #1
 800135a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800135c:	f7ff fbe2 	bl	8000b24 <HAL_GetTick>
 8001360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001364:	f7ff fbde 	bl	8000b24 <HAL_GetTick>
 8001368:	4602      	mov	r2, r0
 800136a:	693b      	ldr	r3, [r7, #16]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e199      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0302 	and.w	r3, r3, #2
 800137e:	2b00      	cmp	r3, #0
 8001380:	d1f0      	bne.n	8001364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f003 0308 	and.w	r3, r3, #8
 800138a:	2b00      	cmp	r3, #0
 800138c:	d038      	beq.n	8001400 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	695b      	ldr	r3, [r3, #20]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d019      	beq.n	80013ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 8001398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800139a:	4a15      	ldr	r2, [pc, #84]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013a2:	f7ff fbbf 	bl	8000b24 <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013aa:	f7ff fbbb 	bl	8000b24 <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e176      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013bc:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80013be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x23a>
 80013c8:	e01a      	b.n	8001400 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013ca:	4b09      	ldr	r3, [pc, #36]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80013cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ce:	4a08      	ldr	r2, [pc, #32]	; (80013f0 <HAL_RCC_OscConfig+0x280>)
 80013d0:	f023 0301 	bic.w	r3, r3, #1
 80013d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d6:	f7ff fba5 	bl	8000b24 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013dc:	e00a      	b.n	80013f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013de:	f7ff fba1 	bl	8000b24 <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d903      	bls.n	80013f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e15c      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
 80013f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013f4:	4b91      	ldr	r3, [pc, #580]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80013f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1ee      	bne.n	80013de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0304 	and.w	r3, r3, #4
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a4 	beq.w	8001556 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800140e:	4b8b      	ldr	r3, [pc, #556]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10d      	bne.n	8001436 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800141a:	4b88      	ldr	r3, [pc, #544]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001424:	6413      	str	r3, [r2, #64]	; 0x40
 8001426:	4b85      	ldr	r3, [pc, #532]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001432:	2301      	movs	r3, #1
 8001434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001436:	4b82      	ldr	r3, [pc, #520]	; (8001640 <HAL_RCC_OscConfig+0x4d0>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800143e:	2b00      	cmp	r3, #0
 8001440:	d118      	bne.n	8001474 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001442:	4b7f      	ldr	r3, [pc, #508]	; (8001640 <HAL_RCC_OscConfig+0x4d0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4a7e      	ldr	r2, [pc, #504]	; (8001640 <HAL_RCC_OscConfig+0x4d0>)
 8001448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800144c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb69 	bl	8000b24 <HAL_GetTick>
 8001452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001454:	e008      	b.n	8001468 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001456:	f7ff fb65 	bl	8000b24 <HAL_GetTick>
 800145a:	4602      	mov	r2, r0
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	2b64      	cmp	r3, #100	; 0x64
 8001462:	d901      	bls.n	8001468 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001464:	2303      	movs	r3, #3
 8001466:	e120      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001468:	4b75      	ldr	r3, [pc, #468]	; (8001640 <HAL_RCC_OscConfig+0x4d0>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001470:	2b00      	cmp	r3, #0
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d106      	bne.n	800148a <HAL_RCC_OscConfig+0x31a>
 800147c:	4b6f      	ldr	r3, [pc, #444]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800147e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001480:	4a6e      	ldr	r2, [pc, #440]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001482:	f043 0301 	orr.w	r3, r3, #1
 8001486:	6713      	str	r3, [r2, #112]	; 0x70
 8001488:	e02d      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d10c      	bne.n	80014ac <HAL_RCC_OscConfig+0x33c>
 8001492:	4b6a      	ldr	r3, [pc, #424]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a69      	ldr	r2, [pc, #420]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001498:	f023 0301 	bic.w	r3, r3, #1
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	4b67      	ldr	r3, [pc, #412]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014a2:	4a66      	ldr	r2, [pc, #408]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014a4:	f023 0304 	bic.w	r3, r3, #4
 80014a8:	6713      	str	r3, [r2, #112]	; 0x70
 80014aa:	e01c      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	689b      	ldr	r3, [r3, #8]
 80014b0:	2b05      	cmp	r3, #5
 80014b2:	d10c      	bne.n	80014ce <HAL_RCC_OscConfig+0x35e>
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a60      	ldr	r2, [pc, #384]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014ba:	f043 0304 	orr.w	r3, r3, #4
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	4b5e      	ldr	r3, [pc, #376]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c4:	4a5d      	ldr	r2, [pc, #372]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	6713      	str	r3, [r2, #112]	; 0x70
 80014cc:	e00b      	b.n	80014e6 <HAL_RCC_OscConfig+0x376>
 80014ce:	4b5b      	ldr	r3, [pc, #364]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a5a      	ldr	r2, [pc, #360]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014d4:	f023 0301 	bic.w	r3, r3, #1
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
 80014da:	4b58      	ldr	r3, [pc, #352]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014de:	4a57      	ldr	r2, [pc, #348]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80014e0:	f023 0304 	bic.w	r3, r3, #4
 80014e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d015      	beq.n	800151a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb19 	bl	8000b24 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014f4:	e00a      	b.n	800150c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014f6:	f7ff fb15 	bl	8000b24 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	f241 3288 	movw	r2, #5000	; 0x1388
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e0ce      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800150c:	4b4b      	ldr	r3, [pc, #300]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	f003 0302 	and.w	r3, r3, #2
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0ee      	beq.n	80014f6 <HAL_RCC_OscConfig+0x386>
 8001518:	e014      	b.n	8001544 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800151a:	f7ff fb03 	bl	8000b24 <HAL_GetTick>
 800151e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001522:	f7ff faff 	bl	8000b24 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	693b      	ldr	r3, [r7, #16]
 800152a:	1ad3      	subs	r3, r2, r3
 800152c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001530:	4293      	cmp	r3, r2
 8001532:	d901      	bls.n	8001538 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001534:	2303      	movs	r3, #3
 8001536:	e0b8      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001538:	4b40      	ldr	r3, [pc, #256]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800153a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153c:	f003 0302 	and.w	r3, r3, #2
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1ee      	bne.n	8001522 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001544:	7dfb      	ldrb	r3, [r7, #23]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d105      	bne.n	8001556 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800154a:	4b3c      	ldr	r3, [pc, #240]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800154e:	4a3b      	ldr	r2, [pc, #236]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	f000 80a4 	beq.w	80016a8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001560:	4b36      	ldr	r3, [pc, #216]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	f003 030c 	and.w	r3, r3, #12
 8001568:	2b08      	cmp	r3, #8
 800156a:	d06b      	beq.n	8001644 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	2b02      	cmp	r3, #2
 8001572:	d149      	bne.n	8001608 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001574:	4b31      	ldr	r3, [pc, #196]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a30      	ldr	r2, [pc, #192]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800157a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800157e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001580:	f7ff fad0 	bl	8000b24 <HAL_GetTick>
 8001584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001586:	e008      	b.n	800159a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001588:	f7ff facc 	bl	8000b24 <HAL_GetTick>
 800158c:	4602      	mov	r2, r0
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	1ad3      	subs	r3, r2, r3
 8001592:	2b02      	cmp	r3, #2
 8001594:	d901      	bls.n	800159a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001596:	2303      	movs	r3, #3
 8001598:	e087      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800159a:	4b28      	ldr	r3, [pc, #160]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f0      	bne.n	8001588 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	69da      	ldr	r2, [r3, #28]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	431a      	orrs	r2, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b4:	019b      	lsls	r3, r3, #6
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	085b      	lsrs	r3, r3, #1
 80015be:	3b01      	subs	r3, #1
 80015c0:	041b      	lsls	r3, r3, #16
 80015c2:	431a      	orrs	r2, r3
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	4313      	orrs	r3, r2
 80015cc:	4a1b      	ldr	r2, [pc, #108]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015ce:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80015d2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015d4:	4b19      	ldr	r3, [pc, #100]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a18      	ldr	r2, [pc, #96]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e0:	f7ff faa0 	bl	8000b24 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e8:	f7ff fa9c 	bl	8000b24 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e057      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015fa:	4b10      	ldr	r3, [pc, #64]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d0f0      	beq.n	80015e8 <HAL_RCC_OscConfig+0x478>
 8001606:	e04f      	b.n	80016a8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001608:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 800160e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001612:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001614:	f7ff fa86 	bl	8000b24 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800161a:	e008      	b.n	800162e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800161c:	f7ff fa82 	bl	8000b24 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	2b02      	cmp	r3, #2
 8001628:	d901      	bls.n	800162e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800162a:	2303      	movs	r3, #3
 800162c:	e03d      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800162e:	4b03      	ldr	r3, [pc, #12]	; (800163c <HAL_RCC_OscConfig+0x4cc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d1f0      	bne.n	800161c <HAL_RCC_OscConfig+0x4ac>
 800163a:	e035      	b.n	80016a8 <HAL_RCC_OscConfig+0x538>
 800163c:	40023800 	.word	0x40023800
 8001640:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x544>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	699b      	ldr	r3, [r3, #24]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d028      	beq.n	80016a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800165c:	429a      	cmp	r2, r3
 800165e:	d121      	bne.n	80016a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800166a:	429a      	cmp	r2, r3
 800166c:	d11a      	bne.n	80016a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001674:	4013      	ands	r3, r2
 8001676:	687a      	ldr	r2, [r7, #4]
 8001678:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800167a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800167c:	4293      	cmp	r3, r2
 800167e:	d111      	bne.n	80016a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800168a:	085b      	lsrs	r3, r3, #1
 800168c:	3b01      	subs	r3, #1
 800168e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001690:	429a      	cmp	r2, r3
 8001692:	d107      	bne.n	80016a4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800169e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e000      	b.n	80016aa <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80016a8:	2300      	movs	r3, #0
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40023800 	.word	0x40023800

080016b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d101      	bne.n	80016d0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016cc:	2301      	movs	r3, #1
 80016ce:	e0d0      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d0:	4b6a      	ldr	r3, [pc, #424]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f003 030f 	and.w	r3, r3, #15
 80016d8:	683a      	ldr	r2, [r7, #0]
 80016da:	429a      	cmp	r2, r3
 80016dc:	d910      	bls.n	8001700 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016de:	4b67      	ldr	r3, [pc, #412]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 020f 	bic.w	r2, r3, #15
 80016e6:	4965      	ldr	r1, [pc, #404]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b63      	ldr	r3, [pc, #396]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e0b8      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0302 	and.w	r3, r3, #2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d020      	beq.n	800174e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b00      	cmp	r3, #0
 8001716:	d005      	beq.n	8001724 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001718:	4b59      	ldr	r3, [pc, #356]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	4a58      	ldr	r2, [pc, #352]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800171e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001722:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f003 0308 	and.w	r3, r3, #8
 800172c:	2b00      	cmp	r3, #0
 800172e:	d005      	beq.n	800173c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001730:	4b53      	ldr	r3, [pc, #332]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4a52      	ldr	r2, [pc, #328]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001736:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800173a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800173c:	4b50      	ldr	r3, [pc, #320]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	494d      	ldr	r1, [pc, #308]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800174a:	4313      	orrs	r3, r2
 800174c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	2b00      	cmp	r3, #0
 8001758:	d040      	beq.n	80017dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d107      	bne.n	8001772 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001762:	4b47      	ldr	r3, [pc, #284]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d115      	bne.n	800179a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e07f      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	2b02      	cmp	r3, #2
 8001778:	d107      	bne.n	800178a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d109      	bne.n	800179a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e073      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d101      	bne.n	800179a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	e06b      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179a:	4b39      	ldr	r3, [pc, #228]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800179c:	689b      	ldr	r3, [r3, #8]
 800179e:	f023 0203 	bic.w	r2, r3, #3
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4936      	ldr	r1, [pc, #216]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 80017a8:	4313      	orrs	r3, r2
 80017aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017ac:	f7ff f9ba 	bl	8000b24 <HAL_GetTick>
 80017b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b2:	e00a      	b.n	80017ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b4:	f7ff f9b6 	bl	8000b24 <HAL_GetTick>
 80017b8:	4602      	mov	r2, r0
 80017ba:	68fb      	ldr	r3, [r7, #12]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e053      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 020c 	and.w	r2, r3, #12
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	429a      	cmp	r2, r3
 80017da:	d1eb      	bne.n	80017b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f003 030f 	and.w	r3, r3, #15
 80017e4:	683a      	ldr	r2, [r7, #0]
 80017e6:	429a      	cmp	r2, r3
 80017e8:	d210      	bcs.n	800180c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ea:	4b24      	ldr	r3, [pc, #144]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f023 020f 	bic.w	r2, r3, #15
 80017f2:	4922      	ldr	r1, [pc, #136]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017fa:	4b20      	ldr	r3, [pc, #128]	; (800187c <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 030f 	and.w	r3, r3, #15
 8001802:	683a      	ldr	r2, [r7, #0]
 8001804:	429a      	cmp	r2, r3
 8001806:	d001      	beq.n	800180c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e032      	b.n	8001872 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0304 	and.w	r3, r3, #4
 8001814:	2b00      	cmp	r3, #0
 8001816:	d008      	beq.n	800182a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001818:	4b19      	ldr	r3, [pc, #100]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	68db      	ldr	r3, [r3, #12]
 8001824:	4916      	ldr	r1, [pc, #88]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001826:	4313      	orrs	r3, r2
 8001828:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0308 	and.w	r3, r3, #8
 8001832:	2b00      	cmp	r3, #0
 8001834:	d009      	beq.n	800184a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	490e      	ldr	r1, [pc, #56]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	4313      	orrs	r3, r2
 8001848:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800184a:	f000 f821 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800184e:	4602      	mov	r2, r0
 8001850:	4b0b      	ldr	r3, [pc, #44]	; (8001880 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	091b      	lsrs	r3, r3, #4
 8001856:	f003 030f 	and.w	r3, r3, #15
 800185a:	490a      	ldr	r1, [pc, #40]	; (8001884 <HAL_RCC_ClockConfig+0x1cc>)
 800185c:	5ccb      	ldrb	r3, [r1, r3]
 800185e:	fa22 f303 	lsr.w	r3, r2, r3
 8001862:	4a09      	ldr	r2, [pc, #36]	; (8001888 <HAL_RCC_ClockConfig+0x1d0>)
 8001864:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001866:	4b09      	ldr	r3, [pc, #36]	; (800188c <HAL_RCC_ClockConfig+0x1d4>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff f916 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40023c00 	.word	0x40023c00
 8001880:	40023800 	.word	0x40023800
 8001884:	08002bf8 	.word	0x08002bf8
 8001888:	20000000 	.word	0x20000000
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001890:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001894:	b094      	sub	sp, #80	; 0x50
 8001896:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	647b      	str	r3, [r7, #68]	; 0x44
 800189c:	2300      	movs	r3, #0
 800189e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80018a0:	2300      	movs	r3, #0
 80018a2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018a8:	4b79      	ldr	r3, [pc, #484]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f003 030c 	and.w	r3, r3, #12
 80018b0:	2b08      	cmp	r3, #8
 80018b2:	d00d      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x40>
 80018b4:	2b08      	cmp	r3, #8
 80018b6:	f200 80e1 	bhi.w	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_RCC_GetSysClockFreq+0x34>
 80018be:	2b04      	cmp	r3, #4
 80018c0:	d003      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x3a>
 80018c2:	e0db      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018c4:	4b73      	ldr	r3, [pc, #460]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 80018c6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018c8:	e0db      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_GetSysClockFreq+0x208>)
 80018cc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80018ce:	e0d8      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d0:	4b6f      	ldr	r3, [pc, #444]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80018d8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018da:	4b6d      	ldr	r3, [pc, #436]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d063      	beq.n	80019ae <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018e6:	4b6a      	ldr	r3, [pc, #424]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	099b      	lsrs	r3, r3, #6
 80018ec:	2200      	movs	r2, #0
 80018ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80018f0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80018f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f8:	633b      	str	r3, [r7, #48]	; 0x30
 80018fa:	2300      	movs	r3, #0
 80018fc:	637b      	str	r3, [r7, #52]	; 0x34
 80018fe:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001902:	4622      	mov	r2, r4
 8001904:	462b      	mov	r3, r5
 8001906:	f04f 0000 	mov.w	r0, #0
 800190a:	f04f 0100 	mov.w	r1, #0
 800190e:	0159      	lsls	r1, r3, #5
 8001910:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001914:	0150      	lsls	r0, r2, #5
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4621      	mov	r1, r4
 800191c:	1a51      	subs	r1, r2, r1
 800191e:	6139      	str	r1, [r7, #16]
 8001920:	4629      	mov	r1, r5
 8001922:	eb63 0301 	sbc.w	r3, r3, r1
 8001926:	617b      	str	r3, [r7, #20]
 8001928:	f04f 0200 	mov.w	r2, #0
 800192c:	f04f 0300 	mov.w	r3, #0
 8001930:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001934:	4659      	mov	r1, fp
 8001936:	018b      	lsls	r3, r1, #6
 8001938:	4651      	mov	r1, sl
 800193a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800193e:	4651      	mov	r1, sl
 8001940:	018a      	lsls	r2, r1, #6
 8001942:	4651      	mov	r1, sl
 8001944:	ebb2 0801 	subs.w	r8, r2, r1
 8001948:	4659      	mov	r1, fp
 800194a:	eb63 0901 	sbc.w	r9, r3, r1
 800194e:	f04f 0200 	mov.w	r2, #0
 8001952:	f04f 0300 	mov.w	r3, #0
 8001956:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800195a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800195e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001962:	4690      	mov	r8, r2
 8001964:	4699      	mov	r9, r3
 8001966:	4623      	mov	r3, r4
 8001968:	eb18 0303 	adds.w	r3, r8, r3
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	462b      	mov	r3, r5
 8001970:	eb49 0303 	adc.w	r3, r9, r3
 8001974:	60fb      	str	r3, [r7, #12]
 8001976:	f04f 0200 	mov.w	r2, #0
 800197a:	f04f 0300 	mov.w	r3, #0
 800197e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001982:	4629      	mov	r1, r5
 8001984:	024b      	lsls	r3, r1, #9
 8001986:	4621      	mov	r1, r4
 8001988:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800198c:	4621      	mov	r1, r4
 800198e:	024a      	lsls	r2, r1, #9
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001996:	2200      	movs	r2, #0
 8001998:	62bb      	str	r3, [r7, #40]	; 0x28
 800199a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800199c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80019a0:	f7fe fc32 	bl	8000208 <__aeabi_uldivmod>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4613      	mov	r3, r2
 80019aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80019ac:	e058      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	099b      	lsrs	r3, r3, #6
 80019b4:	2200      	movs	r2, #0
 80019b6:	4618      	mov	r0, r3
 80019b8:	4611      	mov	r1, r2
 80019ba:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80019be:	623b      	str	r3, [r7, #32]
 80019c0:	2300      	movs	r3, #0
 80019c2:	627b      	str	r3, [r7, #36]	; 0x24
 80019c4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80019c8:	4642      	mov	r2, r8
 80019ca:	464b      	mov	r3, r9
 80019cc:	f04f 0000 	mov.w	r0, #0
 80019d0:	f04f 0100 	mov.w	r1, #0
 80019d4:	0159      	lsls	r1, r3, #5
 80019d6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019da:	0150      	lsls	r0, r2, #5
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4641      	mov	r1, r8
 80019e2:	ebb2 0a01 	subs.w	sl, r2, r1
 80019e6:	4649      	mov	r1, r9
 80019e8:	eb63 0b01 	sbc.w	fp, r3, r1
 80019ec:	f04f 0200 	mov.w	r2, #0
 80019f0:	f04f 0300 	mov.w	r3, #0
 80019f4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80019f8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80019fc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a00:	ebb2 040a 	subs.w	r4, r2, sl
 8001a04:	eb63 050b 	sbc.w	r5, r3, fp
 8001a08:	f04f 0200 	mov.w	r2, #0
 8001a0c:	f04f 0300 	mov.w	r3, #0
 8001a10:	00eb      	lsls	r3, r5, #3
 8001a12:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a16:	00e2      	lsls	r2, r4, #3
 8001a18:	4614      	mov	r4, r2
 8001a1a:	461d      	mov	r5, r3
 8001a1c:	4643      	mov	r3, r8
 8001a1e:	18e3      	adds	r3, r4, r3
 8001a20:	603b      	str	r3, [r7, #0]
 8001a22:	464b      	mov	r3, r9
 8001a24:	eb45 0303 	adc.w	r3, r5, r3
 8001a28:	607b      	str	r3, [r7, #4]
 8001a2a:	f04f 0200 	mov.w	r2, #0
 8001a2e:	f04f 0300 	mov.w	r3, #0
 8001a32:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a36:	4629      	mov	r1, r5
 8001a38:	028b      	lsls	r3, r1, #10
 8001a3a:	4621      	mov	r1, r4
 8001a3c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001a40:	4621      	mov	r1, r4
 8001a42:	028a      	lsls	r2, r1, #10
 8001a44:	4610      	mov	r0, r2
 8001a46:	4619      	mov	r1, r3
 8001a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	61fa      	str	r2, [r7, #28]
 8001a50:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a54:	f7fe fbd8 	bl	8000208 <__aeabi_uldivmod>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001a60:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	0c1b      	lsrs	r3, r3, #16
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001a70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001a72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a7a:	e002      	b.n	8001a82 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001a7c:	4b05      	ldr	r3, [pc, #20]	; (8001a94 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a7e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001a80:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a82:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3750      	adds	r7, #80	; 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8e:	bf00      	nop
 8001a90:	40023800 	.word	0x40023800
 8001a94:	00f42400 	.word	0x00f42400
 8001a98:	007a1200 	.word	0x007a1200

08001a9c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001aa0:	4b03      	ldr	r3, [pc, #12]	; (8001ab0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	20000000 	.word	0x20000000

08001ab4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ab8:	f7ff fff0 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001abc:	4602      	mov	r2, r0
 8001abe:	4b05      	ldr	r3, [pc, #20]	; (8001ad4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	0a9b      	lsrs	r3, r3, #10
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	4903      	ldr	r1, [pc, #12]	; (8001ad8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aca:	5ccb      	ldrb	r3, [r1, r3]
 8001acc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	08002c08 	.word	0x08002c08

08001adc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ae0:	f7ff ffdc 	bl	8001a9c <HAL_RCC_GetHCLKFreq>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	0b5b      	lsrs	r3, r3, #13
 8001aec:	f003 0307 	and.w	r3, r3, #7
 8001af0:	4903      	ldr	r1, [pc, #12]	; (8001b00 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001af2:	5ccb      	ldrb	r3, [r1, r3]
 8001af4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	40023800 	.word	0x40023800
 8001b00:	08002c08 	.word	0x08002c08

08001b04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d012      	beq.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001b2c:	4b69      	ldr	r3, [pc, #420]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4a68      	ldr	r2, [pc, #416]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001b36:	6093      	str	r3, [r2, #8]
 8001b38:	4b66      	ldr	r3, [pc, #408]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b40:	4964      	ldr	r1, [pc, #400]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b42:	4313      	orrs	r3, r2
 8001b44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d017      	beq.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b5e:	4b5d      	ldr	r3, [pc, #372]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	4959      	ldr	r1, [pc, #356]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d017      	beq.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b9a:	4b4e      	ldr	r3, [pc, #312]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001ba0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	494a      	ldr	r1, [pc, #296]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001bb8:	d101      	bne.n	8001bbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d001      	beq.n	8001bda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0320 	and.w	r3, r3, #32
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	f000 808b 	beq.w	8001cfe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001be8:	4b3a      	ldr	r3, [pc, #232]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bec:	4a39      	ldr	r2, [pc, #228]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf2:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf4:	4b37      	ldr	r3, [pc, #220]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bf8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfc:	60bb      	str	r3, [r7, #8]
 8001bfe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c00:	4b35      	ldr	r3, [pc, #212]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a34      	ldr	r2, [pc, #208]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c0a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c0c:	f7fe ff8a 	bl	8000b24 <HAL_GetTick>
 8001c10:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c14:	f7fe ff86 	bl	8000b24 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e357      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c32:	4b28      	ldr	r3, [pc, #160]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c3a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d035      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d02e      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c50:	4b20      	ldr	r3, [pc, #128]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c58:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c5a:	4b1e      	ldr	r3, [pc, #120]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5e:	4a1d      	ldr	r2, [pc, #116]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c64:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c66:	4b1b      	ldr	r3, [pc, #108]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c6a:	4a1a      	ldr	r2, [pc, #104]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c70:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001c72:	4a18      	ldr	r2, [pc, #96]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c78:	4b16      	ldr	r3, [pc, #88]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c7c:	f003 0301 	and.w	r3, r3, #1
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	d114      	bne.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c84:	f7fe ff4e 	bl	8000b24 <HAL_GetTick>
 8001c88:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7fe ff4a 	bl	8000b24 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	697b      	ldr	r3, [r7, #20]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e319      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca2:	4b0c      	ldr	r3, [pc, #48]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ca6:	f003 0302 	and.w	r3, r3, #2
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d0ee      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cb6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001cba:	d111      	bne.n	8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001cbc:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cbe:	689b      	ldr	r3, [r3, #8]
 8001cc0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001cc8:	4b04      	ldr	r3, [pc, #16]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001cca:	400b      	ands	r3, r1
 8001ccc:	4901      	ldr	r1, [pc, #4]	; (8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	608b      	str	r3, [r1, #8]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40007000 	.word	0x40007000
 8001cdc:	0ffffcff 	.word	0x0ffffcff
 8001ce0:	4baa      	ldr	r3, [pc, #680]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ce2:	689b      	ldr	r3, [r3, #8]
 8001ce4:	4aa9      	ldr	r2, [pc, #676]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ce6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001cea:	6093      	str	r3, [r2, #8]
 8001cec:	4ba7      	ldr	r3, [pc, #668]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001cee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001cf8:	49a4      	ldr	r1, [pc, #656]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0310 	and.w	r3, r3, #16
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d010      	beq.n	8001d2c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d0a:	4ba0      	ldr	r3, [pc, #640]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d10:	4a9e      	ldr	r2, [pc, #632]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d12:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d1a:	4b9c      	ldr	r3, [pc, #624]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d1c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d24:	4999      	ldr	r1, [pc, #612]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d26:	4313      	orrs	r3, r2
 8001d28:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d00a      	beq.n	8001d4e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d38:	4b94      	ldr	r3, [pc, #592]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d3e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001d46:	4991      	ldr	r1, [pc, #580]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d00a      	beq.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d5a:	4b8c      	ldr	r3, [pc, #560]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d60:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001d68:	4988      	ldr	r1, [pc, #544]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d00a      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d7c:	4b83      	ldr	r3, [pc, #524]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d82:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d8a:	4980      	ldr	r1, [pc, #512]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d00a      	beq.n	8001db4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d9e:	4b7b      	ldr	r3, [pc, #492]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001da0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001da4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dac:	4977      	ldr	r1, [pc, #476]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dae:	4313      	orrs	r3, r2
 8001db0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d00a      	beq.n	8001dd6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001dc0:	4b72      	ldr	r3, [pc, #456]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dc6:	f023 0203 	bic.w	r2, r3, #3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dce:	496f      	ldr	r1, [pc, #444]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001de2:	4b6a      	ldr	r3, [pc, #424]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001de4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001de8:	f023 020c 	bic.w	r2, r3, #12
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df0:	4966      	ldr	r1, [pc, #408]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d00a      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e04:	4b61      	ldr	r3, [pc, #388]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e0a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e12:	495e      	ldr	r1, [pc, #376]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e26:	4b59      	ldr	r3, [pc, #356]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e2c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e34:	4955      	ldr	r1, [pc, #340]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d00a      	beq.n	8001e5e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001e48:	4b50      	ldr	r3, [pc, #320]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e56:	494d      	ldr	r1, [pc, #308]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d00a      	beq.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001e6a:	4b48      	ldr	r3, [pc, #288]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e70:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e78:	4944      	ldr	r1, [pc, #272]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001e8c:	4b3f      	ldr	r3, [pc, #252]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e92:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9a:	493c      	ldr	r1, [pc, #240]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d00a      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001eae:	4b37      	ldr	r3, [pc, #220]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001eb4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ebc:	4933      	ldr	r1, [pc, #204]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ebe:	4313      	orrs	r3, r2
 8001ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d00a      	beq.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001ed0:	4b2e      	ldr	r3, [pc, #184]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ed6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ede:	492b      	ldr	r1, [pc, #172]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d011      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001ef2:	4b26      	ldr	r3, [pc, #152]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ef4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ef8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f00:	4922      	ldr	r1, [pc, #136]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f10:	d101      	bne.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f12:	2301      	movs	r3, #1
 8001f14:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0308 	and.w	r3, r3, #8
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f22:	2301      	movs	r3, #1
 8001f24:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d00a      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f32:	4b16      	ldr	r3, [pc, #88]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f38:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f40:	4912      	ldr	r1, [pc, #72]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d00b      	beq.n	8001f6c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001f54:	4b0d      	ldr	r3, [pc, #52]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f5a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f64:	4909      	ldr	r1, [pc, #36]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d006      	beq.n	8001f80 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	f000 80d9 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f80:	4b02      	ldr	r3, [pc, #8]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a01      	ldr	r2, [pc, #4]	; (8001f8c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f86:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f8a:	e001      	b.n	8001f90 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f92:	f7fe fdc7 	bl	8000b24 <HAL_GetTick>
 8001f96:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f98:	e008      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f9a:	f7fe fdc3 	bl	8000b24 <HAL_GetTick>
 8001f9e:	4602      	mov	r2, r0
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	1ad3      	subs	r3, r2, r3
 8001fa4:	2b64      	cmp	r3, #100	; 0x64
 8001fa6:	d901      	bls.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e194      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001fac:	4b6c      	ldr	r3, [pc, #432]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d1f0      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d021      	beq.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d11d      	bne.n	8002008 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fcc:	4b64      	ldr	r3, [pc, #400]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fd2:	0c1b      	lsrs	r3, r3, #16
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fda:	4b61      	ldr	r3, [pc, #388]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8001fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fe0:	0e1b      	lsrs	r3, r3, #24
 8001fe2:	f003 030f 	and.w	r3, r3, #15
 8001fe6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	019a      	lsls	r2, r3, #6
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	041b      	lsls	r3, r3, #16
 8001ff2:	431a      	orrs	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	061b      	lsls	r3, r3, #24
 8001ff8:	431a      	orrs	r2, r3
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	071b      	lsls	r3, r3, #28
 8002000:	4957      	ldr	r1, [pc, #348]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002002:	4313      	orrs	r3, r2
 8002004:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002010:	2b00      	cmp	r3, #0
 8002012:	d004      	beq.n	800201e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002018:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800201c:	d00a      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002026:	2b00      	cmp	r3, #0
 8002028:	d02e      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002032:	d129      	bne.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002034:	4b4a      	ldr	r3, [pc, #296]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002036:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800203a:	0c1b      	lsrs	r3, r3, #16
 800203c:	f003 0303 	and.w	r3, r3, #3
 8002040:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002042:	4b47      	ldr	r3, [pc, #284]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002044:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002048:	0f1b      	lsrs	r3, r3, #28
 800204a:	f003 0307 	and.w	r3, r3, #7
 800204e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	019a      	lsls	r2, r3, #6
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	041b      	lsls	r3, r3, #16
 800205a:	431a      	orrs	r2, r3
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	061b      	lsls	r3, r3, #24
 8002062:	431a      	orrs	r2, r3
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	071b      	lsls	r3, r3, #28
 8002068:	493d      	ldr	r1, [pc, #244]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800206a:	4313      	orrs	r3, r2
 800206c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002070:	4b3b      	ldr	r3, [pc, #236]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002072:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002076:	f023 021f 	bic.w	r2, r3, #31
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800207e:	3b01      	subs	r3, #1
 8002080:	4937      	ldr	r1, [pc, #220]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002082:	4313      	orrs	r3, r2
 8002084:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d01d      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002094:	4b32      	ldr	r3, [pc, #200]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002096:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800209a:	0e1b      	lsrs	r3, r3, #24
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020a2:	4b2f      	ldr	r3, [pc, #188]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020a8:	0f1b      	lsrs	r3, r3, #28
 80020aa:	f003 0307 	and.w	r3, r3, #7
 80020ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	019a      	lsls	r2, r3, #6
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	691b      	ldr	r3, [r3, #16]
 80020ba:	041b      	lsls	r3, r3, #16
 80020bc:	431a      	orrs	r2, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	061b      	lsls	r3, r3, #24
 80020c2:	431a      	orrs	r2, r3
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	071b      	lsls	r3, r3, #28
 80020c8:	4925      	ldr	r1, [pc, #148]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d011      	beq.n	8002100 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	019a      	lsls	r2, r3, #6
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	691b      	ldr	r3, [r3, #16]
 80020e6:	041b      	lsls	r3, r3, #16
 80020e8:	431a      	orrs	r2, r3
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	68db      	ldr	r3, [r3, #12]
 80020ee:	061b      	lsls	r3, r3, #24
 80020f0:	431a      	orrs	r2, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	071b      	lsls	r3, r3, #28
 80020f8:	4919      	ldr	r1, [pc, #100]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002100:	4b17      	ldr	r3, [pc, #92]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a16      	ldr	r2, [pc, #88]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002106:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800210a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800210c:	f7fe fd0a 	bl	8000b24 <HAL_GetTick>
 8002110:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002112:	e008      	b.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002114:	f7fe fd06 	bl	8000b24 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b64      	cmp	r3, #100	; 0x64
 8002120:	d901      	bls.n	8002126 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e0d7      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002126:	4b0e      	ldr	r3, [pc, #56]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d0f0      	beq.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002132:	69bb      	ldr	r3, [r7, #24]
 8002134:	2b01      	cmp	r3, #1
 8002136:	f040 80cd 	bne.w	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a08      	ldr	r2, [pc, #32]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002140:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002144:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002146:	f7fe fced 	bl	8000b24 <HAL_GetTick>
 800214a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800214c:	e00a      	b.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800214e:	f7fe fce9 	bl	8000b24 <HAL_GetTick>
 8002152:	4602      	mov	r2, r0
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	2b64      	cmp	r3, #100	; 0x64
 800215a:	d903      	bls.n	8002164 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800215c:	2303      	movs	r3, #3
 800215e:	e0ba      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002160:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002164:	4b5e      	ldr	r3, [pc, #376]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800216c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002170:	d0ed      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d003      	beq.n	8002186 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d009      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800218e:	2b00      	cmp	r3, #0
 8002190:	d02e      	beq.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	2b00      	cmp	r3, #0
 8002198:	d12a      	bne.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	0c1b      	lsrs	r3, r3, #16
 80021a2:	f003 0303 	and.w	r3, r3, #3
 80021a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021a8:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ae:	0f1b      	lsrs	r3, r3, #28
 80021b0:	f003 0307 	and.w	r3, r3, #7
 80021b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	019a      	lsls	r2, r3, #6
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	041b      	lsls	r3, r3, #16
 80021c0:	431a      	orrs	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	699b      	ldr	r3, [r3, #24]
 80021c6:	061b      	lsls	r3, r3, #24
 80021c8:	431a      	orrs	r2, r3
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	071b      	lsls	r3, r3, #28
 80021ce:	4944      	ldr	r1, [pc, #272]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021d6:	4b42      	ldr	r3, [pc, #264]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021e4:	3b01      	subs	r3, #1
 80021e6:	021b      	lsls	r3, r3, #8
 80021e8:	493d      	ldr	r1, [pc, #244]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021ea:	4313      	orrs	r3, r2
 80021ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d022      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002200:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002204:	d11d      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002206:	4b36      	ldr	r3, [pc, #216]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220c:	0e1b      	lsrs	r3, r3, #24
 800220e:	f003 030f 	and.w	r3, r3, #15
 8002212:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002214:	4b32      	ldr	r3, [pc, #200]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	0f1b      	lsrs	r3, r3, #28
 800221c:	f003 0307 	and.w	r3, r3, #7
 8002220:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	019a      	lsls	r2, r3, #6
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a1b      	ldr	r3, [r3, #32]
 800222c:	041b      	lsls	r3, r3, #16
 800222e:	431a      	orrs	r2, r3
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	061b      	lsls	r3, r3, #24
 8002234:	431a      	orrs	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	071b      	lsls	r3, r3, #28
 800223a:	4929      	ldr	r1, [pc, #164]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0308 	and.w	r3, r3, #8
 800224a:	2b00      	cmp	r3, #0
 800224c:	d028      	beq.n	80022a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800224e:	4b24      	ldr	r3, [pc, #144]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002254:	0e1b      	lsrs	r3, r3, #24
 8002256:	f003 030f 	and.w	r3, r3, #15
 800225a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800225c:	4b20      	ldr	r3, [pc, #128]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	0c1b      	lsrs	r3, r3, #16
 8002264:	f003 0303 	and.w	r3, r3, #3
 8002268:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	019a      	lsls	r2, r3, #6
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	041b      	lsls	r3, r3, #16
 8002274:	431a      	orrs	r2, r3
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	061b      	lsls	r3, r3, #24
 800227a:	431a      	orrs	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	071b      	lsls	r3, r3, #28
 8002282:	4917      	ldr	r1, [pc, #92]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800228a:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800228c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002290:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002298:	4911      	ldr	r1, [pc, #68]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80022a0:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a0e      	ldr	r2, [pc, #56]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022ac:	f7fe fc3a 	bl	8000b24 <HAL_GetTick>
 80022b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022b2:	e008      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80022b4:	f7fe fc36 	bl	8000b24 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b64      	cmp	r3, #100	; 0x64
 80022c0:	d901      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e007      	b.n	80022d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022d2:	d1ef      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80022d4:	2300      	movs	r3, #0
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3720      	adds	r7, #32
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40023800 	.word	0x40023800

080022e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d101      	bne.n	80022f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e040      	b.n	8002378 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d106      	bne.n	800230c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2200      	movs	r2, #0
 8002302:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7fe fb32 	bl	8000970 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2224      	movs	r2, #36	; 0x24
 8002310:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681a      	ldr	r2, [r3, #0]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f022 0201 	bic.w	r2, r2, #1
 8002320:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 f82c 	bl	8002380 <UART_SetConfig>
 8002328:	4603      	mov	r3, r0
 800232a:	2b01      	cmp	r3, #1
 800232c:	d101      	bne.n	8002332 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800232e:	2301      	movs	r3, #1
 8002330:	e022      	b.n	8002378 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	2b00      	cmp	r3, #0
 8002338:	d002      	beq.n	8002340 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800233a:	6878      	ldr	r0, [r7, #4]
 800233c:	f000 fa84 	bl	8002848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	685a      	ldr	r2, [r3, #4]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800234e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	689a      	ldr	r2, [r3, #8]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800235e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f042 0201 	orr.w	r2, r2, #1
 800236e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002370:	6878      	ldr	r0, [r7, #4]
 8002372:	f000 fb0b 	bl	800298c <UART_CheckIdleState>
 8002376:	4603      	mov	r3, r0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b088      	sub	sp, #32
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002388:	2300      	movs	r3, #0
 800238a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	691b      	ldr	r3, [r3, #16]
 8002394:	431a      	orrs	r2, r3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	695b      	ldr	r3, [r3, #20]
 800239a:	431a      	orrs	r2, r3
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	69db      	ldr	r3, [r3, #28]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	4ba6      	ldr	r3, [pc, #664]	; (8002644 <UART_SetConfig+0x2c4>)
 80023ac:	4013      	ands	r3, r2
 80023ae:	687a      	ldr	r2, [r7, #4]
 80023b0:	6812      	ldr	r2, [r2, #0]
 80023b2:	6979      	ldr	r1, [r7, #20]
 80023b4:	430b      	orrs	r3, r1
 80023b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	68da      	ldr	r2, [r3, #12]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	430a      	orrs	r2, r1
 80023cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	699b      	ldr	r3, [r3, #24]
 80023d2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	697a      	ldr	r2, [r7, #20]
 80023da:	4313      	orrs	r3, r2
 80023dc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a94      	ldr	r2, [pc, #592]	; (8002648 <UART_SetConfig+0x2c8>)
 80023f8:	4293      	cmp	r3, r2
 80023fa:	d120      	bne.n	800243e <UART_SetConfig+0xbe>
 80023fc:	4b93      	ldr	r3, [pc, #588]	; (800264c <UART_SetConfig+0x2cc>)
 80023fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b03      	cmp	r3, #3
 8002408:	d816      	bhi.n	8002438 <UART_SetConfig+0xb8>
 800240a:	a201      	add	r2, pc, #4	; (adr r2, 8002410 <UART_SetConfig+0x90>)
 800240c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002410:	08002421 	.word	0x08002421
 8002414:	0800242d 	.word	0x0800242d
 8002418:	08002427 	.word	0x08002427
 800241c:	08002433 	.word	0x08002433
 8002420:	2301      	movs	r3, #1
 8002422:	77fb      	strb	r3, [r7, #31]
 8002424:	e150      	b.n	80026c8 <UART_SetConfig+0x348>
 8002426:	2302      	movs	r3, #2
 8002428:	77fb      	strb	r3, [r7, #31]
 800242a:	e14d      	b.n	80026c8 <UART_SetConfig+0x348>
 800242c:	2304      	movs	r3, #4
 800242e:	77fb      	strb	r3, [r7, #31]
 8002430:	e14a      	b.n	80026c8 <UART_SetConfig+0x348>
 8002432:	2308      	movs	r3, #8
 8002434:	77fb      	strb	r3, [r7, #31]
 8002436:	e147      	b.n	80026c8 <UART_SetConfig+0x348>
 8002438:	2310      	movs	r3, #16
 800243a:	77fb      	strb	r3, [r7, #31]
 800243c:	e144      	b.n	80026c8 <UART_SetConfig+0x348>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4a83      	ldr	r2, [pc, #524]	; (8002650 <UART_SetConfig+0x2d0>)
 8002444:	4293      	cmp	r3, r2
 8002446:	d132      	bne.n	80024ae <UART_SetConfig+0x12e>
 8002448:	4b80      	ldr	r3, [pc, #512]	; (800264c <UART_SetConfig+0x2cc>)
 800244a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800244e:	f003 030c 	and.w	r3, r3, #12
 8002452:	2b0c      	cmp	r3, #12
 8002454:	d828      	bhi.n	80024a8 <UART_SetConfig+0x128>
 8002456:	a201      	add	r2, pc, #4	; (adr r2, 800245c <UART_SetConfig+0xdc>)
 8002458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800245c:	08002491 	.word	0x08002491
 8002460:	080024a9 	.word	0x080024a9
 8002464:	080024a9 	.word	0x080024a9
 8002468:	080024a9 	.word	0x080024a9
 800246c:	0800249d 	.word	0x0800249d
 8002470:	080024a9 	.word	0x080024a9
 8002474:	080024a9 	.word	0x080024a9
 8002478:	080024a9 	.word	0x080024a9
 800247c:	08002497 	.word	0x08002497
 8002480:	080024a9 	.word	0x080024a9
 8002484:	080024a9 	.word	0x080024a9
 8002488:	080024a9 	.word	0x080024a9
 800248c:	080024a3 	.word	0x080024a3
 8002490:	2300      	movs	r3, #0
 8002492:	77fb      	strb	r3, [r7, #31]
 8002494:	e118      	b.n	80026c8 <UART_SetConfig+0x348>
 8002496:	2302      	movs	r3, #2
 8002498:	77fb      	strb	r3, [r7, #31]
 800249a:	e115      	b.n	80026c8 <UART_SetConfig+0x348>
 800249c:	2304      	movs	r3, #4
 800249e:	77fb      	strb	r3, [r7, #31]
 80024a0:	e112      	b.n	80026c8 <UART_SetConfig+0x348>
 80024a2:	2308      	movs	r3, #8
 80024a4:	77fb      	strb	r3, [r7, #31]
 80024a6:	e10f      	b.n	80026c8 <UART_SetConfig+0x348>
 80024a8:	2310      	movs	r3, #16
 80024aa:	77fb      	strb	r3, [r7, #31]
 80024ac:	e10c      	b.n	80026c8 <UART_SetConfig+0x348>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a68      	ldr	r2, [pc, #416]	; (8002654 <UART_SetConfig+0x2d4>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d120      	bne.n	80024fa <UART_SetConfig+0x17a>
 80024b8:	4b64      	ldr	r3, [pc, #400]	; (800264c <UART_SetConfig+0x2cc>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024c2:	2b30      	cmp	r3, #48	; 0x30
 80024c4:	d013      	beq.n	80024ee <UART_SetConfig+0x16e>
 80024c6:	2b30      	cmp	r3, #48	; 0x30
 80024c8:	d814      	bhi.n	80024f4 <UART_SetConfig+0x174>
 80024ca:	2b20      	cmp	r3, #32
 80024cc:	d009      	beq.n	80024e2 <UART_SetConfig+0x162>
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d810      	bhi.n	80024f4 <UART_SetConfig+0x174>
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d002      	beq.n	80024dc <UART_SetConfig+0x15c>
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d006      	beq.n	80024e8 <UART_SetConfig+0x168>
 80024da:	e00b      	b.n	80024f4 <UART_SetConfig+0x174>
 80024dc:	2300      	movs	r3, #0
 80024de:	77fb      	strb	r3, [r7, #31]
 80024e0:	e0f2      	b.n	80026c8 <UART_SetConfig+0x348>
 80024e2:	2302      	movs	r3, #2
 80024e4:	77fb      	strb	r3, [r7, #31]
 80024e6:	e0ef      	b.n	80026c8 <UART_SetConfig+0x348>
 80024e8:	2304      	movs	r3, #4
 80024ea:	77fb      	strb	r3, [r7, #31]
 80024ec:	e0ec      	b.n	80026c8 <UART_SetConfig+0x348>
 80024ee:	2308      	movs	r3, #8
 80024f0:	77fb      	strb	r3, [r7, #31]
 80024f2:	e0e9      	b.n	80026c8 <UART_SetConfig+0x348>
 80024f4:	2310      	movs	r3, #16
 80024f6:	77fb      	strb	r3, [r7, #31]
 80024f8:	e0e6      	b.n	80026c8 <UART_SetConfig+0x348>
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a56      	ldr	r2, [pc, #344]	; (8002658 <UART_SetConfig+0x2d8>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d120      	bne.n	8002546 <UART_SetConfig+0x1c6>
 8002504:	4b51      	ldr	r3, [pc, #324]	; (800264c <UART_SetConfig+0x2cc>)
 8002506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800250a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800250e:	2bc0      	cmp	r3, #192	; 0xc0
 8002510:	d013      	beq.n	800253a <UART_SetConfig+0x1ba>
 8002512:	2bc0      	cmp	r3, #192	; 0xc0
 8002514:	d814      	bhi.n	8002540 <UART_SetConfig+0x1c0>
 8002516:	2b80      	cmp	r3, #128	; 0x80
 8002518:	d009      	beq.n	800252e <UART_SetConfig+0x1ae>
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	d810      	bhi.n	8002540 <UART_SetConfig+0x1c0>
 800251e:	2b00      	cmp	r3, #0
 8002520:	d002      	beq.n	8002528 <UART_SetConfig+0x1a8>
 8002522:	2b40      	cmp	r3, #64	; 0x40
 8002524:	d006      	beq.n	8002534 <UART_SetConfig+0x1b4>
 8002526:	e00b      	b.n	8002540 <UART_SetConfig+0x1c0>
 8002528:	2300      	movs	r3, #0
 800252a:	77fb      	strb	r3, [r7, #31]
 800252c:	e0cc      	b.n	80026c8 <UART_SetConfig+0x348>
 800252e:	2302      	movs	r3, #2
 8002530:	77fb      	strb	r3, [r7, #31]
 8002532:	e0c9      	b.n	80026c8 <UART_SetConfig+0x348>
 8002534:	2304      	movs	r3, #4
 8002536:	77fb      	strb	r3, [r7, #31]
 8002538:	e0c6      	b.n	80026c8 <UART_SetConfig+0x348>
 800253a:	2308      	movs	r3, #8
 800253c:	77fb      	strb	r3, [r7, #31]
 800253e:	e0c3      	b.n	80026c8 <UART_SetConfig+0x348>
 8002540:	2310      	movs	r3, #16
 8002542:	77fb      	strb	r3, [r7, #31]
 8002544:	e0c0      	b.n	80026c8 <UART_SetConfig+0x348>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a44      	ldr	r2, [pc, #272]	; (800265c <UART_SetConfig+0x2dc>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d125      	bne.n	800259c <UART_SetConfig+0x21c>
 8002550:	4b3e      	ldr	r3, [pc, #248]	; (800264c <UART_SetConfig+0x2cc>)
 8002552:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002556:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800255a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800255e:	d017      	beq.n	8002590 <UART_SetConfig+0x210>
 8002560:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002564:	d817      	bhi.n	8002596 <UART_SetConfig+0x216>
 8002566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256a:	d00b      	beq.n	8002584 <UART_SetConfig+0x204>
 800256c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002570:	d811      	bhi.n	8002596 <UART_SetConfig+0x216>
 8002572:	2b00      	cmp	r3, #0
 8002574:	d003      	beq.n	800257e <UART_SetConfig+0x1fe>
 8002576:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800257a:	d006      	beq.n	800258a <UART_SetConfig+0x20a>
 800257c:	e00b      	b.n	8002596 <UART_SetConfig+0x216>
 800257e:	2300      	movs	r3, #0
 8002580:	77fb      	strb	r3, [r7, #31]
 8002582:	e0a1      	b.n	80026c8 <UART_SetConfig+0x348>
 8002584:	2302      	movs	r3, #2
 8002586:	77fb      	strb	r3, [r7, #31]
 8002588:	e09e      	b.n	80026c8 <UART_SetConfig+0x348>
 800258a:	2304      	movs	r3, #4
 800258c:	77fb      	strb	r3, [r7, #31]
 800258e:	e09b      	b.n	80026c8 <UART_SetConfig+0x348>
 8002590:	2308      	movs	r3, #8
 8002592:	77fb      	strb	r3, [r7, #31]
 8002594:	e098      	b.n	80026c8 <UART_SetConfig+0x348>
 8002596:	2310      	movs	r3, #16
 8002598:	77fb      	strb	r3, [r7, #31]
 800259a:	e095      	b.n	80026c8 <UART_SetConfig+0x348>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a2f      	ldr	r2, [pc, #188]	; (8002660 <UART_SetConfig+0x2e0>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d125      	bne.n	80025f2 <UART_SetConfig+0x272>
 80025a6:	4b29      	ldr	r3, [pc, #164]	; (800264c <UART_SetConfig+0x2cc>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025b4:	d017      	beq.n	80025e6 <UART_SetConfig+0x266>
 80025b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025ba:	d817      	bhi.n	80025ec <UART_SetConfig+0x26c>
 80025bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c0:	d00b      	beq.n	80025da <UART_SetConfig+0x25a>
 80025c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c6:	d811      	bhi.n	80025ec <UART_SetConfig+0x26c>
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d003      	beq.n	80025d4 <UART_SetConfig+0x254>
 80025cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d0:	d006      	beq.n	80025e0 <UART_SetConfig+0x260>
 80025d2:	e00b      	b.n	80025ec <UART_SetConfig+0x26c>
 80025d4:	2301      	movs	r3, #1
 80025d6:	77fb      	strb	r3, [r7, #31]
 80025d8:	e076      	b.n	80026c8 <UART_SetConfig+0x348>
 80025da:	2302      	movs	r3, #2
 80025dc:	77fb      	strb	r3, [r7, #31]
 80025de:	e073      	b.n	80026c8 <UART_SetConfig+0x348>
 80025e0:	2304      	movs	r3, #4
 80025e2:	77fb      	strb	r3, [r7, #31]
 80025e4:	e070      	b.n	80026c8 <UART_SetConfig+0x348>
 80025e6:	2308      	movs	r3, #8
 80025e8:	77fb      	strb	r3, [r7, #31]
 80025ea:	e06d      	b.n	80026c8 <UART_SetConfig+0x348>
 80025ec:	2310      	movs	r3, #16
 80025ee:	77fb      	strb	r3, [r7, #31]
 80025f0:	e06a      	b.n	80026c8 <UART_SetConfig+0x348>
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1b      	ldr	r2, [pc, #108]	; (8002664 <UART_SetConfig+0x2e4>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d138      	bne.n	800266e <UART_SetConfig+0x2ee>
 80025fc:	4b13      	ldr	r3, [pc, #76]	; (800264c <UART_SetConfig+0x2cc>)
 80025fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002602:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002606:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800260a:	d017      	beq.n	800263c <UART_SetConfig+0x2bc>
 800260c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002610:	d82a      	bhi.n	8002668 <UART_SetConfig+0x2e8>
 8002612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002616:	d00b      	beq.n	8002630 <UART_SetConfig+0x2b0>
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d824      	bhi.n	8002668 <UART_SetConfig+0x2e8>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d003      	beq.n	800262a <UART_SetConfig+0x2aa>
 8002622:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002626:	d006      	beq.n	8002636 <UART_SetConfig+0x2b6>
 8002628:	e01e      	b.n	8002668 <UART_SetConfig+0x2e8>
 800262a:	2300      	movs	r3, #0
 800262c:	77fb      	strb	r3, [r7, #31]
 800262e:	e04b      	b.n	80026c8 <UART_SetConfig+0x348>
 8002630:	2302      	movs	r3, #2
 8002632:	77fb      	strb	r3, [r7, #31]
 8002634:	e048      	b.n	80026c8 <UART_SetConfig+0x348>
 8002636:	2304      	movs	r3, #4
 8002638:	77fb      	strb	r3, [r7, #31]
 800263a:	e045      	b.n	80026c8 <UART_SetConfig+0x348>
 800263c:	2308      	movs	r3, #8
 800263e:	77fb      	strb	r3, [r7, #31]
 8002640:	e042      	b.n	80026c8 <UART_SetConfig+0x348>
 8002642:	bf00      	nop
 8002644:	efff69f3 	.word	0xefff69f3
 8002648:	40011000 	.word	0x40011000
 800264c:	40023800 	.word	0x40023800
 8002650:	40004400 	.word	0x40004400
 8002654:	40004800 	.word	0x40004800
 8002658:	40004c00 	.word	0x40004c00
 800265c:	40005000 	.word	0x40005000
 8002660:	40011400 	.word	0x40011400
 8002664:	40007800 	.word	0x40007800
 8002668:	2310      	movs	r3, #16
 800266a:	77fb      	strb	r3, [r7, #31]
 800266c:	e02c      	b.n	80026c8 <UART_SetConfig+0x348>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a72      	ldr	r2, [pc, #456]	; (800283c <UART_SetConfig+0x4bc>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d125      	bne.n	80026c4 <UART_SetConfig+0x344>
 8002678:	4b71      	ldr	r3, [pc, #452]	; (8002840 <UART_SetConfig+0x4c0>)
 800267a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002682:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002686:	d017      	beq.n	80026b8 <UART_SetConfig+0x338>
 8002688:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800268c:	d817      	bhi.n	80026be <UART_SetConfig+0x33e>
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002692:	d00b      	beq.n	80026ac <UART_SetConfig+0x32c>
 8002694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002698:	d811      	bhi.n	80026be <UART_SetConfig+0x33e>
 800269a:	2b00      	cmp	r3, #0
 800269c:	d003      	beq.n	80026a6 <UART_SetConfig+0x326>
 800269e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80026a2:	d006      	beq.n	80026b2 <UART_SetConfig+0x332>
 80026a4:	e00b      	b.n	80026be <UART_SetConfig+0x33e>
 80026a6:	2300      	movs	r3, #0
 80026a8:	77fb      	strb	r3, [r7, #31]
 80026aa:	e00d      	b.n	80026c8 <UART_SetConfig+0x348>
 80026ac:	2302      	movs	r3, #2
 80026ae:	77fb      	strb	r3, [r7, #31]
 80026b0:	e00a      	b.n	80026c8 <UART_SetConfig+0x348>
 80026b2:	2304      	movs	r3, #4
 80026b4:	77fb      	strb	r3, [r7, #31]
 80026b6:	e007      	b.n	80026c8 <UART_SetConfig+0x348>
 80026b8:	2308      	movs	r3, #8
 80026ba:	77fb      	strb	r3, [r7, #31]
 80026bc:	e004      	b.n	80026c8 <UART_SetConfig+0x348>
 80026be:	2310      	movs	r3, #16
 80026c0:	77fb      	strb	r3, [r7, #31]
 80026c2:	e001      	b.n	80026c8 <UART_SetConfig+0x348>
 80026c4:	2310      	movs	r3, #16
 80026c6:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69db      	ldr	r3, [r3, #28]
 80026cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026d0:	d15b      	bne.n	800278a <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80026d2:	7ffb      	ldrb	r3, [r7, #31]
 80026d4:	2b08      	cmp	r3, #8
 80026d6:	d828      	bhi.n	800272a <UART_SetConfig+0x3aa>
 80026d8:	a201      	add	r2, pc, #4	; (adr r2, 80026e0 <UART_SetConfig+0x360>)
 80026da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026de:	bf00      	nop
 80026e0:	08002705 	.word	0x08002705
 80026e4:	0800270d 	.word	0x0800270d
 80026e8:	08002715 	.word	0x08002715
 80026ec:	0800272b 	.word	0x0800272b
 80026f0:	0800271b 	.word	0x0800271b
 80026f4:	0800272b 	.word	0x0800272b
 80026f8:	0800272b 	.word	0x0800272b
 80026fc:	0800272b 	.word	0x0800272b
 8002700:	08002723 	.word	0x08002723
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002704:	f7ff f9d6 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 8002708:	61b8      	str	r0, [r7, #24]
        break;
 800270a:	e013      	b.n	8002734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800270c:	f7ff f9e6 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 8002710:	61b8      	str	r0, [r7, #24]
        break;
 8002712:	e00f      	b.n	8002734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002714:	4b4b      	ldr	r3, [pc, #300]	; (8002844 <UART_SetConfig+0x4c4>)
 8002716:	61bb      	str	r3, [r7, #24]
        break;
 8002718:	e00c      	b.n	8002734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800271a:	f7ff f8b9 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 800271e:	61b8      	str	r0, [r7, #24]
        break;
 8002720:	e008      	b.n	8002734 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002722:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002726:	61bb      	str	r3, [r7, #24]
        break;
 8002728:	e004      	b.n	8002734 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800272a:	2300      	movs	r3, #0
 800272c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	77bb      	strb	r3, [r7, #30]
        break;
 8002732:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002734:	69bb      	ldr	r3, [r7, #24]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d074      	beq.n	8002824 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	005a      	lsls	r2, r3, #1
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	085b      	lsrs	r3, r3, #1
 8002744:	441a      	add	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	fbb2 f3f3 	udiv	r3, r2, r3
 800274e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0f      	cmp	r3, #15
 8002754:	d916      	bls.n	8002784 <UART_SetConfig+0x404>
 8002756:	693b      	ldr	r3, [r7, #16]
 8002758:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800275c:	d212      	bcs.n	8002784 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	b29b      	uxth	r3, r3
 8002762:	f023 030f 	bic.w	r3, r3, #15
 8002766:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	b29b      	uxth	r3, r3
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	b29a      	uxth	r2, r3
 8002774:	89fb      	ldrh	r3, [r7, #14]
 8002776:	4313      	orrs	r3, r2
 8002778:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	89fa      	ldrh	r2, [r7, #14]
 8002780:	60da      	str	r2, [r3, #12]
 8002782:	e04f      	b.n	8002824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	77bb      	strb	r3, [r7, #30]
 8002788:	e04c      	b.n	8002824 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800278a:	7ffb      	ldrb	r3, [r7, #31]
 800278c:	2b08      	cmp	r3, #8
 800278e:	d828      	bhi.n	80027e2 <UART_SetConfig+0x462>
 8002790:	a201      	add	r2, pc, #4	; (adr r2, 8002798 <UART_SetConfig+0x418>)
 8002792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002796:	bf00      	nop
 8002798:	080027bd 	.word	0x080027bd
 800279c:	080027c5 	.word	0x080027c5
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	080027e3 	.word	0x080027e3
 80027a8:	080027d3 	.word	0x080027d3
 80027ac:	080027e3 	.word	0x080027e3
 80027b0:	080027e3 	.word	0x080027e3
 80027b4:	080027e3 	.word	0x080027e3
 80027b8:	080027db 	.word	0x080027db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027bc:	f7ff f97a 	bl	8001ab4 <HAL_RCC_GetPCLK1Freq>
 80027c0:	61b8      	str	r0, [r7, #24]
        break;
 80027c2:	e013      	b.n	80027ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027c4:	f7ff f98a 	bl	8001adc <HAL_RCC_GetPCLK2Freq>
 80027c8:	61b8      	str	r0, [r7, #24]
        break;
 80027ca:	e00f      	b.n	80027ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80027cc:	4b1d      	ldr	r3, [pc, #116]	; (8002844 <UART_SetConfig+0x4c4>)
 80027ce:	61bb      	str	r3, [r7, #24]
        break;
 80027d0:	e00c      	b.n	80027ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027d2:	f7ff f85d 	bl	8001890 <HAL_RCC_GetSysClockFreq>
 80027d6:	61b8      	str	r0, [r7, #24]
        break;
 80027d8:	e008      	b.n	80027ec <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027de:	61bb      	str	r3, [r7, #24]
        break;
 80027e0:	e004      	b.n	80027ec <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	77bb      	strb	r3, [r7, #30]
        break;
 80027ea:	bf00      	nop
    }

    if (pclk != 0U)
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d018      	beq.n	8002824 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	085a      	lsrs	r2, r3, #1
 80027f8:	69bb      	ldr	r3, [r7, #24]
 80027fa:	441a      	add	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	fbb2 f3f3 	udiv	r3, r2, r3
 8002804:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	2b0f      	cmp	r3, #15
 800280a:	d909      	bls.n	8002820 <UART_SetConfig+0x4a0>
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002812:	d205      	bcs.n	8002820 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	b29a      	uxth	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	e001      	b.n	8002824 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002820:	2301      	movs	r3, #1
 8002822:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002830:	7fbb      	ldrb	r3, [r7, #30]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3720      	adds	r7, #32
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
 800283a:	bf00      	nop
 800283c:	40007c00 	.word	0x40007c00
 8002840:	40023800 	.word	0x40023800
 8002844:	00f42400 	.word	0x00f42400

08002848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002848:	b480      	push	{r7}
 800284a:	b083      	sub	sp, #12
 800284c:	af00      	add	r7, sp, #0
 800284e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00a      	beq.n	8002872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d00a      	beq.n	8002894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	430a      	orrs	r2, r1
 8002892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	f003 0304 	and.w	r3, r3, #4
 800289c:	2b00      	cmp	r3, #0
 800289e:	d00a      	beq.n	80028b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00a      	beq.n	80028d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	430a      	orrs	r2, r1
 80028d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d00a      	beq.n	80028fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fe:	f003 0320 	and.w	r3, r3, #32
 8002902:	2b00      	cmp	r3, #0
 8002904:	d00a      	beq.n	800291c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	430a      	orrs	r2, r1
 800291a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002924:	2b00      	cmp	r3, #0
 8002926:	d01a      	beq.n	800295e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	685b      	ldr	r3, [r3, #4]
 800292e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	430a      	orrs	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002946:	d10a      	bne.n	800295e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00a      	beq.n	8002980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	685b      	ldr	r3, [r3, #4]
 8002970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	605a      	str	r2, [r3, #4]
  }
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800298c:	b580      	push	{r7, lr}
 800298e:	b086      	sub	sp, #24
 8002990:	af02      	add	r7, sp, #8
 8002992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2200      	movs	r2, #0
 8002998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800299c:	f7fe f8c2 	bl	8000b24 <HAL_GetTick>
 80029a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0308 	and.w	r3, r3, #8
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	d10e      	bne.n	80029ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80029b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80029b4:	9300      	str	r3, [sp, #0]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f81b 	bl	80029fa <UART_WaitOnFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e011      	b.n	80029f2 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2220      	movs	r2, #32
 80029d2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	2220      	movs	r2, #32
 80029d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80029f0:	2300      	movs	r3, #0
}
 80029f2:	4618      	mov	r0, r3
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}

080029fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80029fa:	b580      	push	{r7, lr}
 80029fc:	b09c      	sub	sp, #112	; 0x70
 80029fe:	af00      	add	r7, sp, #0
 8002a00:	60f8      	str	r0, [r7, #12]
 8002a02:	60b9      	str	r1, [r7, #8]
 8002a04:	603b      	str	r3, [r7, #0]
 8002a06:	4613      	mov	r3, r2
 8002a08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002a0a:	e0a7      	b.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a0c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a12:	f000 80a3 	beq.w	8002b5c <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a16:	f7fe f885 	bl	8000b24 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	683b      	ldr	r3, [r7, #0]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d302      	bcc.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x32>
 8002a26:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d13f      	bne.n	8002aac <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a34:	e853 3f00 	ldrex	r3, [r3]
 8002a38:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002a3a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002a3c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002a40:	667b      	str	r3, [r7, #100]	; 0x64
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	461a      	mov	r2, r3
 8002a48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a4a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a4c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a4e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002a50:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002a52:	e841 2300 	strex	r3, r2, [r1]
 8002a56:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002a58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1e6      	bne.n	8002a2c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	3308      	adds	r3, #8
 8002a64:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a68:	e853 3f00 	ldrex	r3, [r3]
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a70:	f023 0301 	bic.w	r3, r3, #1
 8002a74:	663b      	str	r3, [r7, #96]	; 0x60
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	3308      	adds	r3, #8
 8002a7c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002a7e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002a80:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a82:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002a86:	e841 2300 	strex	r3, r2, [r1]
 8002a8a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002a8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1e5      	bne.n	8002a5e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2220      	movs	r2, #32
 8002a96:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2220      	movs	r2, #32
 8002a9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e068      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f003 0304 	and.w	r3, r3, #4
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d050      	beq.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	69db      	ldr	r3, [r3, #28]
 8002ac0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ac4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac8:	d148      	bne.n	8002b5c <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ad2:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002adc:	e853 3f00 	ldrex	r3, [r3]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ae8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	461a      	mov	r2, r3
 8002af0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002af2:	637b      	str	r3, [r7, #52]	; 0x34
 8002af4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002af6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002af8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002afa:	e841 2300 	strex	r3, r2, [r1]
 8002afe:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d1e6      	bne.n	8002ad4 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	e853 3f00 	ldrex	r3, [r3]
 8002b14:	613b      	str	r3, [r7, #16]
   return(result);
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	f023 0301 	bic.w	r3, r3, #1
 8002b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	3308      	adds	r3, #8
 8002b24:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002b26:	623a      	str	r2, [r7, #32]
 8002b28:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	69f9      	ldr	r1, [r7, #28]
 8002b2c:	6a3a      	ldr	r2, [r7, #32]
 8002b2e:	e841 2300 	strex	r3, r2, [r1]
 8002b32:	61bb      	str	r3, [r7, #24]
   return(result);
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d1e5      	bne.n	8002b06 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	2220      	movs	r2, #32
 8002b3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2220      	movs	r2, #32
 8002b44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2220      	movs	r2, #32
 8002b4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	2200      	movs	r2, #0
 8002b54:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002b58:	2303      	movs	r3, #3
 8002b5a:	e010      	b.n	8002b7e <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	69da      	ldr	r2, [r3, #28]
 8002b62:	68bb      	ldr	r3, [r7, #8]
 8002b64:	4013      	ands	r3, r2
 8002b66:	68ba      	ldr	r2, [r7, #8]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	bf0c      	ite	eq
 8002b6c:	2301      	moveq	r3, #1
 8002b6e:	2300      	movne	r3, #0
 8002b70:	b2db      	uxtb	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	79fb      	ldrb	r3, [r7, #7]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	f43f af48 	beq.w	8002a0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002b7c:	2300      	movs	r3, #0
}
 8002b7e:	4618      	mov	r0, r3
 8002b80:	3770      	adds	r7, #112	; 0x70
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
	...

08002b88 <__libc_init_array>:
 8002b88:	b570      	push	{r4, r5, r6, lr}
 8002b8a:	4d0d      	ldr	r5, [pc, #52]	; (8002bc0 <__libc_init_array+0x38>)
 8002b8c:	4c0d      	ldr	r4, [pc, #52]	; (8002bc4 <__libc_init_array+0x3c>)
 8002b8e:	1b64      	subs	r4, r4, r5
 8002b90:	10a4      	asrs	r4, r4, #2
 8002b92:	2600      	movs	r6, #0
 8002b94:	42a6      	cmp	r6, r4
 8002b96:	d109      	bne.n	8002bac <__libc_init_array+0x24>
 8002b98:	4d0b      	ldr	r5, [pc, #44]	; (8002bc8 <__libc_init_array+0x40>)
 8002b9a:	4c0c      	ldr	r4, [pc, #48]	; (8002bcc <__libc_init_array+0x44>)
 8002b9c:	f000 f820 	bl	8002be0 <_init>
 8002ba0:	1b64      	subs	r4, r4, r5
 8002ba2:	10a4      	asrs	r4, r4, #2
 8002ba4:	2600      	movs	r6, #0
 8002ba6:	42a6      	cmp	r6, r4
 8002ba8:	d105      	bne.n	8002bb6 <__libc_init_array+0x2e>
 8002baa:	bd70      	pop	{r4, r5, r6, pc}
 8002bac:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bb0:	4798      	blx	r3
 8002bb2:	3601      	adds	r6, #1
 8002bb4:	e7ee      	b.n	8002b94 <__libc_init_array+0xc>
 8002bb6:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bba:	4798      	blx	r3
 8002bbc:	3601      	adds	r6, #1
 8002bbe:	e7f2      	b.n	8002ba6 <__libc_init_array+0x1e>
 8002bc0:	08002c18 	.word	0x08002c18
 8002bc4:	08002c18 	.word	0x08002c18
 8002bc8:	08002c18 	.word	0x08002c18
 8002bcc:	08002c1c 	.word	0x08002c1c

08002bd0 <memset>:
 8002bd0:	4402      	add	r2, r0
 8002bd2:	4603      	mov	r3, r0
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d100      	bne.n	8002bda <memset+0xa>
 8002bd8:	4770      	bx	lr
 8002bda:	f803 1b01 	strb.w	r1, [r3], #1
 8002bde:	e7f9      	b.n	8002bd4 <memset+0x4>

08002be0 <_init>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr

08002bec <_fini>:
 8002bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bee:	bf00      	nop
 8002bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bf2:	bc08      	pop	{r3}
 8002bf4:	469e      	mov	lr, r3
 8002bf6:	4770      	bx	lr
