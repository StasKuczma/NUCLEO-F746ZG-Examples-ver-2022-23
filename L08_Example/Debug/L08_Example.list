
L08_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004f0c  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080050d4  080050d4  000150d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005100  08005100  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08005100  08005100  00015100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005108  08005108  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005108  08005108  00015108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800510c  0800510c  0001510c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08005110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000090  080051a0  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002b0  080051a0  000202b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018110  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000372b  00000000  00000000  000381d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013b0  00000000  00000000  0003b900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011e8  00000000  00000000  0003ccb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027302  00000000  00000000  0003de98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b316  00000000  00000000  0006519a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0025  00000000  00000000  000804b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001704d5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050fc  00000000  00000000  00170528  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000090 	.word	0x20000090
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080050bc 	.word	0x080050bc

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000094 	.word	0x20000094
 8000204:	080050bc 	.word	0x080050bc

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2uiz>:
 80009a4:	004a      	lsls	r2, r1, #1
 80009a6:	d211      	bcs.n	80009cc <__aeabi_d2uiz+0x28>
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d211      	bcs.n	80009d2 <__aeabi_d2uiz+0x2e>
 80009ae:	d50d      	bpl.n	80009cc <__aeabi_d2uiz+0x28>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d40e      	bmi.n	80009d8 <__aeabi_d2uiz+0x34>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d102      	bne.n	80009de <__aeabi_d2uiz+0x3a>
 80009d8:	f04f 30ff 	mov.w	r0, #4294967295
 80009dc:	4770      	bx	lr
 80009de:	f04f 0000 	mov.w	r0, #0
 80009e2:	4770      	bx	lr

080009e4 <__aeabi_uldivmod>:
 80009e4:	b953      	cbnz	r3, 80009fc <__aeabi_uldivmod+0x18>
 80009e6:	b94a      	cbnz	r2, 80009fc <__aeabi_uldivmod+0x18>
 80009e8:	2900      	cmp	r1, #0
 80009ea:	bf08      	it	eq
 80009ec:	2800      	cmpeq	r0, #0
 80009ee:	bf1c      	itt	ne
 80009f0:	f04f 31ff 	movne.w	r1, #4294967295
 80009f4:	f04f 30ff 	movne.w	r0, #4294967295
 80009f8:	f000 b974 	b.w	8000ce4 <__aeabi_idiv0>
 80009fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a00:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a04:	f000 f806 	bl	8000a14 <__udivmoddi4>
 8000a08:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a0c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a10:	b004      	add	sp, #16
 8000a12:	4770      	bx	lr

08000a14 <__udivmoddi4>:
 8000a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a18:	9d08      	ldr	r5, [sp, #32]
 8000a1a:	4604      	mov	r4, r0
 8000a1c:	468e      	mov	lr, r1
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d14d      	bne.n	8000abe <__udivmoddi4+0xaa>
 8000a22:	428a      	cmp	r2, r1
 8000a24:	4694      	mov	ip, r2
 8000a26:	d969      	bls.n	8000afc <__udivmoddi4+0xe8>
 8000a28:	fab2 f282 	clz	r2, r2
 8000a2c:	b152      	cbz	r2, 8000a44 <__udivmoddi4+0x30>
 8000a2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a32:	f1c2 0120 	rsb	r1, r2, #32
 8000a36:	fa20 f101 	lsr.w	r1, r0, r1
 8000a3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a42:	4094      	lsls	r4, r2
 8000a44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a48:	0c21      	lsrs	r1, r4, #16
 8000a4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a4e:	fa1f f78c 	uxth.w	r7, ip
 8000a52:	fb08 e316 	mls	r3, r8, r6, lr
 8000a56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a5a:	fb06 f107 	mul.w	r1, r6, r7
 8000a5e:	4299      	cmp	r1, r3
 8000a60:	d90a      	bls.n	8000a78 <__udivmoddi4+0x64>
 8000a62:	eb1c 0303 	adds.w	r3, ip, r3
 8000a66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a6a:	f080 811f 	bcs.w	8000cac <__udivmoddi4+0x298>
 8000a6e:	4299      	cmp	r1, r3
 8000a70:	f240 811c 	bls.w	8000cac <__udivmoddi4+0x298>
 8000a74:	3e02      	subs	r6, #2
 8000a76:	4463      	add	r3, ip
 8000a78:	1a5b      	subs	r3, r3, r1
 8000a7a:	b2a4      	uxth	r4, r4
 8000a7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a80:	fb08 3310 	mls	r3, r8, r0, r3
 8000a84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a88:	fb00 f707 	mul.w	r7, r0, r7
 8000a8c:	42a7      	cmp	r7, r4
 8000a8e:	d90a      	bls.n	8000aa6 <__udivmoddi4+0x92>
 8000a90:	eb1c 0404 	adds.w	r4, ip, r4
 8000a94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a98:	f080 810a 	bcs.w	8000cb0 <__udivmoddi4+0x29c>
 8000a9c:	42a7      	cmp	r7, r4
 8000a9e:	f240 8107 	bls.w	8000cb0 <__udivmoddi4+0x29c>
 8000aa2:	4464      	add	r4, ip
 8000aa4:	3802      	subs	r0, #2
 8000aa6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000aaa:	1be4      	subs	r4, r4, r7
 8000aac:	2600      	movs	r6, #0
 8000aae:	b11d      	cbz	r5, 8000ab8 <__udivmoddi4+0xa4>
 8000ab0:	40d4      	lsrs	r4, r2
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ab8:	4631      	mov	r1, r6
 8000aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000abe:	428b      	cmp	r3, r1
 8000ac0:	d909      	bls.n	8000ad6 <__udivmoddi4+0xc2>
 8000ac2:	2d00      	cmp	r5, #0
 8000ac4:	f000 80ef 	beq.w	8000ca6 <__udivmoddi4+0x292>
 8000ac8:	2600      	movs	r6, #0
 8000aca:	e9c5 0100 	strd	r0, r1, [r5]
 8000ace:	4630      	mov	r0, r6
 8000ad0:	4631      	mov	r1, r6
 8000ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ad6:	fab3 f683 	clz	r6, r3
 8000ada:	2e00      	cmp	r6, #0
 8000adc:	d14a      	bne.n	8000b74 <__udivmoddi4+0x160>
 8000ade:	428b      	cmp	r3, r1
 8000ae0:	d302      	bcc.n	8000ae8 <__udivmoddi4+0xd4>
 8000ae2:	4282      	cmp	r2, r0
 8000ae4:	f200 80f9 	bhi.w	8000cda <__udivmoddi4+0x2c6>
 8000ae8:	1a84      	subs	r4, r0, r2
 8000aea:	eb61 0303 	sbc.w	r3, r1, r3
 8000aee:	2001      	movs	r0, #1
 8000af0:	469e      	mov	lr, r3
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	d0e0      	beq.n	8000ab8 <__udivmoddi4+0xa4>
 8000af6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000afa:	e7dd      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000afc:	b902      	cbnz	r2, 8000b00 <__udivmoddi4+0xec>
 8000afe:	deff      	udf	#255	; 0xff
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	2a00      	cmp	r2, #0
 8000b06:	f040 8092 	bne.w	8000c2e <__udivmoddi4+0x21a>
 8000b0a:	eba1 010c 	sub.w	r1, r1, ip
 8000b0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b12:	fa1f fe8c 	uxth.w	lr, ip
 8000b16:	2601      	movs	r6, #1
 8000b18:	0c20      	lsrs	r0, r4, #16
 8000b1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b26:	fb0e f003 	mul.w	r0, lr, r3
 8000b2a:	4288      	cmp	r0, r1
 8000b2c:	d908      	bls.n	8000b40 <__udivmoddi4+0x12c>
 8000b2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x12a>
 8000b38:	4288      	cmp	r0, r1
 8000b3a:	f200 80cb 	bhi.w	8000cd4 <__udivmoddi4+0x2c0>
 8000b3e:	4643      	mov	r3, r8
 8000b40:	1a09      	subs	r1, r1, r0
 8000b42:	b2a4      	uxth	r4, r4
 8000b44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b48:	fb07 1110 	mls	r1, r7, r0, r1
 8000b4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b50:	fb0e fe00 	mul.w	lr, lr, r0
 8000b54:	45a6      	cmp	lr, r4
 8000b56:	d908      	bls.n	8000b6a <__udivmoddi4+0x156>
 8000b58:	eb1c 0404 	adds.w	r4, ip, r4
 8000b5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b60:	d202      	bcs.n	8000b68 <__udivmoddi4+0x154>
 8000b62:	45a6      	cmp	lr, r4
 8000b64:	f200 80bb 	bhi.w	8000cde <__udivmoddi4+0x2ca>
 8000b68:	4608      	mov	r0, r1
 8000b6a:	eba4 040e 	sub.w	r4, r4, lr
 8000b6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b72:	e79c      	b.n	8000aae <__udivmoddi4+0x9a>
 8000b74:	f1c6 0720 	rsb	r7, r6, #32
 8000b78:	40b3      	lsls	r3, r6
 8000b7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b82:	fa20 f407 	lsr.w	r4, r0, r7
 8000b86:	fa01 f306 	lsl.w	r3, r1, r6
 8000b8a:	431c      	orrs	r4, r3
 8000b8c:	40f9      	lsrs	r1, r7
 8000b8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b92:	fa00 f306 	lsl.w	r3, r0, r6
 8000b96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000b9a:	0c20      	lsrs	r0, r4, #16
 8000b9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ba0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ba4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ba8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bac:	4288      	cmp	r0, r1
 8000bae:	fa02 f206 	lsl.w	r2, r2, r6
 8000bb2:	d90b      	bls.n	8000bcc <__udivmoddi4+0x1b8>
 8000bb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000bb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bbc:	f080 8088 	bcs.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f240 8085 	bls.w	8000cd0 <__udivmoddi4+0x2bc>
 8000bc6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bca:	4461      	add	r1, ip
 8000bcc:	1a09      	subs	r1, r1, r0
 8000bce:	b2a4      	uxth	r4, r4
 8000bd0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000bd4:	fb09 1110 	mls	r1, r9, r0, r1
 8000bd8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000bdc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be0:	458e      	cmp	lr, r1
 8000be2:	d908      	bls.n	8000bf6 <__udivmoddi4+0x1e2>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bec:	d26c      	bcs.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bee:	458e      	cmp	lr, r1
 8000bf0:	d96a      	bls.n	8000cc8 <__udivmoddi4+0x2b4>
 8000bf2:	3802      	subs	r0, #2
 8000bf4:	4461      	add	r1, ip
 8000bf6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000bfa:	fba0 9402 	umull	r9, r4, r0, r2
 8000bfe:	eba1 010e 	sub.w	r1, r1, lr
 8000c02:	42a1      	cmp	r1, r4
 8000c04:	46c8      	mov	r8, r9
 8000c06:	46a6      	mov	lr, r4
 8000c08:	d356      	bcc.n	8000cb8 <__udivmoddi4+0x2a4>
 8000c0a:	d053      	beq.n	8000cb4 <__udivmoddi4+0x2a0>
 8000c0c:	b15d      	cbz	r5, 8000c26 <__udivmoddi4+0x212>
 8000c0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c12:	eb61 010e 	sbc.w	r1, r1, lr
 8000c16:	fa01 f707 	lsl.w	r7, r1, r7
 8000c1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c1e:	40f1      	lsrs	r1, r6
 8000c20:	431f      	orrs	r7, r3
 8000c22:	e9c5 7100 	strd	r7, r1, [r5]
 8000c26:	2600      	movs	r6, #0
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	f1c2 0320 	rsb	r3, r2, #32
 8000c32:	40d8      	lsrs	r0, r3
 8000c34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c38:	fa21 f303 	lsr.w	r3, r1, r3
 8000c3c:	4091      	lsls	r1, r2
 8000c3e:	4301      	orrs	r1, r0
 8000c40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c44:	fa1f fe8c 	uxth.w	lr, ip
 8000c48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c50:	0c0b      	lsrs	r3, r1, #16
 8000c52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c56:	fb00 f60e 	mul.w	r6, r0, lr
 8000c5a:	429e      	cmp	r6, r3
 8000c5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c60:	d908      	bls.n	8000c74 <__udivmoddi4+0x260>
 8000c62:	eb1c 0303 	adds.w	r3, ip, r3
 8000c66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c6a:	d22f      	bcs.n	8000ccc <__udivmoddi4+0x2b8>
 8000c6c:	429e      	cmp	r6, r3
 8000c6e:	d92d      	bls.n	8000ccc <__udivmoddi4+0x2b8>
 8000c70:	3802      	subs	r0, #2
 8000c72:	4463      	add	r3, ip
 8000c74:	1b9b      	subs	r3, r3, r6
 8000c76:	b289      	uxth	r1, r1
 8000c78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000c80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c84:	fb06 f30e 	mul.w	r3, r6, lr
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0x28a>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000c94:	d216      	bcs.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d914      	bls.n	8000cc4 <__udivmoddi4+0x2b0>
 8000c9a:	3e02      	subs	r6, #2
 8000c9c:	4461      	add	r1, ip
 8000c9e:	1ac9      	subs	r1, r1, r3
 8000ca0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ca4:	e738      	b.n	8000b18 <__udivmoddi4+0x104>
 8000ca6:	462e      	mov	r6, r5
 8000ca8:	4628      	mov	r0, r5
 8000caa:	e705      	b.n	8000ab8 <__udivmoddi4+0xa4>
 8000cac:	4606      	mov	r6, r0
 8000cae:	e6e3      	b.n	8000a78 <__udivmoddi4+0x64>
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	e6f8      	b.n	8000aa6 <__udivmoddi4+0x92>
 8000cb4:	454b      	cmp	r3, r9
 8000cb6:	d2a9      	bcs.n	8000c0c <__udivmoddi4+0x1f8>
 8000cb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cc0:	3801      	subs	r0, #1
 8000cc2:	e7a3      	b.n	8000c0c <__udivmoddi4+0x1f8>
 8000cc4:	4646      	mov	r6, r8
 8000cc6:	e7ea      	b.n	8000c9e <__udivmoddi4+0x28a>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	e794      	b.n	8000bf6 <__udivmoddi4+0x1e2>
 8000ccc:	4640      	mov	r0, r8
 8000cce:	e7d1      	b.n	8000c74 <__udivmoddi4+0x260>
 8000cd0:	46d0      	mov	r8, sl
 8000cd2:	e77b      	b.n	8000bcc <__udivmoddi4+0x1b8>
 8000cd4:	3b02      	subs	r3, #2
 8000cd6:	4461      	add	r1, ip
 8000cd8:	e732      	b.n	8000b40 <__udivmoddi4+0x12c>
 8000cda:	4630      	mov	r0, r6
 8000cdc:	e709      	b.n	8000af2 <__udivmoddi4+0xde>
 8000cde:	4464      	add	r4, ip
 8000ce0:	3802      	subs	r0, #2
 8000ce2:	e742      	b.n	8000b6a <__udivmoddi4+0x156>

08000ce4 <__aeabi_idiv0>:
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <BTN_DIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button DIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_DIO_State_TypeDef BTN_DIO_Read(const BTN_DIO_Handle_TypeDef* hbtn)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
	_Bool state = DIO_Read(&(hbtn->Input));
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f000 f868 	bl	8000dc8 <DIO_Read>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	7a1b      	ldrb	r3, [r3, #8]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d101      	bne.n	8000d08 <BTN_DIO_Read+0x20>
 8000d04:	7bfb      	ldrb	r3, [r7, #15]
 8000d06:	e003      	b.n	8000d10 <BTN_DIO_Read+0x28>
 8000d08:	7bfb      	ldrb	r3, [r7, #15]
 8000d0a:	f083 0301 	eor.w	r3, r3, #1
 8000d0e:	b2db      	uxtb	r3, r3
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	3710      	adds	r7, #16
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}

08000d18 <BTN_DIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button DIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_DIO_Edge_TypeDef BTN_DIO_EdgeDetected(BTN_DIO_Handle_TypeDef* hbtn)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b084      	sub	sp, #16
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
	BTN_DIO_State_TypeDef state = BTN_DIO_Read(hbtn);
 8000d20:	6878      	ldr	r0, [r7, #4]
 8000d22:	f7ff ffe1 	bl	8000ce8 <BTN_DIO_Read>
 8000d26:	4603      	mov	r3, r0
 8000d28:	73bb      	strb	r3, [r7, #14]
	BTN_DIO_Edge_TypeDef edge = BTN_NO_EDGE;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000d2e:	7bbb      	ldrb	r3, [r7, #14]
 8000d30:	2b01      	cmp	r3, #1
 8000d32:	d106      	bne.n	8000d42 <BTN_DIO_EdgeDetected+0x2a>
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	7a5b      	ldrb	r3, [r3, #9]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d102      	bne.n	8000d42 <BTN_DIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e008      	b.n	8000d54 <BTN_DIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 8000d42:	7bbb      	ldrb	r3, [r7, #14]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d105      	bne.n	8000d54 <BTN_DIO_EdgeDetected+0x3c>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	7a5b      	ldrb	r3, [r3, #9]
 8000d4c:	2b01      	cmp	r3, #1
 8000d4e:	d101      	bne.n	8000d54 <BTN_DIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000d50:	2302      	movs	r3, #2
 8000d52:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	7bba      	ldrb	r2, [r7, #14]
 8000d58:	725a      	strb	r2, [r3, #9]
	return edge;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3710      	adds	r7, #16
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <DIO_WriteLow>:
 * @brief Resets digital output (writes '0')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteLow(const DIO_Handle_TypeDef* hdio)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_RESET);
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6818      	ldr	r0, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	889b      	ldrh	r3, [r3, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	4619      	mov	r1, r3
 8000d78:	f001 ff62 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}

08000d84 <DIO_WriteHigh>:
 * @brief Sets digital output (writes '1')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteHigh(const DIO_Handle_TypeDef* hdio)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_SET);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6818      	ldr	r0, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	889b      	ldrh	r3, [r3, #4]
 8000d94:	2201      	movs	r2, #1
 8000d96:	4619      	mov	r1, r3
 8000d98:	f001 ff52 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <DIO_Write>:
 * @param[in] hdio  : Digital I/O handler
 * @param[in] state : Digital output state (0 or 1)
 * @retval None
 */
void DIO_Write(const DIO_Handle_TypeDef* hdio, _Bool state)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	460b      	mov	r3, r1
 8000dae:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, (GPIO_PinState)state);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	6818      	ldr	r0, [r3, #0]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	889b      	ldrh	r3, [r3, #4]
 8000db8:	78fa      	ldrb	r2, [r7, #3]
 8000dba:	4619      	mov	r1, r3
 8000dbc:	f001 ff40 	bl	8002c40 <HAL_GPIO_WritePin>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <DIO_Read>:
 * @brief Reads digital input
 * @param[in] hdio  : Digital I/O handler
 * @retval Input state (0 or 1)
 */
_Bool DIO_Read(const DIO_Handle_TypeDef* hdio)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  return (_Bool)HAL_GPIO_ReadPin(hdio->Port, hdio->Pin);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	889b      	ldrh	r3, [r3, #4]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4610      	mov	r0, r2
 8000ddc:	f001 ff18 	bl	8002c10 <HAL_GPIO_ReadPin>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	bf14      	ite	ne
 8000de6:	2301      	movne	r3, #1
 8000de8:	2300      	moveq	r3, #0
 8000dea:	b2db      	uxtb	r3, r3
}
 8000dec:	4618      	mov	r0, r3
 8000dee:	3708      	adds	r7, #8
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}

08000df4 <disp_write_data>:

/* Public function prototypes ------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
void disp_write_data(DISP_HandleTypeDef* hdisp, uint8_t data)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
  for(uint8_t i = 0; i < DISP_SEG_NO; i++)
 8000e00:	2300      	movs	r3, #0
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e015      	b.n	8000e32 <disp_write_data+0x3e>
    DIO_Write(&(hdisp->SegmentOutput[i]), (data >> i) & 0x01);
 8000e06:	7bfb      	ldrb	r3, [r7, #15]
 8000e08:	3304      	adds	r3, #4
 8000e0a:	00db      	lsls	r3, r3, #3
 8000e0c:	687a      	ldr	r2, [r7, #4]
 8000e0e:	18d0      	adds	r0, r2, r3
 8000e10:	78fa      	ldrb	r2, [r7, #3]
 8000e12:	7bfb      	ldrb	r3, [r7, #15]
 8000e14:	fa42 f303 	asr.w	r3, r2, r3
 8000e18:	f003 0301 	and.w	r3, r3, #1
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	bf14      	ite	ne
 8000e20:	2301      	movne	r3, #1
 8000e22:	2300      	moveq	r3, #0
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	4619      	mov	r1, r3
 8000e28:	f7ff ffbc 	bl	8000da4 <DIO_Write>
  for(uint8_t i = 0; i < DISP_SEG_NO; i++)
 8000e2c:	7bfb      	ldrb	r3, [r7, #15]
 8000e2e:	3301      	adds	r3, #1
 8000e30:	73fb      	strb	r3, [r7, #15]
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	2b06      	cmp	r3, #6
 8000e36:	d9e6      	bls.n	8000e06 <disp_write_data+0x12>
}
 8000e38:	bf00      	nop
 8000e3a:	bf00      	nop
 8000e3c:	3710      	adds	r7, #16
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <disp_disable_all_digits>:

void disp_disable_all_digits(DISP_HandleTypeDef* hdisp)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b084      	sub	sp, #16
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	73fb      	strb	r3, [r7, #15]
 8000e4e:	e009      	b.n	8000e64 <disp_disable_all_digits+0x22>
    DIO_WriteLow(&(hdisp->DigitOutput[i]));
 8000e50:	7bfb      	ldrb	r3, [r7, #15]
 8000e52:	00db      	lsls	r3, r3, #3
 8000e54:	687a      	ldr	r2, [r7, #4]
 8000e56:	4413      	add	r3, r2
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f7ff ff83 	bl	8000d64 <DIO_WriteLow>
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000e5e:	7bfb      	ldrb	r3, [r7, #15]
 8000e60:	3301      	adds	r3, #1
 8000e62:	73fb      	strb	r3, [r7, #15]
 8000e64:	7bfb      	ldrb	r3, [r7, #15]
 8000e66:	2b03      	cmp	r3, #3
 8000e68:	d9f2      	bls.n	8000e50 <disp_disable_all_digits+0xe>
}
 8000e6a:	bf00      	nop
 8000e6c:	bf00      	nop
 8000e6e:	3710      	adds	r7, #16
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}

08000e74 <disp_enable_digit>:

void disp_enable_digit(DISP_HandleTypeDef* hdisp, uint8_t dig)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	460b      	mov	r3, r1
 8000e7e:	70fb      	strb	r3, [r7, #3]
  if(dig < DISP_DIG_NO)
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	2b03      	cmp	r3, #3
 8000e84:	d806      	bhi.n	8000e94 <disp_enable_digit+0x20>
    DIO_WriteHigh(&(hdisp->DigitOutput[dig]));
 8000e86:	78fb      	ldrb	r3, [r7, #3]
 8000e88:	00db      	lsls	r3, r3, #3
 8000e8a:	687a      	ldr	r2, [r7, #4]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f7ff ff78 	bl	8000d84 <DIO_WriteHigh>
}
 8000e94:	bf00      	nop
 8000e96:	3708      	adds	r7, #8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <disp_enable_decimal_point>:

void disp_enable_decimal_point(DISP_HandleTypeDef* hdisp)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  DIO_WriteLow(&(hdisp->DecimalPointOutput));
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	3358      	adds	r3, #88	; 0x58
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f7ff ff5b 	bl	8000d64 <DIO_WriteLow>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}

08000eb6 <disp_disable_decimal_point>:

void disp_disable_decimal_point(DISP_HandleTypeDef* hdisp)
{
 8000eb6:	b580      	push	{r7, lr}
 8000eb8:	b082      	sub	sp, #8
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	6078      	str	r0, [r7, #4]
  DIO_WriteHigh(&(hdisp->DecimalPointOutput));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3358      	adds	r3, #88	; 0x58
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff ff5e 	bl	8000d84 <DIO_WriteHigh>
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}

08000ed0 <DISP_printDecUInt>:
 * @brief TODO
 * @param[in] hdisp :
 * @param[in] dec   :
 */
void DISP_printDecUInt(DISP_HandleTypeDef* hdisp, uint16_t dec)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
 8000ed8:	460b      	mov	r3, r1
 8000eda:	807b      	strh	r3, [r7, #2]
  uint16_t div = __POWER_OF_TEN(3);
 8000edc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ee0:	81fb      	strh	r3, [r7, #14]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	737b      	strb	r3, [r7, #13]
 8000ee6:	e01c      	b.n	8000f22 <DISP_printDecUInt+0x52>
  {
    hdisp->DataArray[i] = dec / div;
 8000ee8:	887a      	ldrh	r2, [r7, #2]
 8000eea:	89fb      	ldrh	r3, [r7, #14]
 8000eec:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ef0:	b29a      	uxth	r2, r3
 8000ef2:	7b7b      	ldrb	r3, [r7, #13]
 8000ef4:	b2d1      	uxtb	r1, r2
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	460a      	mov	r2, r1
 8000efc:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    dec = dec % div;
 8000f00:	887b      	ldrh	r3, [r7, #2]
 8000f02:	89fa      	ldrh	r2, [r7, #14]
 8000f04:	fbb3 f1f2 	udiv	r1, r3, r2
 8000f08:	fb01 f202 	mul.w	r2, r1, r2
 8000f0c:	1a9b      	subs	r3, r3, r2
 8000f0e:	807b      	strh	r3, [r7, #2]
    div /= 10;
 8000f10:	89fb      	ldrh	r3, [r7, #14]
 8000f12:	4a09      	ldr	r2, [pc, #36]	; (8000f38 <DISP_printDecUInt+0x68>)
 8000f14:	fba2 2303 	umull	r2, r3, r2, r3
 8000f18:	08db      	lsrs	r3, r3, #3
 8000f1a:	81fb      	strh	r3, [r7, #14]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000f1c:	7b7b      	ldrb	r3, [r7, #13]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	737b      	strb	r3, [r7, #13]
 8000f22:	7b7b      	ldrb	r3, [r7, #13]
 8000f24:	2b03      	cmp	r3, #3
 8000f26:	d9df      	bls.n	8000ee8 <DISP_printDecUInt+0x18>
  }
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	cccccccd 	.word	0xcccccccd

08000f3c <DISP_ROUTINE>:
/**
 * @brief TODO
 * @param[in] hdisp :
 */
void DISP_ROUTINE(DISP_HandleTypeDef* hdisp)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  static uint8_t dig = 0;  // active digit selector

  // Disable all segments
  disp_disable_all_digits(hdisp);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff7c 	bl	8000e42 <disp_disable_all_digits>

  // Enable single segment
  disp_enable_digit(hdisp, dig);
 8000f4a:	4b1e      	ldr	r3, [pc, #120]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff ff8f 	bl	8000e74 <disp_enable_digit>

  // Write to selected segment
  uint8_t idx = hdisp->DataArray[dig];
 8000f56:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4413      	add	r3, r2
 8000f60:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8000f64:	73fb      	strb	r3, [r7, #15]
  
  /* DECIMAL POSITIVE NUMBERS: 0000-9999 */
  if(idx < DISP_DECIMALS_NO)
 8000f66:	7bfb      	ldrb	r3, [r7, #15]
 8000f68:	2b09      	cmp	r3, #9
 8000f6a:	d807      	bhi.n	8000f7c <DISP_ROUTINE+0x40>
    disp_write_data(hdisp, DISP_COMMON_ANODE_DECIMALS[idx]);
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	4a16      	ldr	r2, [pc, #88]	; (8000fc8 <DISP_ROUTINE+0x8c>)
 8000f70:	5cd3      	ldrb	r3, [r2, r3]
 8000f72:	4619      	mov	r1, r3
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f7ff ff3d 	bl	8000df4 <disp_write_data>
 8000f7a:	e004      	b.n	8000f86 <DISP_ROUTINE+0x4a>
     negative decimal number handling 
     etc */
     
  /* EMPTY CHARACTER (BLANK) */
  else
    disp_write_data(hdisp, DISP_COMMON_ANODE_DECIMALS[DISP_EMPTY_CHAR]);
 8000f7c:	23ff      	movs	r3, #255	; 0xff
 8000f7e:	4619      	mov	r1, r3
 8000f80:	6878      	ldr	r0, [r7, #4]
 8000f82:	f7ff ff37 	bl	8000df4 <disp_write_data>

  // Decimal point control
  if(hdisp->DecimalPoint == dig)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 8000f8c:	4b0d      	ldr	r3, [pc, #52]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d103      	bne.n	8000f9c <DISP_ROUTINE+0x60>
    disp_enable_decimal_point(hdisp);
 8000f94:	6878      	ldr	r0, [r7, #4]
 8000f96:	f7ff ff81 	bl	8000e9c <disp_enable_decimal_point>
 8000f9a:	e002      	b.n	8000fa2 <DISP_ROUTINE+0x66>
  else
    disp_disable_decimal_point(hdisp);
 8000f9c:	6878      	ldr	r0, [r7, #4]
 8000f9e:	f7ff ff8a 	bl	8000eb6 <disp_disable_decimal_point>

  // Select next segment
  dig = (dig < DISP_DIG_NO-1) ? (dig+1) : (0);
 8000fa2:	4b08      	ldr	r3, [pc, #32]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000fa4:	781b      	ldrb	r3, [r3, #0]
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d804      	bhi.n	8000fb4 <DISP_ROUTINE+0x78>
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	3301      	adds	r3, #1
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	e000      	b.n	8000fb6 <DISP_ROUTINE+0x7a>
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	4a03      	ldr	r2, [pc, #12]	; (8000fc4 <DISP_ROUTINE+0x88>)
 8000fb8:	7013      	strb	r3, [r2, #0]
}
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	200000ac 	.word	0x200000ac
 8000fc8:	080050d4 	.word	0x080050d4

08000fcc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac1;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000fda:	4b0f      	ldr	r3, [pc, #60]	; (8001018 <MX_DAC_Init+0x4c>)
 8000fdc:	4a0f      	ldr	r2, [pc, #60]	; (800101c <MX_DAC_Init+0x50>)
 8000fde:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000fe0:	480d      	ldr	r0, [pc, #52]	; (8001018 <MX_DAC_Init+0x4c>)
 8000fe2:	f001 f828 	bl	8002036 <HAL_DAC_Init>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d001      	beq.n	8000ff0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000fec:	f000 fcc2 	bl	8001974 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	4806      	ldr	r0, [pc, #24]	; (8001018 <MX_DAC_Init+0x4c>)
 8001000:	f001 f916 	bl	8002230 <HAL_DAC_ConfigChannel>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800100a:	f000 fcb3 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800100e:	bf00      	nop
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	200000b0 	.word	0x200000b0
 800101c:	40007400 	.word	0x40007400

08001020 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b08a      	sub	sp, #40	; 0x28
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001028:	f107 0314 	add.w	r3, r7, #20
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a31      	ldr	r2, [pc, #196]	; (8001104 <HAL_DAC_MspInit+0xe4>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d15c      	bne.n	80010fc <HAL_DAC_MspInit+0xdc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001042:	4b31      	ldr	r3, [pc, #196]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	4a30      	ldr	r2, [pc, #192]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 8001048:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800104c:	6413      	str	r3, [r2, #64]	; 0x40
 800104e:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001056:	613b      	str	r3, [r7, #16]
 8001058:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 800105c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105e:	4a2a      	ldr	r2, [pc, #168]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6313      	str	r3, [r2, #48]	; 0x30
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <HAL_DAC_MspInit+0xe8>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001072:	2310      	movs	r3, #16
 8001074:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001076:	2303      	movs	r3, #3
 8001078:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107a:	2300      	movs	r3, #0
 800107c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4619      	mov	r1, r3
 8001084:	4821      	ldr	r0, [pc, #132]	; (800110c <HAL_DAC_MspInit+0xec>)
 8001086:	f001 fc17 	bl	80028b8 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 800108a:	4b21      	ldr	r3, [pc, #132]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 800108c:	4a21      	ldr	r2, [pc, #132]	; (8001114 <HAL_DAC_MspInit+0xf4>)
 800108e:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 8001090:	4b1f      	ldr	r3, [pc, #124]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 8001092:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8001096:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 800109a:	2240      	movs	r2, #64	; 0x40
 800109c:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 800109e:	4b1c      	ldr	r3, [pc, #112]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80010a4:	4b1a      	ldr	r3, [pc, #104]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010aa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010ac:	4b18      	ldr	r3, [pc, #96]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010ae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010b2:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010b6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80010ba:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010be:	f44f 7280 	mov.w	r2, #256	; 0x100
 80010c2:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 80010c4:	4b12      	ldr	r3, [pc, #72]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 80010d0:	480f      	ldr	r0, [pc, #60]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010d2:	f001 f907 	bl	80022e4 <HAL_DMA_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 80010dc:	f000 fc4a 	bl	8001974 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle1,hdma_dac1);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	4a0a      	ldr	r2, [pc, #40]	; (8001110 <HAL_DAC_MspInit+0xf0>)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80010ec:	2200      	movs	r2, #0
 80010ee:	2100      	movs	r1, #0
 80010f0:	2036      	movs	r0, #54	; 0x36
 80010f2:	f000 ff6a 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80010f6:	2036      	movs	r0, #54	; 0x36
 80010f8:	f000 ff83 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	; 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40007400 	.word	0x40007400
 8001108:	40023800 	.word	0x40023800
 800110c:	40020000 	.word	0x40020000
 8001110:	200000c4 	.word	0x200000c4
 8001114:	40026088 	.word	0x40026088

08001118 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800111e:	4b10      	ldr	r3, [pc, #64]	; (8001160 <MX_DMA_Init+0x48>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a0f      	ldr	r2, [pc, #60]	; (8001160 <MX_DMA_Init+0x48>)
 8001124:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <MX_DMA_Init+0x48>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001132:	607b      	str	r3, [r7, #4]
 8001134:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8001136:	2200      	movs	r2, #0
 8001138:	2100      	movs	r1, #0
 800113a:	200c      	movs	r0, #12
 800113c:	f000 ff45 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001140:	200c      	movs	r0, #12
 8001142:	f000 ff5e 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	2010      	movs	r0, #16
 800114c:	f000 ff3d 	bl	8001fca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001150:	2010      	movs	r0, #16
 8001152:	f000 ff56 	bl	8002002 <HAL_NVIC_EnableIRQ>

}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40023800 	.word	0x40023800

08001164 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08e      	sub	sp, #56	; 0x38
 8001168:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800117a:	4bb3      	ldr	r3, [pc, #716]	; (8001448 <MX_GPIO_Init+0x2e4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4ab2      	ldr	r2, [pc, #712]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001180:	f043 0310 	orr.w	r3, r3, #16
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4bb0      	ldr	r3, [pc, #704]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0310 	and.w	r3, r3, #16
 800118e:	623b      	str	r3, [r7, #32]
 8001190:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001192:	4bad      	ldr	r3, [pc, #692]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001196:	4aac      	ldr	r2, [pc, #688]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001198:	f043 0304 	orr.w	r3, r3, #4
 800119c:	6313      	str	r3, [r2, #48]	; 0x30
 800119e:	4baa      	ldr	r3, [pc, #680]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a2:	f003 0304 	and.w	r3, r3, #4
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80011aa:	4ba7      	ldr	r3, [pc, #668]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4aa6      	ldr	r2, [pc, #664]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011b0:	f043 0320 	orr.w	r3, r3, #32
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4ba4      	ldr	r3, [pc, #656]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0320 	and.w	r3, r3, #32
 80011be:	61bb      	str	r3, [r7, #24]
 80011c0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011c2:	4ba1      	ldr	r3, [pc, #644]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c6:	4aa0      	ldr	r2, [pc, #640]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011cc:	6313      	str	r3, [r2, #48]	; 0x30
 80011ce:	4b9e      	ldr	r3, [pc, #632]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011d6:	617b      	str	r3, [r7, #20]
 80011d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011da:	4b9b      	ldr	r3, [pc, #620]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	4a9a      	ldr	r2, [pc, #616]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011e0:	f043 0301 	orr.w	r3, r3, #1
 80011e4:	6313      	str	r3, [r2, #48]	; 0x30
 80011e6:	4b98      	ldr	r3, [pc, #608]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ea:	f003 0301 	and.w	r3, r3, #1
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011f2:	4b95      	ldr	r3, [pc, #596]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	4a94      	ldr	r2, [pc, #592]	; (8001448 <MX_GPIO_Init+0x2e4>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6313      	str	r3, [r2, #48]	; 0x30
 80011fe:	4b92      	ldr	r3, [pc, #584]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60fb      	str	r3, [r7, #12]
 8001208:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800120a:	4b8f      	ldr	r3, [pc, #572]	; (8001448 <MX_GPIO_Init+0x2e4>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	4a8e      	ldr	r2, [pc, #568]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	6313      	str	r3, [r2, #48]	; 0x30
 8001216:	4b8c      	ldr	r3, [pc, #560]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121a:	f003 0308 	and.w	r3, r3, #8
 800121e:	60bb      	str	r3, [r7, #8]
 8001220:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001222:	4b89      	ldr	r3, [pc, #548]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001226:	4a88      	ldr	r2, [pc, #544]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800122c:	6313      	str	r3, [r2, #48]	; 0x30
 800122e:	4b86      	ldr	r3, [pc, #536]	; (8001448 <MX_GPIO_Init+0x2e4>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001236:	607b      	str	r3, [r7, #4]
 8001238:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 800123a:	2200      	movs	r2, #0
 800123c:	f64f 5190 	movw	r1, #64912	; 0xfd90
 8001240:	4882      	ldr	r0, [pc, #520]	; (800144c <MX_GPIO_Init+0x2e8>)
 8001242:	f001 fcfd 	bl	8002c40 <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f24c 0108 	movw	r1, #49160	; 0xc008
 800124c:	4880      	ldr	r0, [pc, #512]	; (8001450 <MX_GPIO_Init+0x2ec>)
 800124e:	f001 fcf7 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001252:	2200      	movs	r2, #0
 8001254:	f244 0181 	movw	r1, #16513	; 0x4081
 8001258:	487e      	ldr	r0, [pc, #504]	; (8001454 <MX_GPIO_Init+0x2f0>)
 800125a:	f001 fcf1 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 800125e:	2200      	movs	r2, #0
 8001260:	f244 2140 	movw	r1, #16960	; 0x4240
 8001264:	487c      	ldr	r0, [pc, #496]	; (8001458 <MX_GPIO_Init+0x2f4>)
 8001266:	f001 fceb 	bl	8002c40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 800126a:	2364      	movs	r3, #100	; 0x64
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800127a:	2305      	movs	r3, #5
 800127c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800127e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001282:	4619      	mov	r1, r3
 8001284:	4871      	ldr	r0, [pc, #452]	; (800144c <MX_GPIO_Init+0x2e8>)
 8001286:	f001 fb17 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 800128a:	f642 0310 	movw	r3, #10256	; 0x2810
 800128e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	2301      	movs	r3, #1
 8001292:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	4619      	mov	r1, r3
 80012a2:	486a      	ldr	r0, [pc, #424]	; (800144c <MX_GPIO_Init+0x2e8>)
 80012a4:	f001 fb08 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80012a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012ae:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	4867      	ldr	r0, [pc, #412]	; (800145c <MX_GPIO_Init+0x2f8>)
 80012c0:	f001 fafa 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80012c4:	2308      	movs	r3, #8
 80012c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c8:	2301      	movs	r3, #1
 80012ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012cc:	2300      	movs	r3, #0
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2302      	movs	r3, #2
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012d8:	4619      	mov	r1, r3
 80012da:	485d      	ldr	r0, [pc, #372]	; (8001450 <MX_GPIO_Init+0x2ec>)
 80012dc:	f001 faec 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80012e0:	2320      	movs	r3, #32
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012e4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012f2:	4619      	mov	r1, r3
 80012f4:	4856      	ldr	r0, [pc, #344]	; (8001450 <MX_GPIO_Init+0x2ec>)
 80012f6:	f001 fadf 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 80012fa:	2301      	movs	r3, #1
 80012fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012fe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001302:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001304:	2301      	movs	r3, #1
 8001306:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001308:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800130c:	4619      	mov	r1, r3
 800130e:	4853      	ldr	r0, [pc, #332]	; (800145c <MX_GPIO_Init+0x2f8>)
 8001310:	f001 fad2 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001314:	2332      	movs	r3, #50	; 0x32
 8001316:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001324:	230b      	movs	r3, #11
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800132c:	4619      	mov	r1, r3
 800132e:	484b      	ldr	r0, [pc, #300]	; (800145c <MX_GPIO_Init+0x2f8>)
 8001330:	f001 fac2 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 8001334:	2304      	movs	r3, #4
 8001336:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001338:	2303      	movs	r3, #3
 800133a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4845      	ldr	r0, [pc, #276]	; (800145c <MX_GPIO_Init+0x2f8>)
 8001348:	f001 fab6 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 800134c:	2308      	movs	r3, #8
 800134e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001350:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001356:	2302      	movs	r3, #2
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800135e:	4619      	mov	r1, r3
 8001360:	483e      	ldr	r0, [pc, #248]	; (800145c <MX_GPIO_Init+0x2f8>)
 8001362:	f001 faa9 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001366:	2386      	movs	r3, #134	; 0x86
 8001368:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800136a:	2302      	movs	r3, #2
 800136c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136e:	2300      	movs	r3, #0
 8001370:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001372:	2303      	movs	r3, #3
 8001374:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001376:	230b      	movs	r3, #11
 8001378:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4837      	ldr	r0, [pc, #220]	; (8001460 <MX_GPIO_Init+0x2fc>)
 8001382:	f001 fa99 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001386:	2308      	movs	r3, #8
 8001388:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001392:	2300      	movs	r3, #0
 8001394:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001396:	2302      	movs	r3, #2
 8001398:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800139e:	4619      	mov	r1, r3
 80013a0:	482f      	ldr	r0, [pc, #188]	; (8001460 <MX_GPIO_Init+0x2fc>)
 80013a2:	f001 fa89 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 80013a6:	2320      	movs	r3, #32
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013aa:	2302      	movs	r3, #2
 80013ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013b6:	2301      	movs	r3, #1
 80013b8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 80013ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013be:	4619      	mov	r1, r3
 80013c0:	4827      	ldr	r0, [pc, #156]	; (8001460 <MX_GPIO_Init+0x2fc>)
 80013c2:	f001 fa79 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80013c6:	2340      	movs	r3, #64	; 0x40
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d6:	2302      	movs	r3, #2
 80013d8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013de:	4619      	mov	r1, r3
 80013e0:	481f      	ldr	r0, [pc, #124]	; (8001460 <MX_GPIO_Init+0x2fc>)
 80013e2:	f001 fa69 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80013e6:	f244 0381 	movw	r3, #16513	; 0x4081
 80013ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ec:	2301      	movs	r3, #1
 80013ee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80013fc:	4619      	mov	r1, r3
 80013fe:	4815      	ldr	r0, [pc, #84]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001400:	f001 fa5a 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 8001404:	2302      	movs	r3, #2
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001408:	2303      	movs	r3, #3
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 8001410:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001414:	4619      	mov	r1, r3
 8001416:	480f      	ldr	r0, [pc, #60]	; (8001454 <MX_GPIO_Init+0x2f0>)
 8001418:	f001 fa4e 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_4_Pin;
 800141c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001422:	2301      	movs	r3, #1
 8001424:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800142e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001432:	4619      	mov	r1, r3
 8001434:	4806      	ldr	r0, [pc, #24]	; (8001450 <MX_GPIO_Init+0x2ec>)
 8001436:	f001 fa3f 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 800143a:	f24d 5380 	movw	r3, #54656	; 0xd580
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001440:	2311      	movs	r3, #17
 8001442:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001444:	2301      	movs	r3, #1
 8001446:	e00d      	b.n	8001464 <MX_GPIO_Init+0x300>
 8001448:	40023800 	.word	0x40023800
 800144c:	40021000 	.word	0x40021000
 8001450:	40021400 	.word	0x40021400
 8001454:	40020400 	.word	0x40020400
 8001458:	40021800 	.word	0x40021800
 800145c:	40020800 	.word	0x40020800
 8001460:	40020000 	.word	0x40020000
 8001464:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2300      	movs	r3, #0
 8001468:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800146a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146e:	4619      	mov	r1, r3
 8001470:	4850      	ldr	r0, [pc, #320]	; (80015b4 <MX_GPIO_Init+0x450>)
 8001472:	f001 fa21 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 8001476:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800147a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147c:	2302      	movs	r3, #2
 800147e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001484:	2300      	movs	r3, #0
 8001486:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001488:	2301      	movs	r3, #1
 800148a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800148c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001490:	4619      	mov	r1, r3
 8001492:	4849      	ldr	r0, [pc, #292]	; (80015b8 <MX_GPIO_Init+0x454>)
 8001494:	f001 fa10 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001498:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014aa:	230b      	movs	r3, #11
 80014ac:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80014ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014b2:	4619      	mov	r1, r3
 80014b4:	4840      	ldr	r0, [pc, #256]	; (80015b8 <MX_GPIO_Init+0x454>)
 80014b6:	f001 f9ff 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 80014ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c0:	2302      	movs	r3, #2
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c4:	2300      	movs	r3, #0
 80014c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c8:	2300      	movs	r3, #0
 80014ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014cc:	2302      	movs	r3, #2
 80014ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 80014d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014d4:	4619      	mov	r1, r3
 80014d6:	4839      	ldr	r0, [pc, #228]	; (80015bc <MX_GPIO_Init+0x458>)
 80014d8:	f001 f9ee 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014dc:	2340      	movs	r3, #64	; 0x40
 80014de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014e0:	2301      	movs	r3, #1
 80014e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014e8:	2300      	movs	r3, #0
 80014ea:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	4833      	ldr	r0, [pc, #204]	; (80015c0 <MX_GPIO_Init+0x45c>)
 80014f4:	f001 f9e0 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014f8:	2380      	movs	r3, #128	; 0x80
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014fc:	2300      	movs	r3, #0
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001508:	4619      	mov	r1, r3
 800150a:	482d      	ldr	r0, [pc, #180]	; (80015c0 <MX_GPIO_Init+0x45c>)
 800150c:	f001 f9d4 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001510:	2380      	movs	r3, #128	; 0x80
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001514:	2302      	movs	r3, #2
 8001516:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001518:	2300      	movs	r3, #0
 800151a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151c:	2300      	movs	r3, #0
 800151e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001520:	2302      	movs	r3, #2
 8001522:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001524:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001528:	4619      	mov	r1, r3
 800152a:	4826      	ldr	r0, [pc, #152]	; (80015c4 <MX_GPIO_Init+0x460>)
 800152c:	f001 f9c4 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001530:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001536:	2302      	movs	r3, #2
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153a:	2300      	movs	r3, #0
 800153c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800153e:	2303      	movs	r3, #3
 8001540:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001542:	230a      	movs	r3, #10
 8001544:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001546:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800154a:	4619      	mov	r1, r3
 800154c:	481e      	ldr	r0, [pc, #120]	; (80015c8 <MX_GPIO_Init+0x464>)
 800154e:	f001 f9b3 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001552:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001558:	2300      	movs	r3, #0
 800155a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155c:	2300      	movs	r3, #0
 800155e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001560:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001564:	4619      	mov	r1, r3
 8001566:	4818      	ldr	r0, [pc, #96]	; (80015c8 <MX_GPIO_Init+0x464>)
 8001568:	f001 f9a6 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 800156c:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8001570:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8001572:	2311      	movs	r3, #17
 8001574:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001576:	2301      	movs	r3, #1
 8001578:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157a:	2300      	movs	r3, #0
 800157c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800157e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001582:	4619      	mov	r1, r3
 8001584:	480e      	ldr	r0, [pc, #56]	; (80015c0 <MX_GPIO_Init+0x45c>)
 8001586:	f001 f997 	bl	80028b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800158a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800158e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001590:	2302      	movs	r3, #2
 8001592:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001598:	2303      	movs	r3, #3
 800159a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800159c:	230b      	movs	r3, #11
 800159e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015a4:	4619      	mov	r1, r3
 80015a6:	4806      	ldr	r0, [pc, #24]	; (80015c0 <MX_GPIO_Init+0x45c>)
 80015a8:	f001 f986 	bl	80028b8 <HAL_GPIO_Init>

}
 80015ac:	bf00      	nop
 80015ae:	3738      	adds	r7, #56	; 0x38
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40020400 	.word	0x40020400
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021800 	.word	0x40021800
 80015c4:	40020800 	.word	0x40020800
 80015c8:	40020000 	.word	0x40020000

080015cc <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80015d0:	4b1b      	ldr	r3, [pc, #108]	; (8001640 <MX_I2C1_Init+0x74>)
 80015d2:	4a1c      	ldr	r2, [pc, #112]	; (8001644 <MX_I2C1_Init+0x78>)
 80015d4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80015d6:	4b1a      	ldr	r3, [pc, #104]	; (8001640 <MX_I2C1_Init+0x74>)
 80015d8:	4a1b      	ldr	r2, [pc, #108]	; (8001648 <MX_I2C1_Init+0x7c>)
 80015da:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80015dc:	4b18      	ldr	r3, [pc, #96]	; (8001640 <MX_I2C1_Init+0x74>)
 80015de:	2200      	movs	r2, #0
 80015e0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80015e2:	4b17      	ldr	r3, [pc, #92]	; (8001640 <MX_I2C1_Init+0x74>)
 80015e4:	2201      	movs	r2, #1
 80015e6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80015e8:	4b15      	ldr	r3, [pc, #84]	; (8001640 <MX_I2C1_Init+0x74>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80015ee:	4b14      	ldr	r3, [pc, #80]	; (8001640 <MX_I2C1_Init+0x74>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80015f4:	4b12      	ldr	r3, [pc, #72]	; (8001640 <MX_I2C1_Init+0x74>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80015fa:	4b11      	ldr	r3, [pc, #68]	; (8001640 <MX_I2C1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001600:	4b0f      	ldr	r3, [pc, #60]	; (8001640 <MX_I2C1_Init+0x74>)
 8001602:	2200      	movs	r2, #0
 8001604:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001606:	480e      	ldr	r0, [pc, #56]	; (8001640 <MX_I2C1_Init+0x74>)
 8001608:	f001 fb34 	bl	8002c74 <HAL_I2C_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001612:	f000 f9af 	bl	8001974 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001616:	2100      	movs	r1, #0
 8001618:	4809      	ldr	r0, [pc, #36]	; (8001640 <MX_I2C1_Init+0x74>)
 800161a:	f001 fbbb 	bl	8002d94 <HAL_I2CEx_ConfigAnalogFilter>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001624:	f000 f9a6 	bl	8001974 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001628:	2100      	movs	r1, #0
 800162a:	4805      	ldr	r0, [pc, #20]	; (8001640 <MX_I2C1_Init+0x74>)
 800162c:	f001 fbfd 	bl	8002e2a <HAL_I2CEx_ConfigDigitalFilter>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001636:	f000 f99d 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	20000124 	.word	0x20000124
 8001644:	40005400 	.word	0x40005400
 8001648:	20404768 	.word	0x20404768

0800164c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b0aa      	sub	sp, #168	; 0xa8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001654:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]
 8001660:	60da      	str	r2, [r3, #12]
 8001662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001664:	f107 0310 	add.w	r3, r7, #16
 8001668:	2284      	movs	r2, #132	; 0x84
 800166a:	2100      	movs	r1, #0
 800166c:	4618      	mov	r0, r3
 800166e:	f003 fd1d 	bl	80050ac <memset>
  if(i2cHandle->Instance==I2C1)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <HAL_I2C_MspInit+0xb4>)
 8001678:	4293      	cmp	r3, r2
 800167a:	d13c      	bne.n	80016f6 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800167c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001680:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001682:	2300      	movs	r3, #0
 8001684:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001686:	f107 0310 	add.w	r3, r7, #16
 800168a:	4618      	mov	r0, r3
 800168c:	f002 f944 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8001690:	4603      	mov	r3, r0
 8001692:	2b00      	cmp	r3, #0
 8001694:	d001      	beq.n	800169a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001696:	f000 f96d 	bl	8001974 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169a:	4b1a      	ldr	r3, [pc, #104]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 800169c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800169e:	4a19      	ldr	r2, [pc, #100]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016a0:	f043 0302 	orr.w	r3, r3, #2
 80016a4:	6313      	str	r3, [r2, #48]	; 0x30
 80016a6:	4b17      	ldr	r3, [pc, #92]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	60fb      	str	r3, [r7, #12]
 80016b0:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 80016b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016ba:	2312      	movs	r3, #18
 80016bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c0:	2300      	movs	r3, #0
 80016c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016c6:	2303      	movs	r3, #3
 80016c8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016cc:	2304      	movs	r3, #4
 80016ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016d2:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80016d6:	4619      	mov	r1, r3
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <HAL_I2C_MspInit+0xbc>)
 80016da:	f001 f8ed 	bl	80028b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016de:	4b09      	ldr	r3, [pc, #36]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	4a08      	ldr	r2, [pc, #32]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016e4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80016e8:	6413      	str	r3, [r2, #64]	; 0x40
 80016ea:	4b06      	ldr	r3, [pc, #24]	; (8001704 <HAL_I2C_MspInit+0xb8>)
 80016ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016f2:	60bb      	str	r3, [r7, #8]
 80016f4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80016f6:	bf00      	nop
 80016f8:	37a8      	adds	r7, #168	; 0xa8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40005400 	.word	0x40005400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020400 	.word	0x40020400

0800170c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  if(htim == &htim6)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a05      	ldr	r2, [pc, #20]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d102      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    DISP_ROUTINE(&hdisp1);
 800171c:	4804      	ldr	r0, [pc, #16]	; (8001730 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800171e:	f7ff fc0d 	bl	8000f3c <DISP_ROUTINE>
  }
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000178 	.word	0x20000178
 8001730:	20000018 	.word	0x20000018
 8001734:	00000000 	.word	0x00000000

08001738 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800173c:	f000 fae9 	bl	8001d12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001740:	f000 f8aa 	bl	8001898 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001744:	f7ff fd0e 	bl	8001164 <MX_GPIO_Init>
  MX_DMA_Init();
 8001748:	f7ff fce6 	bl	8001118 <MX_DMA_Init>
  MX_USART3_UART_Init();
 800174c:	f000 f9f6 	bl	8001b3c <MX_USART3_UART_Init>
  MX_TIM6_Init();
 8001750:	f000 f998 	bl	8001a84 <MX_TIM6_Init>
  MX_I2C1_Init();
 8001754:	f7ff ff3a 	bl	80015cc <MX_I2C1_Init>
  MX_DAC_Init();
 8001758:	f7ff fc38 	bl	8000fcc <MX_DAC_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800175c:	2100      	movs	r1, #0
 800175e:	4844      	ldr	r0, [pc, #272]	; (8001870 <main+0x138>)
 8001760:	f000 fc8b 	bl	800207a <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim6);
 8001764:	4843      	ldr	r0, [pc, #268]	; (8001874 <main+0x13c>)
 8001766:	f002 fd1f 	bl	80041a8 <HAL_TIM_Base_Start_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(BTN_DIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE)
 800176a:	4843      	ldr	r0, [pc, #268]	; (8001878 <main+0x140>)
 800176c:	f7ff fad4 	bl	8000d18 <BTN_DIO_EdgeDetected>
 8001770:	4603      	mov	r3, r0
 8001772:	2b01      	cmp	r3, #1
 8001774:	d114      	bne.n	80017a0 <main+0x68>
      output_mv = (output_mv <= 0.0f) ? (0.0f) : (output_mv - 100.0f);
 8001776:	4b41      	ldr	r3, [pc, #260]	; (800187c <main+0x144>)
 8001778:	edd3 7a00 	vldr	s15, [r3]
 800177c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001784:	d802      	bhi.n	800178c <main+0x54>
 8001786:	eddf 7a3e 	vldr	s15, [pc, #248]	; 8001880 <main+0x148>
 800178a:	e006      	b.n	800179a <main+0x62>
 800178c:	4b3b      	ldr	r3, [pc, #236]	; (800187c <main+0x144>)
 800178e:	edd3 7a00 	vldr	s15, [r3]
 8001792:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001884 <main+0x14c>
 8001796:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800179a:	4b38      	ldr	r3, [pc, #224]	; (800187c <main+0x144>)
 800179c:	edc3 7a00 	vstr	s15, [r3]

    if(BTN_DIO_EdgeDetected(&hbtn2) == BTN_PRESSED_EDGE)
 80017a0:	4839      	ldr	r0, [pc, #228]	; (8001888 <main+0x150>)
 80017a2:	f7ff fab9 	bl	8000d18 <BTN_DIO_EdgeDetected>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d116      	bne.n	80017da <main+0xa2>
      output_mv = (output_mv >= 3300.0f) ? (3300.0f) : (output_mv + 100.0f);
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <main+0x144>)
 80017ae:	edd3 7a00 	vldr	s15, [r3]
 80017b2:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800188c <main+0x154>
 80017b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017be:	db02      	blt.n	80017c6 <main+0x8e>
 80017c0:	eddf 7a32 	vldr	s15, [pc, #200]	; 800188c <main+0x154>
 80017c4:	e006      	b.n	80017d4 <main+0x9c>
 80017c6:	4b2d      	ldr	r3, [pc, #180]	; (800187c <main+0x144>)
 80017c8:	edd3 7a00 	vldr	s15, [r3]
 80017cc:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001884 <main+0x14c>
 80017d0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <main+0x144>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]

    DISP_printDecUInt(&hdisp1, (unsigned int)output_mv);
 80017da:	4b28      	ldr	r3, [pc, #160]	; (800187c <main+0x144>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017e4:	ee17 3a90 	vmov	r3, s15
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4619      	mov	r1, r3
 80017ec:	4828      	ldr	r0, [pc, #160]	; (8001890 <main+0x158>)
 80017ee:	f7ff fb6f 	bl	8000ed0 <DISP_printDecUInt>
    HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, DAC_VOLTAGE2REG(output_mv));
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <main+0x144>)
 80017f4:	edd3 7a00 	vldr	s15, [r3]
 80017f8:	ed9f 7a26 	vldr	s14, [pc, #152]	; 8001894 <main+0x15c>
 80017fc:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001800:	ee16 0a90 	vmov	r0, s13
 8001804:	f7fe fe64 	bl	80004d0 <__aeabi_f2d>
 8001808:	a315      	add	r3, pc, #84	; (adr r3, 8001860 <main+0x128>)
 800180a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180e:	f7fe ffe1 	bl	80007d4 <__aeabi_ddiv>
 8001812:	4602      	mov	r2, r0
 8001814:	460b      	mov	r3, r1
 8001816:	4610      	mov	r0, r2
 8001818:	4619      	mov	r1, r3
 800181a:	a313      	add	r3, pc, #76	; (adr r3, 8001868 <main+0x130>)
 800181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001820:	f7fe feae 	bl	8000580 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4610      	mov	r0, r2
 800182a:	4619      	mov	r1, r3
 800182c:	f04f 0200 	mov.w	r2, #0
 8001830:	f04f 0300 	mov.w	r3, #0
 8001834:	f7fe fcee 	bl	8000214 <__adddf3>
 8001838:	4602      	mov	r2, r0
 800183a:	460b      	mov	r3, r1
 800183c:	4610      	mov	r0, r2
 800183e:	4619      	mov	r1, r3
 8001840:	f7ff f8b0 	bl	80009a4 <__aeabi_d2uiz>
 8001844:	4603      	mov	r3, r0
 8001846:	b29b      	uxth	r3, r3
 8001848:	2200      	movs	r2, #0
 800184a:	2100      	movs	r1, #0
 800184c:	4808      	ldr	r0, [pc, #32]	; (8001870 <main+0x138>)
 800184e:	f000 fcc0 	bl	80021d2 <HAL_DAC_SetValue>

    HAL_Delay(10);
 8001852:	200a      	movs	r0, #10
 8001854:	f000 faba 	bl	8001dcc <HAL_Delay>
    if(BTN_DIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE)
 8001858:	e787      	b.n	800176a <main+0x32>
 800185a:	bf00      	nop
 800185c:	f3af 8000 	nop.w
 8001860:	60000000 	.word	0x60000000
 8001864:	400a6666 	.word	0x400a6666
 8001868:	00000000 	.word	0x00000000
 800186c:	40affe00 	.word	0x40affe00
 8001870:	200000b0 	.word	0x200000b0
 8001874:	20000178 	.word	0x20000178
 8001878:	20000000 	.word	0x20000000
 800187c:	20000080 	.word	0x20000080
 8001880:	00000000 	.word	0x00000000
 8001884:	42c80000 	.word	0x42c80000
 8001888:	2000000c 	.word	0x2000000c
 800188c:	454e4000 	.word	0x454e4000
 8001890:	20000018 	.word	0x20000018
 8001894:	447a0000 	.word	0x447a0000

08001898 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b094      	sub	sp, #80	; 0x50
 800189c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800189e:	f107 0320 	add.w	r3, r7, #32
 80018a2:	2230      	movs	r2, #48	; 0x30
 80018a4:	2100      	movs	r1, #0
 80018a6:	4618      	mov	r0, r3
 80018a8:	f003 fc00 	bl	80050ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018ac:	f107 030c 	add.w	r3, r7, #12
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80018bc:	f001 fb02 	bl	8002ec4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <SystemClock_Config+0xd4>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c4:	4a29      	ldr	r2, [pc, #164]	; (800196c <SystemClock_Config+0xd4>)
 80018c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018ca:	6413      	str	r3, [r2, #64]	; 0x40
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <SystemClock_Config+0xd4>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018d8:	4b25      	ldr	r3, [pc, #148]	; (8001970 <SystemClock_Config+0xd8>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a24      	ldr	r2, [pc, #144]	; (8001970 <SystemClock_Config+0xd8>)
 80018de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b22      	ldr	r3, [pc, #136]	; (8001970 <SystemClock_Config+0xd8>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018f0:	2301      	movs	r3, #1
 80018f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018f4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018fa:	2302      	movs	r3, #2
 80018fc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018fe:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001902:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001904:	2304      	movs	r3, #4
 8001906:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001908:	23d8      	movs	r3, #216	; 0xd8
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800190c:	2302      	movs	r3, #2
 800190e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001910:	2303      	movs	r3, #3
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001914:	f107 0320 	add.w	r3, r7, #32
 8001918:	4618      	mov	r0, r3
 800191a:	f001 fb33 	bl	8002f84 <HAL_RCC_OscConfig>
 800191e:	4603      	mov	r3, r0
 8001920:	2b00      	cmp	r3, #0
 8001922:	d001      	beq.n	8001928 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001924:	f000 f826 	bl	8001974 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001928:	f001 fadc 	bl	8002ee4 <HAL_PWREx_EnableOverDrive>
 800192c:	4603      	mov	r3, r0
 800192e:	2b00      	cmp	r3, #0
 8001930:	d001      	beq.n	8001936 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001932:	f000 f81f 	bl	8001974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001936:	230f      	movs	r3, #15
 8001938:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193a:	2302      	movs	r3, #2
 800193c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800193e:	2300      	movs	r3, #0
 8001940:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001942:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001946:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8001948:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800194c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800194e:	f107 030c 	add.w	r3, r7, #12
 8001952:	2107      	movs	r1, #7
 8001954:	4618      	mov	r0, r3
 8001956:	f001 fdb9 	bl	80034cc <HAL_RCC_ClockConfig>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001960:	f000 f808 	bl	8001974 <Error_Handler>
  }
}
 8001964:	bf00      	nop
 8001966:	3750      	adds	r7, #80	; 0x50
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	40023800 	.word	0x40023800
 8001970:	40007000 	.word	0x40007000

08001974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001978:	b672      	cpsid	i
}
 800197a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800197c:	e7fe      	b.n	800197c <Error_Handler+0x8>
	...

08001980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001986:	4b0f      	ldr	r3, [pc, #60]	; (80019c4 <HAL_MspInit+0x44>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	4a0e      	ldr	r2, [pc, #56]	; (80019c4 <HAL_MspInit+0x44>)
 800198c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001990:	6413      	str	r3, [r2, #64]	; 0x40
 8001992:	4b0c      	ldr	r3, [pc, #48]	; (80019c4 <HAL_MspInit+0x44>)
 8001994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800199a:	607b      	str	r3, [r7, #4]
 800199c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199e:	4b09      	ldr	r3, [pc, #36]	; (80019c4 <HAL_MspInit+0x44>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a08      	ldr	r2, [pc, #32]	; (80019c4 <HAL_MspInit+0x44>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <HAL_MspInit+0x44>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	603b      	str	r3, [r7, #0]
 80019b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019b6:	bf00      	nop
 80019b8:	370c      	adds	r7, #12
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40023800 	.word	0x40023800

080019c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019cc:	e7fe      	b.n	80019cc <NMI_Handler+0x4>

080019ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d2:	e7fe      	b.n	80019d2 <HardFault_Handler+0x4>

080019d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019d8:	e7fe      	b.n	80019d8 <MemManage_Handler+0x4>

080019da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019da:	b480      	push	{r7}
 80019dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019de:	e7fe      	b.n	80019de <BusFault_Handler+0x4>

080019e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e4:	e7fe      	b.n	80019e4 <UsageFault_Handler+0x4>

080019e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019e6:	b480      	push	{r7}
 80019e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr

080019f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	b480      	push	{r7}
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a06:	bf00      	nop
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a14:	f000 f9ba 	bl	8001d8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a18:	bf00      	nop
 8001a1a:	bd80      	pop	{r7, pc}

08001a1c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8001a20:	4802      	ldr	r0, [pc, #8]	; (8001a2c <DMA1_Stream1_IRQHandler+0x10>)
 8001a22:	f000 fd0d 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001a26:	bf00      	nop
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	bf00      	nop
 8001a2c:	2000024c 	.word	0x2000024c

08001a30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001a34:	4802      	ldr	r0, [pc, #8]	; (8001a40 <DMA1_Stream5_IRQHandler+0x10>)
 8001a36:	f000 fd03 	bl	8002440 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	200000c4 	.word	0x200000c4

08001a44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8001a48:	4803      	ldr	r0, [pc, #12]	; (8001a58 <TIM6_DAC_IRQHandler+0x14>)
 8001a4a:	f000 fb68 	bl	800211e <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8001a4e:	4803      	ldr	r0, [pc, #12]	; (8001a5c <TIM6_DAC_IRQHandler+0x18>)
 8001a50:	f002 fc22 	bl	8004298 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a54:	bf00      	nop
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200000b0 	.word	0x200000b0
 8001a5c:	20000178 	.word	0x20000178

08001a60 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4b06      	ldr	r3, [pc, #24]	; (8001a80 <SystemInit+0x20>)
 8001a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a6a:	4a05      	ldr	r2, [pc, #20]	; (8001a80 <SystemInit+0x20>)
 8001a6c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a70:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000ed00 	.word	0xe000ed00

08001a84 <MX_TIM6_Init>:

TIM_HandleTypeDef htim6;

/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b084      	sub	sp, #16
 8001a88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a8a:	1d3b      	adds	r3, r7, #4
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	601a      	str	r2, [r3, #0]
 8001a90:	605a      	str	r2, [r3, #4]
 8001a92:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001a94:	4b14      	ldr	r3, [pc, #80]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <MX_TIM6_Init+0x68>)
 8001a98:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8001a9a:	4b13      	ldr	r3, [pc, #76]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001a9c:	226b      	movs	r2, #107	; 0x6b
 8001a9e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001aa0:	4b11      	ldr	r3, [pc, #68]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001aa6:	4b10      	ldr	r3, [pc, #64]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001aa8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001aac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aae:	4b0e      	ldr	r3, [pc, #56]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001ab4:	480c      	ldr	r0, [pc, #48]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001ab6:	f002 fb1f 	bl	80040f8 <HAL_TIM_Base_Init>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d001      	beq.n	8001ac4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001ac0:	f7ff ff58 	bl	8001974 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001acc:	1d3b      	adds	r3, r7, #4
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <MX_TIM6_Init+0x64>)
 8001ad2:	f002 fdc9 	bl	8004668 <HAL_TIMEx_MasterConfigSynchronization>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001adc:	f7ff ff4a 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ae0:	bf00      	nop
 8001ae2:	3710      	adds	r7, #16
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	20000178 	.word	0x20000178
 8001aec:	40001000 	.word	0x40001000

08001af0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	4a0d      	ldr	r2, [pc, #52]	; (8001b34 <HAL_TIM_Base_MspInit+0x44>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d113      	bne.n	8001b2a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b02:	4b0d      	ldr	r3, [pc, #52]	; (8001b38 <HAL_TIM_Base_MspInit+0x48>)
 8001b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b06:	4a0c      	ldr	r2, [pc, #48]	; (8001b38 <HAL_TIM_Base_MspInit+0x48>)
 8001b08:	f043 0310 	orr.w	r3, r3, #16
 8001b0c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <HAL_TIM_Base_MspInit+0x48>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b12:	f003 0310 	and.w	r3, r3, #16
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	2100      	movs	r1, #0
 8001b1e:	2036      	movs	r0, #54	; 0x36
 8001b20:	f000 fa53 	bl	8001fca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b24:	2036      	movs	r0, #54	; 0x36
 8001b26:	f000 fa6c 	bl	8002002 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	3710      	adds	r7, #16
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	40001000 	.word	0x40001000
 8001b38:	40023800 	.word	0x40023800

08001b3c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b40:	4b14      	ldr	r3, [pc, #80]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b42:	4a15      	ldr	r2, [pc, #84]	; (8001b98 <MX_USART3_UART_Init+0x5c>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b46:	4b13      	ldr	r3, [pc, #76]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b11      	ldr	r3, [pc, #68]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0f      	ldr	r3, [pc, #60]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0e      	ldr	r3, [pc, #56]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b0c      	ldr	r3, [pc, #48]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b0b      	ldr	r3, [pc, #44]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b72:	4b08      	ldr	r3, [pc, #32]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b78:	4b06      	ldr	r3, [pc, #24]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7e:	4805      	ldr	r0, [pc, #20]	; (8001b94 <MX_USART3_UART_Init+0x58>)
 8001b80:	f002 fe1e 	bl	80047c0 <HAL_UART_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b8a:	f7ff fef3 	bl	8001974 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8e:	bf00      	nop
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	200001c4 	.word	0x200001c4
 8001b98:	40004800 	.word	0x40004800

08001b9c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	b0aa      	sub	sp, #168	; 0xa8
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]
 8001bac:	605a      	str	r2, [r3, #4]
 8001bae:	609a      	str	r2, [r3, #8]
 8001bb0:	60da      	str	r2, [r3, #12]
 8001bb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bb4:	f107 0310 	add.w	r3, r7, #16
 8001bb8:	2284      	movs	r2, #132	; 0x84
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f003 fa75 	bl	80050ac <memset>
  if(uartHandle->Instance==USART3)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a39      	ldr	r2, [pc, #228]	; (8001cac <HAL_UART_MspInit+0x110>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d16a      	bne.n	8001ca2 <HAL_UART_MspInit+0x106>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001bcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001bd0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001bd2:	2310      	movs	r3, #16
 8001bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001bd6:	f107 0310 	add.w	r3, r7, #16
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f001 fe9c 	bl	8003918 <HAL_RCCEx_PeriphCLKConfig>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001be6:	f7ff fec5 	bl	8001974 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001bea:	4b31      	ldr	r3, [pc, #196]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a30      	ldr	r2, [pc, #192]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001bf0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b2e      	ldr	r3, [pc, #184]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c02:	4b2b      	ldr	r3, [pc, #172]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2a      	ldr	r2, [pc, #168]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001c08:	f043 0308 	orr.w	r3, r3, #8
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b28      	ldr	r3, [pc, #160]	; (8001cb0 <HAL_UART_MspInit+0x114>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	60bb      	str	r3, [r7, #8]
 8001c18:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c1a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c1e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c22:	2302      	movs	r3, #2
 8001c24:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c34:	2307      	movs	r3, #7
 8001c36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c3a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001c3e:	4619      	mov	r1, r3
 8001c40:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <HAL_UART_MspInit+0x118>)
 8001c42:	f000 fe39 	bl	80028b8 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8001c46:	4b1c      	ldr	r3, [pc, #112]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c48:	4a1c      	ldr	r2, [pc, #112]	; (8001cbc <HAL_UART_MspInit+0x120>)
 8001c4a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001c4c:	4b1a      	ldr	r3, [pc, #104]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c4e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001c52:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c54:	4b18      	ldr	r3, [pc, #96]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c60:	4b15      	ldr	r3, [pc, #84]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c62:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c66:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001c68:	4b13      	ldr	r3, [pc, #76]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001c6e:	4b12      	ldr	r3, [pc, #72]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8001c74:	4b10      	ldr	r3, [pc, #64]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c7a:	4b0f      	ldr	r3, [pc, #60]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c80:	4b0d      	ldr	r3, [pc, #52]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8001c86:	480c      	ldr	r0, [pc, #48]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c88:	f000 fb2c 	bl	80022e4 <HAL_DMA_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <HAL_UART_MspInit+0xfa>
    {
      Error_Handler();
 8001c92:	f7ff fe6f 	bl	8001974 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a07      	ldr	r2, [pc, #28]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c9a:	675a      	str	r2, [r3, #116]	; 0x74
 8001c9c:	4a06      	ldr	r2, [pc, #24]	; (8001cb8 <HAL_UART_MspInit+0x11c>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	37a8      	adds	r7, #168	; 0xa8
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
 8001caa:	bf00      	nop
 8001cac:	40004800 	.word	0x40004800
 8001cb0:	40023800 	.word	0x40023800
 8001cb4:	40020c00 	.word	0x40020c00
 8001cb8:	2000024c 	.word	0x2000024c
 8001cbc:	40026028 	.word	0x40026028

08001cc0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001cc0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cf8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001cc4:	480d      	ldr	r0, [pc, #52]	; (8001cfc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001cc6:	490e      	ldr	r1, [pc, #56]	; (8001d00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001cc8:	4a0e      	ldr	r2, [pc, #56]	; (8001d04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001cca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ccc:	e002      	b.n	8001cd4 <LoopCopyDataInit>

08001cce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001cce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001cd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001cd2:	3304      	adds	r3, #4

08001cd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001cd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001cd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001cd8:	d3f9      	bcc.n	8001cce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001cda:	4a0b      	ldr	r2, [pc, #44]	; (8001d08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001cdc:	4c0b      	ldr	r4, [pc, #44]	; (8001d0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001cde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ce0:	e001      	b.n	8001ce6 <LoopFillZerobss>

08001ce2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ce2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ce4:	3204      	adds	r2, #4

08001ce6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ce6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ce8:	d3fb      	bcc.n	8001ce2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001cea:	f7ff feb9 	bl	8001a60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cee:	f003 f9b9 	bl	8005064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cf2:	f7ff fd21 	bl	8001738 <main>
  bx  lr    
 8001cf6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001cf8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001cfc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d00:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001d04:	08005110 	.word	0x08005110
  ldr r2, =_sbss
 8001d08:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001d0c:	200002b0 	.word	0x200002b0

08001d10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d10:	e7fe      	b.n	8001d10 <ADC_IRQHandler>

08001d12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d12:	b580      	push	{r7, lr}
 8001d14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d16:	2003      	movs	r0, #3
 8001d18:	f000 f94c 	bl	8001fb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d1c:	2000      	movs	r0, #0
 8001d1e:	f000 f805 	bl	8001d2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d22:	f7ff fe2d 	bl	8001980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001d34:	4b12      	ldr	r3, [pc, #72]	; (8001d80 <HAL_InitTick+0x54>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <HAL_InitTick+0x58>)
 8001d3a:	781b      	ldrb	r3, [r3, #0]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001d42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f000 f967 	bl	800201e <HAL_SYSTICK_Config>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e00e      	b.n	8001d78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2b0f      	cmp	r3, #15
 8001d5e:	d80a      	bhi.n	8001d76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d60:	2200      	movs	r2, #0
 8001d62:	6879      	ldr	r1, [r7, #4]
 8001d64:	f04f 30ff 	mov.w	r0, #4294967295
 8001d68:	f000 f92f 	bl	8001fca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d6c:	4a06      	ldr	r2, [pc, #24]	; (8001d88 <HAL_InitTick+0x5c>)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d72:	2300      	movs	r3, #0
 8001d74:	e000      	b.n	8001d78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	3708      	adds	r7, #8
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	20000084 	.word	0x20000084
 8001d84:	2000008c 	.word	0x2000008c
 8001d88:	20000088 	.word	0x20000088

08001d8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d90:	4b06      	ldr	r3, [pc, #24]	; (8001dac <HAL_IncTick+0x20>)
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	461a      	mov	r2, r3
 8001d96:	4b06      	ldr	r3, [pc, #24]	; (8001db0 <HAL_IncTick+0x24>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	4a04      	ldr	r2, [pc, #16]	; (8001db0 <HAL_IncTick+0x24>)
 8001d9e:	6013      	str	r3, [r2, #0]
}
 8001da0:	bf00      	nop
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr
 8001daa:	bf00      	nop
 8001dac:	2000008c 	.word	0x2000008c
 8001db0:	200002ac 	.word	0x200002ac

08001db4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return uwTick;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_GetTick+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	200002ac 	.word	0x200002ac

08001dcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b084      	sub	sp, #16
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001dd4:	f7ff ffee 	bl	8001db4 <HAL_GetTick>
 8001dd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001de4:	d005      	beq.n	8001df2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001de6:	4b0a      	ldr	r3, [pc, #40]	; (8001e10 <HAL_Delay+0x44>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	461a      	mov	r2, r3
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	4413      	add	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001df2:	bf00      	nop
 8001df4:	f7ff ffde 	bl	8001db4 <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	68fa      	ldr	r2, [r7, #12]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d8f7      	bhi.n	8001df4 <HAL_Delay+0x28>
  {
  }
}
 8001e04:	bf00      	nop
 8001e06:	bf00      	nop
 8001e08:	3710      	adds	r7, #16
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000008c 	.word	0x2000008c

08001e14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f003 0307 	and.w	r3, r3, #7
 8001e22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <__NVIC_SetPriorityGrouping+0x40>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e2a:	68ba      	ldr	r2, [r7, #8]
 8001e2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e30:	4013      	ands	r3, r2
 8001e32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e38:	68bb      	ldr	r3, [r7, #8]
 8001e3a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <__NVIC_SetPriorityGrouping+0x44>)
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e42:	4a04      	ldr	r2, [pc, #16]	; (8001e54 <__NVIC_SetPriorityGrouping+0x40>)
 8001e44:	68bb      	ldr	r3, [r7, #8]
 8001e46:	60d3      	str	r3, [r2, #12]
}
 8001e48:	bf00      	nop
 8001e4a:	3714      	adds	r7, #20
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e52:	4770      	bx	lr
 8001e54:	e000ed00 	.word	0xe000ed00
 8001e58:	05fa0000 	.word	0x05fa0000

08001e5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e60:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_GetPriorityGrouping+0x18>)
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	0a1b      	lsrs	r3, r3, #8
 8001e66:	f003 0307 	and.w	r3, r3, #7
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	4603      	mov	r3, r0
 8001e80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	db0b      	blt.n	8001ea2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 021f 	and.w	r2, r3, #31
 8001e90:	4907      	ldr	r1, [pc, #28]	; (8001eb0 <__NVIC_EnableIRQ+0x38>)
 8001e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e96:	095b      	lsrs	r3, r3, #5
 8001e98:	2001      	movs	r0, #1
 8001e9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000e100 	.word	0xe000e100

08001eb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	4603      	mov	r3, r0
 8001ebc:	6039      	str	r1, [r7, #0]
 8001ebe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	db0a      	blt.n	8001ede <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	b2da      	uxtb	r2, r3
 8001ecc:	490c      	ldr	r1, [pc, #48]	; (8001f00 <__NVIC_SetPriority+0x4c>)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	0112      	lsls	r2, r2, #4
 8001ed4:	b2d2      	uxtb	r2, r2
 8001ed6:	440b      	add	r3, r1
 8001ed8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001edc:	e00a      	b.n	8001ef4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	b2da      	uxtb	r2, r3
 8001ee2:	4908      	ldr	r1, [pc, #32]	; (8001f04 <__NVIC_SetPriority+0x50>)
 8001ee4:	79fb      	ldrb	r3, [r7, #7]
 8001ee6:	f003 030f 	and.w	r3, r3, #15
 8001eea:	3b04      	subs	r3, #4
 8001eec:	0112      	lsls	r2, r2, #4
 8001eee:	b2d2      	uxtb	r2, r2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	761a      	strb	r2, [r3, #24]
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr
 8001f00:	e000e100 	.word	0xe000e100
 8001f04:	e000ed00 	.word	0xe000ed00

08001f08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b089      	sub	sp, #36	; 0x24
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	60f8      	str	r0, [r7, #12]
 8001f10:	60b9      	str	r1, [r7, #8]
 8001f12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	f003 0307 	and.w	r3, r3, #7
 8001f1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f1c:	69fb      	ldr	r3, [r7, #28]
 8001f1e:	f1c3 0307 	rsb	r3, r3, #7
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	bf28      	it	cs
 8001f26:	2304      	movcs	r3, #4
 8001f28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	2b06      	cmp	r3, #6
 8001f30:	d902      	bls.n	8001f38 <NVIC_EncodePriority+0x30>
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	3b03      	subs	r3, #3
 8001f36:	e000      	b.n	8001f3a <NVIC_EncodePriority+0x32>
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	fa02 f303 	lsl.w	r3, r2, r3
 8001f46:	43da      	mvns	r2, r3
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	401a      	ands	r2, r3
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f50:	f04f 31ff 	mov.w	r1, #4294967295
 8001f54:	697b      	ldr	r3, [r7, #20]
 8001f56:	fa01 f303 	lsl.w	r3, r1, r3
 8001f5a:	43d9      	mvns	r1, r3
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f60:	4313      	orrs	r3, r2
         );
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3724      	adds	r7, #36	; 0x24
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f80:	d301      	bcc.n	8001f86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f82:	2301      	movs	r3, #1
 8001f84:	e00f      	b.n	8001fa6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f86:	4a0a      	ldr	r2, [pc, #40]	; (8001fb0 <SysTick_Config+0x40>)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	3b01      	subs	r3, #1
 8001f8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f8e:	210f      	movs	r1, #15
 8001f90:	f04f 30ff 	mov.w	r0, #4294967295
 8001f94:	f7ff ff8e 	bl	8001eb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f98:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <SysTick_Config+0x40>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <SysTick_Config+0x40>)
 8001fa0:	2207      	movs	r2, #7
 8001fa2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	e000e010 	.word	0xe000e010

08001fb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b082      	sub	sp, #8
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f7ff ff29 	bl	8001e14 <__NVIC_SetPriorityGrouping>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}

08001fca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001fca:	b580      	push	{r7, lr}
 8001fcc:	b086      	sub	sp, #24
 8001fce:	af00      	add	r7, sp, #0
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	60b9      	str	r1, [r7, #8]
 8001fd4:	607a      	str	r2, [r7, #4]
 8001fd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001fdc:	f7ff ff3e 	bl	8001e5c <__NVIC_GetPriorityGrouping>
 8001fe0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	68b9      	ldr	r1, [r7, #8]
 8001fe6:	6978      	ldr	r0, [r7, #20]
 8001fe8:	f7ff ff8e 	bl	8001f08 <NVIC_EncodePriority>
 8001fec:	4602      	mov	r2, r0
 8001fee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff2:	4611      	mov	r1, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7ff ff5d 	bl	8001eb4 <__NVIC_SetPriority>
}
 8001ffa:	bf00      	nop
 8001ffc:	3718      	adds	r7, #24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	b082      	sub	sp, #8
 8002006:	af00      	add	r7, sp, #0
 8002008:	4603      	mov	r3, r0
 800200a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002010:	4618      	mov	r0, r3
 8002012:	f7ff ff31 	bl	8001e78 <__NVIC_EnableIRQ>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}

0800201e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800201e:	b580      	push	{r7, lr}
 8002020:	b082      	sub	sp, #8
 8002022:	af00      	add	r7, sp, #0
 8002024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002026:	6878      	ldr	r0, [r7, #4]
 8002028:	f7ff ffa2 	bl	8001f70 <SysTick_Config>
 800202c:	4603      	mov	r3, r0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}

08002036 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002036:	b580      	push	{r7, lr}
 8002038:	b082      	sub	sp, #8
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d101      	bne.n	8002048 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e014      	b.n	8002072 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	791b      	ldrb	r3, [r3, #4]
 800204c:	b2db      	uxtb	r3, r3
 800204e:	2b00      	cmp	r3, #0
 8002050:	d105      	bne.n	800205e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	2200      	movs	r2, #0
 8002056:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7fe ffe1 	bl	8001020 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2202      	movs	r2, #2
 8002062:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2200      	movs	r2, #0
 8002068:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2201      	movs	r2, #1
 800206e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002070:	2300      	movs	r3, #0
}
 8002072:	4618      	mov	r0, r3
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800207a:	b480      	push	{r7}
 800207c:	b083      	sub	sp, #12
 800207e:	af00      	add	r7, sp, #0
 8002080:	6078      	str	r0, [r7, #4]
 8002082:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	795b      	ldrb	r3, [r3, #5]
 8002088:	2b01      	cmp	r3, #1
 800208a:	d101      	bne.n	8002090 <HAL_DAC_Start+0x16>
 800208c:	2302      	movs	r3, #2
 800208e:	e040      	b.n	8002112 <HAL_DAC_Start+0x98>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2202      	movs	r2, #2
 800209a:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	6819      	ldr	r1, [r3, #0]
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	f003 0310 	and.w	r3, r3, #16
 80020a8:	2201      	movs	r2, #1
 80020aa:	409a      	lsls	r2, r3
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	430a      	orrs	r2, r1
 80020b2:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10f      	bne.n	80020da <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80020c4:	2b3c      	cmp	r3, #60	; 0x3c
 80020c6:	d11d      	bne.n	8002104 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f042 0201 	orr.w	r2, r2, #1
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	e014      	b.n	8002104 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	f003 0310 	and.w	r3, r3, #16
 80020ea:	213c      	movs	r1, #60	; 0x3c
 80020ec:	fa01 f303 	lsl.w	r3, r1, r3
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d107      	bne.n	8002104 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	685a      	ldr	r2, [r3, #4]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f042 0202 	orr.w	r2, r2, #2
 8002102:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2201      	movs	r2, #1
 8002108:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr

0800211e <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800211e:	b580      	push	{r7, lr}
 8002120:	b082      	sub	sp, #8
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002130:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002134:	d120      	bne.n	8002178 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800213c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002144:	d118      	bne.n	8002178 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2204      	movs	r2, #4
 800214a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f043 0201 	orr.w	r2, r3, #1
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002160:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	681a      	ldr	r2, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002170:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 f852 	bl	800221c <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }


  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002182:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002186:	d120      	bne.n	80021ca <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800218e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002192:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002196:	d118      	bne.n	80021ca <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2204      	movs	r2, #4
 800219c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	f043 0202 	orr.w	r2, r3, #2
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80021c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 f882 	bl	80022ce <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

}
 80021ca:	bf00      	nop
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80021d2:	b480      	push	{r7}
 80021d4:	b087      	sub	sp, #28
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	607a      	str	r2, [r7, #4]
 80021de:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d105      	bne.n	80021fc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80021f0:	697a      	ldr	r2, [r7, #20]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	4413      	add	r3, r2
 80021f6:	3308      	adds	r3, #8
 80021f8:	617b      	str	r3, [r7, #20]
 80021fa:	e004      	b.n	8002206 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80021fc:	697a      	ldr	r2, [r7, #20]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	3314      	adds	r3, #20
 8002204:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	461a      	mov	r2, r3
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800220e:	2300      	movs	r3, #0
}
 8002210:	4618      	mov	r0, r3
 8002212:	371c      	adds	r7, #28
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002230:	b480      	push	{r7}
 8002232:	b087      	sub	sp, #28
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	795b      	ldrb	r3, [r3, #5]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d101      	bne.n	8002248 <HAL_DAC_ConfigChannel+0x18>
 8002244:	2302      	movs	r3, #2
 8002246:	e03c      	b.n	80022c2 <HAL_DAC_ConfigChannel+0x92>
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2201      	movs	r2, #1
 800224c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2202      	movs	r2, #2
 8002252:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f003 0310 	and.w	r3, r3, #16
 8002262:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	697a      	ldr	r2, [r7, #20]
 800226e:	4013      	ands	r3, r2
 8002270:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68bb      	ldr	r3, [r7, #8]
 8002278:	685b      	ldr	r3, [r3, #4]
 800227a:	4313      	orrs	r3, r2
 800227c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	f003 0310 	and.w	r3, r3, #16
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	697a      	ldr	r2, [r7, #20]
 800228c:	4313      	orrs	r3, r2
 800228e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	697a      	ldr	r2, [r7, #20]
 8002296:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	6819      	ldr	r1, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f003 0310 	and.w	r3, r3, #16
 80022a4:	22c0      	movs	r2, #192	; 0xc0
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43da      	mvns	r2, r3
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	400a      	ands	r2, r1
 80022b2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	2201      	movs	r2, #1
 80022b8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	2200      	movs	r2, #0
 80022be:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b083      	sub	sp, #12
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80022d6:	bf00      	nop
 80022d8:	370c      	adds	r7, #12
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
	...

080022e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80022ec:	2300      	movs	r3, #0
 80022ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80022f0:	f7ff fd60 	bl	8001db4 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d101      	bne.n	8002300 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e099      	b.n	8002434 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2202      	movs	r2, #2
 8002304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2200      	movs	r2, #0
 800230c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002320:	e00f      	b.n	8002342 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002322:	f7ff fd47 	bl	8001db4 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	2b05      	cmp	r3, #5
 800232e:	d908      	bls.n	8002342 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2220      	movs	r2, #32
 8002334:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2203      	movs	r2, #3
 800233a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e078      	b.n	8002434 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	f003 0301 	and.w	r3, r3, #1
 800234c:	2b00      	cmp	r3, #0
 800234e:	d1e8      	bne.n	8002322 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002358:	697a      	ldr	r2, [r7, #20]
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_DMA_Init+0x158>)
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	689b      	ldr	r3, [r3, #8]
 8002368:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800236e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	691b      	ldr	r3, [r3, #16]
 8002374:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800237a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	699b      	ldr	r3, [r3, #24]
 8002380:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002386:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002398:	2b04      	cmp	r3, #4
 800239a:	d107      	bne.n	80023ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a4:	4313      	orrs	r3, r2
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	4313      	orrs	r3, r2
 80023aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	695b      	ldr	r3, [r3, #20]
 80023ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	f023 0307 	bic.w	r3, r3, #7
 80023c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	697a      	ldr	r2, [r7, #20]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d117      	bne.n	8002406 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	4313      	orrs	r3, r2
 80023de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d00e      	beq.n	8002406 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	f000 f9e9 	bl	80027c0 <DMA_CheckFifoParam>
 80023ee:	4603      	mov	r3, r0
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2240      	movs	r2, #64	; 0x40
 80023f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002402:	2301      	movs	r3, #1
 8002404:	e016      	b.n	8002434 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f000 f9a0 	bl	8002754 <DMA_CalcBaseAndBitshift>
 8002414:	4603      	mov	r3, r0
 8002416:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800241c:	223f      	movs	r2, #63	; 0x3f
 800241e:	409a      	lsls	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2200      	movs	r2, #0
 8002428:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2201      	movs	r2, #1
 800242e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3718      	adds	r7, #24
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	f010803f 	.word	0xf010803f

08002440 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002448:	2300      	movs	r3, #0
 800244a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800244c:	4b8e      	ldr	r3, [pc, #568]	; (8002688 <HAL_DMA_IRQHandler+0x248>)
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a8e      	ldr	r2, [pc, #568]	; (800268c <HAL_DMA_IRQHandler+0x24c>)
 8002452:	fba2 2303 	umull	r2, r3, r2, r3
 8002456:	0a9b      	lsrs	r3, r3, #10
 8002458:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800246a:	2208      	movs	r2, #8
 800246c:	409a      	lsls	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	4013      	ands	r3, r2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d01a      	beq.n	80024ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0304 	and.w	r3, r3, #4
 8002480:	2b00      	cmp	r3, #0
 8002482:	d013      	beq.n	80024ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681a      	ldr	r2, [r3, #0]
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f022 0204 	bic.w	r2, r2, #4
 8002492:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002498:	2208      	movs	r2, #8
 800249a:	409a      	lsls	r2, r3
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024a4:	f043 0201 	orr.w	r2, r3, #1
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024b0:	2201      	movs	r2, #1
 80024b2:	409a      	lsls	r2, r3
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	4013      	ands	r3, r2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d012      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	695b      	ldr	r3, [r3, #20]
 80024c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00b      	beq.n	80024e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ce:	2201      	movs	r2, #1
 80024d0:	409a      	lsls	r2, r3
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024da:	f043 0202 	orr.w	r2, r3, #2
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2204      	movs	r2, #4
 80024e8:	409a      	lsls	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	4013      	ands	r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d012      	beq.n	8002518 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f003 0302 	and.w	r3, r3, #2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d00b      	beq.n	8002518 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002504:	2204      	movs	r2, #4
 8002506:	409a      	lsls	r2, r3
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002510:	f043 0204 	orr.w	r2, r3, #4
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251c:	2210      	movs	r2, #16
 800251e:	409a      	lsls	r2, r3
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	4013      	ands	r3, r2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d043      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0308 	and.w	r3, r3, #8
 8002532:	2b00      	cmp	r3, #0
 8002534:	d03c      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253a:	2210      	movs	r2, #16
 800253c:	409a      	lsls	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d018      	beq.n	8002582 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255a:	2b00      	cmp	r3, #0
 800255c:	d108      	bne.n	8002570 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	2b00      	cmp	r3, #0
 8002564:	d024      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	4798      	blx	r3
 800256e:	e01f      	b.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002574:	2b00      	cmp	r3, #0
 8002576:	d01b      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800257c:	6878      	ldr	r0, [r7, #4]
 800257e:	4798      	blx	r3
 8002580:	e016      	b.n	80025b0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f022 0208 	bic.w	r2, r2, #8
 800259e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d003      	beq.n	80025b0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025b4:	2220      	movs	r2, #32
 80025b6:	409a      	lsls	r2, r3
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	4013      	ands	r3, r2
 80025bc:	2b00      	cmp	r3, #0
 80025be:	f000 808f 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f003 0310 	and.w	r3, r3, #16
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	f000 8087 	beq.w	80026e0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d6:	2220      	movs	r2, #32
 80025d8:	409a      	lsls	r2, r3
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b05      	cmp	r3, #5
 80025e8:	d136      	bne.n	8002658 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	681a      	ldr	r2, [r3, #0]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f022 0216 	bic.w	r2, r2, #22
 80025f8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	695a      	ldr	r2, [r3, #20]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002608:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	2b00      	cmp	r3, #0
 8002610:	d103      	bne.n	800261a <HAL_DMA_IRQHandler+0x1da>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002616:	2b00      	cmp	r3, #0
 8002618:	d007      	beq.n	800262a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	681a      	ldr	r2, [r3, #0]
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f022 0208 	bic.w	r2, r2, #8
 8002628:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262e:	223f      	movs	r2, #63	; 0x3f
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2201      	movs	r2, #1
 800263a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800264a:	2b00      	cmp	r3, #0
 800264c:	d07e      	beq.n	800274c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	4798      	blx	r3
        }
        return;
 8002656:	e079      	b.n	800274c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d01d      	beq.n	80026a2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10d      	bne.n	8002690 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002678:	2b00      	cmp	r3, #0
 800267a:	d031      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002680:	6878      	ldr	r0, [r7, #4]
 8002682:	4798      	blx	r3
 8002684:	e02c      	b.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
 8002686:	bf00      	nop
 8002688:	20000084 	.word	0x20000084
 800268c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002694:	2b00      	cmp	r3, #0
 8002696:	d023      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	4798      	blx	r3
 80026a0:	e01e      	b.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d10f      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f022 0210 	bic.w	r2, r2, #16
 80026be:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2201      	movs	r2, #1
 80026c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2200      	movs	r2, #0
 80026cc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d003      	beq.n	80026e0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d032      	beq.n	800274e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d022      	beq.n	800273a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2205      	movs	r2, #5
 80026f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f022 0201 	bic.w	r2, r2, #1
 800270a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800270c:	68bb      	ldr	r3, [r7, #8]
 800270e:	3301      	adds	r3, #1
 8002710:	60bb      	str	r3, [r7, #8]
 8002712:	697a      	ldr	r2, [r7, #20]
 8002714:	429a      	cmp	r2, r3
 8002716:	d307      	bcc.n	8002728 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d1f2      	bne.n	800270c <HAL_DMA_IRQHandler+0x2cc>
 8002726:	e000      	b.n	800272a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002728:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273e:	2b00      	cmp	r3, #0
 8002740:	d005      	beq.n	800274e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	4798      	blx	r3
 800274a:	e000      	b.n	800274e <HAL_DMA_IRQHandler+0x30e>
        return;
 800274c:	bf00      	nop
    }
  }
}
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002754:	b480      	push	{r7}
 8002756:	b085      	sub	sp, #20
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	3b10      	subs	r3, #16
 8002764:	4a13      	ldr	r2, [pc, #76]	; (80027b4 <DMA_CalcBaseAndBitshift+0x60>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	091b      	lsrs	r3, r3, #4
 800276c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800276e:	4a12      	ldr	r2, [pc, #72]	; (80027b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	4413      	add	r3, r2
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	2b03      	cmp	r3, #3
 8002780:	d908      	bls.n	8002794 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <DMA_CalcBaseAndBitshift+0x68>)
 800278a:	4013      	ands	r3, r2
 800278c:	1d1a      	adds	r2, r3, #4
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	659a      	str	r2, [r3, #88]	; 0x58
 8002792:	e006      	b.n	80027a2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <DMA_CalcBaseAndBitshift+0x68>)
 800279c:	4013      	ands	r3, r2
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3714      	adds	r7, #20
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr
 80027b2:	bf00      	nop
 80027b4:	aaaaaaab 	.word	0xaaaaaaab
 80027b8:	080050f8 	.word	0x080050f8
 80027bc:	fffffc00 	.word	0xfffffc00

080027c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b085      	sub	sp, #20
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027c8:	2300      	movs	r3, #0
 80027ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	699b      	ldr	r3, [r3, #24]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d11f      	bne.n	800281a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2b03      	cmp	r3, #3
 80027de:	d856      	bhi.n	800288e <DMA_CheckFifoParam+0xce>
 80027e0:	a201      	add	r2, pc, #4	; (adr r2, 80027e8 <DMA_CheckFifoParam+0x28>)
 80027e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e6:	bf00      	nop
 80027e8:	080027f9 	.word	0x080027f9
 80027ec:	0800280b 	.word	0x0800280b
 80027f0:	080027f9 	.word	0x080027f9
 80027f4:	0800288f 	.word	0x0800288f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002800:	2b00      	cmp	r3, #0
 8002802:	d046      	beq.n	8002892 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002804:	2301      	movs	r3, #1
 8002806:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002808:	e043      	b.n	8002892 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002812:	d140      	bne.n	8002896 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002818:	e03d      	b.n	8002896 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002822:	d121      	bne.n	8002868 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2b03      	cmp	r3, #3
 8002828:	d837      	bhi.n	800289a <DMA_CheckFifoParam+0xda>
 800282a:	a201      	add	r2, pc, #4	; (adr r2, 8002830 <DMA_CheckFifoParam+0x70>)
 800282c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002830:	08002841 	.word	0x08002841
 8002834:	08002847 	.word	0x08002847
 8002838:	08002841 	.word	0x08002841
 800283c:	08002859 	.word	0x08002859
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	73fb      	strb	r3, [r7, #15]
      break;
 8002844:	e030      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800284a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d025      	beq.n	800289e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002856:	e022      	b.n	800289e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002860:	d11f      	bne.n	80028a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002862:	2301      	movs	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002866:	e01c      	b.n	80028a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b02      	cmp	r3, #2
 800286c:	d903      	bls.n	8002876 <DMA_CheckFifoParam+0xb6>
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	2b03      	cmp	r3, #3
 8002872:	d003      	beq.n	800287c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002874:	e018      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	73fb      	strb	r3, [r7, #15]
      break;
 800287a:	e015      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002880:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00e      	beq.n	80028a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	73fb      	strb	r3, [r7, #15]
      break;
 800288c:	e00b      	b.n	80028a6 <DMA_CheckFifoParam+0xe6>
      break;
 800288e:	bf00      	nop
 8002890:	e00a      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002892:	bf00      	nop
 8002894:	e008      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002896:	bf00      	nop
 8002898:	e006      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 800289a:	bf00      	nop
 800289c:	e004      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 800289e:	bf00      	nop
 80028a0:	e002      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80028a2:	bf00      	nop
 80028a4:	e000      	b.n	80028a8 <DMA_CheckFifoParam+0xe8>
      break;
 80028a6:	bf00      	nop
    }
  } 
  
  return status; 
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop

080028b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b089      	sub	sp, #36	; 0x24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80028c2:	2300      	movs	r3, #0
 80028c4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80028d2:	2300      	movs	r3, #0
 80028d4:	61fb      	str	r3, [r7, #28]
 80028d6:	e175      	b.n	8002bc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80028d8:	2201      	movs	r2, #1
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	fa02 f303 	lsl.w	r3, r2, r3
 80028e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	4013      	ands	r3, r2
 80028ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028ec:	693a      	ldr	r2, [r7, #16]
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	429a      	cmp	r2, r3
 80028f2:	f040 8164 	bne.w	8002bbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f003 0303 	and.w	r3, r3, #3
 80028fe:	2b01      	cmp	r3, #1
 8002900:	d005      	beq.n	800290e <HAL_GPIO_Init+0x56>
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f003 0303 	and.w	r3, r3, #3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d130      	bne.n	8002970 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	2203      	movs	r2, #3
 800291a:	fa02 f303 	lsl.w	r3, r2, r3
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68da      	ldr	r2, [r3, #12]
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	005b      	lsls	r3, r3, #1
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4313      	orrs	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69ba      	ldr	r2, [r7, #24]
 800293c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002944:	2201      	movs	r2, #1
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	fa02 f303 	lsl.w	r3, r2, r3
 800294c:	43db      	mvns	r3, r3
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	4013      	ands	r3, r2
 8002952:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 0201 	and.w	r2, r3, #1
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	fa02 f303 	lsl.w	r3, r2, r3
 8002964:	69ba      	ldr	r2, [r7, #24]
 8002966:	4313      	orrs	r3, r2
 8002968:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	69ba      	ldr	r2, [r7, #24]
 800296e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	f003 0303 	and.w	r3, r3, #3
 8002978:	2b03      	cmp	r3, #3
 800297a:	d017      	beq.n	80029ac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002982:	69fb      	ldr	r3, [r7, #28]
 8002984:	005b      	lsls	r3, r3, #1
 8002986:	2203      	movs	r2, #3
 8002988:	fa02 f303 	lsl.w	r3, r2, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	69ba      	ldr	r2, [r7, #24]
 8002990:	4013      	ands	r3, r2
 8002992:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002994:	683b      	ldr	r3, [r7, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	005b      	lsls	r3, r3, #1
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69ba      	ldr	r2, [r7, #24]
 80029aa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f003 0303 	and.w	r3, r3, #3
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	d123      	bne.n	8002a00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	08da      	lsrs	r2, r3, #3
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3208      	adds	r2, #8
 80029c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80029c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	f003 0307 	and.w	r3, r3, #7
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	220f      	movs	r2, #15
 80029d0:	fa02 f303 	lsl.w	r3, r2, r3
 80029d4:	43db      	mvns	r3, r3
 80029d6:	69ba      	ldr	r2, [r7, #24]
 80029d8:	4013      	ands	r3, r2
 80029da:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	691a      	ldr	r2, [r3, #16]
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	08da      	lsrs	r2, r3, #3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	3208      	adds	r2, #8
 80029fa:	69b9      	ldr	r1, [r7, #24]
 80029fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4013      	ands	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	f003 0203 	and.w	r2, r3, #3
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	69ba      	ldr	r2, [r7, #24]
 8002a32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 80be 	beq.w	8002bbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a42:	4b66      	ldr	r3, [pc, #408]	; (8002bdc <HAL_GPIO_Init+0x324>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	4a65      	ldr	r2, [pc, #404]	; (8002bdc <HAL_GPIO_Init+0x324>)
 8002a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002a4e:	4b63      	ldr	r3, [pc, #396]	; (8002bdc <HAL_GPIO_Init+0x324>)
 8002a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a56:	60fb      	str	r3, [r7, #12]
 8002a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a5a:	4a61      	ldr	r2, [pc, #388]	; (8002be0 <HAL_GPIO_Init+0x328>)
 8002a5c:	69fb      	ldr	r3, [r7, #28]
 8002a5e:	089b      	lsrs	r3, r3, #2
 8002a60:	3302      	adds	r3, #2
 8002a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a68:	69fb      	ldr	r3, [r7, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	220f      	movs	r2, #15
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4a58      	ldr	r2, [pc, #352]	; (8002be4 <HAL_GPIO_Init+0x32c>)
 8002a82:	4293      	cmp	r3, r2
 8002a84:	d037      	beq.n	8002af6 <HAL_GPIO_Init+0x23e>
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a57      	ldr	r2, [pc, #348]	; (8002be8 <HAL_GPIO_Init+0x330>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d031      	beq.n	8002af2 <HAL_GPIO_Init+0x23a>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	4a56      	ldr	r2, [pc, #344]	; (8002bec <HAL_GPIO_Init+0x334>)
 8002a92:	4293      	cmp	r3, r2
 8002a94:	d02b      	beq.n	8002aee <HAL_GPIO_Init+0x236>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a55      	ldr	r2, [pc, #340]	; (8002bf0 <HAL_GPIO_Init+0x338>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d025      	beq.n	8002aea <HAL_GPIO_Init+0x232>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a54      	ldr	r2, [pc, #336]	; (8002bf4 <HAL_GPIO_Init+0x33c>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d01f      	beq.n	8002ae6 <HAL_GPIO_Init+0x22e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a53      	ldr	r2, [pc, #332]	; (8002bf8 <HAL_GPIO_Init+0x340>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d019      	beq.n	8002ae2 <HAL_GPIO_Init+0x22a>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a52      	ldr	r2, [pc, #328]	; (8002bfc <HAL_GPIO_Init+0x344>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d013      	beq.n	8002ade <HAL_GPIO_Init+0x226>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a51      	ldr	r2, [pc, #324]	; (8002c00 <HAL_GPIO_Init+0x348>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d00d      	beq.n	8002ada <HAL_GPIO_Init+0x222>
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a50      	ldr	r2, [pc, #320]	; (8002c04 <HAL_GPIO_Init+0x34c>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d007      	beq.n	8002ad6 <HAL_GPIO_Init+0x21e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a4f      	ldr	r2, [pc, #316]	; (8002c08 <HAL_GPIO_Init+0x350>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d101      	bne.n	8002ad2 <HAL_GPIO_Init+0x21a>
 8002ace:	2309      	movs	r3, #9
 8002ad0:	e012      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ad2:	230a      	movs	r3, #10
 8002ad4:	e010      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ad6:	2308      	movs	r3, #8
 8002ad8:	e00e      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ada:	2307      	movs	r3, #7
 8002adc:	e00c      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ade:	2306      	movs	r3, #6
 8002ae0:	e00a      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ae2:	2305      	movs	r3, #5
 8002ae4:	e008      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002ae6:	2304      	movs	r3, #4
 8002ae8:	e006      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002aea:	2303      	movs	r3, #3
 8002aec:	e004      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002aee:	2302      	movs	r3, #2
 8002af0:	e002      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002af2:	2301      	movs	r3, #1
 8002af4:	e000      	b.n	8002af8 <HAL_GPIO_Init+0x240>
 8002af6:	2300      	movs	r3, #0
 8002af8:	69fa      	ldr	r2, [r7, #28]
 8002afa:	f002 0203 	and.w	r2, r2, #3
 8002afe:	0092      	lsls	r2, r2, #2
 8002b00:	4093      	lsls	r3, r2
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002b08:	4935      	ldr	r1, [pc, #212]	; (8002be0 <HAL_GPIO_Init+0x328>)
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	089b      	lsrs	r3, r3, #2
 8002b0e:	3302      	adds	r3, #2
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b16:	4b3d      	ldr	r3, [pc, #244]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	69ba      	ldr	r2, [r7, #24]
 8002b22:	4013      	ands	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d003      	beq.n	8002b3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	4313      	orrs	r3, r2
 8002b38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b3a:	4a34      	ldr	r2, [pc, #208]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b3c:	69bb      	ldr	r3, [r7, #24]
 8002b3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b40:	4b32      	ldr	r3, [pc, #200]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b42:	68db      	ldr	r3, [r3, #12]
 8002b44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d003      	beq.n	8002b64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b64:	4a29      	ldr	r2, [pc, #164]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b6a:	4b28      	ldr	r3, [pc, #160]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	43db      	mvns	r3, r3
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	4013      	ands	r3, r2
 8002b78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b8e:	4a1f      	ldr	r2, [pc, #124]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b94:	4b1d      	ldr	r3, [pc, #116]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bb8:	4a14      	ldr	r2, [pc, #80]	; (8002c0c <HAL_GPIO_Init+0x354>)
 8002bba:	69bb      	ldr	r3, [r7, #24]
 8002bbc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	61fb      	str	r3, [r7, #28]
 8002bc4:	69fb      	ldr	r3, [r7, #28]
 8002bc6:	2b0f      	cmp	r3, #15
 8002bc8:	f67f ae86 	bls.w	80028d8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002bcc:	bf00      	nop
 8002bce:	bf00      	nop
 8002bd0:	3724      	adds	r7, #36	; 0x24
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	40013800 	.word	0x40013800
 8002be4:	40020000 	.word	0x40020000
 8002be8:	40020400 	.word	0x40020400
 8002bec:	40020800 	.word	0x40020800
 8002bf0:	40020c00 	.word	0x40020c00
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40021400 	.word	0x40021400
 8002bfc:	40021800 	.word	0x40021800
 8002c00:	40021c00 	.word	0x40021c00
 8002c04:	40022000 	.word	0x40022000
 8002c08:	40022400 	.word	0x40022400
 8002c0c:	40013c00 	.word	0x40013c00

08002c10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002c10:	b480      	push	{r7}
 8002c12:	b085      	sub	sp, #20
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	460b      	mov	r3, r1
 8002c1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	887b      	ldrh	r3, [r7, #2]
 8002c22:	4013      	ands	r3, r2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d002      	beq.n	8002c2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	73fb      	strb	r3, [r7, #15]
 8002c2c:	e001      	b.n	8002c32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3714      	adds	r7, #20
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b083      	sub	sp, #12
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	460b      	mov	r3, r1
 8002c4a:	807b      	strh	r3, [r7, #2]
 8002c4c:	4613      	mov	r3, r2
 8002c4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c50:	787b      	ldrb	r3, [r7, #1]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c56:	887a      	ldrh	r2, [r7, #2]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002c5c:	e003      	b.n	8002c66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002c5e:	887b      	ldrh	r3, [r7, #2]
 8002c60:	041a      	lsls	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	619a      	str	r2, [r3, #24]
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
	...

08002c74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e07f      	b.n	8002d86 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d106      	bne.n	8002ca0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	f7fe fcd6 	bl	800164c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2224      	movs	r2, #36	; 0x24
 8002ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	685a      	ldr	r2, [r3, #4]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	689a      	ldr	r2, [r3, #8]
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	2b01      	cmp	r3, #1
 8002cdc:	d107      	bne.n	8002cee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	689a      	ldr	r2, [r3, #8]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cea:	609a      	str	r2, [r3, #8]
 8002cec:	e006      	b.n	8002cfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689a      	ldr	r2, [r3, #8]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002cfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d104      	bne.n	8002d0e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d0c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6859      	ldr	r1, [r3, #4]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	4b1d      	ldr	r3, [pc, #116]	; (8002d90 <HAL_I2C_Init+0x11c>)
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	68da      	ldr	r2, [r3, #12]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	691a      	ldr	r2, [r3, #16]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	695b      	ldr	r3, [r3, #20]
 8002d36:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	699b      	ldr	r3, [r3, #24]
 8002d3e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	430a      	orrs	r2, r1
 8002d46:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	69d9      	ldr	r1, [r3, #28]
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6a1a      	ldr	r2, [r3, #32]
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f042 0201 	orr.w	r2, r2, #1
 8002d66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	2220      	movs	r2, #32
 8002d72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	02008000 	.word	0x02008000

08002d94 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b083      	sub	sp, #12
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
 8002d9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b20      	cmp	r3, #32
 8002da8:	d138      	bne.n	8002e1c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d101      	bne.n	8002db8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002db4:	2302      	movs	r3, #2
 8002db6:	e032      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2201      	movs	r2, #1
 8002dbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2224      	movs	r2, #36	; 0x24
 8002dc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 0201 	bic.w	r2, r2, #1
 8002dd6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002de6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6819      	ldr	r1, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	683a      	ldr	r2, [r7, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f042 0201 	orr.w	r2, r2, #1
 8002e06:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2220      	movs	r2, #32
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	e000      	b.n	8002e1e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002e1c:	2302      	movs	r3, #2
  }
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	370c      	adds	r7, #12
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr

08002e2a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002e2a:	b480      	push	{r7}
 8002e2c:	b085      	sub	sp, #20
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b20      	cmp	r3, #32
 8002e3e:	d139      	bne.n	8002eb4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d101      	bne.n	8002e4e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002e4a:	2302      	movs	r3, #2
 8002e4c:	e033      	b.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2224      	movs	r2, #36	; 0x24
 8002e5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f022 0201 	bic.w	r2, r2, #1
 8002e6c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002e7c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	021b      	lsls	r3, r3, #8
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	68fa      	ldr	r2, [r7, #12]
 8002e8e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2220      	movs	r2, #32
 8002ea4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
 8002eb2:	e000      	b.n	8002eb6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002eb4:	2302      	movs	r3, #2
  }
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3714      	adds	r7, #20
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec0:	4770      	bx	lr
	...

08002ec4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a04      	ldr	r2, [pc, #16]	; (8002ee0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ed2:	6013      	str	r3, [r2, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	40007000 	.word	0x40007000

08002ee4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002eea:	2300      	movs	r3, #0
 8002eec:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002eee:	4b23      	ldr	r3, [pc, #140]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef2:	4a22      	ldr	r2, [pc, #136]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8002ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ef8:	6413      	str	r3, [r2, #64]	; 0x40
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <HAL_PWREx_EnableOverDrive+0x98>)
 8002efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f06:	4b1e      	ldr	r3, [pc, #120]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a1d      	ldr	r2, [pc, #116]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f10:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f12:	f7fe ff4f 	bl	8001db4 <HAL_GetTick>
 8002f16:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f18:	e009      	b.n	8002f2e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f1a:	f7fe ff4b 	bl	8001db4 <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f28:	d901      	bls.n	8002f2e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e022      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f2e:	4b14      	ldr	r3, [pc, #80]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f3a:	d1ee      	bne.n	8002f1a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f3c:	4b10      	ldr	r3, [pc, #64]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a0f      	ldr	r2, [pc, #60]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f46:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f48:	f7fe ff34 	bl	8001db4 <HAL_GetTick>
 8002f4c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f4e:	e009      	b.n	8002f64 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f50:	f7fe ff30 	bl	8001db4 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f5e:	d901      	bls.n	8002f64 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e007      	b.n	8002f74 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f64:	4b06      	ldr	r3, [pc, #24]	; (8002f80 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002f70:	d1ee      	bne.n	8002f50 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3708      	adds	r7, #8
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}
 8002f7c:	40023800 	.word	0x40023800
 8002f80:	40007000 	.word	0x40007000

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e291      	b.n	80034be <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	f000 8087 	beq.w	80030b6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002fa8:	4b96      	ldr	r3, [pc, #600]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 030c 	and.w	r3, r3, #12
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d00c      	beq.n	8002fce <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb4:	4b93      	ldr	r3, [pc, #588]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002fb6:	689b      	ldr	r3, [r3, #8]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d112      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x62>
 8002fc0:	4b90      	ldr	r3, [pc, #576]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002fc2:	685b      	ldr	r3, [r3, #4]
 8002fc4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fcc:	d10b      	bne.n	8002fe6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fce:	4b8d      	ldr	r3, [pc, #564]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d06c      	beq.n	80030b4 <HAL_RCC_OscConfig+0x130>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d168      	bne.n	80030b4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e26b      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fee:	d106      	bne.n	8002ffe <HAL_RCC_OscConfig+0x7a>
 8002ff0:	4b84      	ldr	r3, [pc, #528]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a83      	ldr	r2, [pc, #524]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8002ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ffa:	6013      	str	r3, [r2, #0]
 8002ffc:	e02e      	b.n	800305c <HAL_RCC_OscConfig+0xd8>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x9c>
 8003006:	4b7f      	ldr	r3, [pc, #508]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a7e      	ldr	r2, [pc, #504]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800300c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b7c      	ldr	r3, [pc, #496]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a7b      	ldr	r2, [pc, #492]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003018:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e01d      	b.n	800305c <HAL_RCC_OscConfig+0xd8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003028:	d10c      	bne.n	8003044 <HAL_RCC_OscConfig+0xc0>
 800302a:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a75      	ldr	r2, [pc, #468]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003030:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a72      	ldr	r2, [pc, #456]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800303c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	e00b      	b.n	800305c <HAL_RCC_OscConfig+0xd8>
 8003044:	4b6f      	ldr	r3, [pc, #444]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	4a6e      	ldr	r2, [pc, #440]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800304a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800304e:	6013      	str	r3, [r2, #0]
 8003050:	4b6c      	ldr	r3, [pc, #432]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a6b      	ldr	r2, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003056:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800305a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d013      	beq.n	800308c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003064:	f7fe fea6 	bl	8001db4 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7fe fea2 	bl	8001db4 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e21f      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800307e:	4b61      	ldr	r3, [pc, #388]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d0f0      	beq.n	800306c <HAL_RCC_OscConfig+0xe8>
 800308a:	e014      	b.n	80030b6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fe92 	bl	8001db4 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003094:	f7fe fe8e 	bl	8001db4 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b64      	cmp	r3, #100	; 0x64
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e20b      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x110>
 80030b2:	e000      	b.n	80030b6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0302 	and.w	r3, r3, #2
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d069      	beq.n	8003196 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80030c2:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	f003 030c 	and.w	r3, r3, #12
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00b      	beq.n	80030e6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030ce:	4b4d      	ldr	r3, [pc, #308]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030d0:	689b      	ldr	r3, [r3, #8]
 80030d2:	f003 030c 	and.w	r3, r3, #12
 80030d6:	2b08      	cmp	r3, #8
 80030d8:	d11c      	bne.n	8003114 <HAL_RCC_OscConfig+0x190>
 80030da:	4b4a      	ldr	r3, [pc, #296]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d116      	bne.n	8003114 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030e6:	4b47      	ldr	r3, [pc, #284]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d005      	beq.n	80030fe <HAL_RCC_OscConfig+0x17a>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	2b01      	cmp	r3, #1
 80030f8:	d001      	beq.n	80030fe <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e1df      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030fe:	4b41      	ldr	r3, [pc, #260]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	493d      	ldr	r1, [pc, #244]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800310e:	4313      	orrs	r3, r2
 8003110:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003112:	e040      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	68db      	ldr	r3, [r3, #12]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d023      	beq.n	8003164 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a38      	ldr	r2, [pc, #224]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003122:	f043 0301 	orr.w	r3, r3, #1
 8003126:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003128:	f7fe fe44 	bl	8001db4 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800312e:	e008      	b.n	8003142 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003130:	f7fe fe40 	bl	8001db4 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	2b02      	cmp	r3, #2
 800313c:	d901      	bls.n	8003142 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800313e:	2303      	movs	r3, #3
 8003140:	e1bd      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003142:	4b30      	ldr	r3, [pc, #192]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0302 	and.w	r3, r3, #2
 800314a:	2b00      	cmp	r3, #0
 800314c:	d0f0      	beq.n	8003130 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314e:	4b2d      	ldr	r3, [pc, #180]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	691b      	ldr	r3, [r3, #16]
 800315a:	00db      	lsls	r3, r3, #3
 800315c:	4929      	ldr	r1, [pc, #164]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]
 8003162:	e018      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003164:	4b27      	ldr	r3, [pc, #156]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800316a:	f023 0301 	bic.w	r3, r3, #1
 800316e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003170:	f7fe fe20 	bl	8001db4 <HAL_GetTick>
 8003174:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003176:	e008      	b.n	800318a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003178:	f7fe fe1c 	bl	8001db4 <HAL_GetTick>
 800317c:	4602      	mov	r2, r0
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	1ad3      	subs	r3, r2, r3
 8003182:	2b02      	cmp	r3, #2
 8003184:	d901      	bls.n	800318a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003186:	2303      	movs	r3, #3
 8003188:	e199      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0302 	and.w	r3, r3, #2
 8003192:	2b00      	cmp	r3, #0
 8003194:	d1f0      	bne.n	8003178 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0308 	and.w	r3, r3, #8
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d038      	beq.n	8003214 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d019      	beq.n	80031de <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031aa:	4b16      	ldr	r3, [pc, #88]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80031ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031ae:	4a15      	ldr	r2, [pc, #84]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80031b0:	f043 0301 	orr.w	r3, r3, #1
 80031b4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031b6:	f7fe fdfd 	bl	8001db4 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031be:	f7fe fdf9 	bl	8001db4 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b02      	cmp	r3, #2
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e176      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031d0:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x23a>
 80031dc:	e01a      	b.n	8003214 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031de:	4b09      	ldr	r3, [pc, #36]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80031e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031e2:	4a08      	ldr	r2, [pc, #32]	; (8003204 <HAL_RCC_OscConfig+0x280>)
 80031e4:	f023 0301 	bic.w	r3, r3, #1
 80031e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031ea:	f7fe fde3 	bl	8001db4 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031f0:	e00a      	b.n	8003208 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031f2:	f7fe fddf 	bl	8001db4 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d903      	bls.n	8003208 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e15c      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
 8003204:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003208:	4b91      	ldr	r3, [pc, #580]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800320a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800320c:	f003 0302 	and.w	r3, r3, #2
 8003210:	2b00      	cmp	r3, #0
 8003212:	d1ee      	bne.n	80031f2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f003 0304 	and.w	r3, r3, #4
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80a4 	beq.w	800336a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003222:	4b8b      	ldr	r3, [pc, #556]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800322a:	2b00      	cmp	r3, #0
 800322c:	d10d      	bne.n	800324a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800322e:	4b88      	ldr	r3, [pc, #544]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a87      	ldr	r2, [pc, #540]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b85      	ldr	r3, [pc, #532]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	60bb      	str	r3, [r7, #8]
 8003244:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003246:	2301      	movs	r3, #1
 8003248:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800324a:	4b82      	ldr	r3, [pc, #520]	; (8003454 <HAL_RCC_OscConfig+0x4d0>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003252:	2b00      	cmp	r3, #0
 8003254:	d118      	bne.n	8003288 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003256:	4b7f      	ldr	r3, [pc, #508]	; (8003454 <HAL_RCC_OscConfig+0x4d0>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a7e      	ldr	r2, [pc, #504]	; (8003454 <HAL_RCC_OscConfig+0x4d0>)
 800325c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003260:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003262:	f7fe fda7 	bl	8001db4 <HAL_GetTick>
 8003266:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003268:	e008      	b.n	800327c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800326a:	f7fe fda3 	bl	8001db4 <HAL_GetTick>
 800326e:	4602      	mov	r2, r0
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	1ad3      	subs	r3, r2, r3
 8003274:	2b64      	cmp	r3, #100	; 0x64
 8003276:	d901      	bls.n	800327c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003278:	2303      	movs	r3, #3
 800327a:	e120      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800327c:	4b75      	ldr	r3, [pc, #468]	; (8003454 <HAL_RCC_OscConfig+0x4d0>)
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003284:	2b00      	cmp	r3, #0
 8003286:	d0f0      	beq.n	800326a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	689b      	ldr	r3, [r3, #8]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HAL_RCC_OscConfig+0x31a>
 8003290:	4b6f      	ldr	r3, [pc, #444]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003294:	4a6e      	ldr	r2, [pc, #440]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003296:	f043 0301 	orr.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	; 0x70
 800329c:	e02d      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10c      	bne.n	80032c0 <HAL_RCC_OscConfig+0x33c>
 80032a6:	4b6a      	ldr	r3, [pc, #424]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a69      	ldr	r2, [pc, #420]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032ac:	f023 0301 	bic.w	r3, r3, #1
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
 80032b2:	4b67      	ldr	r3, [pc, #412]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032b6:	4a66      	ldr	r2, [pc, #408]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032b8:	f023 0304 	bic.w	r3, r3, #4
 80032bc:	6713      	str	r3, [r2, #112]	; 0x70
 80032be:	e01c      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b05      	cmp	r3, #5
 80032c6:	d10c      	bne.n	80032e2 <HAL_RCC_OscConfig+0x35e>
 80032c8:	4b61      	ldr	r3, [pc, #388]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	4a60      	ldr	r2, [pc, #384]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	f043 0304 	orr.w	r3, r3, #4
 80032d2:	6713      	str	r3, [r2, #112]	; 0x70
 80032d4:	4b5e      	ldr	r3, [pc, #376]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032d8:	4a5d      	ldr	r2, [pc, #372]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032da:	f043 0301 	orr.w	r3, r3, #1
 80032de:	6713      	str	r3, [r2, #112]	; 0x70
 80032e0:	e00b      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
 80032e2:	4b5b      	ldr	r3, [pc, #364]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e6:	4a5a      	ldr	r2, [pc, #360]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032e8:	f023 0301 	bic.w	r3, r3, #1
 80032ec:	6713      	str	r3, [r2, #112]	; 0x70
 80032ee:	4b58      	ldr	r3, [pc, #352]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032f2:	4a57      	ldr	r2, [pc, #348]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80032f4:	f023 0304 	bic.w	r3, r3, #4
 80032f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d015      	beq.n	800332e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003302:	f7fe fd57 	bl	8001db4 <HAL_GetTick>
 8003306:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003308:	e00a      	b.n	8003320 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800330a:	f7fe fd53 	bl	8001db4 <HAL_GetTick>
 800330e:	4602      	mov	r2, r0
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	f241 3288 	movw	r2, #5000	; 0x1388
 8003318:	4293      	cmp	r3, r2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e0ce      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003320:	4b4b      	ldr	r3, [pc, #300]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003324:	f003 0302 	and.w	r3, r3, #2
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0ee      	beq.n	800330a <HAL_RCC_OscConfig+0x386>
 800332c:	e014      	b.n	8003358 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800332e:	f7fe fd41 	bl	8001db4 <HAL_GetTick>
 8003332:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003334:	e00a      	b.n	800334c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003336:	f7fe fd3d 	bl	8001db4 <HAL_GetTick>
 800333a:	4602      	mov	r2, r0
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	f241 3288 	movw	r2, #5000	; 0x1388
 8003344:	4293      	cmp	r3, r2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e0b8      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334c:	4b40      	ldr	r3, [pc, #256]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800334e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1ee      	bne.n	8003336 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003358:	7dfb      	ldrb	r3, [r7, #23]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d105      	bne.n	800336a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800335e:	4b3c      	ldr	r3, [pc, #240]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a3b      	ldr	r2, [pc, #236]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003364:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	699b      	ldr	r3, [r3, #24]
 800336e:	2b00      	cmp	r3, #0
 8003370:	f000 80a4 	beq.w	80034bc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003374:	4b36      	ldr	r3, [pc, #216]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 030c 	and.w	r3, r3, #12
 800337c:	2b08      	cmp	r3, #8
 800337e:	d06b      	beq.n	8003458 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	2b02      	cmp	r3, #2
 8003386:	d149      	bne.n	800341c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003388:	4b31      	ldr	r3, [pc, #196]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a30      	ldr	r2, [pc, #192]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800338e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003394:	f7fe fd0e 	bl	8001db4 <HAL_GetTick>
 8003398:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800339a:	e008      	b.n	80033ae <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339c:	f7fe fd0a 	bl	8001db4 <HAL_GetTick>
 80033a0:	4602      	mov	r2, r0
 80033a2:	693b      	ldr	r3, [r7, #16]
 80033a4:	1ad3      	subs	r3, r2, r3
 80033a6:	2b02      	cmp	r3, #2
 80033a8:	d901      	bls.n	80033ae <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80033aa:	2303      	movs	r3, #3
 80033ac:	e087      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	4b28      	ldr	r3, [pc, #160]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d1f0      	bne.n	800339c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	69da      	ldr	r2, [r3, #28]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a1b      	ldr	r3, [r3, #32]
 80033c2:	431a      	orrs	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	019b      	lsls	r3, r3, #6
 80033ca:	431a      	orrs	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033d0:	085b      	lsrs	r3, r3, #1
 80033d2:	3b01      	subs	r3, #1
 80033d4:	041b      	lsls	r3, r3, #16
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	061b      	lsls	r3, r3, #24
 80033de:	4313      	orrs	r3, r2
 80033e0:	4a1b      	ldr	r2, [pc, #108]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80033e2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80033e6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033e8:	4b19      	ldr	r3, [pc, #100]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a18      	ldr	r2, [pc, #96]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033f4:	f7fe fcde 	bl	8001db4 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033fc:	f7fe fcda 	bl	8001db4 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e057      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0x478>
 800341a:	e04f      	b.n	80034bc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800341c:	4b0c      	ldr	r3, [pc, #48]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a0b      	ldr	r2, [pc, #44]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003426:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003428:	f7fe fcc4 	bl	8001db4 <HAL_GetTick>
 800342c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800342e:	e008      	b.n	8003442 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003430:	f7fe fcc0 	bl	8001db4 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	2b02      	cmp	r3, #2
 800343c:	d901      	bls.n	8003442 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e03d      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003442:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_RCC_OscConfig+0x4cc>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d1f0      	bne.n	8003430 <HAL_RCC_OscConfig+0x4ac>
 800344e:	e035      	b.n	80034bc <HAL_RCC_OscConfig+0x538>
 8003450:	40023800 	.word	0x40023800
 8003454:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003458:	4b1b      	ldr	r3, [pc, #108]	; (80034c8 <HAL_RCC_OscConfig+0x544>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	699b      	ldr	r3, [r3, #24]
 8003462:	2b01      	cmp	r3, #1
 8003464:	d028      	beq.n	80034b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003470:	429a      	cmp	r2, r3
 8003472:	d121      	bne.n	80034b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347e:	429a      	cmp	r2, r3
 8003480:	d11a      	bne.n	80034b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003488:	4013      	ands	r3, r2
 800348a:	687a      	ldr	r2, [r7, #4]
 800348c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800348e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003490:	4293      	cmp	r3, r2
 8003492:	d111      	bne.n	80034b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	3b01      	subs	r3, #1
 80034a2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80034a4:	429a      	cmp	r2, r3
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d001      	beq.n	80034bc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	e000      	b.n	80034be <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3718      	adds	r7, #24
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023800 	.word	0x40023800

080034cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d101      	bne.n	80034e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80034e0:	2301      	movs	r3, #1
 80034e2:	e0d0      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80034e4:	4b6a      	ldr	r3, [pc, #424]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 030f 	and.w	r3, r3, #15
 80034ec:	683a      	ldr	r2, [r7, #0]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d910      	bls.n	8003514 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f2:	4b67      	ldr	r3, [pc, #412]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f023 020f 	bic.w	r2, r3, #15
 80034fa:	4965      	ldr	r1, [pc, #404]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	4313      	orrs	r3, r2
 8003500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003502:	4b63      	ldr	r3, [pc, #396]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 030f 	and.w	r3, r3, #15
 800350a:	683a      	ldr	r2, [r7, #0]
 800350c:	429a      	cmp	r2, r3
 800350e:	d001      	beq.n	8003514 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e0b8      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0302 	and.w	r3, r3, #2
 800351c:	2b00      	cmp	r3, #0
 800351e:	d020      	beq.n	8003562 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f003 0304 	and.w	r3, r3, #4
 8003528:	2b00      	cmp	r3, #0
 800352a:	d005      	beq.n	8003538 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800352c:	4b59      	ldr	r3, [pc, #356]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	4a58      	ldr	r2, [pc, #352]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003536:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003544:	4b53      	ldr	r3, [pc, #332]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a52      	ldr	r2, [pc, #328]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800354a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800354e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003550:	4b50      	ldr	r3, [pc, #320]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	494d      	ldr	r1, [pc, #308]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800355e:	4313      	orrs	r3, r2
 8003560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d040      	beq.n	80035f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	2b01      	cmp	r3, #1
 8003574:	d107      	bne.n	8003586 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003576:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d115      	bne.n	80035ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	e07f      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	685b      	ldr	r3, [r3, #4]
 800358a:	2b02      	cmp	r3, #2
 800358c:	d107      	bne.n	800359e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800358e:	4b41      	ldr	r3, [pc, #260]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d109      	bne.n	80035ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e073      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800359e:	4b3d      	ldr	r3, [pc, #244]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 0302 	and.w	r3, r3, #2
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d101      	bne.n	80035ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06b      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035ae:	4b39      	ldr	r3, [pc, #228]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f023 0203 	bic.w	r2, r3, #3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	4936      	ldr	r1, [pc, #216]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035c0:	f7fe fbf8 	bl	8001db4 <HAL_GetTick>
 80035c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035c6:	e00a      	b.n	80035de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035c8:	f7fe fbf4 	bl	8001db4 <HAL_GetTick>
 80035cc:	4602      	mov	r2, r0
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	1ad3      	subs	r3, r2, r3
 80035d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d901      	bls.n	80035de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80035da:	2303      	movs	r3, #3
 80035dc:	e053      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 020c 	and.w	r2, r3, #12
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d1eb      	bne.n	80035c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80035f0:	4b27      	ldr	r3, [pc, #156]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f003 030f 	and.w	r3, r3, #15
 80035f8:	683a      	ldr	r2, [r7, #0]
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d210      	bcs.n	8003620 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035fe:	4b24      	ldr	r3, [pc, #144]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f023 020f 	bic.w	r2, r3, #15
 8003606:	4922      	ldr	r1, [pc, #136]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	4313      	orrs	r3, r2
 800360c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800360e:	4b20      	ldr	r3, [pc, #128]	; (8003690 <HAL_RCC_ClockConfig+0x1c4>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 030f 	and.w	r3, r3, #15
 8003616:	683a      	ldr	r2, [r7, #0]
 8003618:	429a      	cmp	r2, r3
 800361a:	d001      	beq.n	8003620 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	e032      	b.n	8003686 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f003 0304 	and.w	r3, r3, #4
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	68db      	ldr	r3, [r3, #12]
 8003638:	4916      	ldr	r1, [pc, #88]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800363a:	4313      	orrs	r3, r2
 800363c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f003 0308 	and.w	r3, r3, #8
 8003646:	2b00      	cmp	r3, #0
 8003648:	d009      	beq.n	800365e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800364a:	4b12      	ldr	r3, [pc, #72]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	691b      	ldr	r3, [r3, #16]
 8003656:	00db      	lsls	r3, r3, #3
 8003658:	490e      	ldr	r1, [pc, #56]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800365e:	f000 f821 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8003662:	4602      	mov	r2, r0
 8003664:	4b0b      	ldr	r3, [pc, #44]	; (8003694 <HAL_RCC_ClockConfig+0x1c8>)
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	091b      	lsrs	r3, r3, #4
 800366a:	f003 030f 	and.w	r3, r3, #15
 800366e:	490a      	ldr	r1, [pc, #40]	; (8003698 <HAL_RCC_ClockConfig+0x1cc>)
 8003670:	5ccb      	ldrb	r3, [r1, r3]
 8003672:	fa22 f303 	lsr.w	r3, r2, r3
 8003676:	4a09      	ldr	r2, [pc, #36]	; (800369c <HAL_RCC_ClockConfig+0x1d0>)
 8003678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800367a:	4b09      	ldr	r3, [pc, #36]	; (80036a0 <HAL_RCC_ClockConfig+0x1d4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4618      	mov	r0, r3
 8003680:	f7fe fb54 	bl	8001d2c <HAL_InitTick>

  return HAL_OK;
 8003684:	2300      	movs	r3, #0
}
 8003686:	4618      	mov	r0, r3
 8003688:	3710      	adds	r7, #16
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	40023c00 	.word	0x40023c00
 8003694:	40023800 	.word	0x40023800
 8003698:	080050e0 	.word	0x080050e0
 800369c:	20000084 	.word	0x20000084
 80036a0:	20000088 	.word	0x20000088

080036a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036a8:	b094      	sub	sp, #80	; 0x50
 80036aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	647b      	str	r3, [r7, #68]	; 0x44
 80036b0:	2300      	movs	r3, #0
 80036b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036b4:	2300      	movs	r3, #0
 80036b6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036bc:	4b79      	ldr	r3, [pc, #484]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036be:	689b      	ldr	r3, [r3, #8]
 80036c0:	f003 030c 	and.w	r3, r3, #12
 80036c4:	2b08      	cmp	r3, #8
 80036c6:	d00d      	beq.n	80036e4 <HAL_RCC_GetSysClockFreq+0x40>
 80036c8:	2b08      	cmp	r3, #8
 80036ca:	f200 80e1 	bhi.w	8003890 <HAL_RCC_GetSysClockFreq+0x1ec>
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x34>
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x3a>
 80036d6:	e0db      	b.n	8003890 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036d8:	4b73      	ldr	r3, [pc, #460]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80036da:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036dc:	e0db      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036de:	4b73      	ldr	r3, [pc, #460]	; (80038ac <HAL_RCC_GetSysClockFreq+0x208>)
 80036e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80036e2:	e0d8      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036e4:	4b6f      	ldr	r3, [pc, #444]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80036ec:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80036ee:	4b6d      	ldr	r3, [pc, #436]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d063      	beq.n	80037c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036fa:	4b6a      	ldr	r3, [pc, #424]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	099b      	lsrs	r3, r3, #6
 8003700:	2200      	movs	r2, #0
 8003702:	63bb      	str	r3, [r7, #56]	; 0x38
 8003704:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003706:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003708:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800370c:	633b      	str	r3, [r7, #48]	; 0x30
 800370e:	2300      	movs	r3, #0
 8003710:	637b      	str	r3, [r7, #52]	; 0x34
 8003712:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003716:	4622      	mov	r2, r4
 8003718:	462b      	mov	r3, r5
 800371a:	f04f 0000 	mov.w	r0, #0
 800371e:	f04f 0100 	mov.w	r1, #0
 8003722:	0159      	lsls	r1, r3, #5
 8003724:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003728:	0150      	lsls	r0, r2, #5
 800372a:	4602      	mov	r2, r0
 800372c:	460b      	mov	r3, r1
 800372e:	4621      	mov	r1, r4
 8003730:	1a51      	subs	r1, r2, r1
 8003732:	6139      	str	r1, [r7, #16]
 8003734:	4629      	mov	r1, r5
 8003736:	eb63 0301 	sbc.w	r3, r3, r1
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	f04f 0200 	mov.w	r2, #0
 8003740:	f04f 0300 	mov.w	r3, #0
 8003744:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003748:	4659      	mov	r1, fp
 800374a:	018b      	lsls	r3, r1, #6
 800374c:	4651      	mov	r1, sl
 800374e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003752:	4651      	mov	r1, sl
 8003754:	018a      	lsls	r2, r1, #6
 8003756:	4651      	mov	r1, sl
 8003758:	ebb2 0801 	subs.w	r8, r2, r1
 800375c:	4659      	mov	r1, fp
 800375e:	eb63 0901 	sbc.w	r9, r3, r1
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800376e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003776:	4690      	mov	r8, r2
 8003778:	4699      	mov	r9, r3
 800377a:	4623      	mov	r3, r4
 800377c:	eb18 0303 	adds.w	r3, r8, r3
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	462b      	mov	r3, r5
 8003784:	eb49 0303 	adc.w	r3, r9, r3
 8003788:	60fb      	str	r3, [r7, #12]
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003796:	4629      	mov	r1, r5
 8003798:	024b      	lsls	r3, r1, #9
 800379a:	4621      	mov	r1, r4
 800379c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80037a0:	4621      	mov	r1, r4
 80037a2:	024a      	lsls	r2, r1, #9
 80037a4:	4610      	mov	r0, r2
 80037a6:	4619      	mov	r1, r3
 80037a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037aa:	2200      	movs	r2, #0
 80037ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80037ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037b4:	f7fd f916 	bl	80009e4 <__aeabi_uldivmod>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4613      	mov	r3, r2
 80037be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80037c0:	e058      	b.n	8003874 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037c2:	4b38      	ldr	r3, [pc, #224]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	099b      	lsrs	r3, r3, #6
 80037c8:	2200      	movs	r2, #0
 80037ca:	4618      	mov	r0, r3
 80037cc:	4611      	mov	r1, r2
 80037ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80037d2:	623b      	str	r3, [r7, #32]
 80037d4:	2300      	movs	r3, #0
 80037d6:	627b      	str	r3, [r7, #36]	; 0x24
 80037d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80037dc:	4642      	mov	r2, r8
 80037de:	464b      	mov	r3, r9
 80037e0:	f04f 0000 	mov.w	r0, #0
 80037e4:	f04f 0100 	mov.w	r1, #0
 80037e8:	0159      	lsls	r1, r3, #5
 80037ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80037ee:	0150      	lsls	r0, r2, #5
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4641      	mov	r1, r8
 80037f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80037fa:	4649      	mov	r1, r9
 80037fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800380c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003810:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003814:	ebb2 040a 	subs.w	r4, r2, sl
 8003818:	eb63 050b 	sbc.w	r5, r3, fp
 800381c:	f04f 0200 	mov.w	r2, #0
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	00eb      	lsls	r3, r5, #3
 8003826:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800382a:	00e2      	lsls	r2, r4, #3
 800382c:	4614      	mov	r4, r2
 800382e:	461d      	mov	r5, r3
 8003830:	4643      	mov	r3, r8
 8003832:	18e3      	adds	r3, r4, r3
 8003834:	603b      	str	r3, [r7, #0]
 8003836:	464b      	mov	r3, r9
 8003838:	eb45 0303 	adc.w	r3, r5, r3
 800383c:	607b      	str	r3, [r7, #4]
 800383e:	f04f 0200 	mov.w	r2, #0
 8003842:	f04f 0300 	mov.w	r3, #0
 8003846:	e9d7 4500 	ldrd	r4, r5, [r7]
 800384a:	4629      	mov	r1, r5
 800384c:	028b      	lsls	r3, r1, #10
 800384e:	4621      	mov	r1, r4
 8003850:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003854:	4621      	mov	r1, r4
 8003856:	028a      	lsls	r2, r1, #10
 8003858:	4610      	mov	r0, r2
 800385a:	4619      	mov	r1, r3
 800385c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800385e:	2200      	movs	r2, #0
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	61fa      	str	r2, [r7, #28]
 8003864:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003868:	f7fd f8bc 	bl	80009e4 <__aeabi_uldivmod>
 800386c:	4602      	mov	r2, r0
 800386e:	460b      	mov	r3, r1
 8003870:	4613      	mov	r3, r2
 8003872:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003874:	4b0b      	ldr	r3, [pc, #44]	; (80038a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	0c1b      	lsrs	r3, r3, #16
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	3301      	adds	r3, #1
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003884:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003886:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003888:	fbb2 f3f3 	udiv	r3, r2, r3
 800388c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800388e:	e002      	b.n	8003896 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003890:	4b05      	ldr	r3, [pc, #20]	; (80038a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003892:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003894:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003896:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003898:	4618      	mov	r0, r3
 800389a:	3750      	adds	r7, #80	; 0x50
 800389c:	46bd      	mov	sp, r7
 800389e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	00f42400 	.word	0x00f42400
 80038ac:	007a1200 	.word	0x007a1200

080038b0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b0:	b480      	push	{r7}
 80038b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038b4:	4b03      	ldr	r3, [pc, #12]	; (80038c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80038b6:	681b      	ldr	r3, [r3, #0]
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	46bd      	mov	sp, r7
 80038bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c0:	4770      	bx	lr
 80038c2:	bf00      	nop
 80038c4:	20000084 	.word	0x20000084

080038c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038cc:	f7ff fff0 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038d0:	4602      	mov	r2, r0
 80038d2:	4b05      	ldr	r3, [pc, #20]	; (80038e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	0a9b      	lsrs	r3, r3, #10
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	4903      	ldr	r1, [pc, #12]	; (80038ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80038de:	5ccb      	ldrb	r3, [r1, r3]
 80038e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038e4:	4618      	mov	r0, r3
 80038e6:	bd80      	pop	{r7, pc}
 80038e8:	40023800 	.word	0x40023800
 80038ec:	080050f0 	.word	0x080050f0

080038f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80038f4:	f7ff ffdc 	bl	80038b0 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b05      	ldr	r3, [pc, #20]	; (8003910 <HAL_RCC_GetPCLK2Freq+0x20>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	0b5b      	lsrs	r3, r3, #13
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4903      	ldr	r1, [pc, #12]	; (8003914 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	fa22 f303 	lsr.w	r3, r2, r3
}
 800390c:	4618      	mov	r0, r3
 800390e:	bd80      	pop	{r7, pc}
 8003910:	40023800 	.word	0x40023800
 8003914:	080050f0 	.word	0x080050f0

08003918 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b088      	sub	sp, #32
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003920:	2300      	movs	r3, #0
 8003922:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003924:	2300      	movs	r3, #0
 8003926:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800392c:	2300      	movs	r3, #0
 800392e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003930:	2300      	movs	r3, #0
 8003932:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0301 	and.w	r3, r3, #1
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003940:	4b69      	ldr	r3, [pc, #420]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	4a68      	ldr	r2, [pc, #416]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003946:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800394a:	6093      	str	r3, [r2, #8]
 800394c:	4b66      	ldr	r3, [pc, #408]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800394e:	689a      	ldr	r2, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003954:	4964      	ldr	r1, [pc, #400]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003956:	4313      	orrs	r3, r2
 8003958:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003962:	2301      	movs	r3, #1
 8003964:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d017      	beq.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003972:	4b5d      	ldr	r3, [pc, #372]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003978:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	4959      	ldr	r1, [pc, #356]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800398c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003990:	d101      	bne.n	8003996 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003992:	2301      	movs	r3, #1
 8003994:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800399e:	2301      	movs	r3, #1
 80039a0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d017      	beq.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80039ae:	4b4e      	ldr	r3, [pc, #312]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039b4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039bc:	494a      	ldr	r1, [pc, #296]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80039cc:	d101      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80039ce:	2301      	movs	r3, #1
 80039d0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d101      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80039da:	2301      	movs	r3, #1
 80039dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d001      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80039ea:	2301      	movs	r3, #1
 80039ec:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0320 	and.w	r3, r3, #32
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	f000 808b 	beq.w	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80039fc:	4b3a      	ldr	r3, [pc, #232]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a00:	4a39      	ldr	r2, [pc, #228]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a06:	6413      	str	r3, [r2, #64]	; 0x40
 8003a08:	4b37      	ldr	r3, [pc, #220]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a10:	60bb      	str	r3, [r7, #8]
 8003a12:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a14:	4b35      	ldr	r3, [pc, #212]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a34      	ldr	r2, [pc, #208]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a20:	f7fe f9c8 	bl	8001db4 <HAL_GetTick>
 8003a24:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a26:	e008      	b.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a28:	f7fe f9c4 	bl	8001db4 <HAL_GetTick>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	1ad3      	subs	r3, r2, r3
 8003a32:	2b64      	cmp	r3, #100	; 0x64
 8003a34:	d901      	bls.n	8003a3a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e357      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a3a:	4b2c      	ldr	r3, [pc, #176]	; (8003aec <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d0f0      	beq.n	8003a28 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003a46:	4b28      	ldr	r3, [pc, #160]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a4e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d035      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5e:	693a      	ldr	r2, [r7, #16]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d02e      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a64:	4b20      	ldr	r3, [pc, #128]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a6c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a6e:	4b1e      	ldr	r3, [pc, #120]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a72:	4a1d      	ldr	r2, [pc, #116]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a78:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a7a:	4b1b      	ldr	r3, [pc, #108]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a7e:	4a1a      	ldr	r2, [pc, #104]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a84:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003a86:	4a18      	ldr	r2, [pc, #96]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d114      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a98:	f7fe f98c 	bl	8001db4 <HAL_GetTick>
 8003a9c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a9e:	e00a      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe f988 	bl	8001db4 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	697b      	ldr	r3, [r7, #20]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d901      	bls.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003ab2:	2303      	movs	r3, #3
 8003ab4:	e319      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ab6:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f003 0302 	and.w	r3, r3, #2
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d0ee      	beq.n	8003aa0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ace:	d111      	bne.n	8003af4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003ad0:	4b05      	ldr	r3, [pc, #20]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad2:	689b      	ldr	r3, [r3, #8]
 8003ad4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003ade:	400b      	ands	r3, r1
 8003ae0:	4901      	ldr	r1, [pc, #4]	; (8003ae8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	608b      	str	r3, [r1, #8]
 8003ae6:	e00b      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003ae8:	40023800 	.word	0x40023800
 8003aec:	40007000 	.word	0x40007000
 8003af0:	0ffffcff 	.word	0x0ffffcff
 8003af4:	4baa      	ldr	r3, [pc, #680]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	4aa9      	ldr	r2, [pc, #676]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003afa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003afe:	6093      	str	r3, [r2, #8]
 8003b00:	4ba7      	ldr	r3, [pc, #668]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b0c:	49a4      	ldr	r1, [pc, #656]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f003 0310 	and.w	r3, r3, #16
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d010      	beq.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b1e:	4ba0      	ldr	r3, [pc, #640]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b24:	4a9e      	ldr	r2, [pc, #632]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b26:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b2a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b2e:	4b9c      	ldr	r3, [pc, #624]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b30:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b38:	4999      	ldr	r1, [pc, #612]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d00a      	beq.n	8003b62 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b4c:	4b94      	ldr	r3, [pc, #592]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b52:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b5a:	4991      	ldr	r1, [pc, #580]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d00a      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003b6e:	4b8c      	ldr	r3, [pc, #560]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b74:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003b7c:	4988      	ldr	r1, [pc, #544]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d00a      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003b90:	4b83      	ldr	r3, [pc, #524]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003b92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b96:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003b9e:	4980      	ldr	r1, [pc, #512]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d00a      	beq.n	8003bc8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003bb2:	4b7b      	ldr	r3, [pc, #492]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bb8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	4977      	ldr	r1, [pc, #476]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00a      	beq.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003bd4:	4b72      	ldr	r3, [pc, #456]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bda:	f023 0203 	bic.w	r2, r3, #3
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003be2:	496f      	ldr	r1, [pc, #444]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003be4:	4313      	orrs	r3, r2
 8003be6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d00a      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003bf6:	4b6a      	ldr	r3, [pc, #424]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bfc:	f023 020c 	bic.w	r2, r3, #12
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c04:	4966      	ldr	r1, [pc, #408]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c06:	4313      	orrs	r3, r2
 8003c08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d00a      	beq.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c18:	4b61      	ldr	r3, [pc, #388]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c1e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c26:	495e      	ldr	r1, [pc, #376]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d00a      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003c3a:	4b59      	ldr	r3, [pc, #356]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c40:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	4955      	ldr	r1, [pc, #340]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d00a      	beq.n	8003c72 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003c5c:	4b50      	ldr	r3, [pc, #320]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c6a:	494d      	ldr	r1, [pc, #308]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00a      	beq.n	8003c94 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003c7e:	4b48      	ldr	r3, [pc, #288]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8c:	4944      	ldr	r1, [pc, #272]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d00a      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cae:	493c      	ldr	r1, [pc, #240]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d00a      	beq.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003cc2:	4b37      	ldr	r3, [pc, #220]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd0:	4933      	ldr	r1, [pc, #204]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d00a      	beq.n	8003cfa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ce4:	4b2e      	ldr	r3, [pc, #184]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cea:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cf2:	492b      	ldr	r1, [pc, #172]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d011      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d06:	4b26      	ldr	r3, [pc, #152]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d0c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d20:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d24:	d101      	bne.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d26:	2301      	movs	r3, #1
 8003d28:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003d36:	2301      	movs	r3, #1
 8003d38:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d46:	4b16      	ldr	r3, [pc, #88]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d54:	4912      	ldr	r1, [pc, #72]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d00b      	beq.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003d68:	4b0d      	ldr	r3, [pc, #52]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d78:	4909      	ldr	r1, [pc, #36]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003d80:	69fb      	ldr	r3, [r7, #28]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d006      	beq.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	f000 80d9 	beq.w	8003f46 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003d94:	4b02      	ldr	r3, [pc, #8]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a01      	ldr	r2, [pc, #4]	; (8003da0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d9a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003d9e:	e001      	b.n	8003da4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003da0:	40023800 	.word	0x40023800
 8003da4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003da6:	f7fe f805 	bl	8001db4 <HAL_GetTick>
 8003daa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dac:	e008      	b.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003dae:	f7fe f801 	bl	8001db4 <HAL_GetTick>
 8003db2:	4602      	mov	r2, r0
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d901      	bls.n	8003dc0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	e194      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003dc0:	4b6c      	ldr	r3, [pc, #432]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1f0      	bne.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f003 0301 	and.w	r3, r3, #1
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d021      	beq.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d11d      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003de0:	4b64      	ldr	r3, [pc, #400]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003de6:	0c1b      	lsrs	r3, r3, #16
 8003de8:	f003 0303 	and.w	r3, r3, #3
 8003dec:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003dee:	4b61      	ldr	r3, [pc, #388]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003df0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003df4:	0e1b      	lsrs	r3, r3, #24
 8003df6:	f003 030f 	and.w	r3, r3, #15
 8003dfa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	019a      	lsls	r2, r3, #6
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	431a      	orrs	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	061b      	lsls	r3, r3, #24
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	071b      	lsls	r3, r3, #28
 8003e14:	4957      	ldr	r1, [pc, #348]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e16:	4313      	orrs	r3, r2
 8003e18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d004      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e2c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e30:	d00a      	beq.n	8003e48 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d02e      	beq.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e46:	d129      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003e48:	4b4a      	ldr	r3, [pc, #296]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e4e:	0c1b      	lsrs	r3, r3, #16
 8003e50:	f003 0303 	and.w	r3, r3, #3
 8003e54:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003e56:	4b47      	ldr	r3, [pc, #284]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e5c:	0f1b      	lsrs	r3, r3, #28
 8003e5e:	f003 0307 	and.w	r3, r3, #7
 8003e62:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	019a      	lsls	r2, r3, #6
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	041b      	lsls	r3, r3, #16
 8003e6e:	431a      	orrs	r2, r3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	061b      	lsls	r3, r3, #24
 8003e76:	431a      	orrs	r2, r3
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	071b      	lsls	r3, r3, #28
 8003e7c:	493d      	ldr	r1, [pc, #244]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003e84:	4b3b      	ldr	r3, [pc, #236]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e86:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e8a:	f023 021f 	bic.w	r2, r3, #31
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e92:	3b01      	subs	r3, #1
 8003e94:	4937      	ldr	r1, [pc, #220]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003e96:	4313      	orrs	r3, r2
 8003e98:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d01d      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ea8:	4b32      	ldr	r3, [pc, #200]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003eae:	0e1b      	lsrs	r3, r3, #24
 8003eb0:	f003 030f 	and.w	r3, r3, #15
 8003eb4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003eb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ebc:	0f1b      	lsrs	r3, r3, #28
 8003ebe:	f003 0307 	and.w	r3, r3, #7
 8003ec2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	019a      	lsls	r2, r3, #6
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	691b      	ldr	r3, [r3, #16]
 8003ece:	041b      	lsls	r3, r3, #16
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	061b      	lsls	r3, r3, #24
 8003ed6:	431a      	orrs	r2, r3
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	071b      	lsls	r3, r3, #28
 8003edc:	4925      	ldr	r1, [pc, #148]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d011      	beq.n	8003f14 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	019a      	lsls	r2, r3, #6
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	041b      	lsls	r3, r3, #16
 8003efc:	431a      	orrs	r2, r3
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	68db      	ldr	r3, [r3, #12]
 8003f02:	061b      	lsls	r3, r3, #24
 8003f04:	431a      	orrs	r2, r3
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	071b      	lsls	r3, r3, #28
 8003f0c:	4919      	ldr	r1, [pc, #100]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f14:	4b17      	ldr	r3, [pc, #92]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a16      	ldr	r2, [pc, #88]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003f1e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f20:	f7fd ff48 	bl	8001db4 <HAL_GetTick>
 8003f24:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f28:	f7fd ff44 	bl	8001db4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e0d7      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f3a:	4b0e      	ldr	r3, [pc, #56]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 80cd 	bne.w	80040e8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003f4e:	4b09      	ldr	r3, [pc, #36]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a08      	ldr	r2, [pc, #32]	; (8003f74 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f58:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f5a:	f7fd ff2b 	bl	8001db4 <HAL_GetTick>
 8003f5e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f60:	e00a      	b.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f62:	f7fd ff27 	bl	8001db4 <HAL_GetTick>
 8003f66:	4602      	mov	r2, r0
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	2b64      	cmp	r3, #100	; 0x64
 8003f6e:	d903      	bls.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	e0ba      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003f74:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003f78:	4b5e      	ldr	r3, [pc, #376]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f84:	d0ed      	beq.n	8003f62 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d003      	beq.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d009      	beq.n	8003fae <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d02e      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d12a      	bne.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003fae:	4b51      	ldr	r3, [pc, #324]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fb4:	0c1b      	lsrs	r3, r3, #16
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003fbc:	4b4d      	ldr	r3, [pc, #308]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fc2:	0f1b      	lsrs	r3, r3, #28
 8003fc4:	f003 0307 	and.w	r3, r3, #7
 8003fc8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	019a      	lsls	r2, r3, #6
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	041b      	lsls	r3, r3, #16
 8003fd4:	431a      	orrs	r2, r3
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	699b      	ldr	r3, [r3, #24]
 8003fda:	061b      	lsls	r3, r3, #24
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	071b      	lsls	r3, r3, #28
 8003fe2:	4944      	ldr	r1, [pc, #272]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003fec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ff0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	021b      	lsls	r3, r3, #8
 8003ffc:	493d      	ldr	r1, [pc, #244]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d022      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004014:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004018:	d11d      	bne.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800401a:	4b36      	ldr	r3, [pc, #216]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	0e1b      	lsrs	r3, r3, #24
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004028:	4b32      	ldr	r3, [pc, #200]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800402a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800402e:	0f1b      	lsrs	r3, r3, #28
 8004030:	f003 0307 	and.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	019a      	lsls	r2, r3, #6
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a1b      	ldr	r3, [r3, #32]
 8004040:	041b      	lsls	r3, r3, #16
 8004042:	431a      	orrs	r2, r3
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	061b      	lsls	r3, r3, #24
 8004048:	431a      	orrs	r2, r3
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	071b      	lsls	r3, r3, #28
 800404e:	4929      	ldr	r1, [pc, #164]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004050:	4313      	orrs	r3, r2
 8004052:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0308 	and.w	r3, r3, #8
 800405e:	2b00      	cmp	r3, #0
 8004060:	d028      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004062:	4b24      	ldr	r3, [pc, #144]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004064:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004068:	0e1b      	lsrs	r3, r3, #24
 800406a:	f003 030f 	and.w	r3, r3, #15
 800406e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004070:	4b20      	ldr	r3, [pc, #128]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004076:	0c1b      	lsrs	r3, r3, #16
 8004078:	f003 0303 	and.w	r3, r3, #3
 800407c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	019a      	lsls	r2, r3, #6
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	041b      	lsls	r3, r3, #16
 8004088:	431a      	orrs	r2, r3
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	061b      	lsls	r3, r3, #24
 800408e:	431a      	orrs	r2, r3
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	071b      	lsls	r3, r3, #28
 8004096:	4917      	ldr	r1, [pc, #92]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004098:	4313      	orrs	r3, r2
 800409a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800409e:	4b15      	ldr	r3, [pc, #84]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ac:	4911      	ldr	r1, [pc, #68]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80040b4:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040c0:	f7fd fe78 	bl	8001db4 <HAL_GetTick>
 80040c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040c6:	e008      	b.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040c8:	f7fd fe74 	bl	8001db4 <HAL_GetTick>
 80040cc:	4602      	mov	r2, r0
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	1ad3      	subs	r3, r2, r3
 80040d2:	2b64      	cmp	r3, #100	; 0x64
 80040d4:	d901      	bls.n	80040da <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040d6:	2303      	movs	r3, #3
 80040d8:	e007      	b.n	80040ea <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80040da:	4b06      	ldr	r3, [pc, #24]	; (80040f4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040e6:	d1ef      	bne.n	80040c8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3720      	adds	r7, #32
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}
 80040f2:	bf00      	nop
 80040f4:	40023800 	.word	0x40023800

080040f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e049      	b.n	800419e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d106      	bne.n	8004124 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7fd fce6 	bl	8001af0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2202      	movs	r2, #2
 8004128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	3304      	adds	r3, #4
 8004134:	4619      	mov	r1, r3
 8004136:	4610      	mov	r0, r2
 8004138:	f000 f9f6 	bl	8004528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2201      	movs	r2, #1
 8004140:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2201      	movs	r2, #1
 8004148:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3708      	adds	r7, #8
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041b6:	b2db      	uxtb	r3, r3
 80041b8:	2b01      	cmp	r3, #1
 80041ba:	d001      	beq.n	80041c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e054      	b.n	800426a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2202      	movs	r2, #2
 80041c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	68da      	ldr	r2, [r3, #12]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a26      	ldr	r2, [pc, #152]	; (8004278 <HAL_TIM_Base_Start_IT+0xd0>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d022      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041ea:	d01d      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	4a22      	ldr	r2, [pc, #136]	; (800427c <HAL_TIM_Base_Start_IT+0xd4>)
 80041f2:	4293      	cmp	r3, r2
 80041f4:	d018      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	4a21      	ldr	r2, [pc, #132]	; (8004280 <HAL_TIM_Base_Start_IT+0xd8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d013      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a1f      	ldr	r2, [pc, #124]	; (8004284 <HAL_TIM_Base_Start_IT+0xdc>)
 8004206:	4293      	cmp	r3, r2
 8004208:	d00e      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4a1e      	ldr	r2, [pc, #120]	; (8004288 <HAL_TIM_Base_Start_IT+0xe0>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d009      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a1c      	ldr	r2, [pc, #112]	; (800428c <HAL_TIM_Base_Start_IT+0xe4>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d004      	beq.n	8004228 <HAL_TIM_Base_Start_IT+0x80>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1b      	ldr	r2, [pc, #108]	; (8004290 <HAL_TIM_Base_Start_IT+0xe8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d115      	bne.n	8004254 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	689a      	ldr	r2, [r3, #8]
 800422e:	4b19      	ldr	r3, [pc, #100]	; (8004294 <HAL_TIM_Base_Start_IT+0xec>)
 8004230:	4013      	ands	r3, r2
 8004232:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	2b06      	cmp	r3, #6
 8004238:	d015      	beq.n	8004266 <HAL_TIM_Base_Start_IT+0xbe>
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004240:	d011      	beq.n	8004266 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681a      	ldr	r2, [r3, #0]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0201 	orr.w	r2, r2, #1
 8004250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004252:	e008      	b.n	8004266 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f042 0201 	orr.w	r2, r2, #1
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	e000      	b.n	8004268 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004266:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	3714      	adds	r7, #20
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	40010000 	.word	0x40010000
 800427c:	40000400 	.word	0x40000400
 8004280:	40000800 	.word	0x40000800
 8004284:	40000c00 	.word	0x40000c00
 8004288:	40010400 	.word	0x40010400
 800428c:	40014000 	.word	0x40014000
 8004290:	40001800 	.word	0x40001800
 8004294:	00010007 	.word	0x00010007

08004298 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b082      	sub	sp, #8
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	f003 0302 	and.w	r3, r3, #2
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d122      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	68db      	ldr	r3, [r3, #12]
 80042b4:	f003 0302 	and.w	r3, r3, #2
 80042b8:	2b02      	cmp	r3, #2
 80042ba:	d11b      	bne.n	80042f4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f06f 0202 	mvn.w	r2, #2
 80042c4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2201      	movs	r2, #1
 80042ca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	f003 0303 	and.w	r3, r3, #3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d003      	beq.n	80042e2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f000 f905 	bl	80044ea <HAL_TIM_IC_CaptureCallback>
 80042e0:	e005      	b.n	80042ee <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f000 f8f7 	bl	80044d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f908 	bl	80044fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d122      	bne.n	8004348 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b04      	cmp	r3, #4
 800430e:	d11b      	bne.n	8004348 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f06f 0204 	mvn.w	r2, #4
 8004318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2202      	movs	r2, #2
 800431e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800432a:	2b00      	cmp	r3, #0
 800432c:	d003      	beq.n	8004336 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	f000 f8db 	bl	80044ea <HAL_TIM_IC_CaptureCallback>
 8004334:	e005      	b.n	8004342 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004336:	6878      	ldr	r0, [r7, #4]
 8004338:	f000 f8cd 	bl	80044d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	f000 f8de 	bl	80044fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2200      	movs	r2, #0
 8004346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b08      	cmp	r3, #8
 8004354:	d122      	bne.n	800439c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0308 	and.w	r3, r3, #8
 8004360:	2b08      	cmp	r3, #8
 8004362:	d11b      	bne.n	800439c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	f06f 0208 	mvn.w	r2, #8
 800436c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2204      	movs	r2, #4
 8004372:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	f003 0303 	and.w	r3, r3, #3
 800437e:	2b00      	cmp	r3, #0
 8004380:	d003      	beq.n	800438a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004382:	6878      	ldr	r0, [r7, #4]
 8004384:	f000 f8b1 	bl	80044ea <HAL_TIM_IC_CaptureCallback>
 8004388:	e005      	b.n	8004396 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f8a3 	bl	80044d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 f8b4 	bl	80044fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2200      	movs	r2, #0
 800439a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	691b      	ldr	r3, [r3, #16]
 80043a2:	f003 0310 	and.w	r3, r3, #16
 80043a6:	2b10      	cmp	r3, #16
 80043a8:	d122      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	68db      	ldr	r3, [r3, #12]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d11b      	bne.n	80043f0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2208      	movs	r2, #8
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f887 	bl	80044ea <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f879 	bl	80044d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f88a 	bl	80044fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0301 	and.w	r3, r3, #1
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d10e      	bne.n	800441c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	2b01      	cmp	r3, #1
 800440a:	d107      	bne.n	800441c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0201 	mvn.w	r2, #1
 8004414:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f7fd f978 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004426:	2b80      	cmp	r3, #128	; 0x80
 8004428:	d10e      	bne.n	8004448 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004434:	2b80      	cmp	r3, #128	; 0x80
 8004436:	d107      	bne.n	8004448 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004442:	6878      	ldr	r0, [r7, #4]
 8004444:	f000 f9a8 	bl	8004798 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	691b      	ldr	r3, [r3, #16]
 800444e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004452:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004456:	d10e      	bne.n	8004476 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	68db      	ldr	r3, [r3, #12]
 800445e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d107      	bne.n	8004476 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800446e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f000 f99b 	bl	80047ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	691b      	ldr	r3, [r3, #16]
 800447c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004480:	2b40      	cmp	r3, #64	; 0x40
 8004482:	d10e      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800448e:	2b40      	cmp	r3, #64	; 0x40
 8004490:	d107      	bne.n	80044a2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800449a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800449c:	6878      	ldr	r0, [r7, #4]
 800449e:	f000 f838 	bl	8004512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	f003 0320 	and.w	r3, r3, #32
 80044ac:	2b20      	cmp	r3, #32
 80044ae:	d10e      	bne.n	80044ce <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	f003 0320 	and.w	r3, r3, #32
 80044ba:	2b20      	cmp	r3, #32
 80044bc:	d107      	bne.n	80044ce <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f06f 0220 	mvn.w	r2, #32
 80044c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 f95b 	bl	8004784 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80044ce:	bf00      	nop
 80044d0:	3708      	adds	r7, #8
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80044d6:	b480      	push	{r7}
 80044d8:	b083      	sub	sp, #12
 80044da:	af00      	add	r7, sp, #0
 80044dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80044de:	bf00      	nop
 80044e0:	370c      	adds	r7, #12
 80044e2:	46bd      	mov	sp, r7
 80044e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e8:	4770      	bx	lr

080044ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80044ea:	b480      	push	{r7}
 80044ec:	b083      	sub	sp, #12
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044f2:	bf00      	nop
 80044f4:	370c      	adds	r7, #12
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044fe:	b480      	push	{r7}
 8004500:	b083      	sub	sp, #12
 8004502:	af00      	add	r7, sp, #0
 8004504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004506:	bf00      	nop
 8004508:	370c      	adds	r7, #12
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800451a:	bf00      	nop
 800451c:	370c      	adds	r7, #12
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr
	...

08004528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a40      	ldr	r2, [pc, #256]	; (800463c <TIM_Base_SetConfig+0x114>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d013      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004546:	d00f      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	4a3d      	ldr	r2, [pc, #244]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800454c:	4293      	cmp	r3, r2
 800454e:	d00b      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a3c      	ldr	r2, [pc, #240]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d007      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	4a3b      	ldr	r2, [pc, #236]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d003      	beq.n	8004568 <TIM_Base_SetConfig+0x40>
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a3a      	ldr	r2, [pc, #232]	; (800464c <TIM_Base_SetConfig+0x124>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d108      	bne.n	800457a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800456e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	68fa      	ldr	r2, [r7, #12]
 8004576:	4313      	orrs	r3, r2
 8004578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a2f      	ldr	r2, [pc, #188]	; (800463c <TIM_Base_SetConfig+0x114>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d02b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004588:	d027      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	4a2c      	ldr	r2, [pc, #176]	; (8004640 <TIM_Base_SetConfig+0x118>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d023      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	4a2b      	ldr	r2, [pc, #172]	; (8004644 <TIM_Base_SetConfig+0x11c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d01f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	4a2a      	ldr	r2, [pc, #168]	; (8004648 <TIM_Base_SetConfig+0x120>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d01b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a29      	ldr	r2, [pc, #164]	; (800464c <TIM_Base_SetConfig+0x124>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d017      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	4a28      	ldr	r2, [pc, #160]	; (8004650 <TIM_Base_SetConfig+0x128>)
 80045ae:	4293      	cmp	r3, r2
 80045b0:	d013      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4a27      	ldr	r2, [pc, #156]	; (8004654 <TIM_Base_SetConfig+0x12c>)
 80045b6:	4293      	cmp	r3, r2
 80045b8:	d00f      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a26      	ldr	r2, [pc, #152]	; (8004658 <TIM_Base_SetConfig+0x130>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d00b      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a25      	ldr	r2, [pc, #148]	; (800465c <TIM_Base_SetConfig+0x134>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d007      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a24      	ldr	r2, [pc, #144]	; (8004660 <TIM_Base_SetConfig+0x138>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d003      	beq.n	80045da <TIM_Base_SetConfig+0xb2>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a23      	ldr	r2, [pc, #140]	; (8004664 <TIM_Base_SetConfig+0x13c>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d108      	bne.n	80045ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	68db      	ldr	r3, [r3, #12]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	695b      	ldr	r3, [r3, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	68fa      	ldr	r2, [r7, #12]
 80045fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	4a0a      	ldr	r2, [pc, #40]	; (800463c <TIM_Base_SetConfig+0x114>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d003      	beq.n	8004620 <TIM_Base_SetConfig+0xf8>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	4a0c      	ldr	r2, [pc, #48]	; (800464c <TIM_Base_SetConfig+0x124>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d103      	bne.n	8004628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	691a      	ldr	r2, [r3, #16]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	615a      	str	r2, [r3, #20]
}
 800462e:	bf00      	nop
 8004630:	3714      	adds	r7, #20
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40010000 	.word	0x40010000
 8004640:	40000400 	.word	0x40000400
 8004644:	40000800 	.word	0x40000800
 8004648:	40000c00 	.word	0x40000c00
 800464c:	40010400 	.word	0x40010400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800
 800465c:	40001800 	.word	0x40001800
 8004660:	40001c00 	.word	0x40001c00
 8004664:	40002000 	.word	0x40002000

08004668 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004668:	b480      	push	{r7}
 800466a:	b085      	sub	sp, #20
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
 8004670:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004678:	2b01      	cmp	r3, #1
 800467a:	d101      	bne.n	8004680 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800467c:	2302      	movs	r3, #2
 800467e:	e06d      	b.n	800475c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2201      	movs	r2, #1
 8004684:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2202      	movs	r2, #2
 800468c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	4a30      	ldr	r2, [pc, #192]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046a6:	4293      	cmp	r3, r2
 80046a8:	d004      	beq.n	80046b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d108      	bne.n	80046c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80046ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68fa      	ldr	r2, [r7, #12]
 80046c2:	4313      	orrs	r3, r2
 80046c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a20      	ldr	r2, [pc, #128]	; (8004768 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d022      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046f2:	d01d      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a1d      	ldr	r2, [pc, #116]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d018      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4a1c      	ldr	r2, [pc, #112]	; (8004774 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004704:	4293      	cmp	r3, r2
 8004706:	d013      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a1a      	ldr	r2, [pc, #104]	; (8004778 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00e      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a15      	ldr	r2, [pc, #84]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d009      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d004      	beq.n	8004730 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a15      	ldr	r2, [pc, #84]	; (8004780 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d10c      	bne.n	800474a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004736:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	68ba      	ldr	r2, [r7, #8]
 800473e:	4313      	orrs	r3, r2
 8004740:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2201      	movs	r2, #1
 800474e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800475a:	2300      	movs	r3, #0
}
 800475c:	4618      	mov	r0, r3
 800475e:	3714      	adds	r7, #20
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr
 8004768:	40010000 	.word	0x40010000
 800476c:	40010400 	.word	0x40010400
 8004770:	40000400 	.word	0x40000400
 8004774:	40000800 	.word	0x40000800
 8004778:	40000c00 	.word	0x40000c00
 800477c:	40014000 	.word	0x40014000
 8004780:	40001800 	.word	0x40001800

08004784 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004798:	b480      	push	{r7}
 800479a:	b083      	sub	sp, #12
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047a0:	bf00      	nop
 80047a2:	370c      	adds	r7, #12
 80047a4:	46bd      	mov	sp, r7
 80047a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047aa:	4770      	bx	lr

080047ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047b4:	bf00      	nop
 80047b6:	370c      	adds	r7, #12
 80047b8:	46bd      	mov	sp, r7
 80047ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047be:	4770      	bx	lr

080047c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b082      	sub	sp, #8
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e040      	b.n	8004854 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d106      	bne.n	80047e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2200      	movs	r2, #0
 80047de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fd f9da 	bl	8001b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2224      	movs	r2, #36	; 0x24
 80047ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681a      	ldr	r2, [r3, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0201 	bic.w	r2, r2, #1
 80047fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047fe:	6878      	ldr	r0, [r7, #4]
 8004800:	f000 f82c 	bl	800485c <UART_SetConfig>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d101      	bne.n	800480e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800480a:	2301      	movs	r3, #1
 800480c:	e022      	b.n	8004854 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004812:	2b00      	cmp	r3, #0
 8004814:	d002      	beq.n	800481c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f000 fa84 	bl	8004d24 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800482a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689a      	ldr	r2, [r3, #8]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800483a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f042 0201 	orr.w	r2, r2, #1
 800484a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f000 fb0b 	bl	8004e68 <UART_CheckIdleState>
 8004852:	4603      	mov	r3, r0
}
 8004854:	4618      	mov	r0, r3
 8004856:	3708      	adds	r7, #8
 8004858:	46bd      	mov	sp, r7
 800485a:	bd80      	pop	{r7, pc}

0800485c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004864:	2300      	movs	r3, #0
 8004866:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689a      	ldr	r2, [r3, #8]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	431a      	orrs	r2, r3
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	431a      	orrs	r2, r3
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	69db      	ldr	r3, [r3, #28]
 800487c:	4313      	orrs	r3, r2
 800487e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681a      	ldr	r2, [r3, #0]
 8004886:	4ba6      	ldr	r3, [pc, #664]	; (8004b20 <UART_SetConfig+0x2c4>)
 8004888:	4013      	ands	r3, r2
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	6812      	ldr	r2, [r2, #0]
 800488e:	6979      	ldr	r1, [r7, #20]
 8004890:	430b      	orrs	r3, r1
 8004892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68da      	ldr	r2, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	430a      	orrs	r2, r1
 80048a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	697a      	ldr	r2, [r7, #20]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	430a      	orrs	r2, r1
 80048cc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a94      	ldr	r2, [pc, #592]	; (8004b24 <UART_SetConfig+0x2c8>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d120      	bne.n	800491a <UART_SetConfig+0xbe>
 80048d8:	4b93      	ldr	r3, [pc, #588]	; (8004b28 <UART_SetConfig+0x2cc>)
 80048da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d816      	bhi.n	8004914 <UART_SetConfig+0xb8>
 80048e6:	a201      	add	r2, pc, #4	; (adr r2, 80048ec <UART_SetConfig+0x90>)
 80048e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048ec:	080048fd 	.word	0x080048fd
 80048f0:	08004909 	.word	0x08004909
 80048f4:	08004903 	.word	0x08004903
 80048f8:	0800490f 	.word	0x0800490f
 80048fc:	2301      	movs	r3, #1
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e150      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004902:	2302      	movs	r3, #2
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e14d      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004908:	2304      	movs	r3, #4
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e14a      	b.n	8004ba4 <UART_SetConfig+0x348>
 800490e:	2308      	movs	r3, #8
 8004910:	77fb      	strb	r3, [r7, #31]
 8004912:	e147      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004914:	2310      	movs	r3, #16
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e144      	b.n	8004ba4 <UART_SetConfig+0x348>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a83      	ldr	r2, [pc, #524]	; (8004b2c <UART_SetConfig+0x2d0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d132      	bne.n	800498a <UART_SetConfig+0x12e>
 8004924:	4b80      	ldr	r3, [pc, #512]	; (8004b28 <UART_SetConfig+0x2cc>)
 8004926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b0c      	cmp	r3, #12
 8004930:	d828      	bhi.n	8004984 <UART_SetConfig+0x128>
 8004932:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <UART_SetConfig+0xdc>)
 8004934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004938:	0800496d 	.word	0x0800496d
 800493c:	08004985 	.word	0x08004985
 8004940:	08004985 	.word	0x08004985
 8004944:	08004985 	.word	0x08004985
 8004948:	08004979 	.word	0x08004979
 800494c:	08004985 	.word	0x08004985
 8004950:	08004985 	.word	0x08004985
 8004954:	08004985 	.word	0x08004985
 8004958:	08004973 	.word	0x08004973
 800495c:	08004985 	.word	0x08004985
 8004960:	08004985 	.word	0x08004985
 8004964:	08004985 	.word	0x08004985
 8004968:	0800497f 	.word	0x0800497f
 800496c:	2300      	movs	r3, #0
 800496e:	77fb      	strb	r3, [r7, #31]
 8004970:	e118      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004972:	2302      	movs	r3, #2
 8004974:	77fb      	strb	r3, [r7, #31]
 8004976:	e115      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004978:	2304      	movs	r3, #4
 800497a:	77fb      	strb	r3, [r7, #31]
 800497c:	e112      	b.n	8004ba4 <UART_SetConfig+0x348>
 800497e:	2308      	movs	r3, #8
 8004980:	77fb      	strb	r3, [r7, #31]
 8004982:	e10f      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e10c      	b.n	8004ba4 <UART_SetConfig+0x348>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a68      	ldr	r2, [pc, #416]	; (8004b30 <UART_SetConfig+0x2d4>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d120      	bne.n	80049d6 <UART_SetConfig+0x17a>
 8004994:	4b64      	ldr	r3, [pc, #400]	; (8004b28 <UART_SetConfig+0x2cc>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800499e:	2b30      	cmp	r3, #48	; 0x30
 80049a0:	d013      	beq.n	80049ca <UART_SetConfig+0x16e>
 80049a2:	2b30      	cmp	r3, #48	; 0x30
 80049a4:	d814      	bhi.n	80049d0 <UART_SetConfig+0x174>
 80049a6:	2b20      	cmp	r3, #32
 80049a8:	d009      	beq.n	80049be <UART_SetConfig+0x162>
 80049aa:	2b20      	cmp	r3, #32
 80049ac:	d810      	bhi.n	80049d0 <UART_SetConfig+0x174>
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d002      	beq.n	80049b8 <UART_SetConfig+0x15c>
 80049b2:	2b10      	cmp	r3, #16
 80049b4:	d006      	beq.n	80049c4 <UART_SetConfig+0x168>
 80049b6:	e00b      	b.n	80049d0 <UART_SetConfig+0x174>
 80049b8:	2300      	movs	r3, #0
 80049ba:	77fb      	strb	r3, [r7, #31]
 80049bc:	e0f2      	b.n	8004ba4 <UART_SetConfig+0x348>
 80049be:	2302      	movs	r3, #2
 80049c0:	77fb      	strb	r3, [r7, #31]
 80049c2:	e0ef      	b.n	8004ba4 <UART_SetConfig+0x348>
 80049c4:	2304      	movs	r3, #4
 80049c6:	77fb      	strb	r3, [r7, #31]
 80049c8:	e0ec      	b.n	8004ba4 <UART_SetConfig+0x348>
 80049ca:	2308      	movs	r3, #8
 80049cc:	77fb      	strb	r3, [r7, #31]
 80049ce:	e0e9      	b.n	8004ba4 <UART_SetConfig+0x348>
 80049d0:	2310      	movs	r3, #16
 80049d2:	77fb      	strb	r3, [r7, #31]
 80049d4:	e0e6      	b.n	8004ba4 <UART_SetConfig+0x348>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a56      	ldr	r2, [pc, #344]	; (8004b34 <UART_SetConfig+0x2d8>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d120      	bne.n	8004a22 <UART_SetConfig+0x1c6>
 80049e0:	4b51      	ldr	r3, [pc, #324]	; (8004b28 <UART_SetConfig+0x2cc>)
 80049e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049e6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80049ea:	2bc0      	cmp	r3, #192	; 0xc0
 80049ec:	d013      	beq.n	8004a16 <UART_SetConfig+0x1ba>
 80049ee:	2bc0      	cmp	r3, #192	; 0xc0
 80049f0:	d814      	bhi.n	8004a1c <UART_SetConfig+0x1c0>
 80049f2:	2b80      	cmp	r3, #128	; 0x80
 80049f4:	d009      	beq.n	8004a0a <UART_SetConfig+0x1ae>
 80049f6:	2b80      	cmp	r3, #128	; 0x80
 80049f8:	d810      	bhi.n	8004a1c <UART_SetConfig+0x1c0>
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d002      	beq.n	8004a04 <UART_SetConfig+0x1a8>
 80049fe:	2b40      	cmp	r3, #64	; 0x40
 8004a00:	d006      	beq.n	8004a10 <UART_SetConfig+0x1b4>
 8004a02:	e00b      	b.n	8004a1c <UART_SetConfig+0x1c0>
 8004a04:	2300      	movs	r3, #0
 8004a06:	77fb      	strb	r3, [r7, #31]
 8004a08:	e0cc      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a0a:	2302      	movs	r3, #2
 8004a0c:	77fb      	strb	r3, [r7, #31]
 8004a0e:	e0c9      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a10:	2304      	movs	r3, #4
 8004a12:	77fb      	strb	r3, [r7, #31]
 8004a14:	e0c6      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a16:	2308      	movs	r3, #8
 8004a18:	77fb      	strb	r3, [r7, #31]
 8004a1a:	e0c3      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a1c:	2310      	movs	r3, #16
 8004a1e:	77fb      	strb	r3, [r7, #31]
 8004a20:	e0c0      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a44      	ldr	r2, [pc, #272]	; (8004b38 <UART_SetConfig+0x2dc>)
 8004a28:	4293      	cmp	r3, r2
 8004a2a:	d125      	bne.n	8004a78 <UART_SetConfig+0x21c>
 8004a2c:	4b3e      	ldr	r3, [pc, #248]	; (8004b28 <UART_SetConfig+0x2cc>)
 8004a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a3a:	d017      	beq.n	8004a6c <UART_SetConfig+0x210>
 8004a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a40:	d817      	bhi.n	8004a72 <UART_SetConfig+0x216>
 8004a42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a46:	d00b      	beq.n	8004a60 <UART_SetConfig+0x204>
 8004a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a4c:	d811      	bhi.n	8004a72 <UART_SetConfig+0x216>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <UART_SetConfig+0x1fe>
 8004a52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a56:	d006      	beq.n	8004a66 <UART_SetConfig+0x20a>
 8004a58:	e00b      	b.n	8004a72 <UART_SetConfig+0x216>
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	77fb      	strb	r3, [r7, #31]
 8004a5e:	e0a1      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a60:	2302      	movs	r3, #2
 8004a62:	77fb      	strb	r3, [r7, #31]
 8004a64:	e09e      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a66:	2304      	movs	r3, #4
 8004a68:	77fb      	strb	r3, [r7, #31]
 8004a6a:	e09b      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a6c:	2308      	movs	r3, #8
 8004a6e:	77fb      	strb	r3, [r7, #31]
 8004a70:	e098      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a72:	2310      	movs	r3, #16
 8004a74:	77fb      	strb	r3, [r7, #31]
 8004a76:	e095      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a2f      	ldr	r2, [pc, #188]	; (8004b3c <UART_SetConfig+0x2e0>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d125      	bne.n	8004ace <UART_SetConfig+0x272>
 8004a82:	4b29      	ldr	r3, [pc, #164]	; (8004b28 <UART_SetConfig+0x2cc>)
 8004a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004a8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a90:	d017      	beq.n	8004ac2 <UART_SetConfig+0x266>
 8004a92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a96:	d817      	bhi.n	8004ac8 <UART_SetConfig+0x26c>
 8004a98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a9c:	d00b      	beq.n	8004ab6 <UART_SetConfig+0x25a>
 8004a9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa2:	d811      	bhi.n	8004ac8 <UART_SetConfig+0x26c>
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <UART_SetConfig+0x254>
 8004aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004aac:	d006      	beq.n	8004abc <UART_SetConfig+0x260>
 8004aae:	e00b      	b.n	8004ac8 <UART_SetConfig+0x26c>
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	77fb      	strb	r3, [r7, #31]
 8004ab4:	e076      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004ab6:	2302      	movs	r3, #2
 8004ab8:	77fb      	strb	r3, [r7, #31]
 8004aba:	e073      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004abc:	2304      	movs	r3, #4
 8004abe:	77fb      	strb	r3, [r7, #31]
 8004ac0:	e070      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004ac2:	2308      	movs	r3, #8
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e06d      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004ac8:	2310      	movs	r3, #16
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e06a      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a1b      	ldr	r2, [pc, #108]	; (8004b40 <UART_SetConfig+0x2e4>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d138      	bne.n	8004b4a <UART_SetConfig+0x2ee>
 8004ad8:	4b13      	ldr	r3, [pc, #76]	; (8004b28 <UART_SetConfig+0x2cc>)
 8004ada:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ade:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004ae2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004ae6:	d017      	beq.n	8004b18 <UART_SetConfig+0x2bc>
 8004ae8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004aec:	d82a      	bhi.n	8004b44 <UART_SetConfig+0x2e8>
 8004aee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af2:	d00b      	beq.n	8004b0c <UART_SetConfig+0x2b0>
 8004af4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004af8:	d824      	bhi.n	8004b44 <UART_SetConfig+0x2e8>
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <UART_SetConfig+0x2aa>
 8004afe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b02:	d006      	beq.n	8004b12 <UART_SetConfig+0x2b6>
 8004b04:	e01e      	b.n	8004b44 <UART_SetConfig+0x2e8>
 8004b06:	2300      	movs	r3, #0
 8004b08:	77fb      	strb	r3, [r7, #31]
 8004b0a:	e04b      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	77fb      	strb	r3, [r7, #31]
 8004b10:	e048      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b12:	2304      	movs	r3, #4
 8004b14:	77fb      	strb	r3, [r7, #31]
 8004b16:	e045      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b18:	2308      	movs	r3, #8
 8004b1a:	77fb      	strb	r3, [r7, #31]
 8004b1c:	e042      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b1e:	bf00      	nop
 8004b20:	efff69f3 	.word	0xefff69f3
 8004b24:	40011000 	.word	0x40011000
 8004b28:	40023800 	.word	0x40023800
 8004b2c:	40004400 	.word	0x40004400
 8004b30:	40004800 	.word	0x40004800
 8004b34:	40004c00 	.word	0x40004c00
 8004b38:	40005000 	.word	0x40005000
 8004b3c:	40011400 	.word	0x40011400
 8004b40:	40007800 	.word	0x40007800
 8004b44:	2310      	movs	r3, #16
 8004b46:	77fb      	strb	r3, [r7, #31]
 8004b48:	e02c      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a72      	ldr	r2, [pc, #456]	; (8004d18 <UART_SetConfig+0x4bc>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d125      	bne.n	8004ba0 <UART_SetConfig+0x344>
 8004b54:	4b71      	ldr	r3, [pc, #452]	; (8004d1c <UART_SetConfig+0x4c0>)
 8004b56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b5a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004b5e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b62:	d017      	beq.n	8004b94 <UART_SetConfig+0x338>
 8004b64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004b68:	d817      	bhi.n	8004b9a <UART_SetConfig+0x33e>
 8004b6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b6e:	d00b      	beq.n	8004b88 <UART_SetConfig+0x32c>
 8004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b74:	d811      	bhi.n	8004b9a <UART_SetConfig+0x33e>
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d003      	beq.n	8004b82 <UART_SetConfig+0x326>
 8004b7a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b7e:	d006      	beq.n	8004b8e <UART_SetConfig+0x332>
 8004b80:	e00b      	b.n	8004b9a <UART_SetConfig+0x33e>
 8004b82:	2300      	movs	r3, #0
 8004b84:	77fb      	strb	r3, [r7, #31]
 8004b86:	e00d      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b88:	2302      	movs	r3, #2
 8004b8a:	77fb      	strb	r3, [r7, #31]
 8004b8c:	e00a      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b8e:	2304      	movs	r3, #4
 8004b90:	77fb      	strb	r3, [r7, #31]
 8004b92:	e007      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b94:	2308      	movs	r3, #8
 8004b96:	77fb      	strb	r3, [r7, #31]
 8004b98:	e004      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004b9a:	2310      	movs	r3, #16
 8004b9c:	77fb      	strb	r3, [r7, #31]
 8004b9e:	e001      	b.n	8004ba4 <UART_SetConfig+0x348>
 8004ba0:	2310      	movs	r3, #16
 8004ba2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	69db      	ldr	r3, [r3, #28]
 8004ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bac:	d15b      	bne.n	8004c66 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004bae:	7ffb      	ldrb	r3, [r7, #31]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d828      	bhi.n	8004c06 <UART_SetConfig+0x3aa>
 8004bb4:	a201      	add	r2, pc, #4	; (adr r2, 8004bbc <UART_SetConfig+0x360>)
 8004bb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bba:	bf00      	nop
 8004bbc:	08004be1 	.word	0x08004be1
 8004bc0:	08004be9 	.word	0x08004be9
 8004bc4:	08004bf1 	.word	0x08004bf1
 8004bc8:	08004c07 	.word	0x08004c07
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c07 	.word	0x08004c07
 8004bd4:	08004c07 	.word	0x08004c07
 8004bd8:	08004c07 	.word	0x08004c07
 8004bdc:	08004bff 	.word	0x08004bff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004be0:	f7fe fe72 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e013      	b.n	8004c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be8:	f7fe fe82 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004bec:	61b8      	str	r0, [r7, #24]
        break;
 8004bee:	e00f      	b.n	8004c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004bf0:	4b4b      	ldr	r3, [pc, #300]	; (8004d20 <UART_SetConfig+0x4c4>)
 8004bf2:	61bb      	str	r3, [r7, #24]
        break;
 8004bf4:	e00c      	b.n	8004c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bf6:	f7fe fd55 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004bfa:	61b8      	str	r0, [r7, #24]
        break;
 8004bfc:	e008      	b.n	8004c10 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bfe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c02:	61bb      	str	r3, [r7, #24]
        break;
 8004c04:	e004      	b.n	8004c10 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c0a:	2301      	movs	r3, #1
 8004c0c:	77bb      	strb	r3, [r7, #30]
        break;
 8004c0e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d074      	beq.n	8004d00 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	005a      	lsls	r2, r3, #1
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	685b      	ldr	r3, [r3, #4]
 8004c1e:	085b      	lsrs	r3, r3, #1
 8004c20:	441a      	add	r2, r3
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	2b0f      	cmp	r3, #15
 8004c30:	d916      	bls.n	8004c60 <UART_SetConfig+0x404>
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c38:	d212      	bcs.n	8004c60 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	f023 030f 	bic.w	r3, r3, #15
 8004c42:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f003 0307 	and.w	r3, r3, #7
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	89fb      	ldrh	r3, [r7, #14]
 8004c52:	4313      	orrs	r3, r2
 8004c54:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	89fa      	ldrh	r2, [r7, #14]
 8004c5c:	60da      	str	r2, [r3, #12]
 8004c5e:	e04f      	b.n	8004d00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	77bb      	strb	r3, [r7, #30]
 8004c64:	e04c      	b.n	8004d00 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004c66:	7ffb      	ldrb	r3, [r7, #31]
 8004c68:	2b08      	cmp	r3, #8
 8004c6a:	d828      	bhi.n	8004cbe <UART_SetConfig+0x462>
 8004c6c:	a201      	add	r2, pc, #4	; (adr r2, 8004c74 <UART_SetConfig+0x418>)
 8004c6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c72:	bf00      	nop
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	08004cbf 	.word	0x08004cbf
 8004c84:	08004caf 	.word	0x08004caf
 8004c88:	08004cbf 	.word	0x08004cbf
 8004c8c:	08004cbf 	.word	0x08004cbf
 8004c90:	08004cbf 	.word	0x08004cbf
 8004c94:	08004cb7 	.word	0x08004cb7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c98:	f7fe fe16 	bl	80038c8 <HAL_RCC_GetPCLK1Freq>
 8004c9c:	61b8      	str	r0, [r7, #24]
        break;
 8004c9e:	e013      	b.n	8004cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ca0:	f7fe fe26 	bl	80038f0 <HAL_RCC_GetPCLK2Freq>
 8004ca4:	61b8      	str	r0, [r7, #24]
        break;
 8004ca6:	e00f      	b.n	8004cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ca8:	4b1d      	ldr	r3, [pc, #116]	; (8004d20 <UART_SetConfig+0x4c4>)
 8004caa:	61bb      	str	r3, [r7, #24]
        break;
 8004cac:	e00c      	b.n	8004cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cae:	f7fe fcf9 	bl	80036a4 <HAL_RCC_GetSysClockFreq>
 8004cb2:	61b8      	str	r0, [r7, #24]
        break;
 8004cb4:	e008      	b.n	8004cc8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004cba:	61bb      	str	r3, [r7, #24]
        break;
 8004cbc:	e004      	b.n	8004cc8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	77bb      	strb	r3, [r7, #30]
        break;
 8004cc6:	bf00      	nop
    }

    if (pclk != 0U)
 8004cc8:	69bb      	ldr	r3, [r7, #24]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d018      	beq.n	8004d00 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	085a      	lsrs	r2, r3, #1
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	441a      	add	r2, r3
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ce2:	693b      	ldr	r3, [r7, #16]
 8004ce4:	2b0f      	cmp	r3, #15
 8004ce6:	d909      	bls.n	8004cfc <UART_SetConfig+0x4a0>
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cee:	d205      	bcs.n	8004cfc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	b29a      	uxth	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60da      	str	r2, [r3, #12]
 8004cfa:	e001      	b.n	8004d00 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2200      	movs	r2, #0
 8004d04:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004d0c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004d0e:	4618      	mov	r0, r3
 8004d10:	3720      	adds	r7, #32
 8004d12:	46bd      	mov	sp, r7
 8004d14:	bd80      	pop	{r7, pc}
 8004d16:	bf00      	nop
 8004d18:	40007c00 	.word	0x40007c00
 8004d1c:	40023800 	.word	0x40023800
 8004d20:	00f42400 	.word	0x00f42400

08004d24 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d30:	f003 0301 	and.w	r3, r3, #1
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00a      	beq.n	8004d4e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	430a      	orrs	r2, r1
 8004d4c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d00a      	beq.n	8004d70 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	430a      	orrs	r2, r1
 8004d6e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00a      	beq.n	8004d92 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	430a      	orrs	r2, r1
 8004d90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d00a      	beq.n	8004db4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	430a      	orrs	r2, r1
 8004db2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00a      	beq.n	8004dd6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	430a      	orrs	r2, r1
 8004dd4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	f003 0320 	and.w	r3, r3, #32
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d00a      	beq.n	8004df8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	689b      	ldr	r3, [r3, #8]
 8004de8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	430a      	orrs	r2, r1
 8004df6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d01a      	beq.n	8004e3a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004e22:	d10a      	bne.n	8004e3a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	685b      	ldr	r3, [r3, #4]
 8004e2a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	430a      	orrs	r2, r1
 8004e38:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00a      	beq.n	8004e5c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	685b      	ldr	r3, [r3, #4]
 8004e4c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	430a      	orrs	r2, r1
 8004e5a:	605a      	str	r2, [r3, #4]
  }
}
 8004e5c:	bf00      	nop
 8004e5e:	370c      	adds	r7, #12
 8004e60:	46bd      	mov	sp, r7
 8004e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e66:	4770      	bx	lr

08004e68 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af02      	add	r7, sp, #8
 8004e6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004e78:	f7fc ff9c 	bl	8001db4 <HAL_GetTick>
 8004e7c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0308 	and.w	r3, r3, #8
 8004e88:	2b08      	cmp	r3, #8
 8004e8a:	d10e      	bne.n	8004eaa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004e90:	9300      	str	r3, [sp, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f81b 	bl	8004ed6 <UART_WaitOnFlagUntilTimeout>
 8004ea0:	4603      	mov	r3, r0
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ea6:	2303      	movs	r3, #3
 8004ea8:	e011      	b.n	8004ece <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2220      	movs	r2, #32
 8004eae:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2220      	movs	r2, #32
 8004eb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2200      	movs	r2, #0
 8004ebc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004ecc:	2300      	movs	r3, #0
}
 8004ece:	4618      	mov	r0, r3
 8004ed0:	3710      	adds	r7, #16
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bd80      	pop	{r7, pc}

08004ed6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ed6:	b580      	push	{r7, lr}
 8004ed8:	b09c      	sub	sp, #112	; 0x70
 8004eda:	af00      	add	r7, sp, #0
 8004edc:	60f8      	str	r0, [r7, #12]
 8004ede:	60b9      	str	r1, [r7, #8]
 8004ee0:	603b      	str	r3, [r7, #0]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ee6:	e0a7      	b.n	8005038 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ee8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004eea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eee:	f000 80a3 	beq.w	8005038 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ef2:	f7fc ff5f 	bl	8001db4 <HAL_GetTick>
 8004ef6:	4602      	mov	r2, r0
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	1ad3      	subs	r3, r2, r3
 8004efc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d302      	bcc.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
 8004f02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d13f      	bne.n	8004f88 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004f16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f1c:	667b      	str	r3, [r7, #100]	; 0x64
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004f2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	3308      	adds	r3, #8
 8004f40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f4c:	f023 0301 	bic.w	r3, r3, #1
 8004f50:	663b      	str	r3, [r7, #96]	; 0x60
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	3308      	adds	r3, #8
 8004f58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f5a:	64ba      	str	r2, [r7, #72]	; 0x48
 8004f5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004f68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e5      	bne.n	8004f3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2220      	movs	r2, #32
 8004f72:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004f84:	2303      	movs	r3, #3
 8004f86:	e068      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 0304 	and.w	r3, r3, #4
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d050      	beq.n	8005038 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	69db      	ldr	r3, [r3, #28]
 8004f9c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fa4:	d148      	bne.n	8005038 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004fae:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb8:	e853 3f00 	ldrex	r3, [r3]
 8004fbc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fc0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004fc4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	461a      	mov	r2, r3
 8004fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fce:	637b      	str	r3, [r7, #52]	; 0x34
 8004fd0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004fd4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004fd6:	e841 2300 	strex	r3, r2, [r1]
 8004fda:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004fdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e6      	bne.n	8004fb0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	3308      	adds	r3, #8
 8004fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	697b      	ldr	r3, [r7, #20]
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	f023 0301 	bic.w	r3, r3, #1
 8004ff8:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	3308      	adds	r3, #8
 8005000:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005002:	623a      	str	r2, [r7, #32]
 8005004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	69f9      	ldr	r1, [r7, #28]
 8005008:	6a3a      	ldr	r2, [r7, #32]
 800500a:	e841 2300 	strex	r3, r2, [r1]
 800500e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	2b00      	cmp	r3, #0
 8005014:	d1e5      	bne.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2220      	movs	r2, #32
 800501a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2220      	movs	r2, #32
 8005020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2220      	movs	r2, #32
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2200      	movs	r2, #0
 8005030:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e010      	b.n	800505a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	69da      	ldr	r2, [r3, #28]
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	4013      	ands	r3, r2
 8005042:	68ba      	ldr	r2, [r7, #8]
 8005044:	429a      	cmp	r2, r3
 8005046:	bf0c      	ite	eq
 8005048:	2301      	moveq	r3, #1
 800504a:	2300      	movne	r3, #0
 800504c:	b2db      	uxtb	r3, r3
 800504e:	461a      	mov	r2, r3
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	429a      	cmp	r2, r3
 8005054:	f43f af48 	beq.w	8004ee8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005058:	2300      	movs	r3, #0
}
 800505a:	4618      	mov	r0, r3
 800505c:	3770      	adds	r7, #112	; 0x70
 800505e:	46bd      	mov	sp, r7
 8005060:	bd80      	pop	{r7, pc}
	...

08005064 <__libc_init_array>:
 8005064:	b570      	push	{r4, r5, r6, lr}
 8005066:	4d0d      	ldr	r5, [pc, #52]	; (800509c <__libc_init_array+0x38>)
 8005068:	4c0d      	ldr	r4, [pc, #52]	; (80050a0 <__libc_init_array+0x3c>)
 800506a:	1b64      	subs	r4, r4, r5
 800506c:	10a4      	asrs	r4, r4, #2
 800506e:	2600      	movs	r6, #0
 8005070:	42a6      	cmp	r6, r4
 8005072:	d109      	bne.n	8005088 <__libc_init_array+0x24>
 8005074:	4d0b      	ldr	r5, [pc, #44]	; (80050a4 <__libc_init_array+0x40>)
 8005076:	4c0c      	ldr	r4, [pc, #48]	; (80050a8 <__libc_init_array+0x44>)
 8005078:	f000 f820 	bl	80050bc <_init>
 800507c:	1b64      	subs	r4, r4, r5
 800507e:	10a4      	asrs	r4, r4, #2
 8005080:	2600      	movs	r6, #0
 8005082:	42a6      	cmp	r6, r4
 8005084:	d105      	bne.n	8005092 <__libc_init_array+0x2e>
 8005086:	bd70      	pop	{r4, r5, r6, pc}
 8005088:	f855 3b04 	ldr.w	r3, [r5], #4
 800508c:	4798      	blx	r3
 800508e:	3601      	adds	r6, #1
 8005090:	e7ee      	b.n	8005070 <__libc_init_array+0xc>
 8005092:	f855 3b04 	ldr.w	r3, [r5], #4
 8005096:	4798      	blx	r3
 8005098:	3601      	adds	r6, #1
 800509a:	e7f2      	b.n	8005082 <__libc_init_array+0x1e>
 800509c:	08005108 	.word	0x08005108
 80050a0:	08005108 	.word	0x08005108
 80050a4:	08005108 	.word	0x08005108
 80050a8:	0800510c 	.word	0x0800510c

080050ac <memset>:
 80050ac:	4402      	add	r2, r0
 80050ae:	4603      	mov	r3, r0
 80050b0:	4293      	cmp	r3, r2
 80050b2:	d100      	bne.n	80050b6 <memset+0xa>
 80050b4:	4770      	bx	lr
 80050b6:	f803 1b01 	strb.w	r1, [r3], #1
 80050ba:	e7f9      	b.n	80050b0 <memset+0x4>

080050bc <_init>:
 80050bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050be:	bf00      	nop
 80050c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050c2:	bc08      	pop	{r3}
 80050c4:	469e      	mov	lr, r3
 80050c6:	4770      	bx	lr

080050c8 <_fini>:
 80050c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050ca:	bf00      	nop
 80050cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80050ce:	bc08      	pop	{r3}
 80050d0:	469e      	mov	lr, r3
 80050d2:	4770      	bx	lr
