/**
  ******************************************************************************
  * @file     : menu_config.c
  * @author   : AW    Adrian.Wojcik@put.poznan.pl
  * @version  : 1.3.0
  * @date     : 12-Jan-2021
  * @brief    : Simple linked-list menu example.
  *
  ******************************************************************************
  */

/* Includes ------------------------------------------------------------------*/
#include "menu.h"
#include <stdio.h>

#include "usart.h"
#include "lcd_config.h"
#include "led_config.h"
#include "encoder_config.h"

/* Typedef -------------------------------------------------------------------*/

/* Define --------------------------------------------------------------------*/

/* Macro ---------------------------------------------------------------------*/

/* Private function prototypes -----------------------------------------------*/
void menu_led_dio_routine(MenuItem_TypeDef* hmenuitem, LED_DIO_Handle_TypeDef* hled, const char* led_name);
void menu_led_pwm_routine(MenuItem_TypeDef* hmenuitem, LED_PWM_Handle_TypeDef* hled, const char* led_name);

/* Private variables ---------------------------------------------------------*/

/** MENU LED CODE BEGIN ******************************************************************************************************/

MENU_ITEM_CONTRUCTOR(menu_ldr1, { menu_led_dio_routine(hmenuitem, &hldr1, "LDR1"); } );
MENU_ITEM_CONTRUCTOR(menu_ldg1, { menu_led_dio_routine(hmenuitem, &hldg1, "LDG1"); } );
MENU_ITEM_CONTRUCTOR(menu_ldb1, { menu_led_dio_routine(hmenuitem, &hldb1, "LDB1"); } );
MENU_ITEM_CONTRUCTOR(menu_ldr2, { menu_led_pwm_routine(hmenuitem, &hldr2, "LDR2"); } );
MENU_ITEM_CONTRUCTOR(menu_ldg2, { menu_led_pwm_routine(hmenuitem, &hldg2, "LDG2"); } );
MENU_ITEM_CONTRUCTOR(menu_ldb2, { menu_led_pwm_routine(hmenuitem, &hldb2, "LDB2"); } );
MENU_ITEM_CONTRUCTOR(menu_ldrgb_r, { menu_led_pwm_routine(hmenuitem, &hldr3, "LD [R]GB"); } );
MENU_ITEM_CONTRUCTOR(menu_ldrgb_g, { menu_led_pwm_routine(hmenuitem, &hldg3, "LD R[G]B"); } );
MENU_ITEM_CONTRUCTOR(menu_ldrgb_b, { menu_led_pwm_routine(hmenuitem, &hldb3, "LD RG[B]"); } );

/** MENU LED CODE END *******************************************************************************************************/

#define MENU_MAIN_LEN (sizeof(MENU_MAIN_ARRAY)/sizeof(MENU_MAIN_ARRAY[0]))
MenuItem_TypeDef* MENU_MAIN_ARRAY[] = { /* Main menu list */
  &menu_ldr1,    /* LED Red #1: on-board red LED (LD3) */
  &menu_ldr2,    /* LED Red #2: breadboard red LED (LD6 */
  &menu_ldg1,    /* LED Green #1: on-board green LED (LD1) */
  &menu_ldg2,    /* LED Green #2: breadboard green LED (LD4) */
  &menu_ldb1,    /* LED Blue #1: on-board blue LED (LD2) */
  &menu_ldb2,    /* LED Blue #2: breadboard blue LED (LD5) */
  &menu_ldrgb_r, /* LED RGB: channel R */
  &menu_ldrgb_g, /* LED RGB: channel G */
  &menu_ldrgb_b, /* LED RGB: channel B */
  //&menu_enc1,     /* Rotary encoder #1 */
  //&menu_ain1,     /* Analog input #1 */
  //&menu_ain2,     /* Analog input #2 */
  //&menu_bmp2,     /* Temperature & pressure sensor: BMP280 */
  //&menu_bh1750,   /* Light sensor: BH1750 */
  //&menu_aout2     /* Analog output #2 */
};

/* Public variables ----------------------------------------------------------*/
Menu_TypeDef hmenu = {
  .Display = &hlcd1, .SerialPort = &huart3,
};

/* Private function ----------------------------------------------------------*/

/**
 * @brief Common GPIO LED menu routine.
 * @param[in/out] hmenuitem : menu item handler
 * @param[in]     hled      : LED handler
 * @param[in]     led_name  : LED display name
 */
void menu_led_dio_routine(MenuItem_TypeDef* hmenuitem, LED_DIO_Handle_TypeDef* hled, const char* led_name)
{
  if(hmenu.Item == hmenuitem) // If active component
  {
    ENC_GetCounter(&henc1);
    if(henc1.CounterInc)
      LED_DIO_On(hled);   // If counter has increased - turn LED on
    else if(henc1.CounterDec)
      LED_DIO_Off(hled);  // If counter has decreased - turn LED off
  }

  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %s", led_name, LED_DIO_Read(hled) ? "ON" : "OFF");
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
  hmenuitem->SerialPortStrLen = 0;
}

/**
 * @brief Common PWM LED menu routine.
 * @param[in/out] hmenuitem : menu item handler
 * @param[in]     hled      : LED handler
 * @param[in]     led_name  : LED display name
 */
void menu_led_pwm_routine(MenuItem_TypeDef* hmenuitem, LED_PWM_Handle_TypeDef* hled, const char* led_name)
{
  if(hmenu.Item == hmenuitem) // If active component
  {
    if(hmenu.ItemChanged) // Reload counter if item changed
      ENC_SetCounter(&henc1, LED_PWM_ReadDuty(hled));
    LED_PWM_WriteDuty(hled, ENC_GetCounter(&henc1));
  }

  char temp_str[LCD_LINE_BUF_LEN];
  hmenuitem->DisplayStrLen = snprintf(temp_str, LCD_LINE_LEN, "%s: %3d%%", led_name, (int)LED_PWM_ReadDuty(hled));
  MENU_ITEM_WriteDisplayBuffer(hmenuitem, temp_str); // Set display buffer
  hmenuitem->SerialPortStrLen = 0;
}


/* Public function -----------------------------------------------------------*/
/**
 * @brief Menu initialization. Creates doubly-linked list from elements of MENU_MAIN_ARRAY.
 * @param[in/out] hmenu : Menu structure address
 */
void MENU_Init(Menu_TypeDef* hmenu)
{
  /* Active element initialization */
  hmenu->Item = MENU_MAIN_ARRAY[0];

  /* Main menu initialization */
  for(uint8_t i = 0; i < (uint8_t)(MENU_MAIN_LEN-1); i++) //< Next item
    MENU_MAIN_ARRAY[i]->Next = MENU_MAIN_ARRAY[i+1];
  for(uint8_t i = 1; i < (uint8_t)MENU_MAIN_LEN; i++)     //< Previous item
    MENU_MAIN_ARRAY[i]->Prev = MENU_MAIN_ARRAY[i-1];
  /* Cyclic list */
  MENU_MAIN_ARRAY[MENU_MAIN_LEN-1]->Next = MENU_MAIN_ARRAY[0]; //< Next of last is first item
  MENU_MAIN_ARRAY[0]->Prev = MENU_MAIN_ARRAY[MENU_MAIN_LEN-1]; //< Previous of first is last item

  /* LCD set-up */
  LCD_DIO_SetCursor(hmenu->Display, 0, 0);
  LCD_DIO_printf(hmenu->Display, "%c", LCD_MENU_CURSOR_CHAR);
  LCD_DIO_SetCursor(hmenu->Display, 1, 0);
  LCD_DIO_printStr(hmenu->Display, " ");
}

/**
 * @brief Menu routine. Calls active items routines and updates output devices.
 * @param[in/out] hmenu : Menu structure address
 */
void MENU_ROUTINE(Menu_TypeDef* hmenu)
{
  MENU_CALL_ROUTINE(hmenu->Item);
  MENU_CALL_ROUTINE(hmenu->Item->Next);

  hmenu->ItemChanged = 0;

  // #1 line - active item
  LCD_DIO_SetCursor(hmenu->Display, 0, 1);
  LCD_DIO_printStr(hmenu->Display, hmenu->Item->DisplayStr);

  // #1 line - next item
  LCD_DIO_SetCursor(hmenu->Display, 1, 1);
  LCD_DIO_printStr(hmenu->Display, hmenu->Item->Next->DisplayStr);

  // Serial port streaming
  HAL_UART_Transmit(hmenu->SerialPort, (uint8_t*)hmenu->Item->SerialPortStr, hmenu->Item->SerialPortStrLen, 10);
}

