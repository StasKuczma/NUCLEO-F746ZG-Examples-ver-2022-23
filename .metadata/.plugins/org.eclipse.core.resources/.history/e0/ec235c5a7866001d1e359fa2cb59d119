
L05_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006c5c  08006c5c  00016c5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006cc4  08006cc4  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  08006cc4  08006cc4  00016cc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ccc  08006ccc  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ccc  08006ccc  00016ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006cd0  08006cd0  00016cd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08006cd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000244  200000c0  08006d94  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000304  08006d94  00020304  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000191e3  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003434  00000000  00000000  000392d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001298  00000000  00000000  0003c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010e8  00000000  00000000  0003d9a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027712  00000000  00000000  0003ea88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a7e  00000000  00000000  0006619a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2576  00000000  00000000  0007fc18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0017218e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f44  00000000  00000000  001721e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006c44 	.word	0x08006c44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	08006c44 	.word	0x08006c44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <BH1750_Init>:
 *       Uses blocking mode I2C transmitting routine.
 * @param[in] hbh1750 :  BH1750 digital light sensor handler
 * @return None
 */
void BH1750_Init(BH1750_HandleTypeDef* hbh1750)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b086      	sub	sp, #24
 80005b8:	af02      	add	r7, sp, #8
 80005ba:	6078      	str	r0, [r7, #4]
  uint8_t command;

  command = BH1750_POWER_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	6818      	ldr	r0, [r3, #0]
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	689b      	ldr	r3, [r3, #8]
 80005ce:	f107 020f 	add.w	r2, r7, #15
 80005d2:	9300      	str	r3, [sp, #0]
 80005d4:	2301      	movs	r3, #1
 80005d6:	f001 fd31 	bl	800203c <HAL_I2C_Master_Transmit>

  command = BH1750_CONTINOUS_H_RES_MODE;
 80005da:	2310      	movs	r3, #16
 80005dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, BH1750_COMMAND_SIZE, hbh1750->Timeout);
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	6818      	ldr	r0, [r3, #0]
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	b299      	uxth	r1, r3
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	689b      	ldr	r3, [r3, #8]
 80005ec:	f107 020f 	add.w	r2, r7, #15
 80005f0:	9300      	str	r3, [sp, #0]
 80005f2:	2301      	movs	r3, #1
 80005f4:	f001 fd22 	bl	800203c <HAL_I2C_Master_Transmit>
}
 80005f8:	bf00      	nop
 80005fa:	3710      	adds	r7, #16
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}

08000600 <BH1750_ReadIlluminance_lux>:
 * @note Uses blocking mode I2C receiving routine.
 * @param[in] hbh1750 : BH1750 digital light sensor handler
 * @return Measurement result in lux [lx]
 */
float BH1750_ReadIlluminance_lux(BH1750_HandleTypeDef* hbh1750)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	b086      	sub	sp, #24
 8000604:	af02      	add	r7, sp, #8
 8000606:	6078      	str	r0, [r7, #4]
  uint8_t rxarray[BH1750_DATA_SIZE];

  HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, rxarray, BH1750_DATA_SIZE, hbh1750->Timeout);
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	6818      	ldr	r0, [r3, #0]
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	791b      	ldrb	r3, [r3, #4]
 8000610:	b299      	uxth	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	689b      	ldr	r3, [r3, #8]
 8000616:	f107 020c 	add.w	r2, r7, #12
 800061a:	9300      	str	r3, [sp, #0]
 800061c:	2302      	movs	r3, #2
 800061e:	f001 fe01 	bl	8002224 <HAL_I2C_Master_Receive>

  return ((rxarray[BH1750_DATA_MSB]<<8) | rxarray[BH1750_DATA_LSB]) / 1.2f; // @see BH1750 technical note p. 10;
 8000622:	7b3b      	ldrb	r3, [r7, #12]
 8000624:	021b      	lsls	r3, r3, #8
 8000626:	7b7a      	ldrb	r2, [r7, #13]
 8000628:	4313      	orrs	r3, r2
 800062a:	ee07 3a90 	vmov	s15, r3
 800062e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000632:	ed9f 7a05 	vldr	s14, [pc, #20]	; 8000648 <BH1750_ReadIlluminance_lux+0x48>
 8000636:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800063a:	eef0 7a66 	vmov.f32	s15, s13
}
 800063e:	eeb0 0a67 	vmov.f32	s0, s15
 8000642:	3710      	adds	r7, #16
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	3f99999a 	.word	0x3f99999a

0800064c <ENC_Init>:
 * @brief Rotary quadrature encoder hardware initialization.
 * @param[in] hbtn Encoder handler
 * @return None
 */
void ENC_Init(ENC_HandleTypeDef* henc)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	6078      	str	r0, [r7, #4]
	HAL_TIM_Encoder_Start(henc->Timer, TIM_CHANNEL_ALL);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	213c      	movs	r1, #60	; 0x3c
 800065a:	4618      	mov	r0, r3
 800065c:	f003 fdc8 	bl	80041f0 <HAL_TIM_Encoder_Start>
}
 8000660:	bf00      	nop
 8000662:	3708      	adds	r7, #8
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}

08000668 <ENC_GetCounter>:
 * @brief Rotary quadrature encoder hardware counter read.
 * @param[in] hbtn Encoder handler
 * @return Current counter value
 */
uint32_t ENC_GetCounter(ENC_HandleTypeDef* henc)
{
 8000668:	b480      	push	{r7}
 800066a:	b085      	sub	sp, #20
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  uint32_t cnt = henc->Counter;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	685b      	ldr	r3, [r3, #4]
 8000674:	60fb      	str	r3, [r7, #12]
  henc->Counter = __HAL_TIM_GET_COUNTER(henc->Timer);
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	605a      	str	r2, [r3, #4]
  henc->CounterInc = (henc->Counter > cnt);
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	685b      	ldr	r3, [r3, #4]
 8000686:	68fa      	ldr	r2, [r7, #12]
 8000688:	429a      	cmp	r2, r3
 800068a:	bf34      	ite	cc
 800068c:	2301      	movcc	r3, #1
 800068e:	2300      	movcs	r3, #0
 8000690:	b2da      	uxtb	r2, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	741a      	strb	r2, [r3, #16]
  henc->CounterDec = (henc->Counter < cnt);
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	685b      	ldr	r3, [r3, #4]
 800069a:	68fa      	ldr	r2, [r7, #12]
 800069c:	429a      	cmp	r2, r3
 800069e:	bf8c      	ite	hi
 80006a0:	2301      	movhi	r3, #1
 80006a2:	2300      	movls	r3, #0
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	745a      	strb	r2, [r3, #17]
  return henc->Counter;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	685b      	ldr	r3, [r3, #4]
}
 80006ae:	4618      	mov	r0, r3
 80006b0:	3714      	adds	r7, #20
 80006b2:	46bd      	mov	sp, r7
 80006b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b8:	4770      	bx	lr

080006ba <__led_pwm_start>:
  * @brief Starts LED's Timer PWM channel
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void __led_pwm_start(const LED_PWM_Handle_TypeDef* hled)
{
 80006ba:	b580      	push	{r7, lr}
 80006bc:	b082      	sub	sp, #8
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  HAL_TIM_PWM_Start(hled->Timer, hled->Channel);
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	685b      	ldr	r3, [r3, #4]
 80006ca:	4619      	mov	r1, r3
 80006cc:	4610      	mov	r0, r2
 80006ce:	f003 fbef 	bl	8003eb0 <HAL_TIM_PWM_Start>
}
 80006d2:	bf00      	nop
 80006d4:	3708      	adds	r7, #8
 80006d6:	46bd      	mov	sp, r7
 80006d8:	bd80      	pop	{r7, pc}
	...

080006dc <__led_pwm_write>:
  * @param[in] hled   : LED PWM handler
  * @retval PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void __led_pwm_write(LED_PWM_Handle_TypeDef* hled, float duty)
{
 80006dc:	b480      	push	{r7}
 80006de:	b085      	sub	sp, #20
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	ed87 0a00 	vstr	s0, [r7]
  hled->Duty = duty;
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	609a      	str	r2, [r3, #8]
  int COMPARE = (duty * (__HAL_TIM_GET_AUTORELOAD(hled->Timer)+1)) / 100;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80006f6:	3301      	adds	r3, #1
 80006f8:	ee07 3a90 	vmov	s15, r3
 80006fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000700:	edd7 7a00 	vldr	s15, [r7]
 8000704:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000708:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000794 <__led_pwm_write+0xb8>
 800070c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000710:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000714:	ee17 3a90 	vmov	r3, s15
 8000718:	60fb      	str	r3, [r7, #12]
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	2b00      	cmp	r3, #0
 8000720:	d105      	bne.n	800072e <__led_pwm_write+0x52>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	68fa      	ldr	r2, [r7, #12]
 800072a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800072c:	e02c      	b.n	8000788 <__led_pwm_write+0xac>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	685b      	ldr	r3, [r3, #4]
 8000732:	2b04      	cmp	r3, #4
 8000734:	d105      	bne.n	8000742 <__led_pwm_write+0x66>
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	681a      	ldr	r2, [r3, #0]
 800073c:	68fb      	ldr	r3, [r7, #12]
 800073e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8000740:	e022      	b.n	8000788 <__led_pwm_write+0xac>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	685b      	ldr	r3, [r3, #4]
 8000746:	2b08      	cmp	r3, #8
 8000748:	d105      	bne.n	8000756 <__led_pwm_write+0x7a>
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000754:	e018      	b.n	8000788 <__led_pwm_write+0xac>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b0c      	cmp	r3, #12
 800075c:	d105      	bne.n	800076a <__led_pwm_write+0x8e>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000768:	e00e      	b.n	8000788 <__led_pwm_write+0xac>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b10      	cmp	r3, #16
 8000770:	d105      	bne.n	800077e <__led_pwm_write+0xa2>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	681a      	ldr	r2, [r3, #0]
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	6593      	str	r3, [r2, #88]	; 0x58
}
 800077c:	e004      	b.n	8000788 <__led_pwm_write+0xac>
  __HAL_TIM_SET_COMPARE(hled->Timer, hled->Channel, COMPARE);
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	68fb      	ldr	r3, [r7, #12]
 8000786:	65d3      	str	r3, [r2, #92]	; 0x5c
}
 8000788:	bf00      	nop
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr
 8000794:	42c80000 	.word	0x42c80000

08000798 <LED_PWM_Init>:
  * @brief Initialize PWM LED control
  * @param[in] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  LED_PWM_WriteDuty(hled, 0.0f);
 80007a0:	ed9f 0a05 	vldr	s0, [pc, #20]	; 80007b8 <LED_PWM_Init+0x20>
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f809 	bl	80007bc <LED_PWM_WriteDuty>
  __led_pwm_start(hled);
 80007aa:	6878      	ldr	r0, [r7, #4]
 80007ac:	f7ff ff85 	bl	80006ba <__led_pwm_start>
}
 80007b0:	bf00      	nop
 80007b2:	3708      	adds	r7, #8
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	00000000 	.word	0x00000000

080007bc <LED_PWM_WriteDuty>:
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	ed87 0a00 	vstr	s0, [r7]
  if(duty < 0.0f)
 80007c8:	edd7 7a00 	vldr	s15, [r7]
 80007cc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80007d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007d4:	d503      	bpl.n	80007de <LED_PWM_WriteDuty+0x22>
    duty = 0.0;
 80007d6:	f04f 0300 	mov.w	r3, #0
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	e00a      	b.n	80007f4 <LED_PWM_WriteDuty+0x38>
  else if(duty > 100.0f)
 80007de:	edd7 7a00 	vldr	s15, [r7]
 80007e2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8000808 <LED_PWM_WriteDuty+0x4c>
 80007e6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80007ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80007ee:	dd01      	ble.n	80007f4 <LED_PWM_WriteDuty+0x38>
    duty = 100.0f;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <LED_PWM_WriteDuty+0x50>)
 80007f2:	603b      	str	r3, [r7, #0]

  __led_pwm_write(hled, duty);
 80007f4:	ed97 0a00 	vldr	s0, [r7]
 80007f8:	6878      	ldr	r0, [r7, #4]
 80007fa:	f7ff ff6f 	bl	80006dc <__led_pwm_write>
}
 80007fe:	bf00      	nop
 8000800:	3708      	adds	r7, #8
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	42c80000 	.word	0x42c80000
 800080c:	42c80000 	.word	0x42c80000

08000810 <LED_PWM_ReadDuty>:
  * @brief Set PWM duty cycle
  * @param[in] hled   : LED PWM handler
  * @retval PWM duty cycle in percents (0. - 100.)
  */
float LED_PWM_ReadDuty(const LED_PWM_Handle_TypeDef* hled)
{
 8000810:	b480      	push	{r7}
 8000812:	b083      	sub	sp, #12
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  return hled->Duty;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	689b      	ldr	r3, [r3, #8]
 800081c:	ee07 3a90 	vmov	s15, r3
}
 8000820:	eeb0 0a67 	vmov.f32	s0, s15
 8000824:	370c      	adds	r7, #12
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
	...

08000830 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b08c      	sub	sp, #48	; 0x30
 8000834:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
 8000842:	60da      	str	r2, [r3, #12]
 8000844:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000846:	4ba2      	ldr	r3, [pc, #648]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084a:	4aa1      	ldr	r2, [pc, #644]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800084c:	f043 0304 	orr.w	r3, r3, #4
 8000850:	6313      	str	r3, [r2, #48]	; 0x30
 8000852:	4b9f      	ldr	r3, [pc, #636]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	f003 0304 	and.w	r3, r3, #4
 800085a:	61bb      	str	r3, [r7, #24]
 800085c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800085e:	4b9c      	ldr	r3, [pc, #624]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	4a9b      	ldr	r2, [pc, #620]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000864:	f043 0320 	orr.w	r3, r3, #32
 8000868:	6313      	str	r3, [r2, #48]	; 0x30
 800086a:	4b99      	ldr	r3, [pc, #612]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086e:	f003 0320 	and.w	r3, r3, #32
 8000872:	617b      	str	r3, [r7, #20]
 8000874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000876:	4b96      	ldr	r3, [pc, #600]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a95      	ldr	r2, [pc, #596]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800087c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b93      	ldr	r3, [pc, #588]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	4b90      	ldr	r3, [pc, #576]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a8f      	ldr	r2, [pc, #572]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 8000894:	f043 0301 	orr.w	r3, r3, #1
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b8d      	ldr	r3, [pc, #564]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0301 	and.w	r3, r3, #1
 80008a2:	60fb      	str	r3, [r7, #12]
 80008a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008a6:	4b8a      	ldr	r3, [pc, #552]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	4a89      	ldr	r2, [pc, #548]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008ac:	f043 0302 	orr.w	r3, r3, #2
 80008b0:	6313      	str	r3, [r2, #48]	; 0x30
 80008b2:	4b87      	ldr	r3, [pc, #540]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b6:	f003 0302 	and.w	r3, r3, #2
 80008ba:	60bb      	str	r3, [r7, #8]
 80008bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b84      	ldr	r3, [pc, #528]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a83      	ldr	r2, [pc, #524]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b81      	ldr	r3, [pc, #516]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	4b7e      	ldr	r3, [pc, #504]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	4a7d      	ldr	r2, [pc, #500]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008e0:	6313      	str	r3, [r2, #48]	; 0x30
 80008e2:	4b7b      	ldr	r3, [pc, #492]	; (8000ad0 <MX_GPIO_Init+0x2a0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP_TRIAC_GPIO_Port, LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2108      	movs	r1, #8
 80008f2:	4878      	ldr	r0, [pc, #480]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 80008f4:	f001 fad4 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f8:	2200      	movs	r2, #0
 80008fa:	f244 0181 	movw	r1, #16513	; 0x4081
 80008fe:	4876      	ldr	r0, [pc, #472]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 8000900:	f001 face 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	2140      	movs	r1, #64	; 0x40
 8000908:	4874      	ldr	r0, [pc, #464]	; (8000adc <MX_GPIO_Init+0x2ac>)
 800090a:	f001 fac9 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800090e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000914:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000918:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800091e:	f107 031c 	add.w	r3, r7, #28
 8000922:	4619      	mov	r1, r3
 8000924:	486e      	ldr	r0, [pc, #440]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 8000926:	f001 f90f 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 800092a:	2308      	movs	r3, #8
 800092c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092e:	2301      	movs	r3, #1
 8000930:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000936:	2302      	movs	r3, #2
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	4864      	ldr	r0, [pc, #400]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 8000942:	f001 f901 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8000946:	2320      	movs	r3, #32
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800094a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800094e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 031c 	add.w	r3, r7, #28
 8000958:	4619      	mov	r1, r3
 800095a:	485e      	ldr	r0, [pc, #376]	; (8000ad4 <MX_GPIO_Init+0x2a4>)
 800095c:	f001 f8f4 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8000960:	2301      	movs	r3, #1
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000964:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000968:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	4619      	mov	r1, r3
 8000974:	485a      	ldr	r0, [pc, #360]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 8000976:	f001 f8e7 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800097a:	2332      	movs	r3, #50	; 0x32
 800097c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097e:	2302      	movs	r3, #2
 8000980:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000982:	2300      	movs	r3, #0
 8000984:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000986:	2303      	movs	r3, #3
 8000988:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800098a:	230b      	movs	r3, #11
 800098c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	4619      	mov	r1, r3
 8000994:	4852      	ldr	r0, [pc, #328]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 8000996:	f001 f8d7 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 800099a:	2308      	movs	r3, #8
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800099e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80009a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009a4:	2302      	movs	r3, #2
 80009a6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	484c      	ldr	r0, [pc, #304]	; (8000ae0 <MX_GPIO_Init+0x2b0>)
 80009b0:	f001 f8ca 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009b4:	2386      	movs	r3, #134	; 0x86
 80009b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009c4:	230b      	movs	r3, #11
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4845      	ldr	r0, [pc, #276]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 80009d0:	f001 f8ba 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009d4:	f244 0381 	movw	r3, #16513	; 0x4081
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	4619      	mov	r1, r3
 80009ec:	483a      	ldr	r0, [pc, #232]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 80009ee:	f001 f8ab 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a04:	230b      	movs	r3, #11
 8000a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4832      	ldr	r0, [pc, #200]	; (8000ad8 <MX_GPIO_Init+0x2a8>)
 8000a10:	f001 f89a 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a14:	2340      	movs	r3, #64	; 0x40
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a18:	2301      	movs	r3, #1
 8000a1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 031c 	add.w	r3, r7, #28
 8000a28:	4619      	mov	r1, r3
 8000a2a:	482c      	ldr	r0, [pc, #176]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a2c:	f001 f88c 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 031c 	add.w	r3, r7, #28
 8000a40:	4619      	mov	r1, r3
 8000a42:	4826      	ldr	r0, [pc, #152]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000a44:	f001 f880 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a48:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a56:	2303      	movs	r3, #3
 8000a58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a5a:	230a      	movs	r3, #10
 8000a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5e:	f107 031c 	add.w	r3, r7, #28
 8000a62:	4619      	mov	r1, r3
 8000a64:	481f      	ldr	r0, [pc, #124]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 8000a66:	f001 f86f 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a70:	2300      	movs	r3, #0
 8000a72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a74:	2300      	movs	r3, #0
 8000a76:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a78:	f107 031c 	add.w	r3, r7, #28
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	4819      	ldr	r0, [pc, #100]	; (8000ae4 <MX_GPIO_Init+0x2b4>)
 8000a80:	f001 f862 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a84:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a8a:	2302      	movs	r3, #2
 8000a8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a96:	230b      	movs	r3, #11
 8000a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a9a:	f107 031c 	add.w	r3, r7, #28
 8000a9e:	4619      	mov	r1, r3
 8000aa0:	480e      	ldr	r0, [pc, #56]	; (8000adc <MX_GPIO_Init+0x2ac>)
 8000aa2:	f001 f851 	bl	8001b48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2017      	movs	r0, #23
 8000aac:	f000 ff83 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000ab0:	2017      	movs	r0, #23
 8000ab2:	f000 ff9c 	bl	80019ee <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2100      	movs	r1, #0
 8000aba:	2028      	movs	r0, #40	; 0x28
 8000abc:	f000 ff7b 	bl	80019b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ac0:	2028      	movs	r0, #40	; 0x28
 8000ac2:	f000 ff94 	bl	80019ee <HAL_NVIC_EnableIRQ>

}
 8000ac6:	bf00      	nop
 8000ac8:	3730      	adds	r7, #48	; 0x30
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	40023800 	.word	0x40023800
 8000ad4:	40021400 	.word	0x40021400
 8000ad8:	40020400 	.word	0x40020400
 8000adc:	40021800 	.word	0x40021800
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	40020000 	.word	0x40020000

08000ae8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000aec:	4b1b      	ldr	r3, [pc, #108]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000aee:	4a1c      	ldr	r2, [pc, #112]	; (8000b60 <MX_I2C1_Init+0x78>)
 8000af0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000af2:	4b1a      	ldr	r3, [pc, #104]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000af4:	4a1b      	ldr	r2, [pc, #108]	; (8000b64 <MX_I2C1_Init+0x7c>)
 8000af6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000af8:	4b18      	ldr	r3, [pc, #96]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000afe:	4b17      	ldr	r3, [pc, #92]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b04:	4b15      	ldr	r3, [pc, #84]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000b0a:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b22:	480e      	ldr	r0, [pc, #56]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b24:	f001 f9fa 	bl	8001f1c <HAL_I2C_Init>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b2e:	f000 f99d 	bl	8000e6c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b32:	2100      	movs	r1, #0
 8000b34:	4809      	ldr	r0, [pc, #36]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b36:	f001 fed7 	bl	80028e8 <HAL_I2CEx_ConfigAnalogFilter>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b40:	f000 f994 	bl	8000e6c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b44:	2100      	movs	r1, #0
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_I2C1_Init+0x74>)
 8000b48:	f001 ff19 	bl	800297e <HAL_I2CEx_ConfigDigitalFilter>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b52:	f000 f98b 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	200000dc 	.word	0x200000dc
 8000b60:	40005400 	.word	0x40005400
 8000b64:	20404768 	.word	0x20404768

08000b68 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b0aa      	sub	sp, #168	; 0xa8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b80:	f107 0310 	add.w	r3, r7, #16
 8000b84:	2284      	movs	r2, #132	; 0x84
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f005 fbe5 	bl	8006358 <memset>
  if(i2cHandle->Instance==I2C1)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a22      	ldr	r2, [pc, #136]	; (8000c1c <HAL_I2C_MspInit+0xb4>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d13c      	bne.n	8000c12 <HAL_I2C_MspInit+0xaa>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000b98:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000b9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f002 fc60 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000bb2:	f000 f95b 	bl	8000e6c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	4b1a      	ldr	r3, [pc, #104]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	4a19      	ldr	r2, [pc, #100]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	f003 0302 	and.w	r3, r3, #2
 8000bca:	60fb      	str	r3, [r7, #12]
 8000bcc:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8000bce:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bd2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bd6:	2312      	movs	r3, #18
 8000bd8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000be8:	2304      	movs	r3, #4
 8000bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	480b      	ldr	r0, [pc, #44]	; (8000c24 <HAL_I2C_MspInit+0xbc>)
 8000bf6:	f000 ffa7 	bl	8001b48 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bfa:	4b09      	ldr	r3, [pc, #36]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bfe:	4a08      	ldr	r2, [pc, #32]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c04:	6413      	str	r3, [r2, #64]	; 0x40
 8000c06:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_I2C_MspInit+0xb8>)
 8000c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c0a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000c12:	bf00      	nop
 8000c14:	37a8      	adds	r7, #168	; 0xa8
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40005400 	.word	0x40005400
 8000c20:	40023800 	.word	0x40023800
 8000c24:	40020400 	.word	0x40020400

08000c28 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b084      	sub	sp, #16
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  if(htim==&htim6)
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	4a0c      	ldr	r2, [pc, #48]	; (8000c64 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000c34:	4293      	cmp	r3, r2
 8000c36:	d111      	bne.n	8000c5c <HAL_TIM_PeriodElapsedCallback+0x34>
  {
    uint32_t cnt = ENC_GetCounter(&henc1);
 8000c38:	480b      	ldr	r0, [pc, #44]	; (8000c68 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000c3a:	f7ff fd15 	bl	8000668 <ENC_GetCounter>
 8000c3e:	60f8      	str	r0, [r7, #12]
    LED_PWM_WriteDuty(&hld4, cnt / 4.0f);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	ee07 3a90 	vmov	s15, r3
 8000c46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4a:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8000c4e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c52:	eeb0 0a47 	vmov.f32	s0, s14
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000c58:	f7ff fdb0 	bl	80007bc <LED_PWM_WriteDuty>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	3710      	adds	r7, #16
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	2000021c 	.word	0x2000021c
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	20000020 	.word	0x20000020

08000c70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b092      	sub	sp, #72	; 0x48
 8000c74:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c76:	f000 fd42 	bl	80016fe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c7a:	f000 f889 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c7e:	f7ff fdd7 	bl	8000830 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000c82:	f000 fc7b 	bl	800157c <MX_USART3_UART_Init>
  MX_TIM2_Init();
 8000c86:	f000 f9bb 	bl	8001000 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000c8a:	f000 fa45 	bl	8001118 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000c8e:	f000 fa99 	bl	80011c4 <MX_TIM5_Init>
  MX_I2C1_Init();
 8000c92:	f7ff ff29 	bl	8000ae8 <MX_I2C1_Init>
  MX_TIM6_Init();
 8000c96:	f000 fb0d 	bl	80012b4 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  ENC_Init(&henc1);
 8000c9a:	4832      	ldr	r0, [pc, #200]	; (8000d64 <main+0xf4>)
 8000c9c:	f7ff fcd6 	bl	800064c <ENC_Init>
  LED_PWM_Init(&hld4);
 8000ca0:	4831      	ldr	r0, [pc, #196]	; (8000d68 <main+0xf8>)
 8000ca2:	f7ff fd79 	bl	8000798 <LED_PWM_Init>
  LED_PWM_Init(&hldr);
 8000ca6:	4831      	ldr	r0, [pc, #196]	; (8000d6c <main+0xfc>)
 8000ca8:	f7ff fd76 	bl	8000798 <LED_PWM_Init>
  LED_PWM_Init(&hldg);
 8000cac:	4830      	ldr	r0, [pc, #192]	; (8000d70 <main+0x100>)
 8000cae:	f7ff fd73 	bl	8000798 <LED_PWM_Init>
  LED_PWM_Init(&hldb);
 8000cb2:	4830      	ldr	r0, [pc, #192]	; (8000d74 <main+0x104>)
 8000cb4:	f7ff fd70 	bl	8000798 <LED_PWM_Init>
  BH1750_Init(&hbh1750_1);
 8000cb8:	482f      	ldr	r0, [pc, #188]	; (8000d78 <main+0x108>)
 8000cba:	f7ff fc7b 	bl	80005b4 <BH1750_Init>
  HAL_TIM_Base_Start_IT(&htim6);
 8000cbe:	482f      	ldr	r0, [pc, #188]	; (8000d7c <main+0x10c>)
 8000cc0:	f003 f81c 	bl	8003cfc <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char msg[32] = { 0, };
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	623b      	str	r3, [r7, #32]
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
 8000cd8:	615a      	str	r2, [r3, #20]
 8000cda:	619a      	str	r2, [r3, #24]
  int msg_len = sprintf(msg, "PWM, LIGTH\r\n");
 8000cdc:	f107 0320 	add.w	r3, r7, #32
 8000ce0:	4927      	ldr	r1, [pc, #156]	; (8000d80 <main+0x110>)
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f005 fb40 	bl	8006368 <siprintf>
 8000ce8:	6478      	str	r0, [r7, #68]	; 0x44
  HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_len, 100);
 8000cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cec:	b29a      	uxth	r2, r3
 8000cee:	f107 0120 	add.w	r1, r7, #32
 8000cf2:	2364      	movs	r3, #100	; 0x64
 8000cf4:	4823      	ldr	r0, [pc, #140]	; (8000d84 <main+0x114>)
 8000cf6:	f004 fae7 	bl	80052c8 <HAL_UART_Transmit>
  while (1)
  {
    light = BH1750_ReadIlluminance_lux(&hbh1750_1);
 8000cfa:	481f      	ldr	r0, [pc, #124]	; (8000d78 <main+0x108>)
 8000cfc:	f7ff fc80 	bl	8000600 <BH1750_ReadIlluminance_lux>
 8000d00:	eef0 7a40 	vmov.f32	s15, s0
 8000d04:	4b20      	ldr	r3, [pc, #128]	; (8000d88 <main+0x118>)
 8000d06:	edc3 7a00 	vstr	s15, [r3]
    char msg[32] = { 0, };
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	603b      	str	r3, [r7, #0]
 8000d0e:	1d3b      	adds	r3, r7, #4
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 8000d1c:	615a      	str	r2, [r3, #20]
 8000d1e:	619a      	str	r2, [r3, #24]
    int msg_len = sprintf(msg, "%d, %d\r\n", (int)LED_PWM_ReadDuty(&hld4), (int)light);
 8000d20:	4811      	ldr	r0, [pc, #68]	; (8000d68 <main+0xf8>)
 8000d22:	f7ff fd75 	bl	8000810 <LED_PWM_ReadDuty>
 8000d26:	eef0 7a40 	vmov.f32	s15, s0
 8000d2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8000d2e:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <main+0x118>)
 8000d30:	edd3 7a00 	vldr	s15, [r3]
 8000d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d38:	4638      	mov	r0, r7
 8000d3a:	ee17 3a90 	vmov	r3, s15
 8000d3e:	ee17 2a10 	vmov	r2, s14
 8000d42:	4912      	ldr	r1, [pc, #72]	; (8000d8c <main+0x11c>)
 8000d44:	f005 fb10 	bl	8006368 <siprintf>
 8000d48:	6438      	str	r0, [r7, #64]	; 0x40
    HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_len, 100);
 8000d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8000d4c:	b29a      	uxth	r2, r3
 8000d4e:	4639      	mov	r1, r7
 8000d50:	2364      	movs	r3, #100	; 0x64
 8000d52:	480c      	ldr	r0, [pc, #48]	; (8000d84 <main+0x114>)
 8000d54:	f004 fab8 	bl	80052c8 <HAL_UART_Transmit>
    HAL_Delay(1000);
 8000d58:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d5c:	f000 fd2c 	bl	80017b8 <HAL_Delay>
  {
 8000d60:	e7cb      	b.n	8000cfa <main+0x8a>
 8000d62:	bf00      	nop
 8000d64:	2000000c 	.word	0x2000000c
 8000d68:	20000020 	.word	0x20000020
 8000d6c:	2000002c 	.word	0x2000002c
 8000d70:	20000038 	.word	0x20000038
 8000d74:	20000044 	.word	0x20000044
 8000d78:	20000000 	.word	0x20000000
 8000d7c:	2000021c 	.word	0x2000021c
 8000d80:	08006c5c 	.word	0x08006c5c
 8000d84:	20000268 	.word	0x20000268
 8000d88:	20000130 	.word	0x20000130
 8000d8c:	08006c6c 	.word	0x08006c6c

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	; 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	; 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f005 fada 	bl	8006358 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000db4:	f001 fe30 	bl	8002a18 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db8:	4b2a      	ldr	r3, [pc, #168]	; (8000e64 <SystemClock_Config+0xd4>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbc:	4a29      	ldr	r2, [pc, #164]	; (8000e64 <SystemClock_Config+0xd4>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc4:	4b27      	ldr	r3, [pc, #156]	; (8000e64 <SystemClock_Config+0xd4>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <SystemClock_Config+0xd8>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a24      	ldr	r2, [pc, #144]	; (8000e68 <SystemClock_Config+0xd8>)
 8000dd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dda:	6013      	str	r3, [r2, #0]
 8000ddc:	4b22      	ldr	r3, [pc, #136]	; (8000e68 <SystemClock_Config+0xd8>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000de4:	607b      	str	r3, [r7, #4]
 8000de6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000de8:	2301      	movs	r3, #1
 8000dea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000dec:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df2:	2302      	movs	r3, #2
 8000df4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000df6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000e00:	23d8      	movs	r3, #216	; 0xd8
 8000e02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000e08:	2303      	movs	r3, #3
 8000e0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e0c:	f107 0320 	add.w	r3, r7, #32
 8000e10:	4618      	mov	r0, r3
 8000e12:	f001 fe61 	bl	8002ad8 <HAL_RCC_OscConfig>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d001      	beq.n	8000e20 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000e1c:	f000 f826 	bl	8000e6c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000e20:	f001 fe0a 	bl	8002a38 <HAL_PWREx_EnableOverDrive>
 8000e24:	4603      	mov	r3, r0
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d001      	beq.n	8000e2e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000e2a:	f000 f81f 	bl	8000e6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e2e:	230f      	movs	r3, #15
 8000e30:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e32:	2302      	movs	r3, #2
 8000e34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e3a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e3e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000e40:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000e44:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000e46:	f107 030c 	add.w	r3, r7, #12
 8000e4a:	2107      	movs	r1, #7
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f002 f8e7 	bl	8003020 <HAL_RCC_ClockConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000e58:	f000 f808 	bl	8000e6c <Error_Handler>
  }
}
 8000e5c:	bf00      	nop
 8000e5e:	3750      	adds	r7, #80	; 0x50
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40007000 	.word	0x40007000

08000e6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e70:	b672      	cpsid	i
}
 8000e72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <Error_Handler+0x8>
	...

08000e78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e7e:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <HAL_MspInit+0x44>)
 8000e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e82:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <HAL_MspInit+0x44>)
 8000e84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e88:	6413      	str	r3, [r2, #64]	; 0x40
 8000e8a:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <HAL_MspInit+0x44>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	607b      	str	r3, [r7, #4]
 8000e94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <HAL_MspInit+0x44>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	4a08      	ldr	r2, [pc, #32]	; (8000ebc <HAL_MspInit+0x44>)
 8000e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <HAL_MspInit+0x44>)
 8000ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000eaa:	603b      	str	r3, [r7, #0]
 8000eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800

08000ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <NMI_Handler+0x4>

08000ec6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eca:	e7fe      	b.n	8000eca <HardFault_Handler+0x4>

08000ecc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <MemManage_Handler+0x4>

08000ed2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <UsageFault_Handler+0x4>

08000ede <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee2:	bf00      	nop
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr

08000eec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr

08000efa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000efa:	b480      	push	{r7}
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000efe:	bf00      	nop
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f0c:	f000 fc34 	bl	8001778 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f10:	bf00      	nop
 8000f12:	bd80      	pop	{r7, pc}

08000f14 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 8000f18:	2020      	movs	r0, #32
 8000f1a:	f000 ffdb 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <TIM2_IRQHandler+0x10>)
 8000f2a:	f003 f9ef 	bl	800430c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000138 	.word	0x20000138

08000f38 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART3_IRQHandler+0x10>)
 8000f3e:	f004 fa47 	bl	80053d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000268 	.word	0x20000268

08000f4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000f50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000f54:	f000 ffbe 	bl	8001ed4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f60:	4802      	ldr	r0, [pc, #8]	; (8000f6c <TIM6_DAC_IRQHandler+0x10>)
 8000f62:	f003 f9d3 	bl	800430c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000021c 	.word	0x2000021c

08000f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f78:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_sbrk+0x5c>)
 8000f7a:	4b15      	ldr	r3, [pc, #84]	; (8000fd0 <_sbrk+0x60>)
 8000f7c:	1ad3      	subs	r3, r2, r3
 8000f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f80:	697b      	ldr	r3, [r7, #20]
 8000f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f84:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <_sbrk+0x64>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d102      	bne.n	8000f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f8c:	4b11      	ldr	r3, [pc, #68]	; (8000fd4 <_sbrk+0x64>)
 8000f8e:	4a12      	ldr	r2, [pc, #72]	; (8000fd8 <_sbrk+0x68>)
 8000f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f92:	4b10      	ldr	r3, [pc, #64]	; (8000fd4 <_sbrk+0x64>)
 8000f94:	681a      	ldr	r2, [r3, #0]
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	4413      	add	r3, r2
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	d207      	bcs.n	8000fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa0:	f005 f9b0 	bl	8006304 <__errno>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000faa:	f04f 33ff 	mov.w	r3, #4294967295
 8000fae:	e009      	b.n	8000fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <_sbrk+0x64>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb6:	4b07      	ldr	r3, [pc, #28]	; (8000fd4 <_sbrk+0x64>)
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <_sbrk+0x64>)
 8000fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc2:	68fb      	ldr	r3, [r7, #12]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20050000 	.word	0x20050000
 8000fd0:	00000400 	.word	0x00000400
 8000fd4:	20000134 	.word	0x20000134
 8000fd8:	20000308 	.word	0x20000308

08000fdc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <SystemInit+0x20>)
 8000fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fe6:	4a05      	ldr	r2, [pc, #20]	; (8000ffc <SystemInit+0x20>)
 8000fe8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <MX_TIM2_Init>:
TIM_HandleTypeDef htim5;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b08e      	sub	sp, #56	; 0x38
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001006:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]
 8001012:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	463b      	mov	r3, r7
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001032:	4b38      	ldr	r3, [pc, #224]	; (8001114 <MX_TIM2_Init+0x114>)
 8001034:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001038:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800103a:	4b36      	ldr	r3, [pc, #216]	; (8001114 <MX_TIM2_Init+0x114>)
 800103c:	226b      	movs	r2, #107	; 0x6b
 800103e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b34      	ldr	r3, [pc, #208]	; (8001114 <MX_TIM2_Init+0x114>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001046:	4b33      	ldr	r3, [pc, #204]	; (8001114 <MX_TIM2_Init+0x114>)
 8001048:	f242 720f 	movw	r2, #9999	; 0x270f
 800104c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b31      	ldr	r3, [pc, #196]	; (8001114 <MX_TIM2_Init+0x114>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b2f      	ldr	r3, [pc, #188]	; (8001114 <MX_TIM2_Init+0x114>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800105a:	482e      	ldr	r0, [pc, #184]	; (8001114 <MX_TIM2_Init+0x114>)
 800105c:	f002 fdf6 	bl	8003c4c <HAL_TIM_Base_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001066:	f7ff ff01 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800106a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800106e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001070:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001074:	4619      	mov	r1, r3
 8001076:	4827      	ldr	r0, [pc, #156]	; (8001114 <MX_TIM2_Init+0x114>)
 8001078:	f003 fb7c 	bl	8004774 <HAL_TIM_ConfigClockSource>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001082:	f7ff fef3 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001086:	4823      	ldr	r0, [pc, #140]	; (8001114 <MX_TIM2_Init+0x114>)
 8001088:	f002 feb0 	bl	8003dec <HAL_TIM_PWM_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001092:	f7ff feeb 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800109a:	2300      	movs	r3, #0
 800109c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800109e:	f107 031c 	add.w	r3, r7, #28
 80010a2:	4619      	mov	r1, r3
 80010a4:	481b      	ldr	r0, [pc, #108]	; (8001114 <MX_TIM2_Init+0x114>)
 80010a6:	f004 f815 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80010b0:	f7ff fedc 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010b4:	2360      	movs	r3, #96	; 0x60
 80010b6:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010bc:	2300      	movs	r3, #0
 80010be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010c0:	2300      	movs	r3, #0
 80010c2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010c4:	463b      	mov	r3, r7
 80010c6:	2200      	movs	r2, #0
 80010c8:	4619      	mov	r1, r3
 80010ca:	4812      	ldr	r0, [pc, #72]	; (8001114 <MX_TIM2_Init+0x114>)
 80010cc:	f003 fa3e 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80010d6:	f7ff fec9 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010da:	463b      	mov	r3, r7
 80010dc:	2208      	movs	r2, #8
 80010de:	4619      	mov	r1, r3
 80010e0:	480c      	ldr	r0, [pc, #48]	; (8001114 <MX_TIM2_Init+0x114>)
 80010e2:	f003 fa33 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80010ec:	f7ff febe 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f0:	463b      	mov	r3, r7
 80010f2:	220c      	movs	r2, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	4807      	ldr	r0, [pc, #28]	; (8001114 <MX_TIM2_Init+0x114>)
 80010f8:	f003 fa28 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8001102:	f7ff feb3 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001106:	4803      	ldr	r0, [pc, #12]	; (8001114 <MX_TIM2_Init+0x114>)
 8001108:	f000 f9c0 	bl	800148c <HAL_TIM_MspPostInit>

}
 800110c:	bf00      	nop
 800110e:	3738      	adds	r7, #56	; 0x38
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	20000138 	.word	0x20000138

08001118 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b08c      	sub	sp, #48	; 0x30
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800111e:	f107 030c 	add.w	r3, r7, #12
 8001122:	2224      	movs	r2, #36	; 0x24
 8001124:	2100      	movs	r1, #0
 8001126:	4618      	mov	r0, r3
 8001128:	f005 f916 	bl	8006358 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	463b      	mov	r3, r7
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <MX_TIM3_Init+0xa4>)
 8001138:	4a21      	ldr	r2, [pc, #132]	; (80011c0 <MX_TIM3_Init+0xa8>)
 800113a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800113c:	4b1f      	ldr	r3, [pc, #124]	; (80011bc <MX_TIM3_Init+0xa4>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <MX_TIM3_Init+0xa4>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001148:	4b1c      	ldr	r3, [pc, #112]	; (80011bc <MX_TIM3_Init+0xa4>)
 800114a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800114e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <MX_TIM3_Init+0xa4>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b19      	ldr	r3, [pc, #100]	; (80011bc <MX_TIM3_Init+0xa4>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800115c:	2303      	movs	r3, #3
 800115e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001160:	2300      	movs	r3, #0
 8001162:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001164:	2301      	movs	r3, #1
 8001166:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001168:	2300      	movs	r3, #0
 800116a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800116c:	230f      	movs	r3, #15
 800116e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001170:	2300      	movs	r3, #0
 8001172:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800117c:	230f      	movs	r3, #15
 800117e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	4619      	mov	r1, r3
 8001186:	480d      	ldr	r0, [pc, #52]	; (80011bc <MX_TIM3_Init+0xa4>)
 8001188:	f002 ff8c 	bl	80040a4 <HAL_TIM_Encoder_Init>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001192:	f7ff fe6b 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001196:	2300      	movs	r3, #0
 8001198:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800119a:	2300      	movs	r3, #0
 800119c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800119e:	463b      	mov	r3, r7
 80011a0:	4619      	mov	r1, r3
 80011a2:	4806      	ldr	r0, [pc, #24]	; (80011bc <MX_TIM3_Init+0xa4>)
 80011a4:	f003 ff96 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d001      	beq.n	80011b2 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80011ae:	f7ff fe5d 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80011b2:	bf00      	nop
 80011b4:	3730      	adds	r7, #48	; 0x30
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	20000184 	.word	0x20000184
 80011c0:	40000400 	.word	0x40000400

080011c4 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011ce:	2200      	movs	r2, #0
 80011d0:	601a      	str	r2, [r3, #0]
 80011d2:	605a      	str	r2, [r3, #4]
 80011d4:	609a      	str	r2, [r3, #8]
 80011d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011d8:	f107 031c 	add.w	r3, r7, #28
 80011dc:	2200      	movs	r2, #0
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	605a      	str	r2, [r3, #4]
 80011e2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011e4:	463b      	mov	r3, r7
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]
 80011f2:	615a      	str	r2, [r3, #20]
 80011f4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80011f6:	4b2d      	ldr	r3, [pc, #180]	; (80012ac <MX_TIM5_Init+0xe8>)
 80011f8:	4a2d      	ldr	r2, [pc, #180]	; (80012b0 <MX_TIM5_Init+0xec>)
 80011fa:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 107;
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <MX_TIM5_Init+0xe8>)
 80011fe:	226b      	movs	r2, #107	; 0x6b
 8001200:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b2a      	ldr	r3, [pc, #168]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <MX_TIM5_Init+0xe8>)
 800120a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800120e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001210:	4b26      	ldr	r3, [pc, #152]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001216:	4b25      	ldr	r3, [pc, #148]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001218:	2200      	movs	r2, #0
 800121a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800121c:	4823      	ldr	r0, [pc, #140]	; (80012ac <MX_TIM5_Init+0xe8>)
 800121e:	f002 fd15 	bl	8003c4c <HAL_TIM_Base_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_TIM5_Init+0x68>
  {
    Error_Handler();
 8001228:	f7ff fe20 	bl	8000e6c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800122c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001230:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001232:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001236:	4619      	mov	r1, r3
 8001238:	481c      	ldr	r0, [pc, #112]	; (80012ac <MX_TIM5_Init+0xe8>)
 800123a:	f003 fa9b 	bl	8004774 <HAL_TIM_ConfigClockSource>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <MX_TIM5_Init+0x84>
  {
    Error_Handler();
 8001244:	f7ff fe12 	bl	8000e6c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001248:	4818      	ldr	r0, [pc, #96]	; (80012ac <MX_TIM5_Init+0xe8>)
 800124a:	f002 fdcf 	bl	8003dec <HAL_TIM_PWM_Init>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <MX_TIM5_Init+0x94>
  {
    Error_Handler();
 8001254:	f7ff fe0a 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001258:	2300      	movs	r3, #0
 800125a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800125c:	2300      	movs	r3, #0
 800125e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001260:	f107 031c 	add.w	r3, r7, #28
 8001264:	4619      	mov	r1, r3
 8001266:	4811      	ldr	r0, [pc, #68]	; (80012ac <MX_TIM5_Init+0xe8>)
 8001268:	f003 ff34 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001272:	f7ff fdfb 	bl	8000e6c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001276:	2360      	movs	r3, #96	; 0x60
 8001278:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800127e:	2300      	movs	r3, #0
 8001280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001282:	2300      	movs	r3, #0
 8001284:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001286:	463b      	mov	r3, r7
 8001288:	220c      	movs	r2, #12
 800128a:	4619      	mov	r1, r3
 800128c:	4807      	ldr	r0, [pc, #28]	; (80012ac <MX_TIM5_Init+0xe8>)
 800128e:	f003 f95d 	bl	800454c <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM5_Init+0xd8>
  {
    Error_Handler();
 8001298:	f7ff fde8 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 800129c:	4803      	ldr	r0, [pc, #12]	; (80012ac <MX_TIM5_Init+0xe8>)
 800129e:	f000 f8f5 	bl	800148c <HAL_TIM_MspPostInit>

}
 80012a2:	bf00      	nop
 80012a4:	3738      	adds	r7, #56	; 0x38
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200001d0 	.word	0x200001d0
 80012b0:	40000c00 	.word	0x40000c00

080012b4 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ba:	1d3b      	adds	r3, r7, #4
 80012bc:	2200      	movs	r2, #0
 80012be:	601a      	str	r2, [r3, #0]
 80012c0:	605a      	str	r2, [r3, #4]
 80012c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012c4:	4b14      	ldr	r3, [pc, #80]	; (8001318 <MX_TIM6_Init+0x64>)
 80012c6:	4a15      	ldr	r2, [pc, #84]	; (800131c <MX_TIM6_Init+0x68>)
 80012c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 80012ca:	4b13      	ldr	r3, [pc, #76]	; (8001318 <MX_TIM6_Init+0x64>)
 80012cc:	226b      	movs	r2, #107	; 0x6b
 80012ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_TIM6_Init+0x64>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_TIM6_Init+0x64>)
 80012d8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80012dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_TIM6_Init+0x64>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80012e4:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_TIM6_Init+0x64>)
 80012e6:	f002 fcb1 	bl	8003c4c <HAL_TIM_Base_Init>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d001      	beq.n	80012f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80012f0:	f7ff fdbc 	bl	8000e6c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012f8:	2300      	movs	r3, #0
 80012fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80012fc:	1d3b      	adds	r3, r7, #4
 80012fe:	4619      	mov	r1, r3
 8001300:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_TIM6_Init+0x64>)
 8001302:	f003 fee7 	bl	80050d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800130c:	f7ff fdae 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001310:	bf00      	nop
 8001312:	3710      	adds	r7, #16
 8001314:	46bd      	mov	sp, r7
 8001316:	bd80      	pop	{r7, pc}
 8001318:	2000021c 	.word	0x2000021c
 800131c:	40001000 	.word	0x40001000

08001320 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b086      	sub	sp, #24
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001330:	d114      	bne.n	800135c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001332:	4b22      	ldr	r3, [pc, #136]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6413      	str	r3, [r2, #64]	; 0x40
 800133e:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f003 0301 	and.w	r3, r3, #1
 8001346:	617b      	str	r3, [r7, #20]
 8001348:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800134a:	2200      	movs	r2, #0
 800134c:	2100      	movs	r1, #0
 800134e:	201c      	movs	r0, #28
 8001350:	f000 fb31 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001354:	201c      	movs	r0, #28
 8001356:	f000 fb4a 	bl	80019ee <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800135a:	e02a      	b.n	80013b2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM5)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a17      	ldr	r2, [pc, #92]	; (80013c0 <HAL_TIM_Base_MspInit+0xa0>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d10c      	bne.n	8001380 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	4a14      	ldr	r2, [pc, #80]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 800136c:	f043 0308 	orr.w	r3, r3, #8
 8001370:	6413      	str	r3, [r2, #64]	; 0x40
 8001372:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001376:	f003 0308 	and.w	r3, r3, #8
 800137a:	613b      	str	r3, [r7, #16]
 800137c:	693b      	ldr	r3, [r7, #16]
}
 800137e:	e018      	b.n	80013b2 <HAL_TIM_Base_MspInit+0x92>
  else if(tim_baseHandle->Instance==TIM6)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4a0f      	ldr	r2, [pc, #60]	; (80013c4 <HAL_TIM_Base_MspInit+0xa4>)
 8001386:	4293      	cmp	r3, r2
 8001388:	d113      	bne.n	80013b2 <HAL_TIM_Base_MspInit+0x92>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800138a:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	4a0b      	ldr	r2, [pc, #44]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001390:	f043 0310 	orr.w	r3, r3, #16
 8001394:	6413      	str	r3, [r2, #64]	; 0x40
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_TIM_Base_MspInit+0x9c>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800139a:	f003 0310 	and.w	r3, r3, #16
 800139e:	60fb      	str	r3, [r7, #12]
 80013a0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2036      	movs	r0, #54	; 0x36
 80013a8:	f000 fb05 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013ac:	2036      	movs	r0, #54	; 0x36
 80013ae:	f000 fb1e 	bl	80019ee <HAL_NVIC_EnableIRQ>
}
 80013b2:	bf00      	nop
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40000c00 	.word	0x40000c00
 80013c4:	40001000 	.word	0x40001000

080013c8 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08a      	sub	sp, #40	; 0x28
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d0:	f107 0314 	add.w	r3, r7, #20
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
 80013d8:	605a      	str	r2, [r3, #4]
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	60da      	str	r2, [r3, #12]
 80013de:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a25      	ldr	r2, [pc, #148]	; (800147c <HAL_TIM_Encoder_MspInit+0xb4>)
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d143      	bne.n	8001472 <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80013ea:	4b25      	ldr	r3, [pc, #148]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a24      	ldr	r2, [pc, #144]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013f0:	f043 0302 	orr.w	r3, r3, #2
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
 80013f6:	4b22      	ldr	r3, [pc, #136]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 80013f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	613b      	str	r3, [r7, #16]
 8001400:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001402:	4b1f      	ldr	r3, [pc, #124]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800141a:	4b19      	ldr	r3, [pc, #100]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 800141c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141e:	4a18      	ldr	r2, [pc, #96]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001420:	f043 0304 	orr.w	r3, r3, #4
 8001424:	6313      	str	r3, [r2, #48]	; 0x30
 8001426:	4b16      	ldr	r3, [pc, #88]	; (8001480 <HAL_TIM_Encoder_MspInit+0xb8>)
 8001428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142a:	f003 0304 	and.w	r3, r3, #4
 800142e:	60bb      	str	r3, [r7, #8]
 8001430:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 8001432:	2340      	movs	r3, #64	; 0x40
 8001434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001436:	2302      	movs	r3, #2
 8001438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143a:	2300      	movs	r3, #0
 800143c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800143e:	2300      	movs	r3, #0
 8001440:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001442:	2302      	movs	r3, #2
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 0314 	add.w	r3, r7, #20
 800144a:	4619      	mov	r1, r3
 800144c:	480d      	ldr	r0, [pc, #52]	; (8001484 <HAL_TIM_Encoder_MspInit+0xbc>)
 800144e:	f000 fb7b 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 8001452:	2380      	movs	r3, #128	; 0x80
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001456:	2302      	movs	r3, #2
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001462:	2302      	movs	r3, #2
 8001464:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001466:	f107 0314 	add.w	r3, r7, #20
 800146a:	4619      	mov	r1, r3
 800146c:	4806      	ldr	r0, [pc, #24]	; (8001488 <HAL_TIM_Encoder_MspInit+0xc0>)
 800146e:	f000 fb6b 	bl	8001b48 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001472:	bf00      	nop
 8001474:	3728      	adds	r7, #40	; 0x28
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40000400 	.word	0x40000400
 8001480:	40023800 	.word	0x40023800
 8001484:	40020000 	.word	0x40020000
 8001488:	40020800 	.word	0x40020800

0800148c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b08a      	sub	sp, #40	; 0x28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001494:	f107 0314 	add.w	r3, r7, #20
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]
 800149c:	605a      	str	r2, [r3, #4]
 800149e:	609a      	str	r2, [r3, #8]
 80014a0:	60da      	str	r2, [r3, #12]
 80014a2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ac:	d139      	bne.n	8001522 <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	4b2f      	ldr	r3, [pc, #188]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	4a2e      	ldr	r2, [pc, #184]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ba:	4b2c      	ldr	r3, [pc, #176]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	4b29      	ldr	r3, [pc, #164]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a28      	ldr	r2, [pc, #160]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014cc:	f043 0302 	orr.w	r3, r3, #2
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b26      	ldr	r3, [pc, #152]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0302 	and.w	r3, r3, #2
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 80014de:	2320      	movs	r3, #32
 80014e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e2:	2302      	movs	r3, #2
 80014e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014ea:	2300      	movs	r3, #0
 80014ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014ee:	2301      	movs	r3, #1
 80014f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 80014f2:	f107 0314 	add.w	r3, r7, #20
 80014f6:	4619      	mov	r1, r3
 80014f8:	481d      	ldr	r0, [pc, #116]	; (8001570 <HAL_TIM_MspPostInit+0xe4>)
 80014fa:	f000 fb25 	bl	8001b48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 80014fe:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800150c:	2300      	movs	r3, #0
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001510:	2301      	movs	r3, #1
 8001512:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4816      	ldr	r0, [pc, #88]	; (8001574 <HAL_TIM_MspPostInit+0xe8>)
 800151c:	f000 fb14 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspPostInit 1 */

  /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001520:	e020      	b.n	8001564 <HAL_TIM_MspPostInit+0xd8>
  else if(timHandle->Instance==TIM5)
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	4a14      	ldr	r2, [pc, #80]	; (8001578 <HAL_TIM_MspPostInit+0xec>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d11b      	bne.n	8001564 <HAL_TIM_MspPostInit+0xd8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152c:	4b0f      	ldr	r3, [pc, #60]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 800152e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001530:	4a0e      	ldr	r2, [pc, #56]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 8001532:	f043 0301 	orr.w	r3, r3, #1
 8001536:	6313      	str	r3, [r2, #48]	; 0x30
 8001538:	4b0c      	ldr	r3, [pc, #48]	; (800156c <HAL_TIM_MspPostInit+0xe0>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153c:	f003 0301 	and.w	r3, r3, #1
 8001540:	60bb      	str	r3, [r7, #8]
 8001542:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = LD4_Pin;
 8001544:	2308      	movs	r3, #8
 8001546:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001548:	2302      	movs	r3, #2
 800154a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154c:	2300      	movs	r3, #0
 800154e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001550:	2300      	movs	r3, #0
 8001552:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001554:	2302      	movs	r3, #2
 8001556:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 0314 	add.w	r3, r7, #20
 800155c:	4619      	mov	r1, r3
 800155e:	4804      	ldr	r0, [pc, #16]	; (8001570 <HAL_TIM_MspPostInit+0xe4>)
 8001560:	f000 faf2 	bl	8001b48 <HAL_GPIO_Init>
}
 8001564:	bf00      	nop
 8001566:	3728      	adds	r7, #40	; 0x28
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	40023800 	.word	0x40023800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40000c00 	.word	0x40000c00

0800157c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001582:	4a15      	ldr	r2, [pc, #84]	; (80015d8 <MX_USART3_UART_Init+0x5c>)
 8001584:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001586:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001588:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800158c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800158e:	4b11      	ldr	r3, [pc, #68]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001590:	2200      	movs	r2, #0
 8001592:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 8001596:	2200      	movs	r2, #0
 8001598:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 800159c:	2200      	movs	r2, #0
 800159e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015a2:	220c      	movs	r2, #12
 80015a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	4b0b      	ldr	r3, [pc, #44]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	4b09      	ldr	r3, [pc, #36]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80015b2:	4b08      	ldr	r3, [pc, #32]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015be:	4805      	ldr	r0, [pc, #20]	; (80015d4 <MX_USART3_UART_Init+0x58>)
 80015c0:	f003 fe34 	bl	800522c <HAL_UART_Init>
 80015c4:	4603      	mov	r3, r0
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d001      	beq.n	80015ce <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80015ca:	f7ff fc4f 	bl	8000e6c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ce:	bf00      	nop
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000268 	.word	0x20000268
 80015d8:	40004800 	.word	0x40004800

080015dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b0aa      	sub	sp, #168	; 0xa8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015f4:	f107 0310 	add.w	r3, r7, #16
 80015f8:	2284      	movs	r2, #132	; 0x84
 80015fa:	2100      	movs	r1, #0
 80015fc:	4618      	mov	r0, r3
 80015fe:	f004 feab 	bl	8006358 <memset>
  if(uartHandle->Instance==USART3)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4a26      	ldr	r2, [pc, #152]	; (80016a0 <HAL_UART_MspInit+0xc4>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d144      	bne.n	8001696 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800160c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001610:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 8001612:	2310      	movs	r3, #16
 8001614:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001616:	f107 0310 	add.w	r3, r7, #16
 800161a:	4618      	mov	r0, r3
 800161c:	f001 ff26 	bl	800346c <HAL_RCCEx_PeriphCLKConfig>
 8001620:	4603      	mov	r3, r0
 8001622:	2b00      	cmp	r3, #0
 8001624:	d001      	beq.n	800162a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001626:	f7ff fc21 	bl	8000e6c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800162a:	4b1e      	ldr	r3, [pc, #120]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162e:	4a1d      	ldr	r2, [pc, #116]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001630:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001634:	6413      	str	r3, [r2, #64]	; 0x40
 8001636:	4b1b      	ldr	r3, [pc, #108]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800163e:	60fb      	str	r3, [r7, #12]
 8001640:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001642:	4b18      	ldr	r3, [pc, #96]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a17      	ldr	r2, [pc, #92]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001648:	f043 0308 	orr.w	r3, r3, #8
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b15      	ldr	r3, [pc, #84]	; (80016a4 <HAL_UART_MspInit+0xc8>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	60bb      	str	r3, [r7, #8]
 8001658:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800165a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800165e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001662:	2302      	movs	r3, #2
 8001664:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001668:	2300      	movs	r3, #0
 800166a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800166e:	2303      	movs	r3, #3
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001674:	2307      	movs	r3, #7
 8001676:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800167e:	4619      	mov	r1, r3
 8001680:	4809      	ldr	r0, [pc, #36]	; (80016a8 <HAL_UART_MspInit+0xcc>)
 8001682:	f000 fa61 	bl	8001b48 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001686:	2200      	movs	r2, #0
 8001688:	2100      	movs	r1, #0
 800168a:	2027      	movs	r0, #39	; 0x27
 800168c:	f000 f993 	bl	80019b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001690:	2027      	movs	r0, #39	; 0x27
 8001692:	f000 f9ac 	bl	80019ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001696:	bf00      	nop
 8001698:	37a8      	adds	r7, #168	; 0xa8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40004800 	.word	0x40004800
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020c00 	.word	0x40020c00

080016ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016b0:	480d      	ldr	r0, [pc, #52]	; (80016e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80016b2:	490e      	ldr	r1, [pc, #56]	; (80016ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80016b4:	4a0e      	ldr	r2, [pc, #56]	; (80016f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80016b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016b8:	e002      	b.n	80016c0 <LoopCopyDataInit>

080016ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016be:	3304      	adds	r3, #4

080016c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016c4:	d3f9      	bcc.n	80016ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016c6:	4a0b      	ldr	r2, [pc, #44]	; (80016f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016c8:	4c0b      	ldr	r4, [pc, #44]	; (80016f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016cc:	e001      	b.n	80016d2 <LoopFillZerobss>

080016ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016d0:	3204      	adds	r2, #4

080016d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016d4:	d3fb      	bcc.n	80016ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80016d6:	f7ff fc81 	bl	8000fdc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016da:	f004 fe19 	bl	8006310 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016de:	f7ff fac7 	bl	8000c70 <main>
  bx  lr    
 80016e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016e4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016ec:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 80016f0:	08006cd4 	.word	0x08006cd4
  ldr r2, =_sbss
 80016f4:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80016f8:	20000304 	.word	0x20000304

080016fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016fc:	e7fe      	b.n	80016fc <ADC_IRQHandler>

080016fe <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001702:	2003      	movs	r0, #3
 8001704:	f000 f94c 	bl	80019a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001708:	2000      	movs	r0, #0
 800170a:	f000 f805 	bl	8001718 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800170e:	f7ff fbb3 	bl	8000e78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001712:	2300      	movs	r3, #0
}
 8001714:	4618      	mov	r0, r3
 8001716:	bd80      	pop	{r7, pc}

08001718 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b082      	sub	sp, #8
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001720:	4b12      	ldr	r3, [pc, #72]	; (800176c <HAL_InitTick+0x54>)
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	4b12      	ldr	r3, [pc, #72]	; (8001770 <HAL_InitTick+0x58>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	4619      	mov	r1, r3
 800172a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800172e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001732:	fbb2 f3f3 	udiv	r3, r2, r3
 8001736:	4618      	mov	r0, r3
 8001738:	f000 f967 	bl	8001a0a <HAL_SYSTICK_Config>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00e      	b.n	8001764 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2b0f      	cmp	r3, #15
 800174a:	d80a      	bhi.n	8001762 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800174c:	2200      	movs	r2, #0
 800174e:	6879      	ldr	r1, [r7, #4]
 8001750:	f04f 30ff 	mov.w	r0, #4294967295
 8001754:	f000 f92f 	bl	80019b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001758:	4a06      	ldr	r2, [pc, #24]	; (8001774 <HAL_InitTick+0x5c>)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800175e:	2300      	movs	r3, #0
 8001760:	e000      	b.n	8001764 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	3708      	adds	r7, #8
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	20000050 	.word	0x20000050
 8001770:	20000058 	.word	0x20000058
 8001774:	20000054 	.word	0x20000054

08001778 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800177c:	4b06      	ldr	r3, [pc, #24]	; (8001798 <HAL_IncTick+0x20>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	461a      	mov	r2, r3
 8001782:	4b06      	ldr	r3, [pc, #24]	; (800179c <HAL_IncTick+0x24>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4413      	add	r3, r2
 8001788:	4a04      	ldr	r2, [pc, #16]	; (800179c <HAL_IncTick+0x24>)
 800178a:	6013      	str	r3, [r2, #0]
}
 800178c:	bf00      	nop
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	20000058 	.word	0x20000058
 800179c:	200002f0 	.word	0x200002f0

080017a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  return uwTick;
 80017a4:	4b03      	ldr	r3, [pc, #12]	; (80017b4 <HAL_GetTick+0x14>)
 80017a6:	681b      	ldr	r3, [r3, #0]
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr
 80017b2:	bf00      	nop
 80017b4:	200002f0 	.word	0x200002f0

080017b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c0:	f7ff ffee 	bl	80017a0 <HAL_GetTick>
 80017c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d0:	d005      	beq.n	80017de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017d2:	4b0a      	ldr	r3, [pc, #40]	; (80017fc <HAL_Delay+0x44>)
 80017d4:	781b      	ldrb	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017de:	bf00      	nop
 80017e0:	f7ff ffde 	bl	80017a0 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	68fa      	ldr	r2, [r7, #12]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d8f7      	bhi.n	80017e0 <HAL_Delay+0x28>
  {
  }
}
 80017f0:	bf00      	nop
 80017f2:	bf00      	nop
 80017f4:	3710      	adds	r7, #16
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20000058 	.word	0x20000058

08001800 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001800:	b480      	push	{r7}
 8001802:	b085      	sub	sp, #20
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001810:	4b0b      	ldr	r3, [pc, #44]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001812:	68db      	ldr	r3, [r3, #12]
 8001814:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800181c:	4013      	ands	r3, r2
 800181e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001828:	4b06      	ldr	r3, [pc, #24]	; (8001844 <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	4313      	orrs	r3, r2
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	; (8001840 <__NVIC_SetPriorityGrouping+0x40>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00
 8001844:	05fa0000 	.word	0x05fa0000

08001848 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800184c:	4b04      	ldr	r3, [pc, #16]	; (8001860 <__NVIC_GetPriorityGrouping+0x18>)
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	0a1b      	lsrs	r3, r3, #8
 8001852:	f003 0307 	and.w	r3, r3, #7
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr
 8001860:	e000ed00 	.word	0xe000ed00

08001864 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	4603      	mov	r3, r0
 800186c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001872:	2b00      	cmp	r3, #0
 8001874:	db0b      	blt.n	800188e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	f003 021f 	and.w	r2, r3, #31
 800187c:	4907      	ldr	r1, [pc, #28]	; (800189c <__NVIC_EnableIRQ+0x38>)
 800187e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001882:	095b      	lsrs	r3, r3, #5
 8001884:	2001      	movs	r0, #1
 8001886:	fa00 f202 	lsl.w	r2, r0, r2
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	e000e100 	.word	0xe000e100

080018a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b083      	sub	sp, #12
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	4603      	mov	r3, r0
 80018a8:	6039      	str	r1, [r7, #0]
 80018aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	db0a      	blt.n	80018ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	b2da      	uxtb	r2, r3
 80018b8:	490c      	ldr	r1, [pc, #48]	; (80018ec <__NVIC_SetPriority+0x4c>)
 80018ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018be:	0112      	lsls	r2, r2, #4
 80018c0:	b2d2      	uxtb	r2, r2
 80018c2:	440b      	add	r3, r1
 80018c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c8:	e00a      	b.n	80018e0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	b2da      	uxtb	r2, r3
 80018ce:	4908      	ldr	r1, [pc, #32]	; (80018f0 <__NVIC_SetPriority+0x50>)
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	f003 030f 	and.w	r3, r3, #15
 80018d6:	3b04      	subs	r3, #4
 80018d8:	0112      	lsls	r2, r2, #4
 80018da:	b2d2      	uxtb	r2, r2
 80018dc:	440b      	add	r3, r1
 80018de:	761a      	strb	r2, [r3, #24]
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000e100 	.word	0xe000e100
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b089      	sub	sp, #36	; 0x24
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	f1c3 0307 	rsb	r3, r3, #7
 800190e:	2b04      	cmp	r3, #4
 8001910:	bf28      	it	cs
 8001912:	2304      	movcs	r3, #4
 8001914:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	3304      	adds	r3, #4
 800191a:	2b06      	cmp	r3, #6
 800191c:	d902      	bls.n	8001924 <NVIC_EncodePriority+0x30>
 800191e:	69fb      	ldr	r3, [r7, #28]
 8001920:	3b03      	subs	r3, #3
 8001922:	e000      	b.n	8001926 <NVIC_EncodePriority+0x32>
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001928:	f04f 32ff 	mov.w	r2, #4294967295
 800192c:	69bb      	ldr	r3, [r7, #24]
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43da      	mvns	r2, r3
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	401a      	ands	r2, r3
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800193c:	f04f 31ff 	mov.w	r1, #4294967295
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa01 f303 	lsl.w	r3, r1, r3
 8001946:	43d9      	mvns	r1, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800194c:	4313      	orrs	r3, r2
         );
}
 800194e:	4618      	mov	r0, r3
 8001950:	3724      	adds	r7, #36	; 0x24
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
	...

0800195c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b082      	sub	sp, #8
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	3b01      	subs	r3, #1
 8001968:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800196c:	d301      	bcc.n	8001972 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196e:	2301      	movs	r3, #1
 8001970:	e00f      	b.n	8001992 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001972:	4a0a      	ldr	r2, [pc, #40]	; (800199c <SysTick_Config+0x40>)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	3b01      	subs	r3, #1
 8001978:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800197a:	210f      	movs	r1, #15
 800197c:	f04f 30ff 	mov.w	r0, #4294967295
 8001980:	f7ff ff8e 	bl	80018a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001984:	4b05      	ldr	r3, [pc, #20]	; (800199c <SysTick_Config+0x40>)
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <SysTick_Config+0x40>)
 800198c:	2207      	movs	r2, #7
 800198e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3708      	adds	r7, #8
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	e000e010 	.word	0xe000e010

080019a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7ff ff29 	bl	8001800 <__NVIC_SetPriorityGrouping>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b086      	sub	sp, #24
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	4603      	mov	r3, r0
 80019be:	60b9      	str	r1, [r7, #8]
 80019c0:	607a      	str	r2, [r7, #4]
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019c4:	2300      	movs	r3, #0
 80019c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c8:	f7ff ff3e 	bl	8001848 <__NVIC_GetPriorityGrouping>
 80019cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	68b9      	ldr	r1, [r7, #8]
 80019d2:	6978      	ldr	r0, [r7, #20]
 80019d4:	f7ff ff8e 	bl	80018f4 <NVIC_EncodePriority>
 80019d8:	4602      	mov	r2, r0
 80019da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019de:	4611      	mov	r1, r2
 80019e0:	4618      	mov	r0, r3
 80019e2:	f7ff ff5d 	bl	80018a0 <__NVIC_SetPriority>
}
 80019e6:	bf00      	nop
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b082      	sub	sp, #8
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	4603      	mov	r3, r0
 80019f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff31 	bl	8001864 <__NVIC_EnableIRQ>
}
 8001a02:	bf00      	nop
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}

08001a0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a0a:	b580      	push	{r7, lr}
 8001a0c:	b082      	sub	sp, #8
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a12:	6878      	ldr	r0, [r7, #4]
 8001a14:	f7ff ffa2 	bl	800195c <SysTick_Config>
 8001a18:	4603      	mov	r3, r0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b084      	sub	sp, #16
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a30:	f7ff feb6 	bl	80017a0 <HAL_GetTick>
 8001a34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d008      	beq.n	8001a54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	2280      	movs	r2, #128	; 0x80
 8001a46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001a50:	2301      	movs	r3, #1
 8001a52:	e052      	b.n	8001afa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f022 0216 	bic.w	r2, r2, #22
 8001a62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	695a      	ldr	r2, [r3, #20]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d103      	bne.n	8001a84 <HAL_DMA_Abort+0x62>
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d007      	beq.n	8001a94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0208 	bic.w	r2, r2, #8
 8001a92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	681a      	ldr	r2, [r3, #0]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 0201 	bic.w	r2, r2, #1
 8001aa2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa4:	e013      	b.n	8001ace <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa6:	f7ff fe7b 	bl	80017a0 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	2b05      	cmp	r3, #5
 8001ab2:	d90c      	bls.n	8001ace <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2220      	movs	r2, #32
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2203      	movs	r2, #3
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e015      	b.n	8001afa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d1e4      	bne.n	8001aa6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ae0:	223f      	movs	r2, #63	; 0x3f
 8001ae2:	409a      	lsls	r2, r3
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	2201      	movs	r2, #1
 8001aec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001af8:	2300      	movs	r3, #0
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3710      	adds	r7, #16
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b083      	sub	sp, #12
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	2b02      	cmp	r3, #2
 8001b14:	d004      	beq.n	8001b20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	2280      	movs	r2, #128	; 0x80
 8001b1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e00c      	b.n	8001b3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2205      	movs	r2, #5
 8001b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b38:	2300      	movs	r3, #0
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	370c      	adds	r7, #12
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b44:	4770      	bx	lr
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b089      	sub	sp, #36	; 0x24
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b52:	2300      	movs	r3, #0
 8001b54:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b56:	2300      	movs	r3, #0
 8001b58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b62:	2300      	movs	r3, #0
 8001b64:	61fb      	str	r3, [r7, #28]
 8001b66:	e175      	b.n	8001e54 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	f040 8164 	bne.w	8001e4e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b86:	683b      	ldr	r3, [r7, #0]
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	d005      	beq.n	8001b9e <HAL_GPIO_Init+0x56>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	f003 0303 	and.w	r3, r3, #3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d130      	bne.n	8001c00 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	005b      	lsls	r3, r3, #1
 8001ba8:	2203      	movs	r2, #3
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	68da      	ldr	r2, [r3, #12]
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	005b      	lsls	r3, r3, #1
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bd4:	2201      	movs	r2, #1
 8001bd6:	69fb      	ldr	r3, [r7, #28]
 8001bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bdc:	43db      	mvns	r3, r3
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4013      	ands	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 0201 	and.w	r2, r3, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0303 	and.w	r3, r3, #3
 8001c08:	2b03      	cmp	r3, #3
 8001c0a:	d017      	beq.n	8001c3c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	005b      	lsls	r3, r3, #1
 8001c16:	2203      	movs	r2, #3
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689a      	ldr	r2, [r3, #8]
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	005b      	lsls	r3, r3, #1
 8001c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	4313      	orrs	r3, r2
 8001c34:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0303 	and.w	r3, r3, #3
 8001c44:	2b02      	cmp	r3, #2
 8001c46:	d123      	bne.n	8001c90 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	08da      	lsrs	r2, r3, #3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	3208      	adds	r2, #8
 8001c50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	f003 0307 	and.w	r3, r3, #7
 8001c5c:	009b      	lsls	r3, r3, #2
 8001c5e:	220f      	movs	r2, #15
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	691a      	ldr	r2, [r3, #16]
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	f003 0307 	and.w	r3, r3, #7
 8001c76:	009b      	lsls	r3, r3, #2
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	08da      	lsrs	r2, r3, #3
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	3208      	adds	r2, #8
 8001c8a:	69b9      	ldr	r1, [r7, #24]
 8001c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	2203      	movs	r2, #3
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	43db      	mvns	r3, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	685b      	ldr	r3, [r3, #4]
 8001cac:	f003 0203 	and.w	r2, r3, #3
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	f000 80be 	beq.w	8001e4e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cd2:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_GPIO_Init+0x324>)
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	4a65      	ldr	r2, [pc, #404]	; (8001e6c <HAL_GPIO_Init+0x324>)
 8001cd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cdc:	6453      	str	r3, [r2, #68]	; 0x44
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_GPIO_Init+0x324>)
 8001ce0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ce2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ce6:	60fb      	str	r3, [r7, #12]
 8001ce8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001cea:	4a61      	ldr	r2, [pc, #388]	; (8001e70 <HAL_GPIO_Init+0x328>)
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	089b      	lsrs	r3, r3, #2
 8001cf0:	3302      	adds	r3, #2
 8001cf2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0303 	and.w	r3, r3, #3
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	220f      	movs	r2, #15
 8001d02:	fa02 f303 	lsl.w	r3, r2, r3
 8001d06:	43db      	mvns	r3, r3
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a58      	ldr	r2, [pc, #352]	; (8001e74 <HAL_GPIO_Init+0x32c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d037      	beq.n	8001d86 <HAL_GPIO_Init+0x23e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a57      	ldr	r2, [pc, #348]	; (8001e78 <HAL_GPIO_Init+0x330>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d031      	beq.n	8001d82 <HAL_GPIO_Init+0x23a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a56      	ldr	r2, [pc, #344]	; (8001e7c <HAL_GPIO_Init+0x334>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d02b      	beq.n	8001d7e <HAL_GPIO_Init+0x236>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a55      	ldr	r2, [pc, #340]	; (8001e80 <HAL_GPIO_Init+0x338>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d025      	beq.n	8001d7a <HAL_GPIO_Init+0x232>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a54      	ldr	r2, [pc, #336]	; (8001e84 <HAL_GPIO_Init+0x33c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <HAL_GPIO_Init+0x22e>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a53      	ldr	r2, [pc, #332]	; (8001e88 <HAL_GPIO_Init+0x340>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d019      	beq.n	8001d72 <HAL_GPIO_Init+0x22a>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a52      	ldr	r2, [pc, #328]	; (8001e8c <HAL_GPIO_Init+0x344>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d013      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a51      	ldr	r2, [pc, #324]	; (8001e90 <HAL_GPIO_Init+0x348>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d00d      	beq.n	8001d6a <HAL_GPIO_Init+0x222>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a50      	ldr	r2, [pc, #320]	; (8001e94 <HAL_GPIO_Init+0x34c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d007      	beq.n	8001d66 <HAL_GPIO_Init+0x21e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a4f      	ldr	r2, [pc, #316]	; (8001e98 <HAL_GPIO_Init+0x350>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d101      	bne.n	8001d62 <HAL_GPIO_Init+0x21a>
 8001d5e:	2309      	movs	r3, #9
 8001d60:	e012      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d62:	230a      	movs	r3, #10
 8001d64:	e010      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d66:	2308      	movs	r3, #8
 8001d68:	e00e      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00c      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d6e:	2306      	movs	r3, #6
 8001d70:	e00a      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d72:	2305      	movs	r3, #5
 8001d74:	e008      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d76:	2304      	movs	r3, #4
 8001d78:	e006      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d7a:	2303      	movs	r3, #3
 8001d7c:	e004      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d7e:	2302      	movs	r3, #2
 8001d80:	e002      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d82:	2301      	movs	r3, #1
 8001d84:	e000      	b.n	8001d88 <HAL_GPIO_Init+0x240>
 8001d86:	2300      	movs	r3, #0
 8001d88:	69fa      	ldr	r2, [r7, #28]
 8001d8a:	f002 0203 	and.w	r2, r2, #3
 8001d8e:	0092      	lsls	r2, r2, #2
 8001d90:	4093      	lsls	r3, r2
 8001d92:	69ba      	ldr	r2, [r7, #24]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d98:	4935      	ldr	r1, [pc, #212]	; (8001e70 <HAL_GPIO_Init+0x328>)
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	089b      	lsrs	r3, r3, #2
 8001d9e:	3302      	adds	r3, #2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001da6:	4b3d      	ldr	r3, [pc, #244]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	43db      	mvns	r3, r3
 8001db0:	69ba      	ldr	r2, [r7, #24]
 8001db2:	4013      	ands	r3, r2
 8001db4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685b      	ldr	r3, [r3, #4]
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d003      	beq.n	8001dca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dc2:	69ba      	ldr	r2, [r7, #24]
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	4313      	orrs	r3, r2
 8001dc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dca:	4a34      	ldr	r2, [pc, #208]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd0:	4b32      	ldr	r3, [pc, #200]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001dd2:	68db      	ldr	r3, [r3, #12]
 8001dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d003      	beq.n	8001df4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	4313      	orrs	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df4:	4a29      	ldr	r2, [pc, #164]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	43db      	mvns	r3, r3
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4013      	ands	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d003      	beq.n	8001e1e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e1e:	4a1f      	ldr	r2, [pc, #124]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e24:	4b1d      	ldr	r3, [pc, #116]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e48:	4a14      	ldr	r2, [pc, #80]	; (8001e9c <HAL_GPIO_Init+0x354>)
 8001e4a:	69bb      	ldr	r3, [r7, #24]
 8001e4c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	3301      	adds	r3, #1
 8001e52:	61fb      	str	r3, [r7, #28]
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	2b0f      	cmp	r3, #15
 8001e58:	f67f ae86 	bls.w	8001b68 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e5c:	bf00      	nop
 8001e5e:	bf00      	nop
 8001e60:	3724      	adds	r7, #36	; 0x24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	40023800 	.word	0x40023800
 8001e70:	40013800 	.word	0x40013800
 8001e74:	40020000 	.word	0x40020000
 8001e78:	40020400 	.word	0x40020400
 8001e7c:	40020800 	.word	0x40020800
 8001e80:	40020c00 	.word	0x40020c00
 8001e84:	40021000 	.word	0x40021000
 8001e88:	40021400 	.word	0x40021400
 8001e8c:	40021800 	.word	0x40021800
 8001e90:	40021c00 	.word	0x40021c00
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022400 	.word	0x40022400
 8001e9c:	40013c00 	.word	0x40013c00

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	619a      	str	r2, [r3, #24]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
	...

08001ed4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4603      	mov	r3, r0
 8001edc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ede:	4b08      	ldr	r3, [pc, #32]	; (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee0:	695a      	ldr	r2, [r3, #20]
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d006      	beq.n	8001ef8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eea:	4a05      	ldr	r2, [pc, #20]	; (8001f00 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ef0:	88fb      	ldrh	r3, [r7, #6]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f000 f806 	bl	8001f04 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef8:	bf00      	nop
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f0e:	bf00      	nop
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e07f      	b.n	800202e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f34:	b2db      	uxtb	r3, r3
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d106      	bne.n	8001f48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	f7fe fe10 	bl	8000b68 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2224      	movs	r2, #36	; 0x24
 8001f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0201 	bic.w	r2, r2, #1
 8001f5e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685a      	ldr	r2, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f6c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	689a      	ldr	r2, [r3, #8]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001f7c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	68db      	ldr	r3, [r3, #12]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f92:	609a      	str	r2, [r3, #8]
 8001f94:	e006      	b.n	8001fa4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689a      	ldr	r2, [r3, #8]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001fa2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68db      	ldr	r3, [r3, #12]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d104      	bne.n	8001fb6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001fb4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	6859      	ldr	r1, [r3, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_I2C_Init+0x11c>)
 8001fc2:	430b      	orrs	r3, r1
 8001fc4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	691a      	ldr	r2, [r3, #16]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	699b      	ldr	r3, [r3, #24]
 8001fe6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	430a      	orrs	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	69d9      	ldr	r1, [r3, #28]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1a      	ldr	r2, [r3, #32]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	430a      	orrs	r2, r1
 8001ffe:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f042 0201 	orr.w	r2, r2, #1
 800200e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	2200      	movs	r2, #0
 8002014:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2220      	movs	r2, #32
 800201a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3708      	adds	r7, #8
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	02008000 	.word	0x02008000

0800203c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b088      	sub	sp, #32
 8002040:	af02      	add	r7, sp, #8
 8002042:	60f8      	str	r0, [r7, #12]
 8002044:	607a      	str	r2, [r7, #4]
 8002046:	461a      	mov	r2, r3
 8002048:	460b      	mov	r3, r1
 800204a:	817b      	strh	r3, [r7, #10]
 800204c:	4613      	mov	r3, r2
 800204e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002056:	b2db      	uxtb	r3, r3
 8002058:	2b20      	cmp	r3, #32
 800205a:	f040 80da 	bne.w	8002212 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_I2C_Master_Transmit+0x30>
 8002068:	2302      	movs	r3, #2
 800206a:	e0d3      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002074:	f7ff fb94 	bl	80017a0 <HAL_GetTick>
 8002078:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	9300      	str	r3, [sp, #0]
 800207e:	2319      	movs	r3, #25
 8002080:	2201      	movs	r2, #1
 8002082:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f000 f9e6 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 800208c:	4603      	mov	r3, r0
 800208e:	2b00      	cmp	r3, #0
 8002090:	d001      	beq.n	8002096 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002092:	2301      	movs	r3, #1
 8002094:	e0be      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2221      	movs	r2, #33	; 0x21
 800209a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	2210      	movs	r2, #16
 80020a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	2200      	movs	r2, #0
 80020aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	893a      	ldrh	r2, [r7, #8]
 80020b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2200      	movs	r2, #0
 80020bc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	2bff      	cmp	r3, #255	; 0xff
 80020c6:	d90e      	bls.n	80020e6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	22ff      	movs	r2, #255	; 0xff
 80020cc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	8979      	ldrh	r1, [r7, #10]
 80020d6:	4b51      	ldr	r3, [pc, #324]	; (800221c <HAL_I2C_Master_Transmit+0x1e0>)
 80020d8:	9300      	str	r3, [sp, #0]
 80020da:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f000 fbd0 	bl	8002884 <I2C_TransferConfig>
 80020e4:	e06c      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020f4:	b2da      	uxtb	r2, r3
 80020f6:	8979      	ldrh	r1, [r7, #10]
 80020f8:	4b48      	ldr	r3, [pc, #288]	; (800221c <HAL_I2C_Master_Transmit+0x1e0>)
 80020fa:	9300      	str	r3, [sp, #0]
 80020fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 fbbf 	bl	8002884 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002106:	e05b      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002108:	697a      	ldr	r2, [r7, #20]
 800210a:	6a39      	ldr	r1, [r7, #32]
 800210c:	68f8      	ldr	r0, [r7, #12]
 800210e:	f000 f9e3 	bl	80024d8 <I2C_WaitOnTXISFlagUntilTimeout>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e07b      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002120:	781a      	ldrb	r2, [r3, #0]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800212c:	1c5a      	adds	r2, r3, #1
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	3b01      	subs	r3, #1
 800213a:	b29a      	uxth	r2, r3
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002144:	3b01      	subs	r3, #1
 8002146:	b29a      	uxth	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002150:	b29b      	uxth	r3, r3
 8002152:	2b00      	cmp	r3, #0
 8002154:	d034      	beq.n	80021c0 <HAL_I2C_Master_Transmit+0x184>
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800215a:	2b00      	cmp	r3, #0
 800215c:	d130      	bne.n	80021c0 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	6a3b      	ldr	r3, [r7, #32]
 8002164:	2200      	movs	r2, #0
 8002166:	2180      	movs	r1, #128	; 0x80
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f000 f975 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 800216e:	4603      	mov	r3, r0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d001      	beq.n	8002178 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e04d      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	2bff      	cmp	r3, #255	; 0xff
 8002180:	d90e      	bls.n	80021a0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	22ff      	movs	r2, #255	; 0xff
 8002186:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800218c:	b2da      	uxtb	r2, r3
 800218e:	8979      	ldrh	r1, [r7, #10]
 8002190:	2300      	movs	r3, #0
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002198:	68f8      	ldr	r0, [r7, #12]
 800219a:	f000 fb73 	bl	8002884 <I2C_TransferConfig>
 800219e:	e00f      	b.n	80021c0 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021a4:	b29a      	uxth	r2, r3
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	8979      	ldrh	r1, [r7, #10]
 80021b2:	2300      	movs	r3, #0
 80021b4:	9300      	str	r3, [sp, #0]
 80021b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fb62 	bl	8002884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021c4:	b29b      	uxth	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d19e      	bne.n	8002108 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ca:	697a      	ldr	r2, [r7, #20]
 80021cc:	6a39      	ldr	r1, [r7, #32]
 80021ce:	68f8      	ldr	r0, [r7, #12]
 80021d0:	f000 f9c2 	bl	8002558 <I2C_WaitOnSTOPFlagUntilTimeout>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d001      	beq.n	80021de <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	e01a      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	2220      	movs	r2, #32
 80021e4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	6859      	ldr	r1, [r3, #4]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681a      	ldr	r2, [r3, #0]
 80021f0:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <HAL_I2C_Master_Transmit+0x1e4>)
 80021f2:	400b      	ands	r3, r1
 80021f4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800220e:	2300      	movs	r3, #0
 8002210:	e000      	b.n	8002214 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002212:	2302      	movs	r3, #2
  }
}
 8002214:	4618      	mov	r0, r3
 8002216:	3718      	adds	r7, #24
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	80002000 	.word	0x80002000
 8002220:	fe00e800 	.word	0xfe00e800

08002224 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af02      	add	r7, sp, #8
 800222a:	60f8      	str	r0, [r7, #12]
 800222c:	607a      	str	r2, [r7, #4]
 800222e:	461a      	mov	r2, r3
 8002230:	460b      	mov	r3, r1
 8002232:	817b      	strh	r3, [r7, #10]
 8002234:	4613      	mov	r3, r2
 8002236:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800223e:	b2db      	uxtb	r3, r3
 8002240:	2b20      	cmp	r3, #32
 8002242:	f040 80db 	bne.w	80023fc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800224c:	2b01      	cmp	r3, #1
 800224e:	d101      	bne.n	8002254 <HAL_I2C_Master_Receive+0x30>
 8002250:	2302      	movs	r3, #2
 8002252:	e0d4      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	2201      	movs	r2, #1
 8002258:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800225c:	f7ff faa0 	bl	80017a0 <HAL_GetTick>
 8002260:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002262:	697b      	ldr	r3, [r7, #20]
 8002264:	9300      	str	r3, [sp, #0]
 8002266:	2319      	movs	r3, #25
 8002268:	2201      	movs	r2, #1
 800226a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800226e:	68f8      	ldr	r0, [r7, #12]
 8002270:	f000 f8f2 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 8002274:	4603      	mov	r3, r0
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800227a:	2301      	movs	r3, #1
 800227c:	e0bf      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2222      	movs	r2, #34	; 0x22
 8002282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2210      	movs	r2, #16
 800228a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	687a      	ldr	r2, [r7, #4]
 8002298:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	893a      	ldrh	r2, [r7, #8]
 800229e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022aa:	b29b      	uxth	r3, r3
 80022ac:	2bff      	cmp	r3, #255	; 0xff
 80022ae:	d90e      	bls.n	80022ce <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	22ff      	movs	r2, #255	; 0xff
 80022b4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	8979      	ldrh	r1, [r7, #10]
 80022be:	4b52      	ldr	r3, [pc, #328]	; (8002408 <HAL_I2C_Master_Receive+0x1e4>)
 80022c0:	9300      	str	r3, [sp, #0]
 80022c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f000 fadc 	bl	8002884 <I2C_TransferConfig>
 80022cc:	e06d      	b.n	80023aa <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29a      	uxth	r2, r3
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	8979      	ldrh	r1, [r7, #10]
 80022e0:	4b49      	ldr	r3, [pc, #292]	; (8002408 <HAL_I2C_Master_Receive+0x1e4>)
 80022e2:	9300      	str	r3, [sp, #0]
 80022e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80022e8:	68f8      	ldr	r0, [r7, #12]
 80022ea:	f000 facb 	bl	8002884 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80022ee:	e05c      	b.n	80023aa <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f0:	697a      	ldr	r2, [r7, #20]
 80022f2:	6a39      	ldr	r1, [r7, #32]
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 f96b 	bl	80025d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e07c      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	b2d2      	uxtb	r2, r2
 8002310:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002316:	1c5a      	adds	r2, r3, #1
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002320:	3b01      	subs	r3, #1
 8002322:	b29a      	uxth	r2, r3
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800232c:	b29b      	uxth	r3, r3
 800232e:	3b01      	subs	r3, #1
 8002330:	b29a      	uxth	r2, r3
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	2b00      	cmp	r3, #0
 800233e:	d034      	beq.n	80023aa <HAL_I2C_Master_Receive+0x186>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002344:	2b00      	cmp	r3, #0
 8002346:	d130      	bne.n	80023aa <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	9300      	str	r3, [sp, #0]
 800234c:	6a3b      	ldr	r3, [r7, #32]
 800234e:	2200      	movs	r2, #0
 8002350:	2180      	movs	r1, #128	; 0x80
 8002352:	68f8      	ldr	r0, [r7, #12]
 8002354:	f000 f880 	bl	8002458 <I2C_WaitOnFlagUntilTimeout>
 8002358:	4603      	mov	r3, r0
 800235a:	2b00      	cmp	r3, #0
 800235c:	d001      	beq.n	8002362 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800235e:	2301      	movs	r3, #1
 8002360:	e04d      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002366:	b29b      	uxth	r3, r3
 8002368:	2bff      	cmp	r3, #255	; 0xff
 800236a:	d90e      	bls.n	800238a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	22ff      	movs	r2, #255	; 0xff
 8002370:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002376:	b2da      	uxtb	r2, r3
 8002378:	8979      	ldrh	r1, [r7, #10]
 800237a:	2300      	movs	r3, #0
 800237c:	9300      	str	r3, [sp, #0]
 800237e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002382:	68f8      	ldr	r0, [r7, #12]
 8002384:	f000 fa7e 	bl	8002884 <I2C_TransferConfig>
 8002388:	e00f      	b.n	80023aa <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800238e:	b29a      	uxth	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002398:	b2da      	uxtb	r2, r3
 800239a:	8979      	ldrh	r1, [r7, #10]
 800239c:	2300      	movs	r3, #0
 800239e:	9300      	str	r3, [sp, #0]
 80023a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f000 fa6d 	bl	8002884 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ae:	b29b      	uxth	r3, r3
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d19d      	bne.n	80022f0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	6a39      	ldr	r1, [r7, #32]
 80023b8:	68f8      	ldr	r0, [r7, #12]
 80023ba:	f000 f8cd 	bl	8002558 <I2C_WaitOnSTOPFlagUntilTimeout>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e01a      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2220      	movs	r2, #32
 80023ce:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	6859      	ldr	r1, [r3, #4]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	4b0c      	ldr	r3, [pc, #48]	; (800240c <HAL_I2C_Master_Receive+0x1e8>)
 80023dc:	400b      	ands	r3, r1
 80023de:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2220      	movs	r2, #32
 80023e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2200      	movs	r2, #0
 80023ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2200      	movs	r2, #0
 80023f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80023f8:	2300      	movs	r3, #0
 80023fa:	e000      	b.n	80023fe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80023fc:	2302      	movs	r3, #2
  }
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	80002400 	.word	0x80002400
 800240c:	fe00e800 	.word	0xfe00e800

08002410 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	699b      	ldr	r3, [r3, #24]
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b02      	cmp	r3, #2
 8002424:	d103      	bne.n	800242e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2200      	movs	r2, #0
 800242c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b01      	cmp	r3, #1
 800243a:	d007      	beq.n	800244c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	699a      	ldr	r2, [r3, #24]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f042 0201 	orr.w	r2, r2, #1
 800244a:	619a      	str	r2, [r3, #24]
  }
}
 800244c:	bf00      	nop
 800244e:	370c      	adds	r7, #12
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr

08002458 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002468:	e022      	b.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002470:	d01e      	beq.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002472:	f7ff f995 	bl	80017a0 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	683a      	ldr	r2, [r7, #0]
 800247e:	429a      	cmp	r2, r3
 8002480:	d302      	bcc.n	8002488 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d113      	bne.n	80024b0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800248c:	f043 0220 	orr.w	r2, r3, #32
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	2220      	movs	r2, #32
 8002498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2200      	movs	r2, #0
 80024a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80024ac:	2301      	movs	r3, #1
 80024ae:	e00f      	b.n	80024d0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699a      	ldr	r2, [r3, #24]
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	4013      	ands	r3, r2
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	429a      	cmp	r2, r3
 80024be:	bf0c      	ite	eq
 80024c0:	2301      	moveq	r3, #1
 80024c2:	2300      	movne	r3, #0
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	79fb      	ldrb	r3, [r7, #7]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d0cd      	beq.n	800246a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80024ce:	2300      	movs	r3, #0
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	3710      	adds	r7, #16
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd80      	pop	{r7, pc}

080024d8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	60b9      	str	r1, [r7, #8]
 80024e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80024e4:	e02c      	b.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68b9      	ldr	r1, [r7, #8]
 80024ea:	68f8      	ldr	r0, [r7, #12]
 80024ec:	f000 f8ea 	bl	80026c4 <I2C_IsErrorOccurred>
 80024f0:	4603      	mov	r3, r0
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d001      	beq.n	80024fa <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e02a      	b.n	8002550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002500:	d01e      	beq.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002502:	f7ff f94d 	bl	80017a0 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	429a      	cmp	r2, r3
 8002510:	d302      	bcc.n	8002518 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d113      	bne.n	8002540 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251c:	f043 0220 	orr.w	r2, r3, #32
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2220      	movs	r2, #32
 8002528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800253c:	2301      	movs	r3, #1
 800253e:	e007      	b.n	8002550 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	699b      	ldr	r3, [r3, #24]
 8002546:	f003 0302 	and.w	r3, r3, #2
 800254a:	2b02      	cmp	r3, #2
 800254c:	d1cb      	bne.n	80024e6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3710      	adds	r7, #16
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}

08002558 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	60b9      	str	r1, [r7, #8]
 8002562:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002564:	e028      	b.n	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	68f8      	ldr	r0, [r7, #12]
 800256c:	f000 f8aa 	bl	80026c4 <I2C_IsErrorOccurred>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e026      	b.n	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800257a:	f7ff f911 	bl	80017a0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	68ba      	ldr	r2, [r7, #8]
 8002586:	429a      	cmp	r2, r3
 8002588:	d302      	bcc.n	8002590 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d113      	bne.n	80025b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002594:	f043 0220 	orr.w	r2, r3, #32
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2200      	movs	r2, #0
 80025a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e007      	b.n	80025c8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	699b      	ldr	r3, [r3, #24]
 80025be:	f003 0320 	and.w	r3, r3, #32
 80025c2:	2b20      	cmp	r3, #32
 80025c4:	d1cf      	bne.n	8002566 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3710      	adds	r7, #16
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}

080025d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b084      	sub	sp, #16
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	60f8      	str	r0, [r7, #12]
 80025d8:	60b9      	str	r1, [r7, #8]
 80025da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80025dc:	e064      	b.n	80026a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	687a      	ldr	r2, [r7, #4]
 80025e0:	68b9      	ldr	r1, [r7, #8]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f86e 	bl	80026c4 <I2C_IsErrorOccurred>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e062      	b.n	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	f003 0320 	and.w	r3, r3, #32
 80025fc:	2b20      	cmp	r3, #32
 80025fe:	d138      	bne.n	8002672 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	699b      	ldr	r3, [r3, #24]
 8002606:	f003 0304 	and.w	r3, r3, #4
 800260a:	2b04      	cmp	r3, #4
 800260c:	d105      	bne.n	800261a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002612:	2b00      	cmp	r3, #0
 8002614:	d001      	beq.n	800261a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8002616:	2300      	movs	r3, #0
 8002618:	e04e      	b.n	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d107      	bne.n	8002638 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2210      	movs	r2, #16
 800262e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2204      	movs	r2, #4
 8002634:	645a      	str	r2, [r3, #68]	; 0x44
 8002636:	e002      	b.n	800263e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2200      	movs	r2, #0
 800263c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2220      	movs	r2, #32
 8002644:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	6859      	ldr	r1, [r3, #4]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b1b      	ldr	r3, [pc, #108]	; (80026c0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8002652:	400b      	ands	r3, r1
 8002654:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	2220      	movs	r2, #32
 800265a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	2200      	movs	r2, #0
 8002662:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e022      	b.n	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002672:	f7ff f895 	bl	80017a0 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	1ad3      	subs	r3, r2, r3
 800267c:	68ba      	ldr	r2, [r7, #8]
 800267e:	429a      	cmp	r2, r3
 8002680:	d302      	bcc.n	8002688 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d10f      	bne.n	80026a8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268c:	f043 0220 	orr.w	r2, r3, #32
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	2220      	movs	r2, #32
 8002698:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2200      	movs	r2, #0
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80026a4:	2301      	movs	r3, #1
 80026a6:	e007      	b.n	80026b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	699b      	ldr	r3, [r3, #24]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d193      	bne.n	80025de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80026b6:	2300      	movs	r3, #0
}
 80026b8:	4618      	mov	r0, r3
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}
 80026c0:	fe00e800 	.word	0xfe00e800

080026c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b08a      	sub	sp, #40	; 0x28
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	699b      	ldr	r3, [r3, #24]
 80026dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80026de:	2300      	movs	r3, #0
 80026e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	f003 0310 	and.w	r3, r3, #16
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d068      	beq.n	80027c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2210      	movs	r2, #16
 80026f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80026f8:	e049      	b.n	800278e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002700:	d045      	beq.n	800278e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002702:	f7ff f84d 	bl	80017a0 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	429a      	cmp	r2, r3
 8002710:	d302      	bcc.n	8002718 <I2C_IsErrorOccurred+0x54>
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d13a      	bne.n	800278e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002722:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800272a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002736:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800273a:	d121      	bne.n	8002780 <I2C_IsErrorOccurred+0xbc>
 800273c:	697b      	ldr	r3, [r7, #20]
 800273e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002742:	d01d      	beq.n	8002780 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002744:	7cfb      	ldrb	r3, [r7, #19]
 8002746:	2b20      	cmp	r3, #32
 8002748:	d01a      	beq.n	8002780 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002758:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800275a:	f7ff f821 	bl	80017a0 <HAL_GetTick>
 800275e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002760:	e00e      	b.n	8002780 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002762:	f7ff f81d 	bl	80017a0 <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	2b19      	cmp	r3, #25
 800276e:	d907      	bls.n	8002780 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8002770:	6a3b      	ldr	r3, [r7, #32]
 8002772:	f043 0320 	orr.w	r3, r3, #32
 8002776:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 800277e:	e006      	b.n	800278e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	699b      	ldr	r3, [r3, #24]
 8002786:	f003 0320 	and.w	r3, r3, #32
 800278a:	2b20      	cmp	r3, #32
 800278c:	d1e9      	bne.n	8002762 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	f003 0320 	and.w	r3, r3, #32
 8002798:	2b20      	cmp	r3, #32
 800279a:	d003      	beq.n	80027a4 <I2C_IsErrorOccurred+0xe0>
 800279c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d0aa      	beq.n	80026fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80027a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d103      	bne.n	80027b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2220      	movs	r2, #32
 80027b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80027b4:	6a3b      	ldr	r3, [r7, #32]
 80027b6:	f043 0304 	orr.w	r3, r3, #4
 80027ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	699b      	ldr	r3, [r3, #24]
 80027c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d00b      	beq.n	80027ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80027d4:	6a3b      	ldr	r3, [r7, #32]
 80027d6:	f043 0301 	orr.w	r3, r3, #1
 80027da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80027ec:	69bb      	ldr	r3, [r7, #24]
 80027ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d00b      	beq.n	800280e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	f043 0308 	orr.w	r3, r3, #8
 80027fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002806:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002818:	6a3b      	ldr	r3, [r7, #32]
 800281a:	f043 0302 	orr.w	r3, r3, #2
 800281e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002828:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8002830:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01c      	beq.n	8002872 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f7ff fde9 	bl	8002410 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	6859      	ldr	r1, [r3, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	681a      	ldr	r2, [r3, #0]
 8002848:	4b0d      	ldr	r3, [pc, #52]	; (8002880 <I2C_IsErrorOccurred+0x1bc>)
 800284a:	400b      	ands	r3, r1
 800284c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002852:	6a3b      	ldr	r3, [r7, #32]
 8002854:	431a      	orrs	r2, r3
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2220      	movs	r2, #32
 800285e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2200      	movs	r2, #0
 800286e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8002872:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8002876:	4618      	mov	r0, r3
 8002878:	3728      	adds	r7, #40	; 0x28
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	fe00e800 	.word	0xfe00e800

08002884 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	607b      	str	r3, [r7, #4]
 800288e:	460b      	mov	r3, r1
 8002890:	817b      	strh	r3, [r7, #10]
 8002892:	4613      	mov	r3, r2
 8002894:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800289c:	7a7b      	ldrb	r3, [r7, #9]
 800289e:	041b      	lsls	r3, r3, #16
 80028a0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028a4:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80028aa:	6a3b      	ldr	r3, [r7, #32]
 80028ac:	4313      	orrs	r3, r2
 80028ae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80028b2:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	685a      	ldr	r2, [r3, #4]
 80028ba:	6a3b      	ldr	r3, [r7, #32]
 80028bc:	0d5b      	lsrs	r3, r3, #21
 80028be:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80028c2:	4b08      	ldr	r3, [pc, #32]	; (80028e4 <I2C_TransferConfig+0x60>)
 80028c4:	430b      	orrs	r3, r1
 80028c6:	43db      	mvns	r3, r3
 80028c8:	ea02 0103 	and.w	r1, r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80028d6:	bf00      	nop
 80028d8:	371c      	adds	r7, #28
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
 80028e2:	bf00      	nop
 80028e4:	03ff63ff 	.word	0x03ff63ff

080028e8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b20      	cmp	r3, #32
 80028fc:	d138      	bne.n	8002970 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002904:	2b01      	cmp	r3, #1
 8002906:	d101      	bne.n	800290c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002908:	2302      	movs	r3, #2
 800290a:	e032      	b.n	8002972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2224      	movs	r2, #36	; 0x24
 8002918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0201 	bic.w	r2, r2, #1
 800292a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800293a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6819      	ldr	r1, [r3, #0]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	683a      	ldr	r2, [r7, #0]
 8002948:	430a      	orrs	r2, r1
 800294a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	681a      	ldr	r2, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f042 0201 	orr.w	r2, r2, #1
 800295a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2220      	movs	r2, #32
 8002960:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2200      	movs	r2, #0
 8002968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800296c:	2300      	movs	r3, #0
 800296e:	e000      	b.n	8002972 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002970:	2302      	movs	r3, #2
  }
}
 8002972:	4618      	mov	r0, r3
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800297e:	b480      	push	{r7}
 8002980:	b085      	sub	sp, #20
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
 8002986:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b20      	cmp	r3, #32
 8002992:	d139      	bne.n	8002a08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800299a:	2b01      	cmp	r3, #1
 800299c:	d101      	bne.n	80029a2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800299e:	2302      	movs	r3, #2
 80029a0:	e033      	b.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2201      	movs	r2, #1
 80029a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2224      	movs	r2, #36	; 0x24
 80029ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f022 0201 	bic.w	r2, r2, #1
 80029c0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029d0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	021b      	lsls	r3, r3, #8
 80029d6:	68fa      	ldr	r2, [r7, #12]
 80029d8:	4313      	orrs	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f042 0201 	orr.w	r2, r2, #1
 80029f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2220      	movs	r2, #32
 80029f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2200      	movs	r2, #0
 8002a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
	...

08002a18 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a1c:	4b05      	ldr	r3, [pc, #20]	; (8002a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002a22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a26:	6013      	str	r3, [r2, #0]
}
 8002a28:	bf00      	nop
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	40007000 	.word	0x40007000

08002a38 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002a38:	b580      	push	{r7, lr}
 8002a3a:	b082      	sub	sp, #8
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002a42:	4b23      	ldr	r3, [pc, #140]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	4a22      	ldr	r2, [pc, #136]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4e:	4b20      	ldr	r3, [pc, #128]	; (8002ad0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a56:	603b      	str	r3, [r7, #0]
 8002a58:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002a5a:	4b1e      	ldr	r3, [pc, #120]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a1d      	ldr	r2, [pc, #116]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a64:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a66:	f7fe fe9b 	bl	80017a0 <HAL_GetTick>
 8002a6a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a6c:	e009      	b.n	8002a82 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002a6e:	f7fe fe97 	bl	80017a0 <HAL_GetTick>
 8002a72:	4602      	mov	r2, r0
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002a7c:	d901      	bls.n	8002a82 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002a7e:	2303      	movs	r3, #3
 8002a80:	e022      	b.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002a82:	4b14      	ldr	r3, [pc, #80]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8e:	d1ee      	bne.n	8002a6e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002a90:	4b10      	ldr	r3, [pc, #64]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	4a0f      	ldr	r2, [pc, #60]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002a96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a9a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002a9c:	f7fe fe80 	bl	80017a0 <HAL_GetTick>
 8002aa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002aa2:	e009      	b.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002aa4:	f7fe fe7c 	bl	80017a0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002ab2:	d901      	bls.n	8002ab8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	e007      	b.n	8002ac8 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ab8:	4b06      	ldr	r3, [pc, #24]	; (8002ad4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002ac4:	d1ee      	bne.n	8002aa4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3708      	adds	r7, #8
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40007000 	.word	0x40007000

08002ad8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b086      	sub	sp, #24
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d101      	bne.n	8002aee <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e291      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f003 0301 	and.w	r3, r3, #1
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f000 8087 	beq.w	8002c0a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002afc:	4b96      	ldr	r3, [pc, #600]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 030c 	and.w	r3, r3, #12
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d00c      	beq.n	8002b22 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b08:	4b93      	ldr	r3, [pc, #588]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f003 030c 	and.w	r3, r3, #12
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d112      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
 8002b14:	4b90      	ldr	r3, [pc, #576]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b20:	d10b      	bne.n	8002b3a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b22:	4b8d      	ldr	r3, [pc, #564]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d06c      	beq.n	8002c08 <HAL_RCC_OscConfig+0x130>
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d168      	bne.n	8002c08 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	e26b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b42:	d106      	bne.n	8002b52 <HAL_RCC_OscConfig+0x7a>
 8002b44:	4b84      	ldr	r3, [pc, #528]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a83      	ldr	r2, [pc, #524]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b4a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e02e      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x9c>
 8002b5a:	4b7f      	ldr	r3, [pc, #508]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	4a7e      	ldr	r2, [pc, #504]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b64:	6013      	str	r3, [r2, #0]
 8002b66:	4b7c      	ldr	r3, [pc, #496]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a7b      	ldr	r2, [pc, #492]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b6c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	e01d      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b7c:	d10c      	bne.n	8002b98 <HAL_RCC_OscConfig+0xc0>
 8002b7e:	4b76      	ldr	r3, [pc, #472]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a75      	ldr	r2, [pc, #468]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	4b73      	ldr	r3, [pc, #460]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4a72      	ldr	r2, [pc, #456]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b94:	6013      	str	r3, [r2, #0]
 8002b96:	e00b      	b.n	8002bb0 <HAL_RCC_OscConfig+0xd8>
 8002b98:	4b6f      	ldr	r3, [pc, #444]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a6e      	ldr	r2, [pc, #440]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002b9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ba2:	6013      	str	r3, [r2, #0]
 8002ba4:	4b6c      	ldr	r3, [pc, #432]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a6b      	ldr	r2, [pc, #428]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d013      	beq.n	8002be0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bb8:	f7fe fdf2 	bl	80017a0 <HAL_GetTick>
 8002bbc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bbe:	e008      	b.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bc0:	f7fe fdee 	bl	80017a0 <HAL_GetTick>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	1ad3      	subs	r3, r2, r3
 8002bca:	2b64      	cmp	r3, #100	; 0x64
 8002bcc:	d901      	bls.n	8002bd2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bce:	2303      	movs	r3, #3
 8002bd0:	e21f      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b61      	ldr	r3, [pc, #388]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d0f0      	beq.n	8002bc0 <HAL_RCC_OscConfig+0xe8>
 8002bde:	e014      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be0:	f7fe fdde 	bl	80017a0 <HAL_GetTick>
 8002be4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be6:	e008      	b.n	8002bfa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002be8:	f7fe fdda 	bl	80017a0 <HAL_GetTick>
 8002bec:	4602      	mov	r2, r0
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	2b64      	cmp	r3, #100	; 0x64
 8002bf4:	d901      	bls.n	8002bfa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002bf6:	2303      	movs	r3, #3
 8002bf8:	e20b      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	4b57      	ldr	r3, [pc, #348]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1f0      	bne.n	8002be8 <HAL_RCC_OscConfig+0x110>
 8002c06:	e000      	b.n	8002c0a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c08:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0302 	and.w	r3, r3, #2
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d069      	beq.n	8002cea <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c16:	4b50      	ldr	r3, [pc, #320]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f003 030c 	and.w	r3, r3, #12
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d00b      	beq.n	8002c3a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c22:	4b4d      	ldr	r3, [pc, #308]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 030c 	and.w	r3, r3, #12
 8002c2a:	2b08      	cmp	r3, #8
 8002c2c:	d11c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
 8002c2e:	4b4a      	ldr	r3, [pc, #296]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d116      	bne.n	8002c68 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	4b47      	ldr	r3, [pc, #284]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 0302 	and.w	r3, r3, #2
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d005      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68db      	ldr	r3, [r3, #12]
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d001      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e1df      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c52:	4b41      	ldr	r3, [pc, #260]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	691b      	ldr	r3, [r3, #16]
 8002c5e:	00db      	lsls	r3, r3, #3
 8002c60:	493d      	ldr	r1, [pc, #244]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	e040      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d023      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c70:	4b39      	ldr	r3, [pc, #228]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a38      	ldr	r2, [pc, #224]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c76:	f043 0301 	orr.w	r3, r3, #1
 8002c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7fe fd90 	bl	80017a0 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c84:	f7fe fd8c 	bl	80017a0 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e1bd      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c96:	4b30      	ldr	r3, [pc, #192]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ca2:	4b2d      	ldr	r3, [pc, #180]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	00db      	lsls	r3, r3, #3
 8002cb0:	4929      	ldr	r1, [pc, #164]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	600b      	str	r3, [r1, #0]
 8002cb6:	e018      	b.n	8002cea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cb8:	4b27      	ldr	r3, [pc, #156]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4a26      	ldr	r2, [pc, #152]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002cbe:	f023 0301 	bic.w	r3, r3, #1
 8002cc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fd6c 	bl	80017a0 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ccc:	f7fe fd68 	bl	80017a0 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e199      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cde:	4b1e      	ldr	r3, [pc, #120]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0308 	and.w	r3, r3, #8
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d038      	beq.n	8002d68 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	695b      	ldr	r3, [r3, #20]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d019      	beq.n	8002d32 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cfe:	4b16      	ldr	r3, [pc, #88]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d02:	4a15      	ldr	r2, [pc, #84]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d0a:	f7fe fd49 	bl	80017a0 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d10:	e008      	b.n	8002d24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d12:	f7fe fd45 	bl	80017a0 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d901      	bls.n	8002d24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d20:	2303      	movs	r3, #3
 8002d22:	e176      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d24:	4b0c      	ldr	r3, [pc, #48]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d28:	f003 0302 	and.w	r3, r3, #2
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d0f0      	beq.n	8002d12 <HAL_RCC_OscConfig+0x23a>
 8002d30:	e01a      	b.n	8002d68 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d32:	4b09      	ldr	r3, [pc, #36]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	4a08      	ldr	r2, [pc, #32]	; (8002d58 <HAL_RCC_OscConfig+0x280>)
 8002d38:	f023 0301 	bic.w	r3, r3, #1
 8002d3c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3e:	f7fe fd2f 	bl	80017a0 <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d44:	e00a      	b.n	8002d5c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d46:	f7fe fd2b 	bl	80017a0 <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d903      	bls.n	8002d5c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e15c      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
 8002d58:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	4b91      	ldr	r3, [pc, #580]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d60:	f003 0302 	and.w	r3, r3, #2
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1ee      	bne.n	8002d46 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0304 	and.w	r3, r3, #4
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	f000 80a4 	beq.w	8002ebe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d76:	4b8b      	ldr	r3, [pc, #556]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d10d      	bne.n	8002d9e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d82:	4b88      	ldr	r3, [pc, #544]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d86:	4a87      	ldr	r2, [pc, #540]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d8c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d8e:	4b85      	ldr	r3, [pc, #532]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d96:	60bb      	str	r3, [r7, #8]
 8002d98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002d9e:	4b82      	ldr	r3, [pc, #520]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d118      	bne.n	8002ddc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a7e      	ldr	r2, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002db0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002db4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002db6:	f7fe fcf3 	bl	80017a0 <HAL_GetTick>
 8002dba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dbc:	e008      	b.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dbe:	f7fe fcef 	bl	80017a0 <HAL_GetTick>
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	693b      	ldr	r3, [r7, #16]
 8002dc6:	1ad3      	subs	r3, r2, r3
 8002dc8:	2b64      	cmp	r3, #100	; 0x64
 8002dca:	d901      	bls.n	8002dd0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002dcc:	2303      	movs	r3, #3
 8002dce:	e120      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002dd0:	4b75      	ldr	r3, [pc, #468]	; (8002fa8 <HAL_RCC_OscConfig+0x4d0>)
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d0f0      	beq.n	8002dbe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	2b01      	cmp	r3, #1
 8002de2:	d106      	bne.n	8002df2 <HAL_RCC_OscConfig+0x31a>
 8002de4:	4b6f      	ldr	r3, [pc, #444]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de8:	4a6e      	ldr	r2, [pc, #440]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dea:	f043 0301 	orr.w	r3, r3, #1
 8002dee:	6713      	str	r3, [r2, #112]	; 0x70
 8002df0:	e02d      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCC_OscConfig+0x33c>
 8002dfa:	4b6a      	ldr	r3, [pc, #424]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dfe:	4a69      	ldr	r2, [pc, #420]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e00:	f023 0301 	bic.w	r3, r3, #1
 8002e04:	6713      	str	r3, [r2, #112]	; 0x70
 8002e06:	4b67      	ldr	r3, [pc, #412]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e0a:	4a66      	ldr	r2, [pc, #408]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e0c:	f023 0304 	bic.w	r3, r3, #4
 8002e10:	6713      	str	r3, [r2, #112]	; 0x70
 8002e12:	e01c      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	2b05      	cmp	r3, #5
 8002e1a:	d10c      	bne.n	8002e36 <HAL_RCC_OscConfig+0x35e>
 8002e1c:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e20:	4a60      	ldr	r2, [pc, #384]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	f043 0304 	orr.w	r3, r3, #4
 8002e26:	6713      	str	r3, [r2, #112]	; 0x70
 8002e28:	4b5e      	ldr	r3, [pc, #376]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e2c:	4a5d      	ldr	r2, [pc, #372]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e2e:	f043 0301 	orr.w	r3, r3, #1
 8002e32:	6713      	str	r3, [r2, #112]	; 0x70
 8002e34:	e00b      	b.n	8002e4e <HAL_RCC_OscConfig+0x376>
 8002e36:	4b5b      	ldr	r3, [pc, #364]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a5a      	ldr	r2, [pc, #360]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b58      	ldr	r3, [pc, #352]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e48:	f023 0304 	bic.w	r3, r3, #4
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d015      	beq.n	8002e82 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e56:	f7fe fca3 	bl	80017a0 <HAL_GetTick>
 8002e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5c:	e00a      	b.n	8002e74 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e5e:	f7fe fc9f 	bl	80017a0 <HAL_GetTick>
 8002e62:	4602      	mov	r2, r0
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	1ad3      	subs	r3, r2, r3
 8002e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d901      	bls.n	8002e74 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002e70:	2303      	movs	r3, #3
 8002e72:	e0ce      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e78:	f003 0302 	and.w	r3, r3, #2
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d0ee      	beq.n	8002e5e <HAL_RCC_OscConfig+0x386>
 8002e80:	e014      	b.n	8002eac <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e82:	f7fe fc8d 	bl	80017a0 <HAL_GetTick>
 8002e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e88:	e00a      	b.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8a:	f7fe fc89 	bl	80017a0 <HAL_GetTick>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	1ad3      	subs	r3, r2, r3
 8002e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e0b8      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea0:	4b40      	ldr	r3, [pc, #256]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea4:	f003 0302 	and.w	r3, r3, #2
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1ee      	bne.n	8002e8a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eac:	7dfb      	ldrb	r3, [r7, #23]
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d105      	bne.n	8002ebe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb2:	4b3c      	ldr	r3, [pc, #240]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eb6:	4a3b      	ldr	r2, [pc, #236]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	f000 80a4 	beq.w	8003010 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002ec8:	4b36      	ldr	r3, [pc, #216]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	f003 030c 	and.w	r3, r3, #12
 8002ed0:	2b08      	cmp	r3, #8
 8002ed2:	d06b      	beq.n	8002fac <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	699b      	ldr	r3, [r3, #24]
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d149      	bne.n	8002f70 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002edc:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a30      	ldr	r2, [pc, #192]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002ee2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ee6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fc5a 	bl	80017a0 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fc56 	bl	80017a0 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e087      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b28      	ldr	r3, [pc, #160]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	4313      	orrs	r3, r2
 8002f34:	4a1b      	ldr	r2, [pc, #108]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f36:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002f3a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b19      	ldr	r3, [pc, #100]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a18      	ldr	r2, [pc, #96]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f48:	f7fe fc2a 	bl	80017a0 <HAL_GetTick>
 8002f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4e:	e008      	b.n	8002f62 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f50:	f7fe fc26 	bl	80017a0 <HAL_GetTick>
 8002f54:	4602      	mov	r2, r0
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	1ad3      	subs	r3, r2, r3
 8002f5a:	2b02      	cmp	r3, #2
 8002f5c:	d901      	bls.n	8002f62 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002f5e:	2303      	movs	r3, #3
 8002f60:	e057      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f62:	4b10      	ldr	r3, [pc, #64]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d0f0      	beq.n	8002f50 <HAL_RCC_OscConfig+0x478>
 8002f6e:	e04f      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0b      	ldr	r2, [pc, #44]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f7c:	f7fe fc10 	bl	80017a0 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f84:	f7fe fc0c 	bl	80017a0 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e03d      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f96:	4b03      	ldr	r3, [pc, #12]	; (8002fa4 <HAL_RCC_OscConfig+0x4cc>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f0      	bne.n	8002f84 <HAL_RCC_OscConfig+0x4ac>
 8002fa2:	e035      	b.n	8003010 <HAL_RCC_OscConfig+0x538>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002fac:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x544>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	699b      	ldr	r3, [r3, #24]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d028      	beq.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d121      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd2:	429a      	cmp	r2, r3
 8002fd4:	d11a      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002fd6:	68fa      	ldr	r2, [r7, #12]
 8002fd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fdc:	4013      	ands	r3, r2
 8002fde:	687a      	ldr	r2, [r7, #4]
 8002fe0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fe2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d111      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff2:	085b      	lsrs	r3, r3, #1
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d107      	bne.n	800300c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003006:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003008:	429a      	cmp	r2, r3
 800300a:	d001      	beq.n	8003010 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003010:	2300      	movs	r3, #0
}
 8003012:	4618      	mov	r0, r3
 8003014:	3718      	adds	r7, #24
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023800 	.word	0x40023800

08003020 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
 8003028:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d101      	bne.n	8003038 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e0d0      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003038:	4b6a      	ldr	r3, [pc, #424]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 030f 	and.w	r3, r3, #15
 8003040:	683a      	ldr	r2, [r7, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d910      	bls.n	8003068 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003046:	4b67      	ldr	r3, [pc, #412]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f023 020f 	bic.w	r2, r3, #15
 800304e:	4965      	ldr	r1, [pc, #404]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	4313      	orrs	r3, r2
 8003054:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003056:	4b63      	ldr	r3, [pc, #396]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f003 030f 	and.w	r3, r3, #15
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	429a      	cmp	r2, r3
 8003062:	d001      	beq.n	8003068 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e0b8      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 0302 	and.w	r3, r3, #2
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f003 0304 	and.w	r3, r3, #4
 800307c:	2b00      	cmp	r3, #0
 800307e:	d005      	beq.n	800308c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003080:	4b59      	ldr	r3, [pc, #356]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800308a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 0308 	and.w	r3, r3, #8
 8003094:	2b00      	cmp	r3, #0
 8003096:	d005      	beq.n	80030a4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003098:	4b53      	ldr	r3, [pc, #332]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	4a52      	ldr	r2, [pc, #328]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800309e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80030a2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030a4:	4b50      	ldr	r3, [pc, #320]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	494d      	ldr	r1, [pc, #308]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d040      	beq.n	8003144 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d107      	bne.n	80030da <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ca:	4b47      	ldr	r3, [pc, #284]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d115      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e07f      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	2b02      	cmp	r3, #2
 80030e0:	d107      	bne.n	80030f2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030e2:	4b41      	ldr	r3, [pc, #260]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e073      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030f2:	4b3d      	ldr	r3, [pc, #244]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e06b      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003102:	4b39      	ldr	r3, [pc, #228]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	f023 0203 	bic.w	r2, r3, #3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	4936      	ldr	r1, [pc, #216]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003110:	4313      	orrs	r3, r2
 8003112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003114:	f7fe fb44 	bl	80017a0 <HAL_GetTick>
 8003118:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800311a:	e00a      	b.n	8003132 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800311c:	f7fe fb40 	bl	80017a0 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	f241 3288 	movw	r2, #5000	; 0x1388
 800312a:	4293      	cmp	r3, r2
 800312c:	d901      	bls.n	8003132 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800312e:	2303      	movs	r3, #3
 8003130:	e053      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003132:	4b2d      	ldr	r3, [pc, #180]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 020c 	and.w	r2, r3, #12
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	429a      	cmp	r2, r3
 8003142:	d1eb      	bne.n	800311c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003144:	4b27      	ldr	r3, [pc, #156]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f003 030f 	and.w	r3, r3, #15
 800314c:	683a      	ldr	r2, [r7, #0]
 800314e:	429a      	cmp	r2, r3
 8003150:	d210      	bcs.n	8003174 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003152:	4b24      	ldr	r3, [pc, #144]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	4922      	ldr	r1, [pc, #136]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	4313      	orrs	r3, r2
 8003160:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b20      	ldr	r3, [pc, #128]	; (80031e4 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 030f 	and.w	r3, r3, #15
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e032      	b.n	80031da <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0304 	and.w	r3, r3, #4
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003180:	4b19      	ldr	r3, [pc, #100]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	68db      	ldr	r3, [r3, #12]
 800318c:	4916      	ldr	r1, [pc, #88]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 800318e:	4313      	orrs	r3, r2
 8003190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0308 	and.w	r3, r3, #8
 800319a:	2b00      	cmp	r3, #0
 800319c:	d009      	beq.n	80031b2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800319e:	4b12      	ldr	r3, [pc, #72]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	691b      	ldr	r3, [r3, #16]
 80031aa:	00db      	lsls	r3, r3, #3
 80031ac:	490e      	ldr	r1, [pc, #56]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ae:	4313      	orrs	r3, r2
 80031b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031b2:	f000 f821 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 80031b6:	4602      	mov	r2, r0
 80031b8:	4b0b      	ldr	r3, [pc, #44]	; (80031e8 <HAL_RCC_ClockConfig+0x1c8>)
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	091b      	lsrs	r3, r3, #4
 80031be:	f003 030f 	and.w	r3, r3, #15
 80031c2:	490a      	ldr	r1, [pc, #40]	; (80031ec <HAL_RCC_ClockConfig+0x1cc>)
 80031c4:	5ccb      	ldrb	r3, [r1, r3]
 80031c6:	fa22 f303 	lsr.w	r3, r2, r3
 80031ca:	4a09      	ldr	r2, [pc, #36]	; (80031f0 <HAL_RCC_ClockConfig+0x1d0>)
 80031cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031ce:	4b09      	ldr	r3, [pc, #36]	; (80031f4 <HAL_RCC_ClockConfig+0x1d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7fe faa0 	bl	8001718 <HAL_InitTick>

  return HAL_OK;
 80031d8:	2300      	movs	r3, #0
}
 80031da:	4618      	mov	r0, r3
 80031dc:	3710      	adds	r7, #16
 80031de:	46bd      	mov	sp, r7
 80031e0:	bd80      	pop	{r7, pc}
 80031e2:	bf00      	nop
 80031e4:	40023c00 	.word	0x40023c00
 80031e8:	40023800 	.word	0x40023800
 80031ec:	08006c78 	.word	0x08006c78
 80031f0:	20000050 	.word	0x20000050
 80031f4:	20000054 	.word	0x20000054

080031f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031fc:	b094      	sub	sp, #80	; 0x50
 80031fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003200:	2300      	movs	r3, #0
 8003202:	647b      	str	r3, [r7, #68]	; 0x44
 8003204:	2300      	movs	r3, #0
 8003206:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003208:	2300      	movs	r3, #0
 800320a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800320c:	2300      	movs	r3, #0
 800320e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003210:	4b79      	ldr	r3, [pc, #484]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 030c 	and.w	r3, r3, #12
 8003218:	2b08      	cmp	r3, #8
 800321a:	d00d      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0x40>
 800321c:	2b08      	cmp	r3, #8
 800321e:	f200 80e1 	bhi.w	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_RCC_GetSysClockFreq+0x34>
 8003226:	2b04      	cmp	r3, #4
 8003228:	d003      	beq.n	8003232 <HAL_RCC_GetSysClockFreq+0x3a>
 800322a:	e0db      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800322c:	4b73      	ldr	r3, [pc, #460]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 800322e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003230:	e0db      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003232:	4b73      	ldr	r3, [pc, #460]	; (8003400 <HAL_RCC_GetSysClockFreq+0x208>)
 8003234:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003236:	e0d8      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003238:	4b6f      	ldr	r3, [pc, #444]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003240:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003242:	4b6d      	ldr	r3, [pc, #436]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d063      	beq.n	8003316 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	099b      	lsrs	r3, r3, #6
 8003254:	2200      	movs	r2, #0
 8003256:	63bb      	str	r3, [r7, #56]	; 0x38
 8003258:	63fa      	str	r2, [r7, #60]	; 0x3c
 800325a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800325c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
 8003262:	2300      	movs	r3, #0
 8003264:	637b      	str	r3, [r7, #52]	; 0x34
 8003266:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800326a:	4622      	mov	r2, r4
 800326c:	462b      	mov	r3, r5
 800326e:	f04f 0000 	mov.w	r0, #0
 8003272:	f04f 0100 	mov.w	r1, #0
 8003276:	0159      	lsls	r1, r3, #5
 8003278:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800327c:	0150      	lsls	r0, r2, #5
 800327e:	4602      	mov	r2, r0
 8003280:	460b      	mov	r3, r1
 8003282:	4621      	mov	r1, r4
 8003284:	1a51      	subs	r1, r2, r1
 8003286:	6139      	str	r1, [r7, #16]
 8003288:	4629      	mov	r1, r5
 800328a:	eb63 0301 	sbc.w	r3, r3, r1
 800328e:	617b      	str	r3, [r7, #20]
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	f04f 0300 	mov.w	r3, #0
 8003298:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800329c:	4659      	mov	r1, fp
 800329e:	018b      	lsls	r3, r1, #6
 80032a0:	4651      	mov	r1, sl
 80032a2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032a6:	4651      	mov	r1, sl
 80032a8:	018a      	lsls	r2, r1, #6
 80032aa:	4651      	mov	r1, sl
 80032ac:	ebb2 0801 	subs.w	r8, r2, r1
 80032b0:	4659      	mov	r1, fp
 80032b2:	eb63 0901 	sbc.w	r9, r3, r1
 80032b6:	f04f 0200 	mov.w	r2, #0
 80032ba:	f04f 0300 	mov.w	r3, #0
 80032be:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032c2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80032c6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80032ca:	4690      	mov	r8, r2
 80032cc:	4699      	mov	r9, r3
 80032ce:	4623      	mov	r3, r4
 80032d0:	eb18 0303 	adds.w	r3, r8, r3
 80032d4:	60bb      	str	r3, [r7, #8]
 80032d6:	462b      	mov	r3, r5
 80032d8:	eb49 0303 	adc.w	r3, r9, r3
 80032dc:	60fb      	str	r3, [r7, #12]
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	f04f 0300 	mov.w	r3, #0
 80032e6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80032ea:	4629      	mov	r1, r5
 80032ec:	024b      	lsls	r3, r1, #9
 80032ee:	4621      	mov	r1, r4
 80032f0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032f4:	4621      	mov	r1, r4
 80032f6:	024a      	lsls	r2, r1, #9
 80032f8:	4610      	mov	r0, r2
 80032fa:	4619      	mov	r1, r3
 80032fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032fe:	2200      	movs	r2, #0
 8003300:	62bb      	str	r3, [r7, #40]	; 0x28
 8003302:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003304:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003308:	f7fc ffd2 	bl	80002b0 <__aeabi_uldivmod>
 800330c:	4602      	mov	r2, r0
 800330e:	460b      	mov	r3, r1
 8003310:	4613      	mov	r3, r2
 8003312:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003314:	e058      	b.n	80033c8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003316:	4b38      	ldr	r3, [pc, #224]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	099b      	lsrs	r3, r3, #6
 800331c:	2200      	movs	r2, #0
 800331e:	4618      	mov	r0, r3
 8003320:	4611      	mov	r1, r2
 8003322:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003326:	623b      	str	r3, [r7, #32]
 8003328:	2300      	movs	r3, #0
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
 800332c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003330:	4642      	mov	r2, r8
 8003332:	464b      	mov	r3, r9
 8003334:	f04f 0000 	mov.w	r0, #0
 8003338:	f04f 0100 	mov.w	r1, #0
 800333c:	0159      	lsls	r1, r3, #5
 800333e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003342:	0150      	lsls	r0, r2, #5
 8003344:	4602      	mov	r2, r0
 8003346:	460b      	mov	r3, r1
 8003348:	4641      	mov	r1, r8
 800334a:	ebb2 0a01 	subs.w	sl, r2, r1
 800334e:	4649      	mov	r1, r9
 8003350:	eb63 0b01 	sbc.w	fp, r3, r1
 8003354:	f04f 0200 	mov.w	r2, #0
 8003358:	f04f 0300 	mov.w	r3, #0
 800335c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003360:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003364:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003368:	ebb2 040a 	subs.w	r4, r2, sl
 800336c:	eb63 050b 	sbc.w	r5, r3, fp
 8003370:	f04f 0200 	mov.w	r2, #0
 8003374:	f04f 0300 	mov.w	r3, #0
 8003378:	00eb      	lsls	r3, r5, #3
 800337a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800337e:	00e2      	lsls	r2, r4, #3
 8003380:	4614      	mov	r4, r2
 8003382:	461d      	mov	r5, r3
 8003384:	4643      	mov	r3, r8
 8003386:	18e3      	adds	r3, r4, r3
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	464b      	mov	r3, r9
 800338c:	eb45 0303 	adc.w	r3, r5, r3
 8003390:	607b      	str	r3, [r7, #4]
 8003392:	f04f 0200 	mov.w	r2, #0
 8003396:	f04f 0300 	mov.w	r3, #0
 800339a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800339e:	4629      	mov	r1, r5
 80033a0:	028b      	lsls	r3, r1, #10
 80033a2:	4621      	mov	r1, r4
 80033a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033a8:	4621      	mov	r1, r4
 80033aa:	028a      	lsls	r2, r1, #10
 80033ac:	4610      	mov	r0, r2
 80033ae:	4619      	mov	r1, r3
 80033b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80033b2:	2200      	movs	r2, #0
 80033b4:	61bb      	str	r3, [r7, #24]
 80033b6:	61fa      	str	r2, [r7, #28]
 80033b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033bc:	f7fc ff78 	bl	80002b0 <__aeabi_uldivmod>
 80033c0:	4602      	mov	r2, r0
 80033c2:	460b      	mov	r3, r1
 80033c4:	4613      	mov	r3, r2
 80033c6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80033c8:	4b0b      	ldr	r3, [pc, #44]	; (80033f8 <HAL_RCC_GetSysClockFreq+0x200>)
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	0c1b      	lsrs	r3, r3, #16
 80033ce:	f003 0303 	and.w	r3, r3, #3
 80033d2:	3301      	adds	r3, #1
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80033d8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80033da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033e0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e2:	e002      	b.n	80033ea <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80033e4:	4b05      	ldr	r3, [pc, #20]	; (80033fc <HAL_RCC_GetSysClockFreq+0x204>)
 80033e6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80033ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3750      	adds	r7, #80	; 0x50
 80033f0:	46bd      	mov	sp, r7
 80033f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033f6:	bf00      	nop
 80033f8:	40023800 	.word	0x40023800
 80033fc:	00f42400 	.word	0x00f42400
 8003400:	007a1200 	.word	0x007a1200

08003404 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003404:	b480      	push	{r7}
 8003406:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003408:	4b03      	ldr	r3, [pc, #12]	; (8003418 <HAL_RCC_GetHCLKFreq+0x14>)
 800340a:	681b      	ldr	r3, [r3, #0]
}
 800340c:	4618      	mov	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr
 8003416:	bf00      	nop
 8003418:	20000050 	.word	0x20000050

0800341c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003420:	f7ff fff0 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 8003424:	4602      	mov	r2, r0
 8003426:	4b05      	ldr	r3, [pc, #20]	; (800343c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	0a9b      	lsrs	r3, r3, #10
 800342c:	f003 0307 	and.w	r3, r3, #7
 8003430:	4903      	ldr	r1, [pc, #12]	; (8003440 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003432:	5ccb      	ldrb	r3, [r1, r3]
 8003434:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003438:	4618      	mov	r0, r3
 800343a:	bd80      	pop	{r7, pc}
 800343c:	40023800 	.word	0x40023800
 8003440:	08006c88 	.word	0x08006c88

08003444 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003448:	f7ff ffdc 	bl	8003404 <HAL_RCC_GetHCLKFreq>
 800344c:	4602      	mov	r2, r0
 800344e:	4b05      	ldr	r3, [pc, #20]	; (8003464 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	0b5b      	lsrs	r3, r3, #13
 8003454:	f003 0307 	and.w	r3, r3, #7
 8003458:	4903      	ldr	r1, [pc, #12]	; (8003468 <HAL_RCC_GetPCLK2Freq+0x24>)
 800345a:	5ccb      	ldrb	r3, [r1, r3]
 800345c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003460:	4618      	mov	r0, r3
 8003462:	bd80      	pop	{r7, pc}
 8003464:	40023800 	.word	0x40023800
 8003468:	08006c88 	.word	0x08006c88

0800346c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003474:	2300      	movs	r3, #0
 8003476:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003478:	2300      	movs	r3, #0
 800347a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800347c:	2300      	movs	r3, #0
 800347e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003484:	2300      	movs	r3, #0
 8003486:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d012      	beq.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003494:	4b69      	ldr	r3, [pc, #420]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003496:	689b      	ldr	r3, [r3, #8]
 8003498:	4a68      	ldr	r2, [pc, #416]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800349a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800349e:	6093      	str	r3, [r2, #8]
 80034a0:	4b66      	ldr	r3, [pc, #408]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a8:	4964      	ldr	r1, [pc, #400]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034aa:	4313      	orrs	r3, r2
 80034ac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80034b6:	2301      	movs	r3, #1
 80034b8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d017      	beq.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034c6:	4b5d      	ldr	r3, [pc, #372]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d4:	4959      	ldr	r1, [pc, #356]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80034d6:	4313      	orrs	r3, r2
 80034d8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034e0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034e4:	d101      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80034f2:	2301      	movs	r3, #1
 80034f4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d017      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003502:	4b4e      	ldr	r3, [pc, #312]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003504:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003508:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	494a      	ldr	r1, [pc, #296]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003512:	4313      	orrs	r3, r2
 8003514:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003520:	d101      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003522:	2301      	movs	r3, #1
 8003524:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	2b00      	cmp	r3, #0
 800352c:	d101      	bne.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800352e:	2301      	movs	r3, #1
 8003530:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800353e:	2301      	movs	r3, #1
 8003540:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0320 	and.w	r3, r3, #32
 800354a:	2b00      	cmp	r3, #0
 800354c:	f000 808b 	beq.w	8003666 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003550:	4b3a      	ldr	r3, [pc, #232]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003554:	4a39      	ldr	r2, [pc, #228]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003556:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800355a:	6413      	str	r3, [r2, #64]	; 0x40
 800355c:	4b37      	ldr	r3, [pc, #220]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800355e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003560:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003564:	60bb      	str	r3, [r7, #8]
 8003566:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003568:	4b35      	ldr	r3, [pc, #212]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a34      	ldr	r2, [pc, #208]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800356e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003572:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003574:	f7fe f914 	bl	80017a0 <HAL_GetTick>
 8003578:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800357a:	e008      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357c:	f7fe f910 	bl	80017a0 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	697b      	ldr	r3, [r7, #20]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b64      	cmp	r3, #100	; 0x64
 8003588:	d901      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e357      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800358e:	4b2c      	ldr	r3, [pc, #176]	; (8003640 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0f0      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800359a:	4b28      	ldr	r3, [pc, #160]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800359c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800359e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d035      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b2:	693a      	ldr	r2, [r7, #16]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d02e      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035b8:	4b20      	ldr	r3, [pc, #128]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035c2:	4b1e      	ldr	r3, [pc, #120]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c6:	4a1d      	ldr	r2, [pc, #116]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80035cc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035ce:	4b1b      	ldr	r3, [pc, #108]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	4a1a      	ldr	r2, [pc, #104]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80035da:	4a18      	ldr	r2, [pc, #96]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80035e0:	4b16      	ldr	r3, [pc, #88]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d114      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ec:	f7fe f8d8 	bl	80017a0 <HAL_GetTick>
 80035f0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035f2:	e00a      	b.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035f4:	f7fe f8d4 	bl	80017a0 <HAL_GetTick>
 80035f8:	4602      	mov	r2, r0
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	1ad3      	subs	r3, r2, r3
 80035fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003602:	4293      	cmp	r3, r2
 8003604:	d901      	bls.n	800360a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e319      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800360a:	4b0c      	ldr	r3, [pc, #48]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800360c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360e:	f003 0302 	and.w	r3, r3, #2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d0ee      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800361e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003622:	d111      	bne.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003624:	4b05      	ldr	r3, [pc, #20]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003630:	4b04      	ldr	r3, [pc, #16]	; (8003644 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003632:	400b      	ands	r3, r1
 8003634:	4901      	ldr	r1, [pc, #4]	; (800363c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003636:	4313      	orrs	r3, r2
 8003638:	608b      	str	r3, [r1, #8]
 800363a:	e00b      	b.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800363c:	40023800 	.word	0x40023800
 8003640:	40007000 	.word	0x40007000
 8003644:	0ffffcff 	.word	0x0ffffcff
 8003648:	4baa      	ldr	r3, [pc, #680]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	4aa9      	ldr	r2, [pc, #676]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800364e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003652:	6093      	str	r3, [r2, #8]
 8003654:	4ba7      	ldr	r3, [pc, #668]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003656:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	49a4      	ldr	r1, [pc, #656]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003662:	4313      	orrs	r3, r2
 8003664:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0310 	and.w	r3, r3, #16
 800366e:	2b00      	cmp	r3, #0
 8003670:	d010      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003672:	4ba0      	ldr	r3, [pc, #640]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003674:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003678:	4a9e      	ldr	r2, [pc, #632]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800367a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003682:	4b9c      	ldr	r3, [pc, #624]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003684:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800368c:	4999      	ldr	r1, [pc, #612]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036a0:	4b94      	ldr	r3, [pc, #592]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036ae:	4991      	ldr	r1, [pc, #580]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80036c2:	4b8c      	ldr	r3, [pc, #560]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036d0:	4988      	ldr	r1, [pc, #544]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036e4:	4b83      	ldr	r3, [pc, #524]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f2:	4980      	ldr	r1, [pc, #512]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003706:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003714:	4977      	ldr	r1, [pc, #476]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003728:	4b72      	ldr	r3, [pc, #456]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800372a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800372e:	f023 0203 	bic.w	r2, r3, #3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003736:	496f      	ldr	r1, [pc, #444]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800374a:	4b6a      	ldr	r3, [pc, #424]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800374c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003750:	f023 020c 	bic.w	r2, r3, #12
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003758:	4966      	ldr	r1, [pc, #408]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00a      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800376e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003772:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800377a:	495e      	ldr	r1, [pc, #376]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00a      	beq.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003790:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003794:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	4955      	ldr	r1, [pc, #340]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00a      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80037b0:	4b50      	ldr	r3, [pc, #320]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037be:	494d      	ldr	r1, [pc, #308]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037c0:	4313      	orrs	r3, r2
 80037c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00a      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80037d2:	4b48      	ldr	r3, [pc, #288]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037d8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e0:	4944      	ldr	r1, [pc, #272]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d00a      	beq.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80037f4:	4b3f      	ldr	r3, [pc, #252]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80037f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037fa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003802:	493c      	ldr	r1, [pc, #240]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d00a      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003816:	4b37      	ldr	r3, [pc, #220]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800381c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003824:	4933      	ldr	r1, [pc, #204]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003826:	4313      	orrs	r3, r2
 8003828:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003834:	2b00      	cmp	r3, #0
 8003836:	d00a      	beq.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003838:	4b2e      	ldr	r3, [pc, #184]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800383e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003846:	492b      	ldr	r1, [pc, #172]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003848:	4313      	orrs	r3, r2
 800384a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d011      	beq.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800385a:	4b26      	ldr	r3, [pc, #152]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800385c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003860:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003868:	4922      	ldr	r1, [pc, #136]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800386a:	4313      	orrs	r3, r2
 800386c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003874:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003878:	d101      	bne.n	800387e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800387a:	2301      	movs	r3, #1
 800387c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0308 	and.w	r3, r3, #8
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800388a:	2301      	movs	r3, #1
 800388c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00a      	beq.n	80038b0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800389a:	4b16      	ldr	r3, [pc, #88]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800389c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a8:	4912      	ldr	r1, [pc, #72]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00b      	beq.n	80038d4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80038bc:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038c2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80038cc:	4909      	ldr	r1, [pc, #36]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ce:	4313      	orrs	r3, r2
 80038d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80038d4:	69fb      	ldr	r3, [r7, #28]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d006      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80d9 	beq.w	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80038e8:	4b02      	ldr	r3, [pc, #8]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4a01      	ldr	r2, [pc, #4]	; (80038f4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80038ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80038f2:	e001      	b.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80038f4:	40023800 	.word	0x40023800
 80038f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038fa:	f7fd ff51 	bl	80017a0 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003900:	e008      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003902:	f7fd ff4d 	bl	80017a0 <HAL_GetTick>
 8003906:	4602      	mov	r2, r0
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	1ad3      	subs	r3, r2, r3
 800390c:	2b64      	cmp	r3, #100	; 0x64
 800390e:	d901      	bls.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003910:	2303      	movs	r3, #3
 8003912:	e194      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003914:	4b6c      	ldr	r3, [pc, #432]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800391c:	2b00      	cmp	r3, #0
 800391e:	d1f0      	bne.n	8003902 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b00      	cmp	r3, #0
 800392a:	d021      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003930:	2b00      	cmp	r3, #0
 8003932:	d11d      	bne.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003934:	4b64      	ldr	r3, [pc, #400]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003936:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800393a:	0c1b      	lsrs	r3, r3, #16
 800393c:	f003 0303 	and.w	r3, r3, #3
 8003940:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003942:	4b61      	ldr	r3, [pc, #388]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003944:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003948:	0e1b      	lsrs	r3, r3, #24
 800394a:	f003 030f 	and.w	r3, r3, #15
 800394e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	019a      	lsls	r2, r3, #6
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	041b      	lsls	r3, r3, #16
 800395a:	431a      	orrs	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	061b      	lsls	r3, r3, #24
 8003960:	431a      	orrs	r2, r3
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	071b      	lsls	r3, r3, #28
 8003968:	4957      	ldr	r1, [pc, #348]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800396a:	4313      	orrs	r3, r2
 800396c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d004      	beq.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003980:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003984:	d00a      	beq.n	800399c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800398e:	2b00      	cmp	r3, #0
 8003990:	d02e      	beq.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800399a:	d129      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800399c:	4b4a      	ldr	r3, [pc, #296]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800399e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039a2:	0c1b      	lsrs	r3, r3, #16
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80039aa:	4b47      	ldr	r3, [pc, #284]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80039b0:	0f1b      	lsrs	r3, r3, #28
 80039b2:	f003 0307 	and.w	r3, r3, #7
 80039b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	019a      	lsls	r2, r3, #6
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	431a      	orrs	r2, r3
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	68db      	ldr	r3, [r3, #12]
 80039c8:	061b      	lsls	r3, r3, #24
 80039ca:	431a      	orrs	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	071b      	lsls	r3, r3, #28
 80039d0:	493d      	ldr	r1, [pc, #244]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039d2:	4313      	orrs	r3, r2
 80039d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80039d8:	4b3b      	ldr	r3, [pc, #236]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039da:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039de:	f023 021f 	bic.w	r2, r3, #31
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e6:	3b01      	subs	r3, #1
 80039e8:	4937      	ldr	r1, [pc, #220]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039ea:	4313      	orrs	r3, r2
 80039ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d01d      	beq.n	8003a38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80039fc:	4b32      	ldr	r3, [pc, #200]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80039fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a02:	0e1b      	lsrs	r3, r3, #24
 8003a04:	f003 030f 	and.w	r3, r3, #15
 8003a08:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a10:	0f1b      	lsrs	r3, r3, #28
 8003a12:	f003 0307 	and.w	r3, r3, #7
 8003a16:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	019a      	lsls	r2, r3, #6
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	691b      	ldr	r3, [r3, #16]
 8003a22:	041b      	lsls	r3, r3, #16
 8003a24:	431a      	orrs	r2, r3
 8003a26:	693b      	ldr	r3, [r7, #16]
 8003a28:	061b      	lsls	r3, r3, #24
 8003a2a:	431a      	orrs	r2, r3
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	071b      	lsls	r3, r3, #28
 8003a30:	4925      	ldr	r1, [pc, #148]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a32:	4313      	orrs	r3, r2
 8003a34:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d011      	beq.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	019a      	lsls	r2, r3, #6
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	041b      	lsls	r3, r3, #16
 8003a50:	431a      	orrs	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68db      	ldr	r3, [r3, #12]
 8003a56:	061b      	lsls	r3, r3, #24
 8003a58:	431a      	orrs	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	689b      	ldr	r3, [r3, #8]
 8003a5e:	071b      	lsls	r3, r3, #28
 8003a60:	4919      	ldr	r1, [pc, #100]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003a68:	4b17      	ldr	r3, [pc, #92]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4a16      	ldr	r2, [pc, #88]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a6e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a74:	f7fd fe94 	bl	80017a0 <HAL_GetTick>
 8003a78:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a7a:	e008      	b.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a7c:	f7fd fe90 	bl	80017a0 <HAL_GetTick>
 8003a80:	4602      	mov	r2, r0
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	2b64      	cmp	r3, #100	; 0x64
 8003a88:	d901      	bls.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a8a:	2303      	movs	r3, #3
 8003a8c:	e0d7      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003a8e:	4b0e      	ldr	r3, [pc, #56]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d0f0      	beq.n	8003a7c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003a9a:	69bb      	ldr	r3, [r7, #24]
 8003a9c:	2b01      	cmp	r3, #1
 8003a9e:	f040 80cd 	bne.w	8003c3c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003aa2:	4b09      	ldr	r3, [pc, #36]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a08      	ldr	r2, [pc, #32]	; (8003ac8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003aac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003aae:	f7fd fe77 	bl	80017a0 <HAL_GetTick>
 8003ab2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003ab4:	e00a      	b.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003ab6:	f7fd fe73 	bl	80017a0 <HAL_GetTick>
 8003aba:	4602      	mov	r2, r0
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	1ad3      	subs	r3, r2, r3
 8003ac0:	2b64      	cmp	r3, #100	; 0x64
 8003ac2:	d903      	bls.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ac4:	2303      	movs	r3, #3
 8003ac6:	e0ba      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003ac8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003acc:	4b5e      	ldr	r3, [pc, #376]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ad8:	d0ed      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d009      	beq.n	8003b02 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d02e      	beq.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d12a      	bne.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003b02:	4b51      	ldr	r3, [pc, #324]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	0c1b      	lsrs	r3, r3, #16
 8003b0a:	f003 0303 	and.w	r3, r3, #3
 8003b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b10:	4b4d      	ldr	r3, [pc, #308]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b16:	0f1b      	lsrs	r3, r3, #28
 8003b18:	f003 0307 	and.w	r3, r3, #7
 8003b1c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	019a      	lsls	r2, r3, #6
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	041b      	lsls	r3, r3, #16
 8003b28:	431a      	orrs	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	061b      	lsls	r3, r3, #24
 8003b30:	431a      	orrs	r2, r3
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	071b      	lsls	r3, r3, #28
 8003b36:	4944      	ldr	r1, [pc, #272]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003b3e:	4b42      	ldr	r3, [pc, #264]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b44:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	3b01      	subs	r3, #1
 8003b4e:	021b      	lsls	r3, r3, #8
 8003b50:	493d      	ldr	r1, [pc, #244]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d022      	beq.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b68:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003b6c:	d11d      	bne.n	8003baa <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003b6e:	4b36      	ldr	r3, [pc, #216]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b74:	0e1b      	lsrs	r3, r3, #24
 8003b76:	f003 030f 	and.w	r3, r3, #15
 8003b7a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003b7c:	4b32      	ldr	r3, [pc, #200]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b82:	0f1b      	lsrs	r3, r3, #28
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	019a      	lsls	r2, r3, #6
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	041b      	lsls	r3, r3, #16
 8003b96:	431a      	orrs	r2, r3
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	061b      	lsls	r3, r3, #24
 8003b9c:	431a      	orrs	r2, r3
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	071b      	lsls	r3, r3, #28
 8003ba2:	4929      	ldr	r1, [pc, #164]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d028      	beq.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bbc:	0e1b      	lsrs	r3, r3, #24
 8003bbe:	f003 030f 	and.w	r3, r3, #15
 8003bc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003bc4:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bca:	0c1b      	lsrs	r3, r3, #16
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	695b      	ldr	r3, [r3, #20]
 8003bd6:	019a      	lsls	r2, r3, #6
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	041b      	lsls	r3, r3, #16
 8003bdc:	431a      	orrs	r2, r3
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	061b      	lsls	r3, r3, #24
 8003be2:	431a      	orrs	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	69db      	ldr	r3, [r3, #28]
 8003be8:	071b      	lsls	r3, r3, #28
 8003bea:	4917      	ldr	r1, [pc, #92]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bec:	4313      	orrs	r3, r2
 8003bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003bf2:	4b15      	ldr	r3, [pc, #84]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bf8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c00:	4911      	ldr	r1, [pc, #68]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c02:	4313      	orrs	r3, r2
 8003c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003c08:	4b0f      	ldr	r3, [pc, #60]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a0e      	ldr	r2, [pc, #56]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c14:	f7fd fdc4 	bl	80017a0 <HAL_GetTick>
 8003c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c1a:	e008      	b.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c1c:	f7fd fdc0 	bl	80017a0 <HAL_GetTick>
 8003c20:	4602      	mov	r2, r0
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	1ad3      	subs	r3, r2, r3
 8003c26:	2b64      	cmp	r3, #100	; 0x64
 8003c28:	d901      	bls.n	8003c2e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e007      	b.n	8003c3e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003c2e:	4b06      	ldr	r3, [pc, #24]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c3a:	d1ef      	bne.n	8003c1c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3720      	adds	r7, #32
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023800 	.word	0x40023800

08003c4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d101      	bne.n	8003c5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e049      	b.n	8003cf2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d106      	bne.n	8003c78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd fb54 	bl	8001320 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	3304      	adds	r3, #4
 8003c88:	4619      	mov	r1, r3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	f000 fe64 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2201      	movs	r2, #1
 8003c94:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2201      	movs	r2, #1
 8003cc4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3708      	adds	r7, #8
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
	...

08003cfc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b085      	sub	sp, #20
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d001      	beq.n	8003d14 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e054      	b.n	8003dbe <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f042 0201 	orr.w	r2, r2, #1
 8003d2a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	4a26      	ldr	r2, [pc, #152]	; (8003dcc <HAL_TIM_Base_Start_IT+0xd0>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d022      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d3e:	d01d      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a22      	ldr	r2, [pc, #136]	; (8003dd0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d018      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a21      	ldr	r2, [pc, #132]	; (8003dd4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d013      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a1f      	ldr	r2, [pc, #124]	; (8003dd8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d00e      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a1e      	ldr	r2, [pc, #120]	; (8003ddc <HAL_TIM_Base_Start_IT+0xe0>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d009      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1c      	ldr	r2, [pc, #112]	; (8003de0 <HAL_TIM_Base_Start_IT+0xe4>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d004      	beq.n	8003d7c <HAL_TIM_Base_Start_IT+0x80>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	; (8003de4 <HAL_TIM_Base_Start_IT+0xe8>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d115      	bne.n	8003da8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	689a      	ldr	r2, [r3, #8]
 8003d82:	4b19      	ldr	r3, [pc, #100]	; (8003de8 <HAL_TIM_Base_Start_IT+0xec>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2b06      	cmp	r3, #6
 8003d8c:	d015      	beq.n	8003dba <HAL_TIM_Base_Start_IT+0xbe>
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d94:	d011      	beq.n	8003dba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f042 0201 	orr.w	r2, r2, #1
 8003da4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003da6:	e008      	b.n	8003dba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f042 0201 	orr.w	r2, r2, #1
 8003db6:	601a      	str	r2, [r3, #0]
 8003db8:	e000      	b.n	8003dbc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003dba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003dbc:	2300      	movs	r3, #0
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40001800 	.word	0x40001800
 8003de8:	00010007 	.word	0x00010007

08003dec <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b082      	sub	sp, #8
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	e049      	b.n	8003e92 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d106      	bne.n	8003e18 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f841 	bl	8003e9a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681a      	ldr	r2, [r3, #0]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3304      	adds	r3, #4
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f000 fd94 	bl	8004958 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2201      	movs	r2, #1
 8003e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2201      	movs	r2, #1
 8003e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2201      	movs	r2, #1
 8003e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2201      	movs	r2, #1
 8003e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2201      	movs	r2, #1
 8003e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e90:	2300      	movs	r3, #0
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}

08003e9a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	b083      	sub	sp, #12
 8003e9e:	af00      	add	r7, sp, #0
 8003ea0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ea2:	bf00      	nop
 8003ea4:	370c      	adds	r7, #12
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr
	...

08003eb0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d109      	bne.n	8003ed4 <HAL_TIM_PWM_Start+0x24>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	2b01      	cmp	r3, #1
 8003eca:	bf14      	ite	ne
 8003ecc:	2301      	movne	r3, #1
 8003ece:	2300      	moveq	r3, #0
 8003ed0:	b2db      	uxtb	r3, r3
 8003ed2:	e03c      	b.n	8003f4e <HAL_TIM_PWM_Start+0x9e>
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	2b04      	cmp	r3, #4
 8003ed8:	d109      	bne.n	8003eee <HAL_TIM_PWM_Start+0x3e>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	bf14      	ite	ne
 8003ee6:	2301      	movne	r3, #1
 8003ee8:	2300      	moveq	r3, #0
 8003eea:	b2db      	uxtb	r3, r3
 8003eec:	e02f      	b.n	8003f4e <HAL_TIM_PWM_Start+0x9e>
 8003eee:	683b      	ldr	r3, [r7, #0]
 8003ef0:	2b08      	cmp	r3, #8
 8003ef2:	d109      	bne.n	8003f08 <HAL_TIM_PWM_Start+0x58>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003efa:	b2db      	uxtb	r3, r3
 8003efc:	2b01      	cmp	r3, #1
 8003efe:	bf14      	ite	ne
 8003f00:	2301      	movne	r3, #1
 8003f02:	2300      	moveq	r3, #0
 8003f04:	b2db      	uxtb	r3, r3
 8003f06:	e022      	b.n	8003f4e <HAL_TIM_PWM_Start+0x9e>
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b0c      	cmp	r3, #12
 8003f0c:	d109      	bne.n	8003f22 <HAL_TIM_PWM_Start+0x72>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	bf14      	ite	ne
 8003f1a:	2301      	movne	r3, #1
 8003f1c:	2300      	moveq	r3, #0
 8003f1e:	b2db      	uxtb	r3, r3
 8003f20:	e015      	b.n	8003f4e <HAL_TIM_PWM_Start+0x9e>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	2b10      	cmp	r3, #16
 8003f26:	d109      	bne.n	8003f3c <HAL_TIM_PWM_Start+0x8c>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	bf14      	ite	ne
 8003f34:	2301      	movne	r3, #1
 8003f36:	2300      	moveq	r3, #0
 8003f38:	b2db      	uxtb	r3, r3
 8003f3a:	e008      	b.n	8003f4e <HAL_TIM_PWM_Start+0x9e>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	bf14      	ite	ne
 8003f48:	2301      	movne	r3, #1
 8003f4a:	2300      	moveq	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e092      	b.n	800407c <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d104      	bne.n	8003f66 <HAL_TIM_PWM_Start+0xb6>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	e023      	b.n	8003fae <HAL_TIM_PWM_Start+0xfe>
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	2b04      	cmp	r3, #4
 8003f6a:	d104      	bne.n	8003f76 <HAL_TIM_PWM_Start+0xc6>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2202      	movs	r2, #2
 8003f70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f74:	e01b      	b.n	8003fae <HAL_TIM_PWM_Start+0xfe>
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	2b08      	cmp	r3, #8
 8003f7a:	d104      	bne.n	8003f86 <HAL_TIM_PWM_Start+0xd6>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f84:	e013      	b.n	8003fae <HAL_TIM_PWM_Start+0xfe>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b0c      	cmp	r3, #12
 8003f8a:	d104      	bne.n	8003f96 <HAL_TIM_PWM_Start+0xe6>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f94:	e00b      	b.n	8003fae <HAL_TIM_PWM_Start+0xfe>
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	2b10      	cmp	r3, #16
 8003f9a:	d104      	bne.n	8003fa6 <HAL_TIM_PWM_Start+0xf6>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2202      	movs	r2, #2
 8003fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fa4:	e003      	b.n	8003fae <HAL_TIM_PWM_Start+0xfe>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2202      	movs	r2, #2
 8003faa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	6839      	ldr	r1, [r7, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f001 f866 	bl	8005088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a30      	ldr	r2, [pc, #192]	; (8004084 <HAL_TIM_PWM_Start+0x1d4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d004      	beq.n	8003fd0 <HAL_TIM_PWM_Start+0x120>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a2f      	ldr	r2, [pc, #188]	; (8004088 <HAL_TIM_PWM_Start+0x1d8>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_TIM_PWM_Start+0x124>
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <HAL_TIM_PWM_Start+0x126>
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d007      	beq.n	8003fea <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fe8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4a25      	ldr	r2, [pc, #148]	; (8004084 <HAL_TIM_PWM_Start+0x1d4>)
 8003ff0:	4293      	cmp	r3, r2
 8003ff2:	d022      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ffc:	d01d      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a22      	ldr	r2, [pc, #136]	; (800408c <HAL_TIM_PWM_Start+0x1dc>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d018      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a20      	ldr	r2, [pc, #128]	; (8004090 <HAL_TIM_PWM_Start+0x1e0>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d013      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	4a1f      	ldr	r2, [pc, #124]	; (8004094 <HAL_TIM_PWM_Start+0x1e4>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d00e      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	4a19      	ldr	r2, [pc, #100]	; (8004088 <HAL_TIM_PWM_Start+0x1d8>)
 8004022:	4293      	cmp	r3, r2
 8004024:	d009      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a1b      	ldr	r2, [pc, #108]	; (8004098 <HAL_TIM_PWM_Start+0x1e8>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d004      	beq.n	800403a <HAL_TIM_PWM_Start+0x18a>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a19      	ldr	r2, [pc, #100]	; (800409c <HAL_TIM_PWM_Start+0x1ec>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d115      	bne.n	8004066 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	689a      	ldr	r2, [r3, #8]
 8004040:	4b17      	ldr	r3, [pc, #92]	; (80040a0 <HAL_TIM_PWM_Start+0x1f0>)
 8004042:	4013      	ands	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2b06      	cmp	r3, #6
 800404a:	d015      	beq.n	8004078 <HAL_TIM_PWM_Start+0x1c8>
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004052:	d011      	beq.n	8004078 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0201 	orr.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004064:	e008      	b.n	8004078 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	681a      	ldr	r2, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f042 0201 	orr.w	r2, r2, #1
 8004074:	601a      	str	r2, [r3, #0]
 8004076:	e000      	b.n	800407a <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004078:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	40010000 	.word	0x40010000
 8004088:	40010400 	.word	0x40010400
 800408c:	40000400 	.word	0x40000400
 8004090:	40000800 	.word	0x40000800
 8004094:	40000c00 	.word	0x40000c00
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800
 80040a0:	00010007 	.word	0x00010007

080040a4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e08f      	b.n	80041d8 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d106      	bne.n	80040d2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7fd f97b 	bl	80013c8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	4b3e      	ldr	r3, [pc, #248]	; (80041e0 <HAL_TIM_Encoder_Init+0x13c>)
 80040e6:	400b      	ands	r3, r1
 80040e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	3304      	adds	r3, #4
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fc2f 	bl	8004958 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689b      	ldr	r3, [r3, #8]
 8004100:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	699b      	ldr	r3, [r3, #24]
 8004108:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	4313      	orrs	r3, r2
 800411a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800411c:	693a      	ldr	r2, [r7, #16]
 800411e:	4b31      	ldr	r3, [pc, #196]	; (80041e4 <HAL_TIM_Encoder_Init+0x140>)
 8004120:	4013      	ands	r3, r2
 8004122:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	021b      	lsls	r3, r3, #8
 800412e:	4313      	orrs	r3, r2
 8004130:	693a      	ldr	r2, [r7, #16]
 8004132:	4313      	orrs	r3, r2
 8004134:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_TIM_Encoder_Init+0x144>)
 800413a:	4013      	ands	r3, r2
 800413c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4b2a      	ldr	r3, [pc, #168]	; (80041ec <HAL_TIM_Encoder_Init+0x148>)
 8004142:	4013      	ands	r3, r2
 8004144:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68da      	ldr	r2, [r3, #12]
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	69db      	ldr	r3, [r3, #28]
 800414e:	021b      	lsls	r3, r3, #8
 8004150:	4313      	orrs	r3, r2
 8004152:	693a      	ldr	r2, [r7, #16]
 8004154:	4313      	orrs	r3, r2
 8004156:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	011a      	lsls	r2, r3, #4
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	031b      	lsls	r3, r3, #12
 8004164:	4313      	orrs	r3, r2
 8004166:	693a      	ldr	r2, [r7, #16]
 8004168:	4313      	orrs	r3, r2
 800416a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004172:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800417a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4313      	orrs	r3, r2
 8004188:	68fa      	ldr	r2, [r7, #12]
 800418a:	4313      	orrs	r3, r2
 800418c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68fa      	ldr	r2, [r7, #12]
 80041a4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2201      	movs	r2, #1
 80041aa:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2201      	movs	r2, #1
 80041ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2201      	movs	r2, #1
 80041c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2201      	movs	r2, #1
 80041ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2201      	movs	r2, #1
 80041d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041d6:	2300      	movs	r3, #0
}
 80041d8:	4618      	mov	r0, r3
 80041da:	3718      	adds	r7, #24
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}
 80041e0:	fffebff8 	.word	0xfffebff8
 80041e4:	fffffcfc 	.word	0xfffffcfc
 80041e8:	fffff3f3 	.word	0xfffff3f3
 80041ec:	ffff0f0f 	.word	0xffff0f0f

080041f0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b084      	sub	sp, #16
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004200:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004208:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004210:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004218:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d110      	bne.n	8004242 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004220:	7bfb      	ldrb	r3, [r7, #15]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d102      	bne.n	800422c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004226:	7b7b      	ldrb	r3, [r7, #13]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d001      	beq.n	8004230 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e069      	b.n	8004304 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	2202      	movs	r2, #2
 8004234:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004240:	e031      	b.n	80042a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b04      	cmp	r3, #4
 8004246:	d110      	bne.n	800426a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004248:	7bbb      	ldrb	r3, [r7, #14]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d102      	bne.n	8004254 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800424e:	7b3b      	ldrb	r3, [r7, #12]
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e055      	b.n	8004304 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2202      	movs	r2, #2
 800425c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2202      	movs	r2, #2
 8004264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004268:	e01d      	b.n	80042a6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800426a:	7bfb      	ldrb	r3, [r7, #15]
 800426c:	2b01      	cmp	r3, #1
 800426e:	d108      	bne.n	8004282 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004270:	7bbb      	ldrb	r3, [r7, #14]
 8004272:	2b01      	cmp	r3, #1
 8004274:	d105      	bne.n	8004282 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004276:	7b7b      	ldrb	r3, [r7, #13]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d102      	bne.n	8004282 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800427c:	7b3b      	ldrb	r3, [r7, #12]
 800427e:	2b01      	cmp	r3, #1
 8004280:	d001      	beq.n	8004286 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004282:	2301      	movs	r3, #1
 8004284:	e03e      	b.n	8004304 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2202      	movs	r2, #2
 800428a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2202      	movs	r2, #2
 8004292:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2202      	movs	r2, #2
 80042a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d003      	beq.n	80042b4 <HAL_TIM_Encoder_Start+0xc4>
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	2b04      	cmp	r3, #4
 80042b0:	d008      	beq.n	80042c4 <HAL_TIM_Encoder_Start+0xd4>
 80042b2:	e00f      	b.n	80042d4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	2201      	movs	r2, #1
 80042ba:	2100      	movs	r1, #0
 80042bc:	4618      	mov	r0, r3
 80042be:	f000 fee3 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 80042c2:	e016      	b.n	80042f2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2201      	movs	r2, #1
 80042ca:	2104      	movs	r1, #4
 80042cc:	4618      	mov	r0, r3
 80042ce:	f000 fedb 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 80042d2:	e00e      	b.n	80042f2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	2100      	movs	r1, #0
 80042dc:	4618      	mov	r0, r3
 80042de:	f000 fed3 	bl	8005088 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	2104      	movs	r1, #4
 80042ea:	4618      	mov	r0, r3
 80042ec:	f000 fecc 	bl	8005088 <TIM_CCxChannelCmd>
      break;
 80042f0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f042 0201 	orr.w	r2, r2, #1
 8004300:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004302:	2300      	movs	r3, #0
}
 8004304:	4618      	mov	r0, r3
 8004306:	3710      	adds	r7, #16
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	691b      	ldr	r3, [r3, #16]
 800431a:	f003 0302 	and.w	r3, r3, #2
 800431e:	2b02      	cmp	r3, #2
 8004320:	d122      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68db      	ldr	r3, [r3, #12]
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b02      	cmp	r3, #2
 800432e:	d11b      	bne.n	8004368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f06f 0202 	mvn.w	r2, #2
 8004338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2201      	movs	r2, #1
 800433e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	f003 0303 	and.w	r3, r3, #3
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800434e:	6878      	ldr	r0, [r7, #4]
 8004350:	f000 fae4 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 8004354:	e005      	b.n	8004362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 fad6 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800435c:	6878      	ldr	r0, [r7, #4]
 800435e:	f000 fae7 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	691b      	ldr	r3, [r3, #16]
 800436e:	f003 0304 	and.w	r3, r3, #4
 8004372:	2b04      	cmp	r3, #4
 8004374:	d122      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	f003 0304 	and.w	r3, r3, #4
 8004380:	2b04      	cmp	r3, #4
 8004382:	d11b      	bne.n	80043bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f06f 0204 	mvn.w	r2, #4
 800438c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2202      	movs	r2, #2
 8004392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043a2:	6878      	ldr	r0, [r7, #4]
 80043a4:	f000 faba 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 80043a8:	e005      	b.n	80043b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f000 faac 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043b0:	6878      	ldr	r0, [r7, #4]
 80043b2:	f000 fabd 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2200      	movs	r2, #0
 80043ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f003 0308 	and.w	r3, r3, #8
 80043c6:	2b08      	cmp	r3, #8
 80043c8:	d122      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	f003 0308 	and.w	r3, r3, #8
 80043d4:	2b08      	cmp	r3, #8
 80043d6:	d11b      	bne.n	8004410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f06f 0208 	mvn.w	r2, #8
 80043e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	2204      	movs	r2, #4
 80043e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 0303 	and.w	r3, r3, #3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d003      	beq.n	80043fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	f000 fa90 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 80043fc:	e005      	b.n	800440a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f000 fa82 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fa93 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2200      	movs	r2, #0
 800440e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	691b      	ldr	r3, [r3, #16]
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	2b10      	cmp	r3, #16
 800441c:	d122      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	f003 0310 	and.w	r3, r3, #16
 8004428:	2b10      	cmp	r3, #16
 800442a:	d11b      	bne.n	8004464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f06f 0210 	mvn.w	r2, #16
 8004434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2208      	movs	r2, #8
 800443a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004446:	2b00      	cmp	r3, #0
 8004448:	d003      	beq.n	8004452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f000 fa66 	bl	800491c <HAL_TIM_IC_CaptureCallback>
 8004450:	e005      	b.n	800445e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f000 fa58 	bl	8004908 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 fa69 	bl	8004930 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2200      	movs	r2, #0
 8004462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	691b      	ldr	r3, [r3, #16]
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	2b01      	cmp	r3, #1
 8004470:	d10e      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f003 0301 	and.w	r3, r3, #1
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f06f 0201 	mvn.w	r2, #1
 8004488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f7fc fbcc 	bl	8000c28 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	691b      	ldr	r3, [r3, #16]
 8004496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800449a:	2b80      	cmp	r3, #128	; 0x80
 800449c:	d10e      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	68db      	ldr	r3, [r3, #12]
 80044a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044a8:	2b80      	cmp	r3, #128	; 0x80
 80044aa:	d107      	bne.n	80044bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80044b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 fea4 	bl	8005204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80044ca:	d10e      	bne.n	80044ea <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d6:	2b80      	cmp	r3, #128	; 0x80
 80044d8:	d107      	bne.n	80044ea <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80044e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f000 fe97 	bl	8005218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b40      	cmp	r3, #64	; 0x40
 80044f6:	d10e      	bne.n	8004516 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004502:	2b40      	cmp	r3, #64	; 0x40
 8004504:	d107      	bne.n	8004516 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800450e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 fa17 	bl	8004944 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	f003 0320 	and.w	r3, r3, #32
 8004520:	2b20      	cmp	r3, #32
 8004522:	d10e      	bne.n	8004542 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f003 0320 	and.w	r3, r3, #32
 800452e:	2b20      	cmp	r3, #32
 8004530:	d107      	bne.n	8004542 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f06f 0220 	mvn.w	r2, #32
 800453a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 fe57 	bl	80051f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004542:	bf00      	nop
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004558:	2300      	movs	r3, #0
 800455a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004562:	2b01      	cmp	r3, #1
 8004564:	d101      	bne.n	800456a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004566:	2302      	movs	r3, #2
 8004568:	e0ff      	b.n	800476a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2201      	movs	r2, #1
 800456e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b14      	cmp	r3, #20
 8004576:	f200 80f0 	bhi.w	800475a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	080045d5 	.word	0x080045d5
 8004584:	0800475b 	.word	0x0800475b
 8004588:	0800475b 	.word	0x0800475b
 800458c:	0800475b 	.word	0x0800475b
 8004590:	08004615 	.word	0x08004615
 8004594:	0800475b 	.word	0x0800475b
 8004598:	0800475b 	.word	0x0800475b
 800459c:	0800475b 	.word	0x0800475b
 80045a0:	08004657 	.word	0x08004657
 80045a4:	0800475b 	.word	0x0800475b
 80045a8:	0800475b 	.word	0x0800475b
 80045ac:	0800475b 	.word	0x0800475b
 80045b0:	08004697 	.word	0x08004697
 80045b4:	0800475b 	.word	0x0800475b
 80045b8:	0800475b 	.word	0x0800475b
 80045bc:	0800475b 	.word	0x0800475b
 80045c0:	080046d9 	.word	0x080046d9
 80045c4:	0800475b 	.word	0x0800475b
 80045c8:	0800475b 	.word	0x0800475b
 80045cc:	0800475b 	.word	0x0800475b
 80045d0:	08004719 	.word	0x08004719
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	68b9      	ldr	r1, [r7, #8]
 80045da:	4618      	mov	r0, r3
 80045dc:	f000 fa5c 	bl	8004a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	699a      	ldr	r2, [r3, #24]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	f042 0208 	orr.w	r2, r2, #8
 80045ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	699a      	ldr	r2, [r3, #24]
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0204 	bic.w	r2, r2, #4
 80045fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	6999      	ldr	r1, [r3, #24]
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	691a      	ldr	r2, [r3, #16]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	430a      	orrs	r2, r1
 8004610:	619a      	str	r2, [r3, #24]
      break;
 8004612:	e0a5      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	4618      	mov	r0, r3
 800461c:	f000 faae 	bl	8004b7c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	699a      	ldr	r2, [r3, #24]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800462e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699a      	ldr	r2, [r3, #24]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800463e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	6999      	ldr	r1, [r3, #24]
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	021a      	lsls	r2, r3, #8
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
      break;
 8004654:	e084      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	68b9      	ldr	r1, [r7, #8]
 800465c:	4618      	mov	r0, r3
 800465e:	f000 fb05 	bl	8004c6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	69da      	ldr	r2, [r3, #28]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f042 0208 	orr.w	r2, r2, #8
 8004670:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69da      	ldr	r2, [r3, #28]
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f022 0204 	bic.w	r2, r2, #4
 8004680:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	69d9      	ldr	r1, [r3, #28]
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	691a      	ldr	r2, [r3, #16]
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	430a      	orrs	r2, r1
 8004692:	61da      	str	r2, [r3, #28]
      break;
 8004694:	e064      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	68b9      	ldr	r1, [r7, #8]
 800469c:	4618      	mov	r0, r3
 800469e:	f000 fb5b 	bl	8004d58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	69da      	ldr	r2, [r3, #28]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	69da      	ldr	r2, [r3, #28]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	69d9      	ldr	r1, [r3, #28]
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	691b      	ldr	r3, [r3, #16]
 80046cc:	021a      	lsls	r2, r3, #8
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	430a      	orrs	r2, r1
 80046d4:	61da      	str	r2, [r3, #28]
      break;
 80046d6:	e043      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68b9      	ldr	r1, [r7, #8]
 80046de:	4618      	mov	r0, r3
 80046e0:	f000 fb92 	bl	8004e08 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f042 0208 	orr.w	r2, r2, #8
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0204 	bic.w	r2, r2, #4
 8004702:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	691a      	ldr	r2, [r3, #16]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004716:	e023      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	68b9      	ldr	r1, [r7, #8]
 800471e:	4618      	mov	r0, r3
 8004720:	f000 fbc4 	bl	8004eac <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004742:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	691b      	ldr	r3, [r3, #16]
 800474e:	021a      	lsls	r2, r3, #8
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	430a      	orrs	r2, r1
 8004756:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004758:	e002      	b.n	8004760 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	75fb      	strb	r3, [r7, #23]
      break;
 800475e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004768:	7dfb      	ldrb	r3, [r7, #23]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3718      	adds	r7, #24
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop

08004774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800477e:	2300      	movs	r3, #0
 8004780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004788:	2b01      	cmp	r3, #1
 800478a:	d101      	bne.n	8004790 <HAL_TIM_ConfigClockSource+0x1c>
 800478c:	2302      	movs	r3, #2
 800478e:	e0b4      	b.n	80048fa <HAL_TIM_ConfigClockSource+0x186>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2202      	movs	r2, #2
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	4b56      	ldr	r3, [pc, #344]	; (8004904 <HAL_TIM_ConfigClockSource+0x190>)
 80047ac:	4013      	ands	r3, r2
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68ba      	ldr	r2, [r7, #8]
 80047be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047c8:	d03e      	beq.n	8004848 <HAL_TIM_ConfigClockSource+0xd4>
 80047ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ce:	f200 8087 	bhi.w	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047d6:	f000 8086 	beq.w	80048e6 <HAL_TIM_ConfigClockSource+0x172>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	d87f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e0:	2b70      	cmp	r3, #112	; 0x70
 80047e2:	d01a      	beq.n	800481a <HAL_TIM_ConfigClockSource+0xa6>
 80047e4:	2b70      	cmp	r3, #112	; 0x70
 80047e6:	d87b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b60      	cmp	r3, #96	; 0x60
 80047ea:	d050      	beq.n	800488e <HAL_TIM_ConfigClockSource+0x11a>
 80047ec:	2b60      	cmp	r3, #96	; 0x60
 80047ee:	d877      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b50      	cmp	r3, #80	; 0x50
 80047f2:	d03c      	beq.n	800486e <HAL_TIM_ConfigClockSource+0xfa>
 80047f4:	2b50      	cmp	r3, #80	; 0x50
 80047f6:	d873      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b40      	cmp	r3, #64	; 0x40
 80047fa:	d058      	beq.n	80048ae <HAL_TIM_ConfigClockSource+0x13a>
 80047fc:	2b40      	cmp	r3, #64	; 0x40
 80047fe:	d86f      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b30      	cmp	r3, #48	; 0x30
 8004802:	d064      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004804:	2b30      	cmp	r3, #48	; 0x30
 8004806:	d86b      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b20      	cmp	r3, #32
 800480a:	d060      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b20      	cmp	r3, #32
 800480e:	d867      	bhi.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b00      	cmp	r3, #0
 8004812:	d05c      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b10      	cmp	r3, #16
 8004816:	d05a      	beq.n	80048ce <HAL_TIM_ConfigClockSource+0x15a>
 8004818:	e062      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6818      	ldr	r0, [r3, #0]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	6899      	ldr	r1, [r3, #8]
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685a      	ldr	r2, [r3, #4]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	68db      	ldr	r3, [r3, #12]
 800482a:	f000 fc0d 	bl	8005048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800483c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68ba      	ldr	r2, [r7, #8]
 8004844:	609a      	str	r2, [r3, #8]
      break;
 8004846:	e04f      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6818      	ldr	r0, [r3, #0]
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	6899      	ldr	r1, [r3, #8]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685a      	ldr	r2, [r3, #4]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f000 fbf6 	bl	8005048 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800486a:	609a      	str	r2, [r3, #8]
      break;
 800486c:	e03c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6818      	ldr	r0, [r3, #0]
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	6859      	ldr	r1, [r3, #4]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	461a      	mov	r2, r3
 800487c:	f000 fb6a 	bl	8004f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2150      	movs	r1, #80	; 0x50
 8004886:	4618      	mov	r0, r3
 8004888:	f000 fbc3 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 800488c:	e02c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6818      	ldr	r0, [r3, #0]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	6859      	ldr	r1, [r3, #4]
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	461a      	mov	r2, r3
 800489c:	f000 fb89 	bl	8004fb2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	2160      	movs	r1, #96	; 0x60
 80048a6:	4618      	mov	r0, r3
 80048a8:	f000 fbb3 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80048ac:	e01c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	6859      	ldr	r1, [r3, #4]
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68db      	ldr	r3, [r3, #12]
 80048ba:	461a      	mov	r2, r3
 80048bc:	f000 fb4a 	bl	8004f54 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	2140      	movs	r1, #64	; 0x40
 80048c6:	4618      	mov	r0, r3
 80048c8:	f000 fba3 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80048cc:	e00c      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681a      	ldr	r2, [r3, #0]
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	4619      	mov	r1, r3
 80048d8:	4610      	mov	r0, r2
 80048da:	f000 fb9a 	bl	8005012 <TIM_ITRx_SetConfig>
      break;
 80048de:	e003      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	73fb      	strb	r3, [r7, #15]
      break;
 80048e4:	e000      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2201      	movs	r2, #1
 80048ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80048f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3710      	adds	r7, #16
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}
 8004902:	bf00      	nop
 8004904:	fffeff88 	.word	0xfffeff88

08004908 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004910:	bf00      	nop
 8004912:	370c      	adds	r7, #12
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr

0800491c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004924:	bf00      	nop
 8004926:	370c      	adds	r7, #12
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004958:	b480      	push	{r7}
 800495a:	b085      	sub	sp, #20
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a40      	ldr	r2, [pc, #256]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d013      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004976:	d00f      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	4a3d      	ldr	r2, [pc, #244]	; (8004a70 <TIM_Base_SetConfig+0x118>)
 800497c:	4293      	cmp	r3, r2
 800497e:	d00b      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3c      	ldr	r2, [pc, #240]	; (8004a74 <TIM_Base_SetConfig+0x11c>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d007      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3b      	ldr	r2, [pc, #236]	; (8004a78 <TIM_Base_SetConfig+0x120>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d003      	beq.n	8004998 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3a      	ldr	r2, [pc, #232]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d108      	bne.n	80049aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800499e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	68fa      	ldr	r2, [r7, #12]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a2f      	ldr	r2, [pc, #188]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d02b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049b8:	d027      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	4a2c      	ldr	r2, [pc, #176]	; (8004a70 <TIM_Base_SetConfig+0x118>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d023      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2b      	ldr	r2, [pc, #172]	; (8004a74 <TIM_Base_SetConfig+0x11c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d01f      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2a      	ldr	r2, [pc, #168]	; (8004a78 <TIM_Base_SetConfig+0x120>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a29      	ldr	r2, [pc, #164]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d017      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a28      	ldr	r2, [pc, #160]	; (8004a80 <TIM_Base_SetConfig+0x128>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d013      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a27      	ldr	r2, [pc, #156]	; (8004a84 <TIM_Base_SetConfig+0x12c>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d00f      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a26      	ldr	r2, [pc, #152]	; (8004a88 <TIM_Base_SetConfig+0x130>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00b      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a25      	ldr	r2, [pc, #148]	; (8004a8c <TIM_Base_SetConfig+0x134>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a24      	ldr	r2, [pc, #144]	; (8004a90 <TIM_Base_SetConfig+0x138>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d003      	beq.n	8004a0a <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a23      	ldr	r2, [pc, #140]	; (8004a94 <TIM_Base_SetConfig+0x13c>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d108      	bne.n	8004a1c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	689a      	ldr	r2, [r3, #8]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	4a0a      	ldr	r2, [pc, #40]	; (8004a6c <TIM_Base_SetConfig+0x114>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d003      	beq.n	8004a50 <TIM_Base_SetConfig+0xf8>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0c      	ldr	r2, [pc, #48]	; (8004a7c <TIM_Base_SetConfig+0x124>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d103      	bne.n	8004a58 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	615a      	str	r2, [r3, #20]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr
 8004a6a:	bf00      	nop
 8004a6c:	40010000 	.word	0x40010000
 8004a70:	40000400 	.word	0x40000400
 8004a74:	40000800 	.word	0x40000800
 8004a78:	40000c00 	.word	0x40000c00
 8004a7c:	40010400 	.word	0x40010400
 8004a80:	40014000 	.word	0x40014000
 8004a84:	40014400 	.word	0x40014400
 8004a88:	40014800 	.word	0x40014800
 8004a8c:	40001800 	.word	0x40001800
 8004a90:	40001c00 	.word	0x40001c00
 8004a94:	40002000 	.word	0x40002000

08004a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004a98:	b480      	push	{r7}
 8004a9a:	b087      	sub	sp, #28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]
 8004aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a1b      	ldr	r3, [r3, #32]
 8004aa6:	f023 0201 	bic.w	r2, r3, #1
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a1b      	ldr	r3, [r3, #32]
 8004ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004ac0:	68fa      	ldr	r2, [r7, #12]
 8004ac2:	4b2b      	ldr	r3, [pc, #172]	; (8004b70 <TIM_OC1_SetConfig+0xd8>)
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	f023 0303 	bic.w	r3, r3, #3
 8004ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ad0:	683b      	ldr	r3, [r7, #0]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68fa      	ldr	r2, [r7, #12]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	f023 0302 	bic.w	r3, r3, #2
 8004ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	697a      	ldr	r2, [r7, #20]
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a21      	ldr	r2, [pc, #132]	; (8004b74 <TIM_OC1_SetConfig+0xdc>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d003      	beq.n	8004afc <TIM_OC1_SetConfig+0x64>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a20      	ldr	r2, [pc, #128]	; (8004b78 <TIM_OC1_SetConfig+0xe0>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d10c      	bne.n	8004b16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004afc:	697b      	ldr	r3, [r7, #20]
 8004afe:	f023 0308 	bic.w	r3, r3, #8
 8004b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	697a      	ldr	r2, [r7, #20]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	f023 0304 	bic.w	r3, r3, #4
 8004b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a16      	ldr	r2, [pc, #88]	; (8004b74 <TIM_OC1_SetConfig+0xdc>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_OC1_SetConfig+0x8e>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a15      	ldr	r2, [pc, #84]	; (8004b78 <TIM_OC1_SetConfig+0xe0>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d111      	bne.n	8004b4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	695b      	ldr	r3, [r3, #20]
 8004b3a:	693a      	ldr	r2, [r7, #16]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	699b      	ldr	r3, [r3, #24]
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	693a      	ldr	r2, [r7, #16]
 8004b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	68fa      	ldr	r2, [r7, #12]
 8004b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	685a      	ldr	r2, [r3, #4]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	697a      	ldr	r2, [r7, #20]
 8004b62:	621a      	str	r2, [r3, #32]
}
 8004b64:	bf00      	nop
 8004b66:	371c      	adds	r7, #28
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6e:	4770      	bx	lr
 8004b70:	fffeff8f 	.word	0xfffeff8f
 8004b74:	40010000 	.word	0x40010000
 8004b78:	40010400 	.word	0x40010400

08004b7c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b7c:	b480      	push	{r7}
 8004b7e:	b087      	sub	sp, #28
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f023 0210 	bic.w	r2, r3, #16
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ba4:	68fa      	ldr	r2, [r7, #12]
 8004ba6:	4b2e      	ldr	r3, [pc, #184]	; (8004c60 <TIM_OC2_SetConfig+0xe4>)
 8004ba8:	4013      	ands	r3, r2
 8004baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bb2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	021b      	lsls	r3, r3, #8
 8004bba:	68fa      	ldr	r2, [r7, #12]
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	f023 0320 	bic.w	r3, r3, #32
 8004bc6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	011b      	lsls	r3, r3, #4
 8004bce:	697a      	ldr	r2, [r7, #20]
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	4a23      	ldr	r2, [pc, #140]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004bd8:	4293      	cmp	r3, r2
 8004bda:	d003      	beq.n	8004be4 <TIM_OC2_SetConfig+0x68>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	4a22      	ldr	r2, [pc, #136]	; (8004c68 <TIM_OC2_SetConfig+0xec>)
 8004be0:	4293      	cmp	r3, r2
 8004be2:	d10d      	bne.n	8004c00 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	68db      	ldr	r3, [r3, #12]
 8004bf0:	011b      	lsls	r3, r3, #4
 8004bf2:	697a      	ldr	r2, [r7, #20]
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bfe:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	4a18      	ldr	r2, [pc, #96]	; (8004c64 <TIM_OC2_SetConfig+0xe8>)
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d003      	beq.n	8004c10 <TIM_OC2_SetConfig+0x94>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	4a17      	ldr	r2, [pc, #92]	; (8004c68 <TIM_OC2_SetConfig+0xec>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d113      	bne.n	8004c38 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004c16:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004c1e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	695b      	ldr	r3, [r3, #20]
 8004c24:	009b      	lsls	r3, r3, #2
 8004c26:	693a      	ldr	r2, [r7, #16]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	693a      	ldr	r2, [r7, #16]
 8004c34:	4313      	orrs	r3, r2
 8004c36:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	685a      	ldr	r2, [r3, #4]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	697a      	ldr	r2, [r7, #20]
 8004c50:	621a      	str	r2, [r3, #32]
}
 8004c52:	bf00      	nop
 8004c54:	371c      	adds	r7, #28
 8004c56:	46bd      	mov	sp, r7
 8004c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5c:	4770      	bx	lr
 8004c5e:	bf00      	nop
 8004c60:	feff8fff 	.word	0xfeff8fff
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40010400 	.word	0x40010400

08004c6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a1b      	ldr	r3, [r3, #32]
 8004c7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a1b      	ldr	r3, [r3, #32]
 8004c86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69db      	ldr	r3, [r3, #28]
 8004c92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4b2d      	ldr	r3, [pc, #180]	; (8004d4c <TIM_OC3_SetConfig+0xe0>)
 8004c98:	4013      	ands	r3, r2
 8004c9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f023 0303 	bic.w	r3, r3, #3
 8004ca2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68fa      	ldr	r2, [r7, #12]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004cb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	021b      	lsls	r3, r3, #8
 8004cbc:	697a      	ldr	r2, [r7, #20]
 8004cbe:	4313      	orrs	r3, r2
 8004cc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a22      	ldr	r2, [pc, #136]	; (8004d50 <TIM_OC3_SetConfig+0xe4>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d003      	beq.n	8004cd2 <TIM_OC3_SetConfig+0x66>
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	4a21      	ldr	r2, [pc, #132]	; (8004d54 <TIM_OC3_SetConfig+0xe8>)
 8004cce:	4293      	cmp	r3, r2
 8004cd0:	d10d      	bne.n	8004cee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	021b      	lsls	r3, r3, #8
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004cec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <TIM_OC3_SetConfig+0xe4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d003      	beq.n	8004cfe <TIM_OC3_SetConfig+0x92>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	4a16      	ldr	r2, [pc, #88]	; (8004d54 <TIM_OC3_SetConfig+0xe8>)
 8004cfa:	4293      	cmp	r3, r2
 8004cfc:	d113      	bne.n	8004d26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004cfe:	693b      	ldr	r3, [r7, #16]
 8004d00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	011b      	lsls	r3, r3, #4
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	699b      	ldr	r3, [r3, #24]
 8004d1e:	011b      	lsls	r3, r3, #4
 8004d20:	693a      	ldr	r2, [r7, #16]
 8004d22:	4313      	orrs	r3, r2
 8004d24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	693a      	ldr	r2, [r7, #16]
 8004d2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	685a      	ldr	r2, [r3, #4]
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	697a      	ldr	r2, [r7, #20]
 8004d3e:	621a      	str	r2, [r3, #32]
}
 8004d40:	bf00      	nop
 8004d42:	371c      	adds	r7, #28
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr
 8004d4c:	fffeff8f 	.word	0xfffeff8f
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40010400 	.word	0x40010400

08004d58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	69db      	ldr	r3, [r3, #28]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	4b1e      	ldr	r3, [pc, #120]	; (8004dfc <TIM_OC4_SetConfig+0xa4>)
 8004d84:	4013      	ands	r3, r2
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	68fa      	ldr	r2, [r7, #12]
 8004d98:	4313      	orrs	r3, r2
 8004d9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004da2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	031b      	lsls	r3, r3, #12
 8004daa:	693a      	ldr	r2, [r7, #16]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <TIM_OC4_SetConfig+0xa8>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d003      	beq.n	8004dc0 <TIM_OC4_SetConfig+0x68>
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	4a12      	ldr	r2, [pc, #72]	; (8004e04 <TIM_OC4_SetConfig+0xac>)
 8004dbc:	4293      	cmp	r3, r2
 8004dbe:	d109      	bne.n	8004dd4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004dc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	019b      	lsls	r3, r3, #6
 8004dce:	697a      	ldr	r2, [r7, #20]
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	697a      	ldr	r2, [r7, #20]
 8004dd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	68fa      	ldr	r2, [r7, #12]
 8004dde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685a      	ldr	r2, [r3, #4]
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	621a      	str	r2, [r3, #32]
}
 8004dee:	bf00      	nop
 8004df0:	371c      	adds	r7, #28
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr
 8004dfa:	bf00      	nop
 8004dfc:	feff8fff 	.word	0xfeff8fff
 8004e00:	40010000 	.word	0x40010000
 8004e04:	40010400 	.word	0x40010400

08004e08 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a1b      	ldr	r3, [r3, #32]
 8004e22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4b1b      	ldr	r3, [pc, #108]	; (8004ea0 <TIM_OC5_SetConfig+0x98>)
 8004e34:	4013      	ands	r3, r2
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004e42:	693b      	ldr	r3, [r7, #16]
 8004e44:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004e48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	041b      	lsls	r3, r3, #16
 8004e50:	693a      	ldr	r2, [r7, #16]
 8004e52:	4313      	orrs	r3, r2
 8004e54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	4a12      	ldr	r2, [pc, #72]	; (8004ea4 <TIM_OC5_SetConfig+0x9c>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d003      	beq.n	8004e66 <TIM_OC5_SetConfig+0x5e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	4a11      	ldr	r2, [pc, #68]	; (8004ea8 <TIM_OC5_SetConfig+0xa0>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d109      	bne.n	8004e7a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	021b      	lsls	r3, r3, #8
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	697a      	ldr	r2, [r7, #20]
 8004e7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	685a      	ldr	r2, [r3, #4]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	693a      	ldr	r2, [r7, #16]
 8004e92:	621a      	str	r2, [r3, #32]
}
 8004e94:	bf00      	nop
 8004e96:	371c      	adds	r7, #28
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr
 8004ea0:	fffeff8f 	.word	0xfffeff8f
 8004ea4:	40010000 	.word	0x40010000
 8004ea8:	40010400 	.word	0x40010400

08004eac <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004eac:	b480      	push	{r7}
 8004eae:	b087      	sub	sp, #28
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
 8004eba:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
 8004ec6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004ed4:	68fa      	ldr	r2, [r7, #12]
 8004ed6:	4b1c      	ldr	r3, [pc, #112]	; (8004f48 <TIM_OC6_SetConfig+0x9c>)
 8004ed8:	4013      	ands	r3, r2
 8004eda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	021b      	lsls	r3, r3, #8
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004eee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	051b      	lsls	r3, r3, #20
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	4313      	orrs	r3, r2
 8004efa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	4a13      	ldr	r2, [pc, #76]	; (8004f4c <TIM_OC6_SetConfig+0xa0>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d003      	beq.n	8004f0c <TIM_OC6_SetConfig+0x60>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a12      	ldr	r2, [pc, #72]	; (8004f50 <TIM_OC6_SetConfig+0xa4>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d109      	bne.n	8004f20 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8004f0c:	697b      	ldr	r3, [r7, #20]
 8004f0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f12:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	695b      	ldr	r3, [r3, #20]
 8004f18:	029b      	lsls	r3, r3, #10
 8004f1a:	697a      	ldr	r2, [r7, #20]
 8004f1c:	4313      	orrs	r3, r2
 8004f1e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	697a      	ldr	r2, [r7, #20]
 8004f24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685a      	ldr	r2, [r3, #4]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	693a      	ldr	r2, [r7, #16]
 8004f38:	621a      	str	r2, [r3, #32]
}
 8004f3a:	bf00      	nop
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	feff8fff 	.word	0xfeff8fff
 8004f4c:	40010000 	.word	0x40010000
 8004f50:	40010400 	.word	0x40010400

08004f54 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b087      	sub	sp, #28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	60f8      	str	r0, [r7, #12]
 8004f5c:	60b9      	str	r1, [r7, #8]
 8004f5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a1b      	ldr	r3, [r3, #32]
 8004f64:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	6a1b      	ldr	r3, [r3, #32]
 8004f6a:	f023 0201 	bic.w	r2, r3, #1
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	699b      	ldr	r3, [r3, #24]
 8004f76:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f78:	693b      	ldr	r3, [r7, #16]
 8004f7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004f7e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	693a      	ldr	r2, [r7, #16]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f023 030a 	bic.w	r3, r3, #10
 8004f90:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f92:	697a      	ldr	r2, [r7, #20]
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	697a      	ldr	r2, [r7, #20]
 8004fa4:	621a      	str	r2, [r3, #32]
}
 8004fa6:	bf00      	nop
 8004fa8:	371c      	adds	r7, #28
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr

08004fb2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004fb2:	b480      	push	{r7}
 8004fb4:	b087      	sub	sp, #28
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	6a1b      	ldr	r3, [r3, #32]
 8004fc2:	f023 0210 	bic.w	r2, r3, #16
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	699b      	ldr	r3, [r3, #24]
 8004fce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	6a1b      	ldr	r3, [r3, #32]
 8004fd4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004fd6:	697b      	ldr	r3, [r7, #20]
 8004fd8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004fdc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	031b      	lsls	r3, r3, #12
 8004fe2:	697a      	ldr	r2, [r7, #20]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004fee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	693a      	ldr	r2, [r7, #16]
 8004ff6:	4313      	orrs	r3, r2
 8004ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	697a      	ldr	r2, [r7, #20]
 8004ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	693a      	ldr	r2, [r7, #16]
 8005004:	621a      	str	r2, [r3, #32]
}
 8005006:	bf00      	nop
 8005008:	371c      	adds	r7, #28
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800502a:	683a      	ldr	r2, [r7, #0]
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	4313      	orrs	r3, r2
 8005030:	f043 0307 	orr.w	r3, r3, #7
 8005034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	68fa      	ldr	r2, [r7, #12]
 800503a:	609a      	str	r2, [r3, #8]
}
 800503c:	bf00      	nop
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005046:	4770      	bx	lr

08005048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005048:	b480      	push	{r7}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
 8005054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	021a      	lsls	r2, r3, #8
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	431a      	orrs	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	4313      	orrs	r3, r2
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	4313      	orrs	r3, r2
 8005074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	697a      	ldr	r2, [r7, #20]
 800507a:	609a      	str	r2, [r3, #8]
}
 800507c:	bf00      	nop
 800507e:	371c      	adds	r7, #28
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr

08005088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f003 031f 	and.w	r3, r3, #31
 800509a:	2201      	movs	r2, #1
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6a1a      	ldr	r2, [r3, #32]
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	401a      	ands	r2, r3
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6a1a      	ldr	r2, [r3, #32]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	f003 031f 	and.w	r3, r3, #31
 80050ba:	6879      	ldr	r1, [r7, #4]
 80050bc:	fa01 f303 	lsl.w	r3, r1, r3
 80050c0:	431a      	orrs	r2, r3
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]
}
 80050c6:	bf00      	nop
 80050c8:	371c      	adds	r7, #28
 80050ca:	46bd      	mov	sp, r7
 80050cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d0:	4770      	bx	lr
	...

080050d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
 80050dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d101      	bne.n	80050ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80050e8:	2302      	movs	r3, #2
 80050ea:	e06d      	b.n	80051c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	2201      	movs	r2, #1
 80050f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2202      	movs	r2, #2
 80050f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a30      	ldr	r2, [pc, #192]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d004      	beq.n	8005120 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a2f      	ldr	r2, [pc, #188]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d108      	bne.n	8005132 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005126:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	68fa      	ldr	r2, [r7, #12]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005138:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	4313      	orrs	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a20      	ldr	r2, [pc, #128]	; (80051d4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d022      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800515e:	d01d      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	4a1d      	ldr	r2, [pc, #116]	; (80051dc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d018      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1c      	ldr	r2, [pc, #112]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d013      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1a      	ldr	r2, [pc, #104]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d00e      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a15      	ldr	r2, [pc, #84]	; (80051d8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d009      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a16      	ldr	r2, [pc, #88]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d004      	beq.n	800519c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a15      	ldr	r2, [pc, #84]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d10c      	bne.n	80051b6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2201      	movs	r2, #1
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051c6:	2300      	movs	r3, #0
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3714      	adds	r7, #20
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr
 80051d4:	40010000 	.word	0x40010000
 80051d8:	40010400 	.word	0x40010400
 80051dc:	40000400 	.word	0x40000400
 80051e0:	40000800 	.word	0x40000800
 80051e4:	40000c00 	.word	0x40000c00
 80051e8:	40014000 	.word	0x40014000
 80051ec:	40001800 	.word	0x40001800

080051f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800520c:	bf00      	nop
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005220:	bf00      	nop
 8005222:	370c      	adds	r7, #12
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e040      	b.n	80052c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7fc f9c4 	bl	80015dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	2224      	movs	r2, #36	; 0x24
 8005258:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f022 0201 	bic.w	r2, r2, #1
 8005268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 fba2 	bl	80059b4 <UART_SetConfig>
 8005270:	4603      	mov	r3, r0
 8005272:	2b01      	cmp	r3, #1
 8005274:	d101      	bne.n	800527a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e022      	b.n	80052c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527e:	2b00      	cmp	r3, #0
 8005280:	d002      	beq.n	8005288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f000 fdfa 	bl	8005e7c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	681a      	ldr	r2, [r3, #0]
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f042 0201 	orr.w	r2, r2, #1
 80052b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 fe81 	bl	8005fc0 <UART_CheckIdleState>
 80052be:	4603      	mov	r3, r0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3708      	adds	r7, #8
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b08a      	sub	sp, #40	; 0x28
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	60b9      	str	r1, [r7, #8]
 80052d2:	603b      	str	r3, [r7, #0]
 80052d4:	4613      	mov	r3, r2
 80052d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80052dc:	2b20      	cmp	r3, #32
 80052de:	d171      	bne.n	80053c4 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80052e0:	68bb      	ldr	r3, [r7, #8]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d002      	beq.n	80052ec <HAL_UART_Transmit+0x24>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d101      	bne.n	80052f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e06a      	b.n	80053c6 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2221      	movs	r2, #33	; 0x21
 80052fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80052fe:	f7fc fa4f 	bl	80017a0 <HAL_GetTick>
 8005302:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	88fa      	ldrh	r2, [r7, #6]
 8005308:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	88fa      	ldrh	r2, [r7, #6]
 8005310:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800531c:	d108      	bne.n	8005330 <HAL_UART_Transmit+0x68>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d104      	bne.n	8005330 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005326:	2300      	movs	r3, #0
 8005328:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800532a:	68bb      	ldr	r3, [r7, #8]
 800532c:	61bb      	str	r3, [r7, #24]
 800532e:	e003      	b.n	8005338 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005338:	e02c      	b.n	8005394 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	9300      	str	r3, [sp, #0]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	2200      	movs	r2, #0
 8005342:	2180      	movs	r1, #128	; 0x80
 8005344:	68f8      	ldr	r0, [r7, #12]
 8005346:	f000 fe72 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d001      	beq.n	8005354 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	e038      	b.n	80053c6 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10b      	bne.n	8005372 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	881b      	ldrh	r3, [r3, #0]
 800535e:	461a      	mov	r2, r3
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005368:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800536a:	69bb      	ldr	r3, [r7, #24]
 800536c:	3302      	adds	r3, #2
 800536e:	61bb      	str	r3, [r7, #24]
 8005370:	e007      	b.n	8005382 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	781a      	ldrb	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	3301      	adds	r3, #1
 8005380:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8005388:	b29b      	uxth	r3, r3
 800538a:	3b01      	subs	r3, #1
 800538c:	b29a      	uxth	r2, r3
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800539a:	b29b      	uxth	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d1cc      	bne.n	800533a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	9300      	str	r3, [sp, #0]
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	2200      	movs	r2, #0
 80053a8:	2140      	movs	r1, #64	; 0x40
 80053aa:	68f8      	ldr	r0, [r7, #12]
 80053ac:	f000 fe3f 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e005      	b.n	80053c6 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2220      	movs	r2, #32
 80053be:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80053c0:	2300      	movs	r3, #0
 80053c2:	e000      	b.n	80053c6 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80053c4:	2302      	movs	r3, #2
  }
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3720      	adds	r7, #32
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b0ba      	sub	sp, #232	; 0xe8
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80053f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80053fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80053fe:	4013      	ands	r3, r2
 8005400:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005404:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005408:	2b00      	cmp	r3, #0
 800540a:	d115      	bne.n	8005438 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800540c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005410:	f003 0320 	and.w	r3, r3, #32
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00f      	beq.n	8005438 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005418:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800541c:	f003 0320 	and.w	r3, r3, #32
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 8297 	beq.w	800595c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	4798      	blx	r3
      }
      return;
 8005436:	e291      	b.n	800595c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005438:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800543c:	2b00      	cmp	r3, #0
 800543e:	f000 8117 	beq.w	8005670 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005446:	f003 0301 	and.w	r3, r3, #1
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800544e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005452:	4b85      	ldr	r3, [pc, #532]	; (8005668 <HAL_UART_IRQHandler+0x298>)
 8005454:	4013      	ands	r3, r2
 8005456:	2b00      	cmp	r3, #0
 8005458:	f000 810a 	beq.w	8005670 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800545c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005460:	f003 0301 	and.w	r3, r3, #1
 8005464:	2b00      	cmp	r3, #0
 8005466:	d011      	beq.n	800548c <HAL_UART_IRQHandler+0xbc>
 8005468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800546c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00b      	beq.n	800548c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2201      	movs	r2, #1
 800547a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005482:	f043 0201 	orr.w	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800548c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005490:	f003 0302 	and.w	r3, r3, #2
 8005494:	2b00      	cmp	r3, #0
 8005496:	d011      	beq.n	80054bc <HAL_UART_IRQHandler+0xec>
 8005498:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549c:	f003 0301 	and.w	r3, r3, #1
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d00b      	beq.n	80054bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2202      	movs	r2, #2
 80054aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054b2:	f043 0204 	orr.w	r2, r3, #4
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c0:	f003 0304 	and.w	r3, r3, #4
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d011      	beq.n	80054ec <HAL_UART_IRQHandler+0x11c>
 80054c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054cc:	f003 0301 	and.w	r3, r3, #1
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d00b      	beq.n	80054ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	2204      	movs	r2, #4
 80054da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054e2:	f043 0202 	orr.w	r2, r3, #2
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80054ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054f0:	f003 0308 	and.w	r3, r3, #8
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d017      	beq.n	8005528 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80054f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b00      	cmp	r3, #0
 8005502:	d105      	bne.n	8005510 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005504:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005508:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00b      	beq.n	8005528 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	2208      	movs	r2, #8
 8005516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800551e:	f043 0208 	orr.w	r2, r3, #8
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800552c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005530:	2b00      	cmp	r3, #0
 8005532:	d012      	beq.n	800555a <HAL_UART_IRQHandler+0x18a>
 8005534:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005538:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00c      	beq.n	800555a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005548:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005560:	2b00      	cmp	r3, #0
 8005562:	f000 81fd 	beq.w	8005960 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800556a:	f003 0320 	and.w	r3, r3, #32
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00d      	beq.n	800558e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005576:	f003 0320 	and.w	r3, r3, #32
 800557a:	2b00      	cmp	r3, #0
 800557c:	d007      	beq.n	800558e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005582:	2b00      	cmp	r3, #0
 8005584:	d003      	beq.n	800558e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005594:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b40      	cmp	r3, #64	; 0x40
 80055a4:	d005      	beq.n	80055b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80055a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d04f      	beq.n	8005652 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 fe01 	bl	80061ba <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055c2:	2b40      	cmp	r3, #64	; 0x40
 80055c4:	d141      	bne.n	800564a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	3308      	adds	r3, #8
 80055cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055d4:	e853 3f00 	ldrex	r3, [r3]
 80055d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	3308      	adds	r3, #8
 80055ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005602:	e841 2300 	strex	r3, r2, [r1]
 8005606:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800560a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800560e:	2b00      	cmp	r3, #0
 8005610:	d1d9      	bne.n	80055c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005616:	2b00      	cmp	r3, #0
 8005618:	d013      	beq.n	8005642 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800561e:	4a13      	ldr	r2, [pc, #76]	; (800566c <HAL_UART_IRQHandler+0x29c>)
 8005620:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005626:	4618      	mov	r0, r3
 8005628:	f7fc fa6b 	bl	8001b02 <HAL_DMA_Abort_IT>
 800562c:	4603      	mov	r3, r0
 800562e:	2b00      	cmp	r3, #0
 8005630:	d017      	beq.n	8005662 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005636:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800563c:	4610      	mov	r0, r2
 800563e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005640:	e00f      	b.n	8005662 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f000 f9a0 	bl	8005988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005648:	e00b      	b.n	8005662 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800564a:	6878      	ldr	r0, [r7, #4]
 800564c:	f000 f99c 	bl	8005988 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005650:	e007      	b.n	8005662 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f000 f998 	bl	8005988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005660:	e17e      	b.n	8005960 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005662:	bf00      	nop
    return;
 8005664:	e17c      	b.n	8005960 <HAL_UART_IRQHandler+0x590>
 8005666:	bf00      	nop
 8005668:	04000120 	.word	0x04000120
 800566c:	08006283 	.word	0x08006283

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005674:	2b01      	cmp	r3, #1
 8005676:	f040 814c 	bne.w	8005912 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800567a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567e:	f003 0310 	and.w	r3, r3, #16
 8005682:	2b00      	cmp	r3, #0
 8005684:	f000 8145 	beq.w	8005912 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800568c:	f003 0310 	and.w	r3, r3, #16
 8005690:	2b00      	cmp	r3, #0
 8005692:	f000 813e 	beq.w	8005912 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	2210      	movs	r2, #16
 800569c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056a8:	2b40      	cmp	r3, #64	; 0x40
 80056aa:	f040 80b6 	bne.w	800581a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	685b      	ldr	r3, [r3, #4]
 80056b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 8150 	beq.w	8005964 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80056ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ce:	429a      	cmp	r2, r3
 80056d0:	f080 8148 	bcs.w	8005964 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056e2:	69db      	ldr	r3, [r3, #28]
 80056e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056e8:	f000 8086 	beq.w	80057f8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056f8:	e853 3f00 	ldrex	r3, [r3]
 80056fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005700:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005704:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005708:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	461a      	mov	r2, r3
 8005712:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005716:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800571a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800571e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005722:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800572e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1da      	bne.n	80056ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	3308      	adds	r3, #8
 800573c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800573e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005740:	e853 3f00 	ldrex	r3, [r3]
 8005744:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005746:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005748:	f023 0301 	bic.w	r3, r3, #1
 800574c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	3308      	adds	r3, #8
 8005756:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800575a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800575e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005760:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005762:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005766:	e841 2300 	strex	r3, r2, [r1]
 800576a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800576c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1e1      	bne.n	8005736 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	3308      	adds	r3, #8
 8005778:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800577a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800577c:	e853 3f00 	ldrex	r3, [r3]
 8005780:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005782:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005788:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3308      	adds	r3, #8
 8005792:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005796:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005798:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800579a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800579c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800579e:	e841 2300 	strex	r3, r2, [r1]
 80057a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80057a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d1e3      	bne.n	8005772 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2220      	movs	r2, #32
 80057ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2200      	movs	r2, #0
 80057b6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057c8:	f023 0310 	bic.w	r3, r3, #16
 80057cc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	461a      	mov	r2, r3
 80057d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80057da:	65bb      	str	r3, [r7, #88]	; 0x58
 80057dc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057e0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e4      	bne.n	80057b8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fc f915 	bl	8001a22 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800580a:	b29b      	uxth	r3, r3
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	b29b      	uxth	r3, r3
 8005810:	4619      	mov	r1, r3
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 f8c2 	bl	800599c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005818:	e0a4      	b.n	8005964 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005826:	b29b      	uxth	r3, r3
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	f000 8096 	beq.w	8005968 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800583c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005840:	2b00      	cmp	r3, #0
 8005842:	f000 8091 	beq.w	8005968 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	e853 3f00 	ldrex	r3, [r3]
 8005852:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005856:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800585a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005868:	647b      	str	r3, [r7, #68]	; 0x44
 800586a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800586c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005870:	e841 2300 	strex	r3, r2, [r1]
 8005874:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005876:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005878:	2b00      	cmp	r3, #0
 800587a:	d1e4      	bne.n	8005846 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	3308      	adds	r3, #8
 8005882:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	623b      	str	r3, [r7, #32]
   return(result);
 800588c:	6a3b      	ldr	r3, [r7, #32]
 800588e:	f023 0301 	bic.w	r3, r3, #1
 8005892:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	3308      	adds	r3, #8
 800589c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80058a0:	633a      	str	r2, [r7, #48]	; 0x30
 80058a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80058a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058a8:	e841 2300 	strex	r3, r2, [r1]
 80058ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d1e3      	bne.n	800587c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2200      	movs	r2, #0
 80058c6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	e853 3f00 	ldrex	r3, [r3]
 80058d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f023 0310 	bic.w	r3, r3, #16
 80058dc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	461a      	mov	r2, r3
 80058e6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80058ea:	61fb      	str	r3, [r7, #28]
 80058ec:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	69b9      	ldr	r1, [r7, #24]
 80058f0:	69fa      	ldr	r2, [r7, #28]
 80058f2:	e841 2300 	strex	r3, r2, [r1]
 80058f6:	617b      	str	r3, [r7, #20]
   return(result);
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d1e4      	bne.n	80058c8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2202      	movs	r2, #2
 8005902:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005908:	4619      	mov	r1, r3
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f000 f846 	bl	800599c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005910:	e02a      	b.n	8005968 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00e      	beq.n	800593c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800591e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005926:	2b00      	cmp	r3, #0
 8005928:	d008      	beq.n	800593c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800592e:	2b00      	cmp	r3, #0
 8005930:	d01c      	beq.n	800596c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005936:	6878      	ldr	r0, [r7, #4]
 8005938:	4798      	blx	r3
    }
    return;
 800593a:	e017      	b.n	800596c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800593c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005944:	2b00      	cmp	r3, #0
 8005946:	d012      	beq.n	800596e <HAL_UART_IRQHandler+0x59e>
 8005948:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00c      	beq.n	800596e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f000 fcaa 	bl	80062ae <UART_EndTransmit_IT>
    return;
 800595a:	e008      	b.n	800596e <HAL_UART_IRQHandler+0x59e>
      return;
 800595c:	bf00      	nop
 800595e:	e006      	b.n	800596e <HAL_UART_IRQHandler+0x59e>
    return;
 8005960:	bf00      	nop
 8005962:	e004      	b.n	800596e <HAL_UART_IRQHandler+0x59e>
      return;
 8005964:	bf00      	nop
 8005966:	e002      	b.n	800596e <HAL_UART_IRQHandler+0x59e>
      return;
 8005968:	bf00      	nop
 800596a:	e000      	b.n	800596e <HAL_UART_IRQHandler+0x59e>
    return;
 800596c:	bf00      	nop
  }

}
 800596e:	37e8      	adds	r7, #232	; 0xe8
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800597c:	bf00      	nop
 800597e:	370c      	adds	r7, #12
 8005980:	46bd      	mov	sp, r7
 8005982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005986:	4770      	bx	lr

08005988 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005990:	bf00      	nop
 8005992:	370c      	adds	r7, #12
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr

0800599c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	460b      	mov	r3, r1
 80059a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80059a8:	bf00      	nop
 80059aa:	370c      	adds	r7, #12
 80059ac:	46bd      	mov	sp, r7
 80059ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b2:	4770      	bx	lr

080059b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b088      	sub	sp, #32
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80059bc:	2300      	movs	r3, #0
 80059be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	691b      	ldr	r3, [r3, #16]
 80059c8:	431a      	orrs	r2, r3
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	695b      	ldr	r3, [r3, #20]
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	69db      	ldr	r3, [r3, #28]
 80059d4:	4313      	orrs	r3, r2
 80059d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	681a      	ldr	r2, [r3, #0]
 80059de:	4ba6      	ldr	r3, [pc, #664]	; (8005c78 <UART_SetConfig+0x2c4>)
 80059e0:	4013      	ands	r3, r2
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	6812      	ldr	r2, [r2, #0]
 80059e6:	6979      	ldr	r1, [r7, #20]
 80059e8:	430b      	orrs	r3, r1
 80059ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	699b      	ldr	r3, [r3, #24]
 8005a06:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a1b      	ldr	r3, [r3, #32]
 8005a0c:	697a      	ldr	r2, [r7, #20]
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	430a      	orrs	r2, r1
 8005a24:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a94      	ldr	r2, [pc, #592]	; (8005c7c <UART_SetConfig+0x2c8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d120      	bne.n	8005a72 <UART_SetConfig+0xbe>
 8005a30:	4b93      	ldr	r3, [pc, #588]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a36:	f003 0303 	and.w	r3, r3, #3
 8005a3a:	2b03      	cmp	r3, #3
 8005a3c:	d816      	bhi.n	8005a6c <UART_SetConfig+0xb8>
 8005a3e:	a201      	add	r2, pc, #4	; (adr r2, 8005a44 <UART_SetConfig+0x90>)
 8005a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a44:	08005a55 	.word	0x08005a55
 8005a48:	08005a61 	.word	0x08005a61
 8005a4c:	08005a5b 	.word	0x08005a5b
 8005a50:	08005a67 	.word	0x08005a67
 8005a54:	2301      	movs	r3, #1
 8005a56:	77fb      	strb	r3, [r7, #31]
 8005a58:	e150      	b.n	8005cfc <UART_SetConfig+0x348>
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	77fb      	strb	r3, [r7, #31]
 8005a5e:	e14d      	b.n	8005cfc <UART_SetConfig+0x348>
 8005a60:	2304      	movs	r3, #4
 8005a62:	77fb      	strb	r3, [r7, #31]
 8005a64:	e14a      	b.n	8005cfc <UART_SetConfig+0x348>
 8005a66:	2308      	movs	r3, #8
 8005a68:	77fb      	strb	r3, [r7, #31]
 8005a6a:	e147      	b.n	8005cfc <UART_SetConfig+0x348>
 8005a6c:	2310      	movs	r3, #16
 8005a6e:	77fb      	strb	r3, [r7, #31]
 8005a70:	e144      	b.n	8005cfc <UART_SetConfig+0x348>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	4a83      	ldr	r2, [pc, #524]	; (8005c84 <UART_SetConfig+0x2d0>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d132      	bne.n	8005ae2 <UART_SetConfig+0x12e>
 8005a7c:	4b80      	ldr	r3, [pc, #512]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a82:	f003 030c 	and.w	r3, r3, #12
 8005a86:	2b0c      	cmp	r3, #12
 8005a88:	d828      	bhi.n	8005adc <UART_SetConfig+0x128>
 8005a8a:	a201      	add	r2, pc, #4	; (adr r2, 8005a90 <UART_SetConfig+0xdc>)
 8005a8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a90:	08005ac5 	.word	0x08005ac5
 8005a94:	08005add 	.word	0x08005add
 8005a98:	08005add 	.word	0x08005add
 8005a9c:	08005add 	.word	0x08005add
 8005aa0:	08005ad1 	.word	0x08005ad1
 8005aa4:	08005add 	.word	0x08005add
 8005aa8:	08005add 	.word	0x08005add
 8005aac:	08005add 	.word	0x08005add
 8005ab0:	08005acb 	.word	0x08005acb
 8005ab4:	08005add 	.word	0x08005add
 8005ab8:	08005add 	.word	0x08005add
 8005abc:	08005add 	.word	0x08005add
 8005ac0:	08005ad7 	.word	0x08005ad7
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	77fb      	strb	r3, [r7, #31]
 8005ac8:	e118      	b.n	8005cfc <UART_SetConfig+0x348>
 8005aca:	2302      	movs	r3, #2
 8005acc:	77fb      	strb	r3, [r7, #31]
 8005ace:	e115      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ad0:	2304      	movs	r3, #4
 8005ad2:	77fb      	strb	r3, [r7, #31]
 8005ad4:	e112      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ad6:	2308      	movs	r3, #8
 8005ad8:	77fb      	strb	r3, [r7, #31]
 8005ada:	e10f      	b.n	8005cfc <UART_SetConfig+0x348>
 8005adc:	2310      	movs	r3, #16
 8005ade:	77fb      	strb	r3, [r7, #31]
 8005ae0:	e10c      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a68      	ldr	r2, [pc, #416]	; (8005c88 <UART_SetConfig+0x2d4>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d120      	bne.n	8005b2e <UART_SetConfig+0x17a>
 8005aec:	4b64      	ldr	r3, [pc, #400]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005af2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005af6:	2b30      	cmp	r3, #48	; 0x30
 8005af8:	d013      	beq.n	8005b22 <UART_SetConfig+0x16e>
 8005afa:	2b30      	cmp	r3, #48	; 0x30
 8005afc:	d814      	bhi.n	8005b28 <UART_SetConfig+0x174>
 8005afe:	2b20      	cmp	r3, #32
 8005b00:	d009      	beq.n	8005b16 <UART_SetConfig+0x162>
 8005b02:	2b20      	cmp	r3, #32
 8005b04:	d810      	bhi.n	8005b28 <UART_SetConfig+0x174>
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d002      	beq.n	8005b10 <UART_SetConfig+0x15c>
 8005b0a:	2b10      	cmp	r3, #16
 8005b0c:	d006      	beq.n	8005b1c <UART_SetConfig+0x168>
 8005b0e:	e00b      	b.n	8005b28 <UART_SetConfig+0x174>
 8005b10:	2300      	movs	r3, #0
 8005b12:	77fb      	strb	r3, [r7, #31]
 8005b14:	e0f2      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
 8005b1a:	e0ef      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b1c:	2304      	movs	r3, #4
 8005b1e:	77fb      	strb	r3, [r7, #31]
 8005b20:	e0ec      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b22:	2308      	movs	r3, #8
 8005b24:	77fb      	strb	r3, [r7, #31]
 8005b26:	e0e9      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b28:	2310      	movs	r3, #16
 8005b2a:	77fb      	strb	r3, [r7, #31]
 8005b2c:	e0e6      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a56      	ldr	r2, [pc, #344]	; (8005c8c <UART_SetConfig+0x2d8>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d120      	bne.n	8005b7a <UART_SetConfig+0x1c6>
 8005b38:	4b51      	ldr	r3, [pc, #324]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b3e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005b42:	2bc0      	cmp	r3, #192	; 0xc0
 8005b44:	d013      	beq.n	8005b6e <UART_SetConfig+0x1ba>
 8005b46:	2bc0      	cmp	r3, #192	; 0xc0
 8005b48:	d814      	bhi.n	8005b74 <UART_SetConfig+0x1c0>
 8005b4a:	2b80      	cmp	r3, #128	; 0x80
 8005b4c:	d009      	beq.n	8005b62 <UART_SetConfig+0x1ae>
 8005b4e:	2b80      	cmp	r3, #128	; 0x80
 8005b50:	d810      	bhi.n	8005b74 <UART_SetConfig+0x1c0>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d002      	beq.n	8005b5c <UART_SetConfig+0x1a8>
 8005b56:	2b40      	cmp	r3, #64	; 0x40
 8005b58:	d006      	beq.n	8005b68 <UART_SetConfig+0x1b4>
 8005b5a:	e00b      	b.n	8005b74 <UART_SetConfig+0x1c0>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	77fb      	strb	r3, [r7, #31]
 8005b60:	e0cc      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b62:	2302      	movs	r3, #2
 8005b64:	77fb      	strb	r3, [r7, #31]
 8005b66:	e0c9      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b68:	2304      	movs	r3, #4
 8005b6a:	77fb      	strb	r3, [r7, #31]
 8005b6c:	e0c6      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b6e:	2308      	movs	r3, #8
 8005b70:	77fb      	strb	r3, [r7, #31]
 8005b72:	e0c3      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b74:	2310      	movs	r3, #16
 8005b76:	77fb      	strb	r3, [r7, #31]
 8005b78:	e0c0      	b.n	8005cfc <UART_SetConfig+0x348>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	4a44      	ldr	r2, [pc, #272]	; (8005c90 <UART_SetConfig+0x2dc>)
 8005b80:	4293      	cmp	r3, r2
 8005b82:	d125      	bne.n	8005bd0 <UART_SetConfig+0x21c>
 8005b84:	4b3e      	ldr	r3, [pc, #248]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005b86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005b8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b92:	d017      	beq.n	8005bc4 <UART_SetConfig+0x210>
 8005b94:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b98:	d817      	bhi.n	8005bca <UART_SetConfig+0x216>
 8005b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b9e:	d00b      	beq.n	8005bb8 <UART_SetConfig+0x204>
 8005ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ba4:	d811      	bhi.n	8005bca <UART_SetConfig+0x216>
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d003      	beq.n	8005bb2 <UART_SetConfig+0x1fe>
 8005baa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bae:	d006      	beq.n	8005bbe <UART_SetConfig+0x20a>
 8005bb0:	e00b      	b.n	8005bca <UART_SetConfig+0x216>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	77fb      	strb	r3, [r7, #31]
 8005bb6:	e0a1      	b.n	8005cfc <UART_SetConfig+0x348>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	77fb      	strb	r3, [r7, #31]
 8005bbc:	e09e      	b.n	8005cfc <UART_SetConfig+0x348>
 8005bbe:	2304      	movs	r3, #4
 8005bc0:	77fb      	strb	r3, [r7, #31]
 8005bc2:	e09b      	b.n	8005cfc <UART_SetConfig+0x348>
 8005bc4:	2308      	movs	r3, #8
 8005bc6:	77fb      	strb	r3, [r7, #31]
 8005bc8:	e098      	b.n	8005cfc <UART_SetConfig+0x348>
 8005bca:	2310      	movs	r3, #16
 8005bcc:	77fb      	strb	r3, [r7, #31]
 8005bce:	e095      	b.n	8005cfc <UART_SetConfig+0x348>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a2f      	ldr	r2, [pc, #188]	; (8005c94 <UART_SetConfig+0x2e0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d125      	bne.n	8005c26 <UART_SetConfig+0x272>
 8005bda:	4b29      	ldr	r3, [pc, #164]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005be0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005be4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005be8:	d017      	beq.n	8005c1a <UART_SetConfig+0x266>
 8005bea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005bee:	d817      	bhi.n	8005c20 <UART_SetConfig+0x26c>
 8005bf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf4:	d00b      	beq.n	8005c0e <UART_SetConfig+0x25a>
 8005bf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bfa:	d811      	bhi.n	8005c20 <UART_SetConfig+0x26c>
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <UART_SetConfig+0x254>
 8005c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c04:	d006      	beq.n	8005c14 <UART_SetConfig+0x260>
 8005c06:	e00b      	b.n	8005c20 <UART_SetConfig+0x26c>
 8005c08:	2301      	movs	r3, #1
 8005c0a:	77fb      	strb	r3, [r7, #31]
 8005c0c:	e076      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	77fb      	strb	r3, [r7, #31]
 8005c12:	e073      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c14:	2304      	movs	r3, #4
 8005c16:	77fb      	strb	r3, [r7, #31]
 8005c18:	e070      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c1a:	2308      	movs	r3, #8
 8005c1c:	77fb      	strb	r3, [r7, #31]
 8005c1e:	e06d      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c20:	2310      	movs	r3, #16
 8005c22:	77fb      	strb	r3, [r7, #31]
 8005c24:	e06a      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	4a1b      	ldr	r2, [pc, #108]	; (8005c98 <UART_SetConfig+0x2e4>)
 8005c2c:	4293      	cmp	r3, r2
 8005c2e:	d138      	bne.n	8005ca2 <UART_SetConfig+0x2ee>
 8005c30:	4b13      	ldr	r3, [pc, #76]	; (8005c80 <UART_SetConfig+0x2cc>)
 8005c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005c36:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005c3a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c3e:	d017      	beq.n	8005c70 <UART_SetConfig+0x2bc>
 8005c40:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005c44:	d82a      	bhi.n	8005c9c <UART_SetConfig+0x2e8>
 8005c46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c4a:	d00b      	beq.n	8005c64 <UART_SetConfig+0x2b0>
 8005c4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c50:	d824      	bhi.n	8005c9c <UART_SetConfig+0x2e8>
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d003      	beq.n	8005c5e <UART_SetConfig+0x2aa>
 8005c56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c5a:	d006      	beq.n	8005c6a <UART_SetConfig+0x2b6>
 8005c5c:	e01e      	b.n	8005c9c <UART_SetConfig+0x2e8>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	77fb      	strb	r3, [r7, #31]
 8005c62:	e04b      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c64:	2302      	movs	r3, #2
 8005c66:	77fb      	strb	r3, [r7, #31]
 8005c68:	e048      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c6a:	2304      	movs	r3, #4
 8005c6c:	77fb      	strb	r3, [r7, #31]
 8005c6e:	e045      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c70:	2308      	movs	r3, #8
 8005c72:	77fb      	strb	r3, [r7, #31]
 8005c74:	e042      	b.n	8005cfc <UART_SetConfig+0x348>
 8005c76:	bf00      	nop
 8005c78:	efff69f3 	.word	0xefff69f3
 8005c7c:	40011000 	.word	0x40011000
 8005c80:	40023800 	.word	0x40023800
 8005c84:	40004400 	.word	0x40004400
 8005c88:	40004800 	.word	0x40004800
 8005c8c:	40004c00 	.word	0x40004c00
 8005c90:	40005000 	.word	0x40005000
 8005c94:	40011400 	.word	0x40011400
 8005c98:	40007800 	.word	0x40007800
 8005c9c:	2310      	movs	r3, #16
 8005c9e:	77fb      	strb	r3, [r7, #31]
 8005ca0:	e02c      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	4a72      	ldr	r2, [pc, #456]	; (8005e70 <UART_SetConfig+0x4bc>)
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d125      	bne.n	8005cf8 <UART_SetConfig+0x344>
 8005cac:	4b71      	ldr	r3, [pc, #452]	; (8005e74 <UART_SetConfig+0x4c0>)
 8005cae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005cb2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005cb6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cba:	d017      	beq.n	8005cec <UART_SetConfig+0x338>
 8005cbc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005cc0:	d817      	bhi.n	8005cf2 <UART_SetConfig+0x33e>
 8005cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005cc6:	d00b      	beq.n	8005ce0 <UART_SetConfig+0x32c>
 8005cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ccc:	d811      	bhi.n	8005cf2 <UART_SetConfig+0x33e>
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d003      	beq.n	8005cda <UART_SetConfig+0x326>
 8005cd2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005cd6:	d006      	beq.n	8005ce6 <UART_SetConfig+0x332>
 8005cd8:	e00b      	b.n	8005cf2 <UART_SetConfig+0x33e>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	77fb      	strb	r3, [r7, #31]
 8005cde:	e00d      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ce0:	2302      	movs	r3, #2
 8005ce2:	77fb      	strb	r3, [r7, #31]
 8005ce4:	e00a      	b.n	8005cfc <UART_SetConfig+0x348>
 8005ce6:	2304      	movs	r3, #4
 8005ce8:	77fb      	strb	r3, [r7, #31]
 8005cea:	e007      	b.n	8005cfc <UART_SetConfig+0x348>
 8005cec:	2308      	movs	r3, #8
 8005cee:	77fb      	strb	r3, [r7, #31]
 8005cf0:	e004      	b.n	8005cfc <UART_SetConfig+0x348>
 8005cf2:	2310      	movs	r3, #16
 8005cf4:	77fb      	strb	r3, [r7, #31]
 8005cf6:	e001      	b.n	8005cfc <UART_SetConfig+0x348>
 8005cf8:	2310      	movs	r3, #16
 8005cfa:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	69db      	ldr	r3, [r3, #28]
 8005d00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005d04:	d15b      	bne.n	8005dbe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8005d06:	7ffb      	ldrb	r3, [r7, #31]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d828      	bhi.n	8005d5e <UART_SetConfig+0x3aa>
 8005d0c:	a201      	add	r2, pc, #4	; (adr r2, 8005d14 <UART_SetConfig+0x360>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d39 	.word	0x08005d39
 8005d18:	08005d41 	.word	0x08005d41
 8005d1c:	08005d49 	.word	0x08005d49
 8005d20:	08005d5f 	.word	0x08005d5f
 8005d24:	08005d4f 	.word	0x08005d4f
 8005d28:	08005d5f 	.word	0x08005d5f
 8005d2c:	08005d5f 	.word	0x08005d5f
 8005d30:	08005d5f 	.word	0x08005d5f
 8005d34:	08005d57 	.word	0x08005d57
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d38:	f7fd fb70 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8005d3c:	61b8      	str	r0, [r7, #24]
        break;
 8005d3e:	e013      	b.n	8005d68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005d40:	f7fd fb80 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8005d44:	61b8      	str	r0, [r7, #24]
        break;
 8005d46:	e00f      	b.n	8005d68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d48:	4b4b      	ldr	r3, [pc, #300]	; (8005e78 <UART_SetConfig+0x4c4>)
 8005d4a:	61bb      	str	r3, [r7, #24]
        break;
 8005d4c:	e00c      	b.n	8005d68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005d4e:	f7fd fa53 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005d52:	61b8      	str	r0, [r7, #24]
        break;
 8005d54:	e008      	b.n	8005d68 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005d5a:	61bb      	str	r3, [r7, #24]
        break;
 8005d5c:	e004      	b.n	8005d68 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005d62:	2301      	movs	r3, #1
 8005d64:	77bb      	strb	r3, [r7, #30]
        break;
 8005d66:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d074      	beq.n	8005e58 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d6e:	69bb      	ldr	r3, [r7, #24]
 8005d70:	005a      	lsls	r2, r3, #1
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	685b      	ldr	r3, [r3, #4]
 8005d76:	085b      	lsrs	r3, r3, #1
 8005d78:	441a      	add	r2, r3
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d82:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	2b0f      	cmp	r3, #15
 8005d88:	d916      	bls.n	8005db8 <UART_SetConfig+0x404>
 8005d8a:	693b      	ldr	r3, [r7, #16]
 8005d8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d90:	d212      	bcs.n	8005db8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	f023 030f 	bic.w	r3, r3, #15
 8005d9a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	085b      	lsrs	r3, r3, #1
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	f003 0307 	and.w	r3, r3, #7
 8005da6:	b29a      	uxth	r2, r3
 8005da8:	89fb      	ldrh	r3, [r7, #14]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	89fa      	ldrh	r2, [r7, #14]
 8005db4:	60da      	str	r2, [r3, #12]
 8005db6:	e04f      	b.n	8005e58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	77bb      	strb	r3, [r7, #30]
 8005dbc:	e04c      	b.n	8005e58 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005dbe:	7ffb      	ldrb	r3, [r7, #31]
 8005dc0:	2b08      	cmp	r3, #8
 8005dc2:	d828      	bhi.n	8005e16 <UART_SetConfig+0x462>
 8005dc4:	a201      	add	r2, pc, #4	; (adr r2, 8005dcc <UART_SetConfig+0x418>)
 8005dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dca:	bf00      	nop
 8005dcc:	08005df1 	.word	0x08005df1
 8005dd0:	08005df9 	.word	0x08005df9
 8005dd4:	08005e01 	.word	0x08005e01
 8005dd8:	08005e17 	.word	0x08005e17
 8005ddc:	08005e07 	.word	0x08005e07
 8005de0:	08005e17 	.word	0x08005e17
 8005de4:	08005e17 	.word	0x08005e17
 8005de8:	08005e17 	.word	0x08005e17
 8005dec:	08005e0f 	.word	0x08005e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005df0:	f7fd fb14 	bl	800341c <HAL_RCC_GetPCLK1Freq>
 8005df4:	61b8      	str	r0, [r7, #24]
        break;
 8005df6:	e013      	b.n	8005e20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005df8:	f7fd fb24 	bl	8003444 <HAL_RCC_GetPCLK2Freq>
 8005dfc:	61b8      	str	r0, [r7, #24]
        break;
 8005dfe:	e00f      	b.n	8005e20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005e00:	4b1d      	ldr	r3, [pc, #116]	; (8005e78 <UART_SetConfig+0x4c4>)
 8005e02:	61bb      	str	r3, [r7, #24]
        break;
 8005e04:	e00c      	b.n	8005e20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005e06:	f7fd f9f7 	bl	80031f8 <HAL_RCC_GetSysClockFreq>
 8005e0a:	61b8      	str	r0, [r7, #24]
        break;
 8005e0c:	e008      	b.n	8005e20 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005e12:	61bb      	str	r3, [r7, #24]
        break;
 8005e14:	e004      	b.n	8005e20 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8005e16:	2300      	movs	r3, #0
 8005e18:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	77bb      	strb	r3, [r7, #30]
        break;
 8005e1e:	bf00      	nop
    }

    if (pclk != 0U)
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d018      	beq.n	8005e58 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	685b      	ldr	r3, [r3, #4]
 8005e2a:	085a      	lsrs	r2, r3, #1
 8005e2c:	69bb      	ldr	r3, [r7, #24]
 8005e2e:	441a      	add	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b0f      	cmp	r3, #15
 8005e3e:	d909      	bls.n	8005e54 <UART_SetConfig+0x4a0>
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005e46:	d205      	bcs.n	8005e54 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	b29a      	uxth	r2, r3
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60da      	str	r2, [r3, #12]
 8005e52:	e001      	b.n	8005e58 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8005e54:	2301      	movs	r3, #1
 8005e56:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2200      	movs	r2, #0
 8005e5c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e64:	7fbb      	ldrb	r3, [r7, #30]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3720      	adds	r7, #32
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	40007c00 	.word	0x40007c00
 8005e74:	40023800 	.word	0x40023800
 8005e78:	00f42400 	.word	0x00f42400

08005e7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e88:	f003 0301 	and.w	r3, r3, #1
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d00a      	beq.n	8005ea6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	430a      	orrs	r2, r1
 8005ea4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eaa:	f003 0302 	and.w	r3, r3, #2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d00a      	beq.n	8005ec8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ecc:	f003 0304 	and.w	r3, r3, #4
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d00a      	beq.n	8005eea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	430a      	orrs	r2, r1
 8005ee8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eee:	f003 0308 	and.w	r3, r3, #8
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	685b      	ldr	r3, [r3, #4]
 8005efc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	430a      	orrs	r2, r1
 8005f0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f10:	f003 0310 	and.w	r3, r3, #16
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	689b      	ldr	r3, [r3, #8]
 8005f1e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f32:	f003 0320 	and.w	r3, r3, #32
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	689b      	ldr	r3, [r3, #8]
 8005f40:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	430a      	orrs	r2, r1
 8005f4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d01a      	beq.n	8005f92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005f7a:	d10a      	bne.n	8005f92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	430a      	orrs	r2, r1
 8005f90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00a      	beq.n	8005fb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	430a      	orrs	r2, r1
 8005fb2:	605a      	str	r2, [r3, #4]
  }
}
 8005fb4:	bf00      	nop
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b086      	sub	sp, #24
 8005fc4:	af02      	add	r7, sp, #8
 8005fc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fd0:	f7fb fbe6 	bl	80017a0 <HAL_GetTick>
 8005fd4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f003 0308 	and.w	r3, r3, #8
 8005fe0:	2b08      	cmp	r3, #8
 8005fe2:	d10e      	bne.n	8006002 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fe4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005fe8:	9300      	str	r3, [sp, #0]
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005ff2:	6878      	ldr	r0, [r7, #4]
 8005ff4:	f000 f81b 	bl	800602e <UART_WaitOnFlagUntilTimeout>
 8005ff8:	4603      	mov	r3, r0
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d001      	beq.n	8006002 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005ffe:	2303      	movs	r3, #3
 8006000:	e011      	b.n	8006026 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2220      	movs	r2, #32
 8006006:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2220      	movs	r2, #32
 800600c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006024:	2300      	movs	r3, #0
}
 8006026:	4618      	mov	r0, r3
 8006028:	3710      	adds	r7, #16
 800602a:	46bd      	mov	sp, r7
 800602c:	bd80      	pop	{r7, pc}

0800602e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b09c      	sub	sp, #112	; 0x70
 8006032:	af00      	add	r7, sp, #0
 8006034:	60f8      	str	r0, [r7, #12]
 8006036:	60b9      	str	r1, [r7, #8]
 8006038:	603b      	str	r3, [r7, #0]
 800603a:	4613      	mov	r3, r2
 800603c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800603e:	e0a7      	b.n	8006190 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006040:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006046:	f000 80a3 	beq.w	8006190 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800604a:	f7fb fba9 	bl	80017a0 <HAL_GetTick>
 800604e:	4602      	mov	r2, r0
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	1ad3      	subs	r3, r2, r3
 8006054:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006056:	429a      	cmp	r2, r3
 8006058:	d302      	bcc.n	8006060 <UART_WaitOnFlagUntilTimeout+0x32>
 800605a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800605c:	2b00      	cmp	r3, #0
 800605e:	d13f      	bne.n	80060e0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006066:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006068:	e853 3f00 	ldrex	r3, [r3]
 800606c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800606e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006070:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006074:	667b      	str	r3, [r7, #100]	; 0x64
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	461a      	mov	r2, r3
 800607c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800607e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006080:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006082:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006084:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006086:	e841 2300 	strex	r3, r2, [r1]
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800608c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800608e:	2b00      	cmp	r3, #0
 8006090:	d1e6      	bne.n	8006060 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	3308      	adds	r3, #8
 8006098:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800609a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80060a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80060a4:	f023 0301 	bic.w	r3, r3, #1
 80060a8:	663b      	str	r3, [r7, #96]	; 0x60
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80060b2:	64ba      	str	r2, [r7, #72]	; 0x48
 80060b4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060b6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80060b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80060ba:	e841 2300 	strex	r3, r2, [r1]
 80060be:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80060c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d1e5      	bne.n	8006092 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2220      	movs	r2, #32
 80060ca:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2220      	movs	r2, #32
 80060d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80060dc:	2303      	movs	r3, #3
 80060de:	e068      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 0304 	and.w	r3, r3, #4
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d050      	beq.n	8006190 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80060ee:	68fb      	ldr	r3, [r7, #12]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	69db      	ldr	r3, [r3, #28]
 80060f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80060fc:	d148      	bne.n	8006190 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006106:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800610e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006110:	e853 3f00 	ldrex	r3, [r3]
 8006114:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006118:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800611c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	461a      	mov	r2, r3
 8006124:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006126:	637b      	str	r3, [r7, #52]	; 0x34
 8006128:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800612a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800612c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800612e:	e841 2300 	strex	r3, r2, [r1]
 8006132:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d1e6      	bne.n	8006108 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	3308      	adds	r3, #8
 8006140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006142:	697b      	ldr	r3, [r7, #20]
 8006144:	e853 3f00 	ldrex	r3, [r3]
 8006148:	613b      	str	r3, [r7, #16]
   return(result);
 800614a:	693b      	ldr	r3, [r7, #16]
 800614c:	f023 0301 	bic.w	r3, r3, #1
 8006150:	66bb      	str	r3, [r7, #104]	; 0x68
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	3308      	adds	r3, #8
 8006158:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800615a:	623a      	str	r2, [r7, #32]
 800615c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800615e:	69f9      	ldr	r1, [r7, #28]
 8006160:	6a3a      	ldr	r2, [r7, #32]
 8006162:	e841 2300 	strex	r3, r2, [r1]
 8006166:	61bb      	str	r3, [r7, #24]
   return(result);
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d1e5      	bne.n	800613a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2220      	movs	r2, #32
 8006172:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	2220      	movs	r2, #32
 8006178:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2220      	movs	r2, #32
 8006180:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	2200      	movs	r2, #0
 8006188:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800618c:	2303      	movs	r3, #3
 800618e:	e010      	b.n	80061b2 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	69da      	ldr	r2, [r3, #28]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	4013      	ands	r3, r2
 800619a:	68ba      	ldr	r2, [r7, #8]
 800619c:	429a      	cmp	r2, r3
 800619e:	bf0c      	ite	eq
 80061a0:	2301      	moveq	r3, #1
 80061a2:	2300      	movne	r3, #0
 80061a4:	b2db      	uxtb	r3, r3
 80061a6:	461a      	mov	r2, r3
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	429a      	cmp	r2, r3
 80061ac:	f43f af48 	beq.w	8006040 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b0:	2300      	movs	r3, #0
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3770      	adds	r7, #112	; 0x70
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}

080061ba <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061ba:	b480      	push	{r7}
 80061bc:	b095      	sub	sp, #84	; 0x54
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ca:	e853 3f00 	ldrex	r3, [r3]
 80061ce:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80061d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061d2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80061d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	461a      	mov	r2, r3
 80061de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061e0:	643b      	str	r3, [r7, #64]	; 0x40
 80061e2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80061e6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80061e8:	e841 2300 	strex	r3, r2, [r1]
 80061ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80061ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d1e6      	bne.n	80061c2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	3308      	adds	r3, #8
 80061fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	e853 3f00 	ldrex	r3, [r3]
 8006202:	61fb      	str	r3, [r7, #28]
   return(result);
 8006204:	69fb      	ldr	r3, [r7, #28]
 8006206:	f023 0301 	bic.w	r3, r3, #1
 800620a:	64bb      	str	r3, [r7, #72]	; 0x48
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	3308      	adds	r3, #8
 8006212:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006214:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006216:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006218:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800621a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800621c:	e841 2300 	strex	r3, r2, [r1]
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e5      	bne.n	80061f4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800622c:	2b01      	cmp	r3, #1
 800622e:	d118      	bne.n	8006262 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	e853 3f00 	ldrex	r3, [r3]
 800623c:	60bb      	str	r3, [r7, #8]
   return(result);
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	f023 0310 	bic.w	r3, r3, #16
 8006244:	647b      	str	r3, [r7, #68]	; 0x44
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	461a      	mov	r2, r3
 800624c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800624e:	61bb      	str	r3, [r7, #24]
 8006250:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006252:	6979      	ldr	r1, [r7, #20]
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	e841 2300 	strex	r3, r2, [r1]
 800625a:	613b      	str	r3, [r7, #16]
   return(result);
 800625c:	693b      	ldr	r3, [r7, #16]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d1e6      	bne.n	8006230 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2220      	movs	r2, #32
 8006266:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2200      	movs	r2, #0
 800626e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2200      	movs	r2, #0
 8006274:	669a      	str	r2, [r3, #104]	; 0x68
}
 8006276:	bf00      	nop
 8006278:	3754      	adds	r7, #84	; 0x54
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr

08006282 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006282:	b580      	push	{r7, lr}
 8006284:	b084      	sub	sp, #16
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800628e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2200      	movs	r2, #0
 800629c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062a0:	68f8      	ldr	r0, [r7, #12]
 80062a2:	f7ff fb71 	bl	8005988 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062a6:	bf00      	nop
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b088      	sub	sp, #32
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	e853 3f00 	ldrex	r3, [r3]
 80062c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062ca:	61fb      	str	r3, [r7, #28]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	461a      	mov	r2, r3
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	61bb      	str	r3, [r7, #24]
 80062d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062d8:	6979      	ldr	r1, [r7, #20]
 80062da:	69ba      	ldr	r2, [r7, #24]
 80062dc:	e841 2300 	strex	r3, r2, [r1]
 80062e0:	613b      	str	r3, [r7, #16]
   return(result);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d1e6      	bne.n	80062b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fb3d 	bl	8005974 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062fa:	bf00      	nop
 80062fc:	3720      	adds	r7, #32
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
	...

08006304 <__errno>:
 8006304:	4b01      	ldr	r3, [pc, #4]	; (800630c <__errno+0x8>)
 8006306:	6818      	ldr	r0, [r3, #0]
 8006308:	4770      	bx	lr
 800630a:	bf00      	nop
 800630c:	2000005c 	.word	0x2000005c

08006310 <__libc_init_array>:
 8006310:	b570      	push	{r4, r5, r6, lr}
 8006312:	4d0d      	ldr	r5, [pc, #52]	; (8006348 <__libc_init_array+0x38>)
 8006314:	4c0d      	ldr	r4, [pc, #52]	; (800634c <__libc_init_array+0x3c>)
 8006316:	1b64      	subs	r4, r4, r5
 8006318:	10a4      	asrs	r4, r4, #2
 800631a:	2600      	movs	r6, #0
 800631c:	42a6      	cmp	r6, r4
 800631e:	d109      	bne.n	8006334 <__libc_init_array+0x24>
 8006320:	4d0b      	ldr	r5, [pc, #44]	; (8006350 <__libc_init_array+0x40>)
 8006322:	4c0c      	ldr	r4, [pc, #48]	; (8006354 <__libc_init_array+0x44>)
 8006324:	f000 fc8e 	bl	8006c44 <_init>
 8006328:	1b64      	subs	r4, r4, r5
 800632a:	10a4      	asrs	r4, r4, #2
 800632c:	2600      	movs	r6, #0
 800632e:	42a6      	cmp	r6, r4
 8006330:	d105      	bne.n	800633e <__libc_init_array+0x2e>
 8006332:	bd70      	pop	{r4, r5, r6, pc}
 8006334:	f855 3b04 	ldr.w	r3, [r5], #4
 8006338:	4798      	blx	r3
 800633a:	3601      	adds	r6, #1
 800633c:	e7ee      	b.n	800631c <__libc_init_array+0xc>
 800633e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006342:	4798      	blx	r3
 8006344:	3601      	adds	r6, #1
 8006346:	e7f2      	b.n	800632e <__libc_init_array+0x1e>
 8006348:	08006ccc 	.word	0x08006ccc
 800634c:	08006ccc 	.word	0x08006ccc
 8006350:	08006ccc 	.word	0x08006ccc
 8006354:	08006cd0 	.word	0x08006cd0

08006358 <memset>:
 8006358:	4402      	add	r2, r0
 800635a:	4603      	mov	r3, r0
 800635c:	4293      	cmp	r3, r2
 800635e:	d100      	bne.n	8006362 <memset+0xa>
 8006360:	4770      	bx	lr
 8006362:	f803 1b01 	strb.w	r1, [r3], #1
 8006366:	e7f9      	b.n	800635c <memset+0x4>

08006368 <siprintf>:
 8006368:	b40e      	push	{r1, r2, r3}
 800636a:	b500      	push	{lr}
 800636c:	b09c      	sub	sp, #112	; 0x70
 800636e:	ab1d      	add	r3, sp, #116	; 0x74
 8006370:	9002      	str	r0, [sp, #8]
 8006372:	9006      	str	r0, [sp, #24]
 8006374:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006378:	4809      	ldr	r0, [pc, #36]	; (80063a0 <siprintf+0x38>)
 800637a:	9107      	str	r1, [sp, #28]
 800637c:	9104      	str	r1, [sp, #16]
 800637e:	4909      	ldr	r1, [pc, #36]	; (80063a4 <siprintf+0x3c>)
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	a902      	add	r1, sp, #8
 800638c:	f000 f868 	bl	8006460 <_svfiprintf_r>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	b01c      	add	sp, #112	; 0x70
 8006398:	f85d eb04 	ldr.w	lr, [sp], #4
 800639c:	b003      	add	sp, #12
 800639e:	4770      	bx	lr
 80063a0:	2000005c 	.word	0x2000005c
 80063a4:	ffff0208 	.word	0xffff0208

080063a8 <__ssputs_r>:
 80063a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063ac:	688e      	ldr	r6, [r1, #8]
 80063ae:	429e      	cmp	r6, r3
 80063b0:	4682      	mov	sl, r0
 80063b2:	460c      	mov	r4, r1
 80063b4:	4690      	mov	r8, r2
 80063b6:	461f      	mov	r7, r3
 80063b8:	d838      	bhi.n	800642c <__ssputs_r+0x84>
 80063ba:	898a      	ldrh	r2, [r1, #12]
 80063bc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80063c0:	d032      	beq.n	8006428 <__ssputs_r+0x80>
 80063c2:	6825      	ldr	r5, [r4, #0]
 80063c4:	6909      	ldr	r1, [r1, #16]
 80063c6:	eba5 0901 	sub.w	r9, r5, r1
 80063ca:	6965      	ldr	r5, [r4, #20]
 80063cc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80063d0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80063d4:	3301      	adds	r3, #1
 80063d6:	444b      	add	r3, r9
 80063d8:	106d      	asrs	r5, r5, #1
 80063da:	429d      	cmp	r5, r3
 80063dc:	bf38      	it	cc
 80063de:	461d      	movcc	r5, r3
 80063e0:	0553      	lsls	r3, r2, #21
 80063e2:	d531      	bpl.n	8006448 <__ssputs_r+0xa0>
 80063e4:	4629      	mov	r1, r5
 80063e6:	f000 fb63 	bl	8006ab0 <_malloc_r>
 80063ea:	4606      	mov	r6, r0
 80063ec:	b950      	cbnz	r0, 8006404 <__ssputs_r+0x5c>
 80063ee:	230c      	movs	r3, #12
 80063f0:	f8ca 3000 	str.w	r3, [sl]
 80063f4:	89a3      	ldrh	r3, [r4, #12]
 80063f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80063fa:	81a3      	strh	r3, [r4, #12]
 80063fc:	f04f 30ff 	mov.w	r0, #4294967295
 8006400:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006404:	6921      	ldr	r1, [r4, #16]
 8006406:	464a      	mov	r2, r9
 8006408:	f000 fabe 	bl	8006988 <memcpy>
 800640c:	89a3      	ldrh	r3, [r4, #12]
 800640e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006412:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	6126      	str	r6, [r4, #16]
 800641a:	6165      	str	r5, [r4, #20]
 800641c:	444e      	add	r6, r9
 800641e:	eba5 0509 	sub.w	r5, r5, r9
 8006422:	6026      	str	r6, [r4, #0]
 8006424:	60a5      	str	r5, [r4, #8]
 8006426:	463e      	mov	r6, r7
 8006428:	42be      	cmp	r6, r7
 800642a:	d900      	bls.n	800642e <__ssputs_r+0x86>
 800642c:	463e      	mov	r6, r7
 800642e:	6820      	ldr	r0, [r4, #0]
 8006430:	4632      	mov	r2, r6
 8006432:	4641      	mov	r1, r8
 8006434:	f000 fab6 	bl	80069a4 <memmove>
 8006438:	68a3      	ldr	r3, [r4, #8]
 800643a:	1b9b      	subs	r3, r3, r6
 800643c:	60a3      	str	r3, [r4, #8]
 800643e:	6823      	ldr	r3, [r4, #0]
 8006440:	4433      	add	r3, r6
 8006442:	6023      	str	r3, [r4, #0]
 8006444:	2000      	movs	r0, #0
 8006446:	e7db      	b.n	8006400 <__ssputs_r+0x58>
 8006448:	462a      	mov	r2, r5
 800644a:	f000 fba5 	bl	8006b98 <_realloc_r>
 800644e:	4606      	mov	r6, r0
 8006450:	2800      	cmp	r0, #0
 8006452:	d1e1      	bne.n	8006418 <__ssputs_r+0x70>
 8006454:	6921      	ldr	r1, [r4, #16]
 8006456:	4650      	mov	r0, sl
 8006458:	f000 fabe 	bl	80069d8 <_free_r>
 800645c:	e7c7      	b.n	80063ee <__ssputs_r+0x46>
	...

08006460 <_svfiprintf_r>:
 8006460:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006464:	4698      	mov	r8, r3
 8006466:	898b      	ldrh	r3, [r1, #12]
 8006468:	061b      	lsls	r3, r3, #24
 800646a:	b09d      	sub	sp, #116	; 0x74
 800646c:	4607      	mov	r7, r0
 800646e:	460d      	mov	r5, r1
 8006470:	4614      	mov	r4, r2
 8006472:	d50e      	bpl.n	8006492 <_svfiprintf_r+0x32>
 8006474:	690b      	ldr	r3, [r1, #16]
 8006476:	b963      	cbnz	r3, 8006492 <_svfiprintf_r+0x32>
 8006478:	2140      	movs	r1, #64	; 0x40
 800647a:	f000 fb19 	bl	8006ab0 <_malloc_r>
 800647e:	6028      	str	r0, [r5, #0]
 8006480:	6128      	str	r0, [r5, #16]
 8006482:	b920      	cbnz	r0, 800648e <_svfiprintf_r+0x2e>
 8006484:	230c      	movs	r3, #12
 8006486:	603b      	str	r3, [r7, #0]
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	e0d1      	b.n	8006632 <_svfiprintf_r+0x1d2>
 800648e:	2340      	movs	r3, #64	; 0x40
 8006490:	616b      	str	r3, [r5, #20]
 8006492:	2300      	movs	r3, #0
 8006494:	9309      	str	r3, [sp, #36]	; 0x24
 8006496:	2320      	movs	r3, #32
 8006498:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800649c:	f8cd 800c 	str.w	r8, [sp, #12]
 80064a0:	2330      	movs	r3, #48	; 0x30
 80064a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800664c <_svfiprintf_r+0x1ec>
 80064a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064aa:	f04f 0901 	mov.w	r9, #1
 80064ae:	4623      	mov	r3, r4
 80064b0:	469a      	mov	sl, r3
 80064b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064b6:	b10a      	cbz	r2, 80064bc <_svfiprintf_r+0x5c>
 80064b8:	2a25      	cmp	r2, #37	; 0x25
 80064ba:	d1f9      	bne.n	80064b0 <_svfiprintf_r+0x50>
 80064bc:	ebba 0b04 	subs.w	fp, sl, r4
 80064c0:	d00b      	beq.n	80064da <_svfiprintf_r+0x7a>
 80064c2:	465b      	mov	r3, fp
 80064c4:	4622      	mov	r2, r4
 80064c6:	4629      	mov	r1, r5
 80064c8:	4638      	mov	r0, r7
 80064ca:	f7ff ff6d 	bl	80063a8 <__ssputs_r>
 80064ce:	3001      	adds	r0, #1
 80064d0:	f000 80aa 	beq.w	8006628 <_svfiprintf_r+0x1c8>
 80064d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d6:	445a      	add	r2, fp
 80064d8:	9209      	str	r2, [sp, #36]	; 0x24
 80064da:	f89a 3000 	ldrb.w	r3, [sl]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80a2 	beq.w	8006628 <_svfiprintf_r+0x1c8>
 80064e4:	2300      	movs	r3, #0
 80064e6:	f04f 32ff 	mov.w	r2, #4294967295
 80064ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80064ee:	f10a 0a01 	add.w	sl, sl, #1
 80064f2:	9304      	str	r3, [sp, #16]
 80064f4:	9307      	str	r3, [sp, #28]
 80064f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80064fa:	931a      	str	r3, [sp, #104]	; 0x68
 80064fc:	4654      	mov	r4, sl
 80064fe:	2205      	movs	r2, #5
 8006500:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006504:	4851      	ldr	r0, [pc, #324]	; (800664c <_svfiprintf_r+0x1ec>)
 8006506:	f7f9 fe83 	bl	8000210 <memchr>
 800650a:	9a04      	ldr	r2, [sp, #16]
 800650c:	b9d8      	cbnz	r0, 8006546 <_svfiprintf_r+0xe6>
 800650e:	06d0      	lsls	r0, r2, #27
 8006510:	bf44      	itt	mi
 8006512:	2320      	movmi	r3, #32
 8006514:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006518:	0711      	lsls	r1, r2, #28
 800651a:	bf44      	itt	mi
 800651c:	232b      	movmi	r3, #43	; 0x2b
 800651e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006522:	f89a 3000 	ldrb.w	r3, [sl]
 8006526:	2b2a      	cmp	r3, #42	; 0x2a
 8006528:	d015      	beq.n	8006556 <_svfiprintf_r+0xf6>
 800652a:	9a07      	ldr	r2, [sp, #28]
 800652c:	4654      	mov	r4, sl
 800652e:	2000      	movs	r0, #0
 8006530:	f04f 0c0a 	mov.w	ip, #10
 8006534:	4621      	mov	r1, r4
 8006536:	f811 3b01 	ldrb.w	r3, [r1], #1
 800653a:	3b30      	subs	r3, #48	; 0x30
 800653c:	2b09      	cmp	r3, #9
 800653e:	d94e      	bls.n	80065de <_svfiprintf_r+0x17e>
 8006540:	b1b0      	cbz	r0, 8006570 <_svfiprintf_r+0x110>
 8006542:	9207      	str	r2, [sp, #28]
 8006544:	e014      	b.n	8006570 <_svfiprintf_r+0x110>
 8006546:	eba0 0308 	sub.w	r3, r0, r8
 800654a:	fa09 f303 	lsl.w	r3, r9, r3
 800654e:	4313      	orrs	r3, r2
 8006550:	9304      	str	r3, [sp, #16]
 8006552:	46a2      	mov	sl, r4
 8006554:	e7d2      	b.n	80064fc <_svfiprintf_r+0x9c>
 8006556:	9b03      	ldr	r3, [sp, #12]
 8006558:	1d19      	adds	r1, r3, #4
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	9103      	str	r1, [sp, #12]
 800655e:	2b00      	cmp	r3, #0
 8006560:	bfbb      	ittet	lt
 8006562:	425b      	neglt	r3, r3
 8006564:	f042 0202 	orrlt.w	r2, r2, #2
 8006568:	9307      	strge	r3, [sp, #28]
 800656a:	9307      	strlt	r3, [sp, #28]
 800656c:	bfb8      	it	lt
 800656e:	9204      	strlt	r2, [sp, #16]
 8006570:	7823      	ldrb	r3, [r4, #0]
 8006572:	2b2e      	cmp	r3, #46	; 0x2e
 8006574:	d10c      	bne.n	8006590 <_svfiprintf_r+0x130>
 8006576:	7863      	ldrb	r3, [r4, #1]
 8006578:	2b2a      	cmp	r3, #42	; 0x2a
 800657a:	d135      	bne.n	80065e8 <_svfiprintf_r+0x188>
 800657c:	9b03      	ldr	r3, [sp, #12]
 800657e:	1d1a      	adds	r2, r3, #4
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	9203      	str	r2, [sp, #12]
 8006584:	2b00      	cmp	r3, #0
 8006586:	bfb8      	it	lt
 8006588:	f04f 33ff 	movlt.w	r3, #4294967295
 800658c:	3402      	adds	r4, #2
 800658e:	9305      	str	r3, [sp, #20]
 8006590:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800665c <_svfiprintf_r+0x1fc>
 8006594:	7821      	ldrb	r1, [r4, #0]
 8006596:	2203      	movs	r2, #3
 8006598:	4650      	mov	r0, sl
 800659a:	f7f9 fe39 	bl	8000210 <memchr>
 800659e:	b140      	cbz	r0, 80065b2 <_svfiprintf_r+0x152>
 80065a0:	2340      	movs	r3, #64	; 0x40
 80065a2:	eba0 000a 	sub.w	r0, r0, sl
 80065a6:	fa03 f000 	lsl.w	r0, r3, r0
 80065aa:	9b04      	ldr	r3, [sp, #16]
 80065ac:	4303      	orrs	r3, r0
 80065ae:	3401      	adds	r4, #1
 80065b0:	9304      	str	r3, [sp, #16]
 80065b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065b6:	4826      	ldr	r0, [pc, #152]	; (8006650 <_svfiprintf_r+0x1f0>)
 80065b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065bc:	2206      	movs	r2, #6
 80065be:	f7f9 fe27 	bl	8000210 <memchr>
 80065c2:	2800      	cmp	r0, #0
 80065c4:	d038      	beq.n	8006638 <_svfiprintf_r+0x1d8>
 80065c6:	4b23      	ldr	r3, [pc, #140]	; (8006654 <_svfiprintf_r+0x1f4>)
 80065c8:	bb1b      	cbnz	r3, 8006612 <_svfiprintf_r+0x1b2>
 80065ca:	9b03      	ldr	r3, [sp, #12]
 80065cc:	3307      	adds	r3, #7
 80065ce:	f023 0307 	bic.w	r3, r3, #7
 80065d2:	3308      	adds	r3, #8
 80065d4:	9303      	str	r3, [sp, #12]
 80065d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065d8:	4433      	add	r3, r6
 80065da:	9309      	str	r3, [sp, #36]	; 0x24
 80065dc:	e767      	b.n	80064ae <_svfiprintf_r+0x4e>
 80065de:	fb0c 3202 	mla	r2, ip, r2, r3
 80065e2:	460c      	mov	r4, r1
 80065e4:	2001      	movs	r0, #1
 80065e6:	e7a5      	b.n	8006534 <_svfiprintf_r+0xd4>
 80065e8:	2300      	movs	r3, #0
 80065ea:	3401      	adds	r4, #1
 80065ec:	9305      	str	r3, [sp, #20]
 80065ee:	4619      	mov	r1, r3
 80065f0:	f04f 0c0a 	mov.w	ip, #10
 80065f4:	4620      	mov	r0, r4
 80065f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80065fa:	3a30      	subs	r2, #48	; 0x30
 80065fc:	2a09      	cmp	r2, #9
 80065fe:	d903      	bls.n	8006608 <_svfiprintf_r+0x1a8>
 8006600:	2b00      	cmp	r3, #0
 8006602:	d0c5      	beq.n	8006590 <_svfiprintf_r+0x130>
 8006604:	9105      	str	r1, [sp, #20]
 8006606:	e7c3      	b.n	8006590 <_svfiprintf_r+0x130>
 8006608:	fb0c 2101 	mla	r1, ip, r1, r2
 800660c:	4604      	mov	r4, r0
 800660e:	2301      	movs	r3, #1
 8006610:	e7f0      	b.n	80065f4 <_svfiprintf_r+0x194>
 8006612:	ab03      	add	r3, sp, #12
 8006614:	9300      	str	r3, [sp, #0]
 8006616:	462a      	mov	r2, r5
 8006618:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <_svfiprintf_r+0x1f8>)
 800661a:	a904      	add	r1, sp, #16
 800661c:	4638      	mov	r0, r7
 800661e:	f3af 8000 	nop.w
 8006622:	1c42      	adds	r2, r0, #1
 8006624:	4606      	mov	r6, r0
 8006626:	d1d6      	bne.n	80065d6 <_svfiprintf_r+0x176>
 8006628:	89ab      	ldrh	r3, [r5, #12]
 800662a:	065b      	lsls	r3, r3, #25
 800662c:	f53f af2c 	bmi.w	8006488 <_svfiprintf_r+0x28>
 8006630:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006632:	b01d      	add	sp, #116	; 0x74
 8006634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006638:	ab03      	add	r3, sp, #12
 800663a:	9300      	str	r3, [sp, #0]
 800663c:	462a      	mov	r2, r5
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <_svfiprintf_r+0x1f8>)
 8006640:	a904      	add	r1, sp, #16
 8006642:	4638      	mov	r0, r7
 8006644:	f000 f87a 	bl	800673c <_printf_i>
 8006648:	e7eb      	b.n	8006622 <_svfiprintf_r+0x1c2>
 800664a:	bf00      	nop
 800664c:	08006c90 	.word	0x08006c90
 8006650:	08006c9a 	.word	0x08006c9a
 8006654:	00000000 	.word	0x00000000
 8006658:	080063a9 	.word	0x080063a9
 800665c:	08006c96 	.word	0x08006c96

08006660 <_printf_common>:
 8006660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006664:	4616      	mov	r6, r2
 8006666:	4699      	mov	r9, r3
 8006668:	688a      	ldr	r2, [r1, #8]
 800666a:	690b      	ldr	r3, [r1, #16]
 800666c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006670:	4293      	cmp	r3, r2
 8006672:	bfb8      	it	lt
 8006674:	4613      	movlt	r3, r2
 8006676:	6033      	str	r3, [r6, #0]
 8006678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800667c:	4607      	mov	r7, r0
 800667e:	460c      	mov	r4, r1
 8006680:	b10a      	cbz	r2, 8006686 <_printf_common+0x26>
 8006682:	3301      	adds	r3, #1
 8006684:	6033      	str	r3, [r6, #0]
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	0699      	lsls	r1, r3, #26
 800668a:	bf42      	ittt	mi
 800668c:	6833      	ldrmi	r3, [r6, #0]
 800668e:	3302      	addmi	r3, #2
 8006690:	6033      	strmi	r3, [r6, #0]
 8006692:	6825      	ldr	r5, [r4, #0]
 8006694:	f015 0506 	ands.w	r5, r5, #6
 8006698:	d106      	bne.n	80066a8 <_printf_common+0x48>
 800669a:	f104 0a19 	add.w	sl, r4, #25
 800669e:	68e3      	ldr	r3, [r4, #12]
 80066a0:	6832      	ldr	r2, [r6, #0]
 80066a2:	1a9b      	subs	r3, r3, r2
 80066a4:	42ab      	cmp	r3, r5
 80066a6:	dc26      	bgt.n	80066f6 <_printf_common+0x96>
 80066a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066ac:	1e13      	subs	r3, r2, #0
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	bf18      	it	ne
 80066b2:	2301      	movne	r3, #1
 80066b4:	0692      	lsls	r2, r2, #26
 80066b6:	d42b      	bmi.n	8006710 <_printf_common+0xb0>
 80066b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066bc:	4649      	mov	r1, r9
 80066be:	4638      	mov	r0, r7
 80066c0:	47c0      	blx	r8
 80066c2:	3001      	adds	r0, #1
 80066c4:	d01e      	beq.n	8006704 <_printf_common+0xa4>
 80066c6:	6823      	ldr	r3, [r4, #0]
 80066c8:	68e5      	ldr	r5, [r4, #12]
 80066ca:	6832      	ldr	r2, [r6, #0]
 80066cc:	f003 0306 	and.w	r3, r3, #6
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	bf08      	it	eq
 80066d4:	1aad      	subeq	r5, r5, r2
 80066d6:	68a3      	ldr	r3, [r4, #8]
 80066d8:	6922      	ldr	r2, [r4, #16]
 80066da:	bf0c      	ite	eq
 80066dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80066e0:	2500      	movne	r5, #0
 80066e2:	4293      	cmp	r3, r2
 80066e4:	bfc4      	itt	gt
 80066e6:	1a9b      	subgt	r3, r3, r2
 80066e8:	18ed      	addgt	r5, r5, r3
 80066ea:	2600      	movs	r6, #0
 80066ec:	341a      	adds	r4, #26
 80066ee:	42b5      	cmp	r5, r6
 80066f0:	d11a      	bne.n	8006728 <_printf_common+0xc8>
 80066f2:	2000      	movs	r0, #0
 80066f4:	e008      	b.n	8006708 <_printf_common+0xa8>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4652      	mov	r2, sl
 80066fa:	4649      	mov	r1, r9
 80066fc:	4638      	mov	r0, r7
 80066fe:	47c0      	blx	r8
 8006700:	3001      	adds	r0, #1
 8006702:	d103      	bne.n	800670c <_printf_common+0xac>
 8006704:	f04f 30ff 	mov.w	r0, #4294967295
 8006708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800670c:	3501      	adds	r5, #1
 800670e:	e7c6      	b.n	800669e <_printf_common+0x3e>
 8006710:	18e1      	adds	r1, r4, r3
 8006712:	1c5a      	adds	r2, r3, #1
 8006714:	2030      	movs	r0, #48	; 0x30
 8006716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800671a:	4422      	add	r2, r4
 800671c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006724:	3302      	adds	r3, #2
 8006726:	e7c7      	b.n	80066b8 <_printf_common+0x58>
 8006728:	2301      	movs	r3, #1
 800672a:	4622      	mov	r2, r4
 800672c:	4649      	mov	r1, r9
 800672e:	4638      	mov	r0, r7
 8006730:	47c0      	blx	r8
 8006732:	3001      	adds	r0, #1
 8006734:	d0e6      	beq.n	8006704 <_printf_common+0xa4>
 8006736:	3601      	adds	r6, #1
 8006738:	e7d9      	b.n	80066ee <_printf_common+0x8e>
	...

0800673c <_printf_i>:
 800673c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006740:	7e0f      	ldrb	r7, [r1, #24]
 8006742:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006744:	2f78      	cmp	r7, #120	; 0x78
 8006746:	4691      	mov	r9, r2
 8006748:	4680      	mov	r8, r0
 800674a:	460c      	mov	r4, r1
 800674c:	469a      	mov	sl, r3
 800674e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006752:	d807      	bhi.n	8006764 <_printf_i+0x28>
 8006754:	2f62      	cmp	r7, #98	; 0x62
 8006756:	d80a      	bhi.n	800676e <_printf_i+0x32>
 8006758:	2f00      	cmp	r7, #0
 800675a:	f000 80d8 	beq.w	800690e <_printf_i+0x1d2>
 800675e:	2f58      	cmp	r7, #88	; 0x58
 8006760:	f000 80a3 	beq.w	80068aa <_printf_i+0x16e>
 8006764:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800676c:	e03a      	b.n	80067e4 <_printf_i+0xa8>
 800676e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006772:	2b15      	cmp	r3, #21
 8006774:	d8f6      	bhi.n	8006764 <_printf_i+0x28>
 8006776:	a101      	add	r1, pc, #4	; (adr r1, 800677c <_printf_i+0x40>)
 8006778:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800677c:	080067d5 	.word	0x080067d5
 8006780:	080067e9 	.word	0x080067e9
 8006784:	08006765 	.word	0x08006765
 8006788:	08006765 	.word	0x08006765
 800678c:	08006765 	.word	0x08006765
 8006790:	08006765 	.word	0x08006765
 8006794:	080067e9 	.word	0x080067e9
 8006798:	08006765 	.word	0x08006765
 800679c:	08006765 	.word	0x08006765
 80067a0:	08006765 	.word	0x08006765
 80067a4:	08006765 	.word	0x08006765
 80067a8:	080068f5 	.word	0x080068f5
 80067ac:	08006819 	.word	0x08006819
 80067b0:	080068d7 	.word	0x080068d7
 80067b4:	08006765 	.word	0x08006765
 80067b8:	08006765 	.word	0x08006765
 80067bc:	08006917 	.word	0x08006917
 80067c0:	08006765 	.word	0x08006765
 80067c4:	08006819 	.word	0x08006819
 80067c8:	08006765 	.word	0x08006765
 80067cc:	08006765 	.word	0x08006765
 80067d0:	080068df 	.word	0x080068df
 80067d4:	682b      	ldr	r3, [r5, #0]
 80067d6:	1d1a      	adds	r2, r3, #4
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	602a      	str	r2, [r5, #0]
 80067dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80067e4:	2301      	movs	r3, #1
 80067e6:	e0a3      	b.n	8006930 <_printf_i+0x1f4>
 80067e8:	6820      	ldr	r0, [r4, #0]
 80067ea:	6829      	ldr	r1, [r5, #0]
 80067ec:	0606      	lsls	r6, r0, #24
 80067ee:	f101 0304 	add.w	r3, r1, #4
 80067f2:	d50a      	bpl.n	800680a <_printf_i+0xce>
 80067f4:	680e      	ldr	r6, [r1, #0]
 80067f6:	602b      	str	r3, [r5, #0]
 80067f8:	2e00      	cmp	r6, #0
 80067fa:	da03      	bge.n	8006804 <_printf_i+0xc8>
 80067fc:	232d      	movs	r3, #45	; 0x2d
 80067fe:	4276      	negs	r6, r6
 8006800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006804:	485e      	ldr	r0, [pc, #376]	; (8006980 <_printf_i+0x244>)
 8006806:	230a      	movs	r3, #10
 8006808:	e019      	b.n	800683e <_printf_i+0x102>
 800680a:	680e      	ldr	r6, [r1, #0]
 800680c:	602b      	str	r3, [r5, #0]
 800680e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006812:	bf18      	it	ne
 8006814:	b236      	sxthne	r6, r6
 8006816:	e7ef      	b.n	80067f8 <_printf_i+0xbc>
 8006818:	682b      	ldr	r3, [r5, #0]
 800681a:	6820      	ldr	r0, [r4, #0]
 800681c:	1d19      	adds	r1, r3, #4
 800681e:	6029      	str	r1, [r5, #0]
 8006820:	0601      	lsls	r1, r0, #24
 8006822:	d501      	bpl.n	8006828 <_printf_i+0xec>
 8006824:	681e      	ldr	r6, [r3, #0]
 8006826:	e002      	b.n	800682e <_printf_i+0xf2>
 8006828:	0646      	lsls	r6, r0, #25
 800682a:	d5fb      	bpl.n	8006824 <_printf_i+0xe8>
 800682c:	881e      	ldrh	r6, [r3, #0]
 800682e:	4854      	ldr	r0, [pc, #336]	; (8006980 <_printf_i+0x244>)
 8006830:	2f6f      	cmp	r7, #111	; 0x6f
 8006832:	bf0c      	ite	eq
 8006834:	2308      	moveq	r3, #8
 8006836:	230a      	movne	r3, #10
 8006838:	2100      	movs	r1, #0
 800683a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800683e:	6865      	ldr	r5, [r4, #4]
 8006840:	60a5      	str	r5, [r4, #8]
 8006842:	2d00      	cmp	r5, #0
 8006844:	bfa2      	ittt	ge
 8006846:	6821      	ldrge	r1, [r4, #0]
 8006848:	f021 0104 	bicge.w	r1, r1, #4
 800684c:	6021      	strge	r1, [r4, #0]
 800684e:	b90e      	cbnz	r6, 8006854 <_printf_i+0x118>
 8006850:	2d00      	cmp	r5, #0
 8006852:	d04d      	beq.n	80068f0 <_printf_i+0x1b4>
 8006854:	4615      	mov	r5, r2
 8006856:	fbb6 f1f3 	udiv	r1, r6, r3
 800685a:	fb03 6711 	mls	r7, r3, r1, r6
 800685e:	5dc7      	ldrb	r7, [r0, r7]
 8006860:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006864:	4637      	mov	r7, r6
 8006866:	42bb      	cmp	r3, r7
 8006868:	460e      	mov	r6, r1
 800686a:	d9f4      	bls.n	8006856 <_printf_i+0x11a>
 800686c:	2b08      	cmp	r3, #8
 800686e:	d10b      	bne.n	8006888 <_printf_i+0x14c>
 8006870:	6823      	ldr	r3, [r4, #0]
 8006872:	07de      	lsls	r6, r3, #31
 8006874:	d508      	bpl.n	8006888 <_printf_i+0x14c>
 8006876:	6923      	ldr	r3, [r4, #16]
 8006878:	6861      	ldr	r1, [r4, #4]
 800687a:	4299      	cmp	r1, r3
 800687c:	bfde      	ittt	le
 800687e:	2330      	movle	r3, #48	; 0x30
 8006880:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006884:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006888:	1b52      	subs	r2, r2, r5
 800688a:	6122      	str	r2, [r4, #16]
 800688c:	f8cd a000 	str.w	sl, [sp]
 8006890:	464b      	mov	r3, r9
 8006892:	aa03      	add	r2, sp, #12
 8006894:	4621      	mov	r1, r4
 8006896:	4640      	mov	r0, r8
 8006898:	f7ff fee2 	bl	8006660 <_printf_common>
 800689c:	3001      	adds	r0, #1
 800689e:	d14c      	bne.n	800693a <_printf_i+0x1fe>
 80068a0:	f04f 30ff 	mov.w	r0, #4294967295
 80068a4:	b004      	add	sp, #16
 80068a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068aa:	4835      	ldr	r0, [pc, #212]	; (8006980 <_printf_i+0x244>)
 80068ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068b0:	6829      	ldr	r1, [r5, #0]
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	f851 6b04 	ldr.w	r6, [r1], #4
 80068b8:	6029      	str	r1, [r5, #0]
 80068ba:	061d      	lsls	r5, r3, #24
 80068bc:	d514      	bpl.n	80068e8 <_printf_i+0x1ac>
 80068be:	07df      	lsls	r7, r3, #31
 80068c0:	bf44      	itt	mi
 80068c2:	f043 0320 	orrmi.w	r3, r3, #32
 80068c6:	6023      	strmi	r3, [r4, #0]
 80068c8:	b91e      	cbnz	r6, 80068d2 <_printf_i+0x196>
 80068ca:	6823      	ldr	r3, [r4, #0]
 80068cc:	f023 0320 	bic.w	r3, r3, #32
 80068d0:	6023      	str	r3, [r4, #0]
 80068d2:	2310      	movs	r3, #16
 80068d4:	e7b0      	b.n	8006838 <_printf_i+0xfc>
 80068d6:	6823      	ldr	r3, [r4, #0]
 80068d8:	f043 0320 	orr.w	r3, r3, #32
 80068dc:	6023      	str	r3, [r4, #0]
 80068de:	2378      	movs	r3, #120	; 0x78
 80068e0:	4828      	ldr	r0, [pc, #160]	; (8006984 <_printf_i+0x248>)
 80068e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80068e6:	e7e3      	b.n	80068b0 <_printf_i+0x174>
 80068e8:	0659      	lsls	r1, r3, #25
 80068ea:	bf48      	it	mi
 80068ec:	b2b6      	uxthmi	r6, r6
 80068ee:	e7e6      	b.n	80068be <_printf_i+0x182>
 80068f0:	4615      	mov	r5, r2
 80068f2:	e7bb      	b.n	800686c <_printf_i+0x130>
 80068f4:	682b      	ldr	r3, [r5, #0]
 80068f6:	6826      	ldr	r6, [r4, #0]
 80068f8:	6961      	ldr	r1, [r4, #20]
 80068fa:	1d18      	adds	r0, r3, #4
 80068fc:	6028      	str	r0, [r5, #0]
 80068fe:	0635      	lsls	r5, r6, #24
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	d501      	bpl.n	8006908 <_printf_i+0x1cc>
 8006904:	6019      	str	r1, [r3, #0]
 8006906:	e002      	b.n	800690e <_printf_i+0x1d2>
 8006908:	0670      	lsls	r0, r6, #25
 800690a:	d5fb      	bpl.n	8006904 <_printf_i+0x1c8>
 800690c:	8019      	strh	r1, [r3, #0]
 800690e:	2300      	movs	r3, #0
 8006910:	6123      	str	r3, [r4, #16]
 8006912:	4615      	mov	r5, r2
 8006914:	e7ba      	b.n	800688c <_printf_i+0x150>
 8006916:	682b      	ldr	r3, [r5, #0]
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	602a      	str	r2, [r5, #0]
 800691c:	681d      	ldr	r5, [r3, #0]
 800691e:	6862      	ldr	r2, [r4, #4]
 8006920:	2100      	movs	r1, #0
 8006922:	4628      	mov	r0, r5
 8006924:	f7f9 fc74 	bl	8000210 <memchr>
 8006928:	b108      	cbz	r0, 800692e <_printf_i+0x1f2>
 800692a:	1b40      	subs	r0, r0, r5
 800692c:	6060      	str	r0, [r4, #4]
 800692e:	6863      	ldr	r3, [r4, #4]
 8006930:	6123      	str	r3, [r4, #16]
 8006932:	2300      	movs	r3, #0
 8006934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006938:	e7a8      	b.n	800688c <_printf_i+0x150>
 800693a:	6923      	ldr	r3, [r4, #16]
 800693c:	462a      	mov	r2, r5
 800693e:	4649      	mov	r1, r9
 8006940:	4640      	mov	r0, r8
 8006942:	47d0      	blx	sl
 8006944:	3001      	adds	r0, #1
 8006946:	d0ab      	beq.n	80068a0 <_printf_i+0x164>
 8006948:	6823      	ldr	r3, [r4, #0]
 800694a:	079b      	lsls	r3, r3, #30
 800694c:	d413      	bmi.n	8006976 <_printf_i+0x23a>
 800694e:	68e0      	ldr	r0, [r4, #12]
 8006950:	9b03      	ldr	r3, [sp, #12]
 8006952:	4298      	cmp	r0, r3
 8006954:	bfb8      	it	lt
 8006956:	4618      	movlt	r0, r3
 8006958:	e7a4      	b.n	80068a4 <_printf_i+0x168>
 800695a:	2301      	movs	r3, #1
 800695c:	4632      	mov	r2, r6
 800695e:	4649      	mov	r1, r9
 8006960:	4640      	mov	r0, r8
 8006962:	47d0      	blx	sl
 8006964:	3001      	adds	r0, #1
 8006966:	d09b      	beq.n	80068a0 <_printf_i+0x164>
 8006968:	3501      	adds	r5, #1
 800696a:	68e3      	ldr	r3, [r4, #12]
 800696c:	9903      	ldr	r1, [sp, #12]
 800696e:	1a5b      	subs	r3, r3, r1
 8006970:	42ab      	cmp	r3, r5
 8006972:	dcf2      	bgt.n	800695a <_printf_i+0x21e>
 8006974:	e7eb      	b.n	800694e <_printf_i+0x212>
 8006976:	2500      	movs	r5, #0
 8006978:	f104 0619 	add.w	r6, r4, #25
 800697c:	e7f5      	b.n	800696a <_printf_i+0x22e>
 800697e:	bf00      	nop
 8006980:	08006ca1 	.word	0x08006ca1
 8006984:	08006cb2 	.word	0x08006cb2

08006988 <memcpy>:
 8006988:	440a      	add	r2, r1
 800698a:	4291      	cmp	r1, r2
 800698c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006990:	d100      	bne.n	8006994 <memcpy+0xc>
 8006992:	4770      	bx	lr
 8006994:	b510      	push	{r4, lr}
 8006996:	f811 4b01 	ldrb.w	r4, [r1], #1
 800699a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800699e:	4291      	cmp	r1, r2
 80069a0:	d1f9      	bne.n	8006996 <memcpy+0xe>
 80069a2:	bd10      	pop	{r4, pc}

080069a4 <memmove>:
 80069a4:	4288      	cmp	r0, r1
 80069a6:	b510      	push	{r4, lr}
 80069a8:	eb01 0402 	add.w	r4, r1, r2
 80069ac:	d902      	bls.n	80069b4 <memmove+0x10>
 80069ae:	4284      	cmp	r4, r0
 80069b0:	4623      	mov	r3, r4
 80069b2:	d807      	bhi.n	80069c4 <memmove+0x20>
 80069b4:	1e43      	subs	r3, r0, #1
 80069b6:	42a1      	cmp	r1, r4
 80069b8:	d008      	beq.n	80069cc <memmove+0x28>
 80069ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80069be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80069c2:	e7f8      	b.n	80069b6 <memmove+0x12>
 80069c4:	4402      	add	r2, r0
 80069c6:	4601      	mov	r1, r0
 80069c8:	428a      	cmp	r2, r1
 80069ca:	d100      	bne.n	80069ce <memmove+0x2a>
 80069cc:	bd10      	pop	{r4, pc}
 80069ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80069d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80069d6:	e7f7      	b.n	80069c8 <memmove+0x24>

080069d8 <_free_r>:
 80069d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80069da:	2900      	cmp	r1, #0
 80069dc:	d044      	beq.n	8006a68 <_free_r+0x90>
 80069de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069e2:	9001      	str	r0, [sp, #4]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f1a1 0404 	sub.w	r4, r1, #4
 80069ea:	bfb8      	it	lt
 80069ec:	18e4      	addlt	r4, r4, r3
 80069ee:	f000 f913 	bl	8006c18 <__malloc_lock>
 80069f2:	4a1e      	ldr	r2, [pc, #120]	; (8006a6c <_free_r+0x94>)
 80069f4:	9801      	ldr	r0, [sp, #4]
 80069f6:	6813      	ldr	r3, [r2, #0]
 80069f8:	b933      	cbnz	r3, 8006a08 <_free_r+0x30>
 80069fa:	6063      	str	r3, [r4, #4]
 80069fc:	6014      	str	r4, [r2, #0]
 80069fe:	b003      	add	sp, #12
 8006a00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a04:	f000 b90e 	b.w	8006c24 <__malloc_unlock>
 8006a08:	42a3      	cmp	r3, r4
 8006a0a:	d908      	bls.n	8006a1e <_free_r+0x46>
 8006a0c:	6825      	ldr	r5, [r4, #0]
 8006a0e:	1961      	adds	r1, r4, r5
 8006a10:	428b      	cmp	r3, r1
 8006a12:	bf01      	itttt	eq
 8006a14:	6819      	ldreq	r1, [r3, #0]
 8006a16:	685b      	ldreq	r3, [r3, #4]
 8006a18:	1949      	addeq	r1, r1, r5
 8006a1a:	6021      	streq	r1, [r4, #0]
 8006a1c:	e7ed      	b.n	80069fa <_free_r+0x22>
 8006a1e:	461a      	mov	r2, r3
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	b10b      	cbz	r3, 8006a28 <_free_r+0x50>
 8006a24:	42a3      	cmp	r3, r4
 8006a26:	d9fa      	bls.n	8006a1e <_free_r+0x46>
 8006a28:	6811      	ldr	r1, [r2, #0]
 8006a2a:	1855      	adds	r5, r2, r1
 8006a2c:	42a5      	cmp	r5, r4
 8006a2e:	d10b      	bne.n	8006a48 <_free_r+0x70>
 8006a30:	6824      	ldr	r4, [r4, #0]
 8006a32:	4421      	add	r1, r4
 8006a34:	1854      	adds	r4, r2, r1
 8006a36:	42a3      	cmp	r3, r4
 8006a38:	6011      	str	r1, [r2, #0]
 8006a3a:	d1e0      	bne.n	80069fe <_free_r+0x26>
 8006a3c:	681c      	ldr	r4, [r3, #0]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	6053      	str	r3, [r2, #4]
 8006a42:	4421      	add	r1, r4
 8006a44:	6011      	str	r1, [r2, #0]
 8006a46:	e7da      	b.n	80069fe <_free_r+0x26>
 8006a48:	d902      	bls.n	8006a50 <_free_r+0x78>
 8006a4a:	230c      	movs	r3, #12
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	e7d6      	b.n	80069fe <_free_r+0x26>
 8006a50:	6825      	ldr	r5, [r4, #0]
 8006a52:	1961      	adds	r1, r4, r5
 8006a54:	428b      	cmp	r3, r1
 8006a56:	bf04      	itt	eq
 8006a58:	6819      	ldreq	r1, [r3, #0]
 8006a5a:	685b      	ldreq	r3, [r3, #4]
 8006a5c:	6063      	str	r3, [r4, #4]
 8006a5e:	bf04      	itt	eq
 8006a60:	1949      	addeq	r1, r1, r5
 8006a62:	6021      	streq	r1, [r4, #0]
 8006a64:	6054      	str	r4, [r2, #4]
 8006a66:	e7ca      	b.n	80069fe <_free_r+0x26>
 8006a68:	b003      	add	sp, #12
 8006a6a:	bd30      	pop	{r4, r5, pc}
 8006a6c:	200002f4 	.word	0x200002f4

08006a70 <sbrk_aligned>:
 8006a70:	b570      	push	{r4, r5, r6, lr}
 8006a72:	4e0e      	ldr	r6, [pc, #56]	; (8006aac <sbrk_aligned+0x3c>)
 8006a74:	460c      	mov	r4, r1
 8006a76:	6831      	ldr	r1, [r6, #0]
 8006a78:	4605      	mov	r5, r0
 8006a7a:	b911      	cbnz	r1, 8006a82 <sbrk_aligned+0x12>
 8006a7c:	f000 f8bc 	bl	8006bf8 <_sbrk_r>
 8006a80:	6030      	str	r0, [r6, #0]
 8006a82:	4621      	mov	r1, r4
 8006a84:	4628      	mov	r0, r5
 8006a86:	f000 f8b7 	bl	8006bf8 <_sbrk_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d00a      	beq.n	8006aa4 <sbrk_aligned+0x34>
 8006a8e:	1cc4      	adds	r4, r0, #3
 8006a90:	f024 0403 	bic.w	r4, r4, #3
 8006a94:	42a0      	cmp	r0, r4
 8006a96:	d007      	beq.n	8006aa8 <sbrk_aligned+0x38>
 8006a98:	1a21      	subs	r1, r4, r0
 8006a9a:	4628      	mov	r0, r5
 8006a9c:	f000 f8ac 	bl	8006bf8 <_sbrk_r>
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	d101      	bne.n	8006aa8 <sbrk_aligned+0x38>
 8006aa4:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa8:	4620      	mov	r0, r4
 8006aaa:	bd70      	pop	{r4, r5, r6, pc}
 8006aac:	200002f8 	.word	0x200002f8

08006ab0 <_malloc_r>:
 8006ab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ab4:	1ccd      	adds	r5, r1, #3
 8006ab6:	f025 0503 	bic.w	r5, r5, #3
 8006aba:	3508      	adds	r5, #8
 8006abc:	2d0c      	cmp	r5, #12
 8006abe:	bf38      	it	cc
 8006ac0:	250c      	movcc	r5, #12
 8006ac2:	2d00      	cmp	r5, #0
 8006ac4:	4607      	mov	r7, r0
 8006ac6:	db01      	blt.n	8006acc <_malloc_r+0x1c>
 8006ac8:	42a9      	cmp	r1, r5
 8006aca:	d905      	bls.n	8006ad8 <_malloc_r+0x28>
 8006acc:	230c      	movs	r3, #12
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	2600      	movs	r6, #0
 8006ad2:	4630      	mov	r0, r6
 8006ad4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ad8:	4e2e      	ldr	r6, [pc, #184]	; (8006b94 <_malloc_r+0xe4>)
 8006ada:	f000 f89d 	bl	8006c18 <__malloc_lock>
 8006ade:	6833      	ldr	r3, [r6, #0]
 8006ae0:	461c      	mov	r4, r3
 8006ae2:	bb34      	cbnz	r4, 8006b32 <_malloc_r+0x82>
 8006ae4:	4629      	mov	r1, r5
 8006ae6:	4638      	mov	r0, r7
 8006ae8:	f7ff ffc2 	bl	8006a70 <sbrk_aligned>
 8006aec:	1c43      	adds	r3, r0, #1
 8006aee:	4604      	mov	r4, r0
 8006af0:	d14d      	bne.n	8006b8e <_malloc_r+0xde>
 8006af2:	6834      	ldr	r4, [r6, #0]
 8006af4:	4626      	mov	r6, r4
 8006af6:	2e00      	cmp	r6, #0
 8006af8:	d140      	bne.n	8006b7c <_malloc_r+0xcc>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	4631      	mov	r1, r6
 8006afe:	4638      	mov	r0, r7
 8006b00:	eb04 0803 	add.w	r8, r4, r3
 8006b04:	f000 f878 	bl	8006bf8 <_sbrk_r>
 8006b08:	4580      	cmp	r8, r0
 8006b0a:	d13a      	bne.n	8006b82 <_malloc_r+0xd2>
 8006b0c:	6821      	ldr	r1, [r4, #0]
 8006b0e:	3503      	adds	r5, #3
 8006b10:	1a6d      	subs	r5, r5, r1
 8006b12:	f025 0503 	bic.w	r5, r5, #3
 8006b16:	3508      	adds	r5, #8
 8006b18:	2d0c      	cmp	r5, #12
 8006b1a:	bf38      	it	cc
 8006b1c:	250c      	movcc	r5, #12
 8006b1e:	4629      	mov	r1, r5
 8006b20:	4638      	mov	r0, r7
 8006b22:	f7ff ffa5 	bl	8006a70 <sbrk_aligned>
 8006b26:	3001      	adds	r0, #1
 8006b28:	d02b      	beq.n	8006b82 <_malloc_r+0xd2>
 8006b2a:	6823      	ldr	r3, [r4, #0]
 8006b2c:	442b      	add	r3, r5
 8006b2e:	6023      	str	r3, [r4, #0]
 8006b30:	e00e      	b.n	8006b50 <_malloc_r+0xa0>
 8006b32:	6822      	ldr	r2, [r4, #0]
 8006b34:	1b52      	subs	r2, r2, r5
 8006b36:	d41e      	bmi.n	8006b76 <_malloc_r+0xc6>
 8006b38:	2a0b      	cmp	r2, #11
 8006b3a:	d916      	bls.n	8006b6a <_malloc_r+0xba>
 8006b3c:	1961      	adds	r1, r4, r5
 8006b3e:	42a3      	cmp	r3, r4
 8006b40:	6025      	str	r5, [r4, #0]
 8006b42:	bf18      	it	ne
 8006b44:	6059      	strne	r1, [r3, #4]
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	bf08      	it	eq
 8006b4a:	6031      	streq	r1, [r6, #0]
 8006b4c:	5162      	str	r2, [r4, r5]
 8006b4e:	604b      	str	r3, [r1, #4]
 8006b50:	4638      	mov	r0, r7
 8006b52:	f104 060b 	add.w	r6, r4, #11
 8006b56:	f000 f865 	bl	8006c24 <__malloc_unlock>
 8006b5a:	f026 0607 	bic.w	r6, r6, #7
 8006b5e:	1d23      	adds	r3, r4, #4
 8006b60:	1af2      	subs	r2, r6, r3
 8006b62:	d0b6      	beq.n	8006ad2 <_malloc_r+0x22>
 8006b64:	1b9b      	subs	r3, r3, r6
 8006b66:	50a3      	str	r3, [r4, r2]
 8006b68:	e7b3      	b.n	8006ad2 <_malloc_r+0x22>
 8006b6a:	6862      	ldr	r2, [r4, #4]
 8006b6c:	42a3      	cmp	r3, r4
 8006b6e:	bf0c      	ite	eq
 8006b70:	6032      	streq	r2, [r6, #0]
 8006b72:	605a      	strne	r2, [r3, #4]
 8006b74:	e7ec      	b.n	8006b50 <_malloc_r+0xa0>
 8006b76:	4623      	mov	r3, r4
 8006b78:	6864      	ldr	r4, [r4, #4]
 8006b7a:	e7b2      	b.n	8006ae2 <_malloc_r+0x32>
 8006b7c:	4634      	mov	r4, r6
 8006b7e:	6876      	ldr	r6, [r6, #4]
 8006b80:	e7b9      	b.n	8006af6 <_malloc_r+0x46>
 8006b82:	230c      	movs	r3, #12
 8006b84:	603b      	str	r3, [r7, #0]
 8006b86:	4638      	mov	r0, r7
 8006b88:	f000 f84c 	bl	8006c24 <__malloc_unlock>
 8006b8c:	e7a1      	b.n	8006ad2 <_malloc_r+0x22>
 8006b8e:	6025      	str	r5, [r4, #0]
 8006b90:	e7de      	b.n	8006b50 <_malloc_r+0xa0>
 8006b92:	bf00      	nop
 8006b94:	200002f4 	.word	0x200002f4

08006b98 <_realloc_r>:
 8006b98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	4614      	mov	r4, r2
 8006ba0:	460e      	mov	r6, r1
 8006ba2:	b921      	cbnz	r1, 8006bae <_realloc_r+0x16>
 8006ba4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006ba8:	4611      	mov	r1, r2
 8006baa:	f7ff bf81 	b.w	8006ab0 <_malloc_r>
 8006bae:	b92a      	cbnz	r2, 8006bbc <_realloc_r+0x24>
 8006bb0:	f7ff ff12 	bl	80069d8 <_free_r>
 8006bb4:	4625      	mov	r5, r4
 8006bb6:	4628      	mov	r0, r5
 8006bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bbc:	f000 f838 	bl	8006c30 <_malloc_usable_size_r>
 8006bc0:	4284      	cmp	r4, r0
 8006bc2:	4607      	mov	r7, r0
 8006bc4:	d802      	bhi.n	8006bcc <_realloc_r+0x34>
 8006bc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006bca:	d812      	bhi.n	8006bf2 <_realloc_r+0x5a>
 8006bcc:	4621      	mov	r1, r4
 8006bce:	4640      	mov	r0, r8
 8006bd0:	f7ff ff6e 	bl	8006ab0 <_malloc_r>
 8006bd4:	4605      	mov	r5, r0
 8006bd6:	2800      	cmp	r0, #0
 8006bd8:	d0ed      	beq.n	8006bb6 <_realloc_r+0x1e>
 8006bda:	42bc      	cmp	r4, r7
 8006bdc:	4622      	mov	r2, r4
 8006bde:	4631      	mov	r1, r6
 8006be0:	bf28      	it	cs
 8006be2:	463a      	movcs	r2, r7
 8006be4:	f7ff fed0 	bl	8006988 <memcpy>
 8006be8:	4631      	mov	r1, r6
 8006bea:	4640      	mov	r0, r8
 8006bec:	f7ff fef4 	bl	80069d8 <_free_r>
 8006bf0:	e7e1      	b.n	8006bb6 <_realloc_r+0x1e>
 8006bf2:	4635      	mov	r5, r6
 8006bf4:	e7df      	b.n	8006bb6 <_realloc_r+0x1e>
	...

08006bf8 <_sbrk_r>:
 8006bf8:	b538      	push	{r3, r4, r5, lr}
 8006bfa:	4d06      	ldr	r5, [pc, #24]	; (8006c14 <_sbrk_r+0x1c>)
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	4604      	mov	r4, r0
 8006c00:	4608      	mov	r0, r1
 8006c02:	602b      	str	r3, [r5, #0]
 8006c04:	f7fa f9b4 	bl	8000f70 <_sbrk>
 8006c08:	1c43      	adds	r3, r0, #1
 8006c0a:	d102      	bne.n	8006c12 <_sbrk_r+0x1a>
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	b103      	cbz	r3, 8006c12 <_sbrk_r+0x1a>
 8006c10:	6023      	str	r3, [r4, #0]
 8006c12:	bd38      	pop	{r3, r4, r5, pc}
 8006c14:	200002fc 	.word	0x200002fc

08006c18 <__malloc_lock>:
 8006c18:	4801      	ldr	r0, [pc, #4]	; (8006c20 <__malloc_lock+0x8>)
 8006c1a:	f000 b811 	b.w	8006c40 <__retarget_lock_acquire_recursive>
 8006c1e:	bf00      	nop
 8006c20:	20000300 	.word	0x20000300

08006c24 <__malloc_unlock>:
 8006c24:	4801      	ldr	r0, [pc, #4]	; (8006c2c <__malloc_unlock+0x8>)
 8006c26:	f000 b80c 	b.w	8006c42 <__retarget_lock_release_recursive>
 8006c2a:	bf00      	nop
 8006c2c:	20000300 	.word	0x20000300

08006c30 <_malloc_usable_size_r>:
 8006c30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c34:	1f18      	subs	r0, r3, #4
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	bfbc      	itt	lt
 8006c3a:	580b      	ldrlt	r3, [r1, r0]
 8006c3c:	18c0      	addlt	r0, r0, r3
 8006c3e:	4770      	bx	lr

08006c40 <__retarget_lock_acquire_recursive>:
 8006c40:	4770      	bx	lr

08006c42 <__retarget_lock_release_recursive>:
 8006c42:	4770      	bx	lr

08006c44 <_init>:
 8006c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c46:	bf00      	nop
 8006c48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c4a:	bc08      	pop	{r3}
 8006c4c:	469e      	mov	lr, r3
 8006c4e:	4770      	bx	lr

08006c50 <_fini>:
 8006c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c52:	bf00      	nop
 8006c54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006c56:	bc08      	pop	{r3}
 8006c58:	469e      	mov	lr, r3
 8006c5a:	4770      	bx	lr
