/**
  ******************************************************************************
  * @file		: led.h
  * @author  	: AW		Adrian.Wojcik@put.poznan.pl
  * @version 	: 1.3.0
  * @date    	: Oct 19, 2022
  * @brief   	: Single-color LED components driver
  *
  ******************************************************************************
  */
#ifndef INC_LED_H_
#define INC_LED_H_

/* Public includes -----------------------------------------------------------*/
#include "dio.h"
#include "pwm.h"

/* Public typedef ------------------------------------------------------------*/
typedef enum { LED_ON_LOW, LED_ON_HIGH } LED_ActiveState_TypeDef;
typedef enum { LED_OFF = 0, LED_ON = 1} LED_DIO_State_TypeDef;

/**
  * @brief Digital output (On/Off) LED handle structure definition
  */
typedef struct {
  DIO_Handle_TypeDef Output;
  LED_ActiveState_TypeDef ActiveState;
} LED_DIO_Handle_TypeDef;

/**
  * @brief PWM output (0.-100.%) LED handle structure definition
  */
typedef struct {
  PWM_Handle_TypeDef Output;
  LED_ActiveState_TypeDef ActiveState;
} LED_PWM_Handle_TypeDef;

/* Public define -------------------------------------------------------------*/

/* Public macro --------------------------------------------------------------*/
/**
  * @brief Digital output (On/Off) LED handle structure initialization
  */
#define LED_DIO_INIT_HANDLE(USER_NAME, ACTIVE_STATE)	\
  { 												                          \
    .Output = DIO_INIT_HANDLE(USER_NAME)              \
    .ActiveState = ACTIVE_STATE					              \
  }

/**
  * @brief @brief PWM output (0.-100.%) LED handle structure initialization
  */
#define LED_PWM_INIT_HANDLE(TIMER, CHANNEL, ACTIVE_STATE)  \
  {                                                        \
    .Output = PWM_INIT_HANDLE(TIMER, CHANNEL)              \
    .ActiveState = ACTIVE_STATE                            \
  }

/* Public variables ----------------------------------------------------------*/

/* Public function prototypes ------------------------------------------------*/

/**
  * @brief Turns LED on
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_On(const LED_GPIO_Handle_TypeDef* hled);

/**
  * @brief Turns LED off
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Off(const LED_GPIO_Handle_TypeDef* hled);

/**
  * @brief Toggles LED state
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Toggle(const LED_GPIO_Handle_TypeDef* hled);

/**
  * @brief Writes given LED state
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: LED state (LED_OFF or LED_ON)
  * @retval None
  */
void LED_GPIO_Write(const LED_GPIO_Handle_TypeDef* hled, LED_GPIO_State_TypeDef state);

/**
  * @brief Reads LED state
  * @param[in] hled		: LED GPIO handler
  * @retval	LED state (LED_OFF or LED_ON)
  */
LED_GPIO_State_TypeDef LED_GPIO_Read(const LED_GPIO_Handle_TypeDef* hled);

/**
  * @brief Initialize PWM LED control
  * @param[in/out] hled   : LED PWM handler
  * @retval None
  */
void LED_PWM_Init(LED_PWM_Handle_TypeDef* hled);

/**
  * @brief Write PWM duty cycle
  * @param[in/out] hled   : LED PWM handler
  * @param[in]     duty   : PWM duty cycle in percents (0. - 100.)
  * @retval None
  */
void LED_PWM_WriteDuty(LED_PWM_Handle_TypeDef* hled, float duty);

/**
  * @brief Set PWM duty cycle
  * @param[in] hled   : LED PWM handler
  * @retval PWM duty cycle in percents (0. - 100.)
  */
float LED_PWM_ReadDuty(const LED_PWM_Handle_TypeDef* hled);

#endif /* INC_LED_H_ */
