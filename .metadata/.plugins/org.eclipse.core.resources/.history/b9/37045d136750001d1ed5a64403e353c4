
L02_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a04  08003a04  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08003a04  08003a04  00013a04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a0c  08003a0c  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a0c  08003a0c  00013a0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a10  08003a10  00013a10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08003a14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000bc  20000098  08003aac  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  08003aac  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b58a  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001dbb  00000000  00000000  0002b652  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000860  00000000  00000000  0002d410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000758  00000000  00000000  0002dc70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000258aa  00000000  00000000  0002e3c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c5f2  00000000  00000000  00053c72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6ca6  00000000  00000000  00060264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00146f0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022cc  00000000  00000000  00146f5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000098 	.word	0x20000098
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800398c 	.word	0x0800398c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000009c 	.word	0x2000009c
 800020c:	0800398c 	.word	0x0800398c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <__btn_gpio_read>:
  * @brief Reads button's GPIO pin
  * @param[in] hled		: button GPIO handler
  * @retval GPIO pin state (0/1)
  */
_Bool __btn_gpio_read(const BTN_GPIO_Handle_TypeDef* hbtn)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	return (_Bool)HAL_GPIO_ReadPin(hbtn->Port, hbtn->Pin);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681a      	ldr	r2, [r3, #0]
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	889b      	ldrh	r3, [r3, #4]
 80005c4:	4619      	mov	r1, r3
 80005c6:	4610      	mov	r0, r2
 80005c8:	f000 ff4a 	bl	8001460 <HAL_GPIO_ReadPin>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf14      	ite	ne
 80005d2:	2301      	movne	r3, #1
 80005d4:	2300      	moveq	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
}
 80005d8:	4618      	mov	r0, r3
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <BTN_GPIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button GPIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_GPIO_State_TypeDef BTN_GPIO_Read(const BTN_GPIO_Handle_TypeDef* hbtn)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
	_Bool state = __btn_gpio_read(hbtn);
 80005e8:	6878      	ldr	r0, [r7, #4]
 80005ea:	f7ff ffe3 	bl	80005b4 <__btn_gpio_read>
 80005ee:	4603      	mov	r3, r0
 80005f0:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	799b      	ldrb	r3, [r3, #6]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <BTN_GPIO_Read+0x1e>
 80005fa:	7bfb      	ldrb	r3, [r7, #15]
 80005fc:	e003      	b.n	8000606 <BTN_GPIO_Read+0x26>
 80005fe:	7bfb      	ldrb	r3, [r7, #15]
 8000600:	f083 0301 	eor.w	r3, r3, #1
 8000604:	b2db      	uxtb	r3, r3
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}

0800060e <BTN_GPIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button GPIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_GPIO_Edge_TypeDef BTN_GPIO_EdgeDetected(BTN_GPIO_Handle_TypeDef* hbtn)
{
 800060e:	b580      	push	{r7, lr}
 8000610:	b084      	sub	sp, #16
 8000612:	af00      	add	r7, sp, #0
 8000614:	6078      	str	r0, [r7, #4]
	BTN_GPIO_State_TypeDef state = BTN_GPIO_Read(hbtn);
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f7ff ffe2 	bl	80005e0 <BTN_GPIO_Read>
 800061c:	4603      	mov	r3, r0
 800061e:	73bb      	strb	r3, [r7, #14]
	BTN_GPIO_Edge_TypeDef edge = BTN_NO_EDGE;
 8000620:	2300      	movs	r3, #0
 8000622:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000624:	7bbb      	ldrb	r3, [r7, #14]
 8000626:	2b01      	cmp	r3, #1
 8000628:	d106      	bne.n	8000638 <BTN_GPIO_EdgeDetected+0x2a>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	79db      	ldrb	r3, [r3, #7]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d102      	bne.n	8000638 <BTN_GPIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000632:	2301      	movs	r3, #1
 8000634:	73fb      	strb	r3, [r7, #15]
 8000636:	e008      	b.n	800064a <BTN_GPIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 8000638:	7bbb      	ldrb	r3, [r7, #14]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d105      	bne.n	800064a <BTN_GPIO_EdgeDetected+0x3c>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	79db      	ldrb	r3, [r3, #7]
 8000642:	2b01      	cmp	r3, #1
 8000644:	d101      	bne.n	800064a <BTN_GPIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000646:	2302      	movs	r3, #2
 8000648:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	7bba      	ldrb	r2, [r7, #14]
 800064e:	71da      	strb	r2, [r3, #7]
	return edge;
 8000650:	7bfb      	ldrb	r3, [r7, #15]
}
 8000652:	4618      	mov	r0, r3
 8000654:	3710      	adds	r7, #16
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}

0800065a <__led_gpio_write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: GPIO pin state (0/1)
  * @retval None
  */
void __led_gpio_write(const LED_GPIO_Handle_TypeDef* hled, _Bool state)
{
 800065a:	b580      	push	{r7, lr}
 800065c:	b082      	sub	sp, #8
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hled->Port, hled->Pin, (GPIO_PinState)state);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6818      	ldr	r0, [r3, #0]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	889b      	ldrh	r3, [r3, #4]
 800066e:	78fa      	ldrb	r2, [r7, #3]
 8000670:	4619      	mov	r1, r3
 8000672:	f000 ff0d 	bl	8001490 <HAL_GPIO_WritePin>
}
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <LED_GPIO_On>:
  * @brief Turns LED on
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_On(const LED_GPIO_Handle_TypeDef* hled)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
 8000684:	6078      	str	r0, [r7, #4]
	LED_GPIO_Write(hled, LED_ON);
 8000686:	2101      	movs	r1, #1
 8000688:	6878      	ldr	r0, [r7, #4]
 800068a:	f000 f810 	bl	80006ae <LED_GPIO_Write>
}
 800068e:	bf00      	nop
 8000690:	3708      	adds	r7, #8
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <LED_GPIO_Off>:
  * @brief Turns LED off
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Off(const LED_GPIO_Handle_TypeDef* hled)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	6078      	str	r0, [r7, #4]
	LED_GPIO_Write(hled, LED_OFF);
 800069e:	2100      	movs	r1, #0
 80006a0:	6878      	ldr	r0, [r7, #4]
 80006a2:	f000 f804 	bl	80006ae <LED_GPIO_Write>
}
 80006a6:	bf00      	nop
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <LED_GPIO_Write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: LED state (LED_OFF or LED_ON)
  * @retval None
  */
void LED_GPIO_Write(const LED_GPIO_Handle_TypeDef* hled, LED_GPIO_State_TypeDef state)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	b082      	sub	sp, #8
 80006b2:	af00      	add	r7, sp, #0
 80006b4:	6078      	str	r0, [r7, #4]
 80006b6:	460b      	mov	r3, r1
 80006b8:	70fb      	strb	r3, [r7, #3]
	__led_gpio_write(hled, hled->ActiveState == LED_ON_HIGH ? state : !state);
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	799b      	ldrb	r3, [r3, #6]
 80006be:	2b01      	cmp	r3, #1
 80006c0:	d106      	bne.n	80006d0 <LED_GPIO_Write+0x22>
 80006c2:	78fb      	ldrb	r3, [r7, #3]
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	bf14      	ite	ne
 80006c8:	2301      	movne	r3, #1
 80006ca:	2300      	moveq	r3, #0
 80006cc:	b2db      	uxtb	r3, r3
 80006ce:	e005      	b.n	80006dc <LED_GPIO_Write+0x2e>
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	bf0c      	ite	eq
 80006d6:	2301      	moveq	r3, #1
 80006d8:	2300      	movne	r3, #0
 80006da:	b2db      	uxtb	r3, r3
 80006dc:	4619      	mov	r1, r3
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f7ff ffbb 	bl	800065a <__led_gpio_write>
}
 80006e4:	bf00      	nop
 80006e6:	3708      	adds	r7, #8
 80006e8:	46bd      	mov	sp, r7
 80006ea:	bd80      	pop	{r7, pc}

080006ec <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b08c      	sub	sp, #48	; 0x30
 80006f0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000702:	4b99      	ldr	r3, [pc, #612]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000706:	4a98      	ldr	r2, [pc, #608]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000708:	f043 0304 	orr.w	r3, r3, #4
 800070c:	6313      	str	r3, [r2, #48]	; 0x30
 800070e:	4b96      	ldr	r3, [pc, #600]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000712:	f003 0304 	and.w	r3, r3, #4
 8000716:	61bb      	str	r3, [r7, #24]
 8000718:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800071a:	4b93      	ldr	r3, [pc, #588]	; (8000968 <MX_GPIO_Init+0x27c>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071e:	4a92      	ldr	r2, [pc, #584]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000720:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000724:	6313      	str	r3, [r2, #48]	; 0x30
 8000726:	4b90      	ldr	r3, [pc, #576]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000732:	4b8d      	ldr	r3, [pc, #564]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000736:	4a8c      	ldr	r2, [pc, #560]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000738:	f043 0301 	orr.w	r3, r3, #1
 800073c:	6313      	str	r3, [r2, #48]	; 0x30
 800073e:	4b8a      	ldr	r3, [pc, #552]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000740:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000742:	f003 0301 	and.w	r3, r3, #1
 8000746:	613b      	str	r3, [r7, #16]
 8000748:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b87      	ldr	r3, [pc, #540]	; (8000968 <MX_GPIO_Init+0x27c>)
 800074c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800074e:	4a86      	ldr	r2, [pc, #536]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	6313      	str	r3, [r2, #48]	; 0x30
 8000756:	4b84      	ldr	r3, [pc, #528]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	60fb      	str	r3, [r7, #12]
 8000760:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000762:	4b81      	ldr	r3, [pc, #516]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a80      	ldr	r2, [pc, #512]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000768:	f043 0308 	orr.w	r3, r3, #8
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b7e      	ldr	r3, [pc, #504]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0308 	and.w	r3, r3, #8
 8000776:	60bb      	str	r3, [r7, #8]
 8000778:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800077a:	4b7b      	ldr	r3, [pc, #492]	; (8000968 <MX_GPIO_Init+0x27c>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a7a      	ldr	r2, [pc, #488]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000780:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b78      	ldr	r3, [pc, #480]	; (8000968 <MX_GPIO_Init+0x27c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800078e:	607b      	str	r3, [r7, #4]
 8000790:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8000792:	2200      	movs	r2, #0
 8000794:	2108      	movs	r1, #8
 8000796:	4875      	ldr	r0, [pc, #468]	; (800096c <MX_GPIO_Init+0x280>)
 8000798:	f000 fe7a 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800079c:	2200      	movs	r2, #0
 800079e:	f244 0181 	movw	r1, #16513	; 0x4081
 80007a2:	4873      	ldr	r0, [pc, #460]	; (8000970 <MX_GPIO_Init+0x284>)
 80007a4:	f000 fe74 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007a8:	2200      	movs	r2, #0
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4871      	ldr	r0, [pc, #452]	; (8000974 <MX_GPIO_Init+0x288>)
 80007ae:	f000 fe6f 	bl	8001490 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007b2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	4619      	mov	r1, r3
 80007c8:	486b      	ldr	r0, [pc, #428]	; (8000978 <MX_GPIO_Init+0x28c>)
 80007ca:	f000 fc9d 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 80007ce:	2301      	movs	r3, #1
 80007d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007d2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007d8:	2301      	movs	r3, #1
 80007da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	4619      	mov	r1, r3
 80007e2:	4865      	ldr	r0, [pc, #404]	; (8000978 <MX_GPIO_Init+0x28c>)
 80007e4:	f000 fc90 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007e8:	2332      	movs	r3, #50	; 0x32
 80007ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ec:	2302      	movs	r3, #2
 80007ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f0:	2300      	movs	r3, #0
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007f4:	2303      	movs	r3, #3
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007f8:	230b      	movs	r3, #11
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	485d      	ldr	r0, [pc, #372]	; (8000978 <MX_GPIO_Init+0x28c>)
 8000804:	f000 fc80 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8000808:	2308      	movs	r3, #8
 800080a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800080c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000810:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000812:	2302      	movs	r3, #2
 8000814:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4619      	mov	r1, r3
 800081c:	4856      	ldr	r0, [pc, #344]	; (8000978 <MX_GPIO_Init+0x28c>)
 800081e:	f000 fc73 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000822:	2386      	movs	r3, #134	; 0x86
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000832:	230b      	movs	r3, #11
 8000834:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 031c 	add.w	r3, r7, #28
 800083a:	4619      	mov	r1, r3
 800083c:	484b      	ldr	r0, [pc, #300]	; (800096c <MX_GPIO_Init+0x280>)
 800083e:	f000 fc63 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000842:	2308      	movs	r3, #8
 8000844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000846:	2301      	movs	r3, #1
 8000848:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800084a:	2302      	movs	r3, #2
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800084e:	2300      	movs	r3, #0
 8000850:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000852:	f107 031c 	add.w	r3, r7, #28
 8000856:	4619      	mov	r1, r3
 8000858:	4844      	ldr	r0, [pc, #272]	; (800096c <MX_GPIO_Init+0x280>)
 800085a:	f000 fc55 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800085e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000862:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000864:	2301      	movs	r3, #1
 8000866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800086c:	2300      	movs	r3, #0
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 031c 	add.w	r3, r7, #28
 8000874:	4619      	mov	r1, r3
 8000876:	483e      	ldr	r0, [pc, #248]	; (8000970 <MX_GPIO_Init+0x284>)
 8000878:	f000 fc46 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800087c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	2302      	movs	r3, #2
 8000884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000886:	2300      	movs	r3, #0
 8000888:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088a:	2303      	movs	r3, #3
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800088e:	230b      	movs	r3, #11
 8000890:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	4835      	ldr	r0, [pc, #212]	; (8000970 <MX_GPIO_Init+0x284>)
 800089a:	f000 fc35 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800089e:	2340      	movs	r3, #64	; 0x40
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	482f      	ldr	r0, [pc, #188]	; (8000974 <MX_GPIO_Init+0x288>)
 80008b6:	f000 fc27 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008be:	2300      	movs	r3, #0
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008c6:	f107 031c 	add.w	r3, r7, #28
 80008ca:	4619      	mov	r1, r3
 80008cc:	4829      	ldr	r0, [pc, #164]	; (8000974 <MX_GPIO_Init+0x288>)
 80008ce:	f000 fc1b 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d8:	2302      	movs	r3, #2
 80008da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008dc:	2300      	movs	r3, #0
 80008de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e0:	2303      	movs	r3, #3
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008e4:	230a      	movs	r3, #10
 80008e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	4619      	mov	r1, r3
 80008ee:	481f      	ldr	r0, [pc, #124]	; (800096c <MX_GPIO_Init+0x280>)
 80008f0:	f000 fc0a 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80008f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008fa:	2300      	movs	r3, #0
 80008fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 031c 	add.w	r3, r7, #28
 8000906:	4619      	mov	r1, r3
 8000908:	4818      	ldr	r0, [pc, #96]	; (800096c <MX_GPIO_Init+0x280>)
 800090a:	f000 fbfd 	bl	8001108 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800090e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000912:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000914:	2302      	movs	r3, #2
 8000916:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000918:	2300      	movs	r3, #0
 800091a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091c:	2303      	movs	r3, #3
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000920:	230b      	movs	r3, #11
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000924:	f107 031c 	add.w	r3, r7, #28
 8000928:	4619      	mov	r1, r3
 800092a:	4812      	ldr	r0, [pc, #72]	; (8000974 <MX_GPIO_Init+0x288>)
 800092c:	f000 fbec 	bl	8001108 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	2006      	movs	r0, #6
 8000936:	f000 fbb0 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800093a:	2006      	movs	r0, #6
 800093c:	f000 fbc9 	bl	80010d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000940:	2200      	movs	r2, #0
 8000942:	2100      	movs	r1, #0
 8000944:	2009      	movs	r0, #9
 8000946:	f000 fba8 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800094a:	2009      	movs	r0, #9
 800094c:	f000 fbc1 	bl	80010d2 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000950:	2200      	movs	r2, #0
 8000952:	2100      	movs	r1, #0
 8000954:	2028      	movs	r0, #40	; 0x28
 8000956:	f000 fba0 	bl	800109a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800095a:	2028      	movs	r0, #40	; 0x28
 800095c:	f000 fbb9 	bl	80010d2 <HAL_NVIC_EnableIRQ>

}
 8000960:	bf00      	nop
 8000962:	3730      	adds	r7, #48	; 0x30
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40023800 	.word	0x40023800
 800096c:	40020000 	.word	0x40020000
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800

0800097c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	b08c      	sub	sp, #48	; 0x30
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000982:	f000 fa2e 	bl	8000de2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000986:	f000 f859 	bl	8000a3c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800098a:	f7ff feaf 	bl	80006ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800098e:	f000 f96f 	bl	8000c70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  unsigned int btn1_cnt = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(BTN_GPIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE)
 8000996:	4822      	ldr	r0, [pc, #136]	; (8000a20 <main+0xa4>)
 8000998:	f7ff fe39 	bl	800060e <BTN_GPIO_EdgeDetected>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d13a      	bne.n	8000a18 <main+0x9c>
    {
      // Increment counter
      btn1_cnt++;
 80009a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009a4:	3301      	adds	r3, #1
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      // Format message string
      char msg[32];
      int msg_len = sprintf(msg, "BTN1 Counter: %d \r\n", btn1_cnt);
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80009ac:	491d      	ldr	r1, [pc, #116]	; (8000a24 <main+0xa8>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fb7e 	bl	80030b0 <siprintf>
 80009b4:	62b8      	str	r0, [r7, #40]	; 0x28
      // Send message
      if(HAL_UART_Transmit(&huart3, (uint8_t*)msg, msg_len, 10) == HAL_OK)
 80009b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	1d39      	adds	r1, r7, #4
 80009bc:	230a      	movs	r3, #10
 80009be:	481a      	ldr	r0, [pc, #104]	; (8000a28 <main+0xac>)
 80009c0:	f001 febc 	bl	800273c <HAL_UART_Transmit>
 80009c4:	4603      	mov	r3, r0
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d102      	bne.n	80009d0 <main+0x54>
      {
        LED_GPIO_On(&hld4);
 80009ca:	4818      	ldr	r0, [pc, #96]	; (8000a2c <main+0xb0>)
 80009cc:	f7ff fe57 	bl	800067e <LED_GPIO_On>
      }

	  int t_on = 100; // [ms]
 80009d0:	2364      	movs	r3, #100	; 0x64
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24

	  LED_GPIO_On(&hld1);
 80009d4:	4816      	ldr	r0, [pc, #88]	; (8000a30 <main+0xb4>)
 80009d6:	f7ff fe52 	bl	800067e <LED_GPIO_On>
	  HAL_Delay(t_on);
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	4618      	mov	r0, r3
 80009de:	f000 fa5d 	bl	8000e9c <HAL_Delay>
	  LED_GPIO_Off(&hld1);
 80009e2:	4813      	ldr	r0, [pc, #76]	; (8000a30 <main+0xb4>)
 80009e4:	f7ff fe57 	bl	8000696 <LED_GPIO_Off>

	  LED_GPIO_On(&hld2);
 80009e8:	4812      	ldr	r0, [pc, #72]	; (8000a34 <main+0xb8>)
 80009ea:	f7ff fe48 	bl	800067e <LED_GPIO_On>
	  HAL_Delay(t_on);
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	4618      	mov	r0, r3
 80009f2:	f000 fa53 	bl	8000e9c <HAL_Delay>
	  LED_GPIO_Off(&hld2);
 80009f6:	480f      	ldr	r0, [pc, #60]	; (8000a34 <main+0xb8>)
 80009f8:	f7ff fe4d 	bl	8000696 <LED_GPIO_Off>

	  LED_GPIO_On(&hld3);
 80009fc:	480e      	ldr	r0, [pc, #56]	; (8000a38 <main+0xbc>)
 80009fe:	f7ff fe3e 	bl	800067e <LED_GPIO_On>
	  HAL_Delay(t_on);
 8000a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a04:	4618      	mov	r0, r3
 8000a06:	f000 fa49 	bl	8000e9c <HAL_Delay>
	  LED_GPIO_Off(&hld3);
 8000a0a:	480b      	ldr	r0, [pc, #44]	; (8000a38 <main+0xbc>)
 8000a0c:	f7ff fe43 	bl	8000696 <LED_GPIO_Off>

	  LED_GPIO_Off(&hld4);
 8000a10:	4806      	ldr	r0, [pc, #24]	; (8000a2c <main+0xb0>)
 8000a12:	f7ff fe40 	bl	8000696 <LED_GPIO_Off>
 8000a16:	e7be      	b.n	8000996 <main+0x1a>
    }
    else
      HAL_Delay(10);
 8000a18:	200a      	movs	r0, #10
 8000a1a:	f000 fa3f 	bl	8000e9c <HAL_Delay>
    if(BTN_GPIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE)
 8000a1e:	e7ba      	b.n	8000996 <main+0x1a>
 8000a20:	20000000 	.word	0x20000000
 8000a24:	080039a4 	.word	0x080039a4
 8000a28:	200000b8 	.word	0x200000b8
 8000a2c:	20000020 	.word	0x20000020
 8000a30:	20000008 	.word	0x20000008
 8000a34:	20000010 	.word	0x20000010
 8000a38:	20000018 	.word	0x20000018

08000a3c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b094      	sub	sp, #80	; 0x50
 8000a40:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a42:	f107 0320 	add.w	r3, r7, #32
 8000a46:	2230      	movs	r2, #48	; 0x30
 8000a48:	2100      	movs	r1, #0
 8000a4a:	4618      	mov	r0, r3
 8000a4c:	f002 fb28 	bl	80030a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a50:	f107 030c 	add.w	r3, r7, #12
 8000a54:	2200      	movs	r2, #0
 8000a56:	601a      	str	r2, [r3, #0]
 8000a58:	605a      	str	r2, [r3, #4]
 8000a5a:	609a      	str	r2, [r3, #8]
 8000a5c:	60da      	str	r2, [r3, #12]
 8000a5e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000a60:	f000 fd54 	bl	800150c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a68:	4a26      	ldr	r2, [pc, #152]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a70:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <SystemClock_Config+0xc8>)
 8000a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a78:	60bb      	str	r3, [r7, #8]
 8000a7a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a7c:	4b22      	ldr	r3, [pc, #136]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000a84:	4a20      	ldr	r2, [pc, #128]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a86:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a8a:	6013      	str	r3, [r2, #0]
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	; (8000b08 <SystemClock_Config+0xcc>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000a98:	2301      	movs	r3, #1
 8000a9a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000a9c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000aa0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aa2:	2302      	movs	r3, #2
 8000aa4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000aa6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000ab0:	2348      	movs	r3, #72	; 0x48
 8000ab2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ab8:	2303      	movs	r3, #3
 8000aba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000abc:	f107 0320 	add.w	r3, r7, #32
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f000 fd33 	bl	800152c <HAL_RCC_OscConfig>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000acc:	f000 f81e 	bl	8000b0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ad4:	2302      	movs	r3, #2
 8000ad6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000adc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ae0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ae6:	f107 030c 	add.w	r3, r7, #12
 8000aea:	2102      	movs	r1, #2
 8000aec:	4618      	mov	r0, r3
 8000aee:	f000 ffc1 	bl	8001a74 <HAL_RCC_ClockConfig>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000af8:	f000 f808 	bl	8000b0c <Error_Handler>
  }
}
 8000afc:	bf00      	nop
 8000afe:	3750      	adds	r7, #80	; 0x50
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40007000 	.word	0x40007000

08000b0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b10:	b672      	cpsid	i
}
 8000b12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <Error_Handler+0x8>
	...

08000b18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1e:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <HAL_MspInit+0x44>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a0e      	ldr	r2, [pc, #56]	; (8000b5c <HAL_MspInit+0x44>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <HAL_MspInit+0x44>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	607b      	str	r3, [r7, #4]
 8000b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x44>)
 8000b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x44>)
 8000b3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b40:	6453      	str	r3, [r2, #68]	; 0x44
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x44>)
 8000b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f956 	bl	8000e5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8000bb8:	2001      	movs	r0, #1
 8000bba:	f000 fc83 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 8000bc6:	2008      	movs	r0, #8
 8000bc8:	f000 fc7c 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000bd4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000bd8:	f000 fc74 	bl	80014c4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000bdc:	bf00      	nop
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b086      	sub	sp, #24
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000be8:	4a14      	ldr	r2, [pc, #80]	; (8000c3c <_sbrk+0x5c>)
 8000bea:	4b15      	ldr	r3, [pc, #84]	; (8000c40 <_sbrk+0x60>)
 8000bec:	1ad3      	subs	r3, r2, r3
 8000bee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bf0:	697b      	ldr	r3, [r7, #20]
 8000bf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bf4:	4b13      	ldr	r3, [pc, #76]	; (8000c44 <_sbrk+0x64>)
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d102      	bne.n	8000c02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bfc:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <_sbrk+0x64>)
 8000bfe:	4a12      	ldr	r2, [pc, #72]	; (8000c48 <_sbrk+0x68>)
 8000c00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c02:	4b10      	ldr	r3, [pc, #64]	; (8000c44 <_sbrk+0x64>)
 8000c04:	681a      	ldr	r2, [r3, #0]
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4413      	add	r3, r2
 8000c0a:	693a      	ldr	r2, [r7, #16]
 8000c0c:	429a      	cmp	r2, r3
 8000c0e:	d207      	bcs.n	8000c20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c10:	f002 fa1c 	bl	800304c <__errno>
 8000c14:	4603      	mov	r3, r0
 8000c16:	220c      	movs	r2, #12
 8000c18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1e:	e009      	b.n	8000c34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c20:	4b08      	ldr	r3, [pc, #32]	; (8000c44 <_sbrk+0x64>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c26:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <_sbrk+0x64>)
 8000c28:	681a      	ldr	r2, [r3, #0]
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4a05      	ldr	r2, [pc, #20]	; (8000c44 <_sbrk+0x64>)
 8000c30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c32:	68fb      	ldr	r3, [r7, #12]
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20050000 	.word	0x20050000
 8000c40:	00000400 	.word	0x00000400
 8000c44:	200000b4 	.word	0x200000b4
 8000c48:	20000158 	.word	0x20000158

08000c4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <SystemInit+0x20>)
 8000c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c56:	4a05      	ldr	r2, [pc, #20]	; (8000c6c <SystemInit+0x20>)
 8000c58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000c74:	4b14      	ldr	r3, [pc, #80]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c76:	4a15      	ldr	r2, [pc, #84]	; (8000ccc <MX_USART3_UART_Init+0x5c>)
 8000c78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000c7a:	4b13      	ldr	r3, [pc, #76]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000c82:	4b11      	ldr	r3, [pc, #68]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c84:	2200      	movs	r2, #0
 8000c86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000c88:	4b0f      	ldr	r3, [pc, #60]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000c8e:	4b0e      	ldr	r3, [pc, #56]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000c94:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c96:	220c      	movs	r2, #12
 8000c98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9a:	4b0b      	ldr	r3, [pc, #44]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca0:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ca6:	4b08      	ldr	r3, [pc, #32]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cac:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cb2:	4805      	ldr	r0, [pc, #20]	; (8000cc8 <MX_USART3_UART_Init+0x58>)
 8000cb4:	f001 fcf4 	bl	80026a0 <HAL_UART_Init>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000cbe:	f7ff ff25 	bl	8000b0c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	200000b8 	.word	0x200000b8
 8000ccc:	40004800 	.word	0x40004800

08000cd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b0aa      	sub	sp, #168	; 0xa8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000cdc:	2200      	movs	r2, #0
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	605a      	str	r2, [r3, #4]
 8000ce2:	609a      	str	r2, [r3, #8]
 8000ce4:	60da      	str	r2, [r3, #12]
 8000ce6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce8:	f107 0310 	add.w	r3, r7, #16
 8000cec:	2284      	movs	r2, #132	; 0x84
 8000cee:	2100      	movs	r1, #0
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f002 f9d5 	bl	80030a0 <memset>
  if(uartHandle->Instance==USART3)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	4a22      	ldr	r2, [pc, #136]	; (8000d84 <HAL_UART_MspInit+0xb4>)
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	d13c      	bne.n	8000d7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000d04:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d0a:	f107 0310 	add.w	r3, r7, #16
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f001 f8d6 	bl	8001ec0 <HAL_RCCEx_PeriphCLKConfig>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d1a:	f7ff fef7 	bl	8000b0c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d1e:	4b1a      	ldr	r3, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d22:	4a19      	ldr	r2, [pc, #100]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d28:	6413      	str	r3, [r2, #64]	; 0x40
 8000d2a:	4b17      	ldr	r3, [pc, #92]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d32:	60fb      	str	r3, [r7, #12]
 8000d34:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d36:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	6313      	str	r3, [r2, #48]	; 0x30
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_UART_MspInit+0xb8>)
 8000d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d46:	f003 0308 	and.w	r3, r3, #8
 8000d4a:	60bb      	str	r3, [r7, #8]
 8000d4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d52:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d56:	2302      	movs	r3, #2
 8000d58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d62:	2303      	movs	r3, #3
 8000d64:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d68:	2307      	movs	r3, #7
 8000d6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d6e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000d72:	4619      	mov	r1, r3
 8000d74:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_UART_MspInit+0xbc>)
 8000d76:	f000 f9c7 	bl	8001108 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000d7a:	bf00      	nop
 8000d7c:	37a8      	adds	r7, #168	; 0xa8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40004800 	.word	0x40004800
 8000d88:	40023800 	.word	0x40023800
 8000d8c:	40020c00 	.word	0x40020c00

08000d90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dc8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d94:	480d      	ldr	r0, [pc, #52]	; (8000dcc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d96:	490e      	ldr	r1, [pc, #56]	; (8000dd0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d98:	4a0e      	ldr	r2, [pc, #56]	; (8000dd4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d9c:	e002      	b.n	8000da4 <LoopCopyDataInit>

08000d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000da2:	3304      	adds	r3, #4

08000da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000da8:	d3f9      	bcc.n	8000d9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000daa:	4a0b      	ldr	r2, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000dac:	4c0b      	ldr	r4, [pc, #44]	; (8000ddc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000db0:	e001      	b.n	8000db6 <LoopFillZerobss>

08000db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000db4:	3204      	adds	r2, #4

08000db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000db8:	d3fb      	bcc.n	8000db2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000dba:	f7ff ff47 	bl	8000c4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dbe:	f002 f94b 	bl	8003058 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dc2:	f7ff fddb 	bl	800097c <main>
  bx  lr    
 8000dc6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000dc8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000dcc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dd0:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8000dd4:	08003a14 	.word	0x08003a14
  ldr r2, =_sbss
 8000dd8:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8000ddc:	20000154 	.word	0x20000154

08000de0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de0:	e7fe      	b.n	8000de0 <ADC_IRQHandler>

08000de2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000de6:	2003      	movs	r0, #3
 8000de8:	f000 f94c 	bl	8001084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dec:	2000      	movs	r0, #0
 8000dee:	f000 f805 	bl	8000dfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000df2:	f7ff fe91 	bl	8000b18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000df6:	2300      	movs	r3, #0
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	bd80      	pop	{r7, pc}

08000dfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e04:	4b12      	ldr	r3, [pc, #72]	; (8000e50 <HAL_InitTick+0x54>)
 8000e06:	681a      	ldr	r2, [r3, #0]
 8000e08:	4b12      	ldr	r3, [pc, #72]	; (8000e54 <HAL_InitTick+0x58>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f000 f967 	bl	80010ee <HAL_SYSTICK_Config>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e26:	2301      	movs	r3, #1
 8000e28:	e00e      	b.n	8000e48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2b0f      	cmp	r3, #15
 8000e2e:	d80a      	bhi.n	8000e46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e30:	2200      	movs	r2, #0
 8000e32:	6879      	ldr	r1, [r7, #4]
 8000e34:	f04f 30ff 	mov.w	r0, #4294967295
 8000e38:	f000 f92f 	bl	800109a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e3c:	4a06      	ldr	r2, [pc, #24]	; (8000e58 <HAL_InitTick+0x5c>)
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	e000      	b.n	8000e48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	3708      	adds	r7, #8
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	20000028 	.word	0x20000028
 8000e54:	20000030 	.word	0x20000030
 8000e58:	2000002c 	.word	0x2000002c

08000e5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e60:	4b06      	ldr	r3, [pc, #24]	; (8000e7c <HAL_IncTick+0x20>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	461a      	mov	r2, r3
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_IncTick+0x24>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4413      	add	r3, r2
 8000e6c:	4a04      	ldr	r2, [pc, #16]	; (8000e80 <HAL_IncTick+0x24>)
 8000e6e:	6013      	str	r3, [r2, #0]
}
 8000e70:	bf00      	nop
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	20000030 	.word	0x20000030
 8000e80:	20000140 	.word	0x20000140

08000e84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  return uwTick;
 8000e88:	4b03      	ldr	r3, [pc, #12]	; (8000e98 <HAL_GetTick+0x14>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	20000140 	.word	0x20000140

08000e9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ea4:	f7ff ffee 	bl	8000e84 <HAL_GetTick>
 8000ea8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000eb4:	d005      	beq.n	8000ec2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000eb6:	4b0a      	ldr	r3, [pc, #40]	; (8000ee0 <HAL_Delay+0x44>)
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	461a      	mov	r2, r3
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	4413      	add	r3, r2
 8000ec0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ec2:	bf00      	nop
 8000ec4:	f7ff ffde 	bl	8000e84 <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	68fa      	ldr	r2, [r7, #12]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	d8f7      	bhi.n	8000ec4 <HAL_Delay+0x28>
  {
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	bf00      	nop
 8000ed8:	3710      	adds	r7, #16
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}
 8000ede:	bf00      	nop
 8000ee0:	20000030 	.word	0x20000030

08000ee4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b085      	sub	sp, #20
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f003 0307 	and.w	r3, r3, #7
 8000ef2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000efa:	68ba      	ldr	r2, [r7, #8]
 8000efc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f00:	4013      	ands	r3, r2
 8000f02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000f0c:	4b06      	ldr	r3, [pc, #24]	; (8000f28 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x40>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00
 8000f28:	05fa0000 	.word	0x05fa0000

08000f2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f30:	4b04      	ldr	r3, [pc, #16]	; (8000f44 <__NVIC_GetPriorityGrouping+0x18>)
 8000f32:	68db      	ldr	r3, [r3, #12]
 8000f34:	0a1b      	lsrs	r3, r3, #8
 8000f36:	f003 0307 	and.w	r3, r3, #7
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f42:	4770      	bx	lr
 8000f44:	e000ed00 	.word	0xe000ed00

08000f48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	4603      	mov	r3, r0
 8000f50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	db0b      	blt.n	8000f72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	f003 021f 	and.w	r2, r3, #31
 8000f60:	4907      	ldr	r1, [pc, #28]	; (8000f80 <__NVIC_EnableIRQ+0x38>)
 8000f62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f66:	095b      	lsrs	r3, r3, #5
 8000f68:	2001      	movs	r0, #1
 8000f6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f72:	bf00      	nop
 8000f74:	370c      	adds	r7, #12
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	e000e100 	.word	0xe000e100

08000f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f84:	b480      	push	{r7}
 8000f86:	b083      	sub	sp, #12
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	6039      	str	r1, [r7, #0]
 8000f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	db0a      	blt.n	8000fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	b2da      	uxtb	r2, r3
 8000f9c:	490c      	ldr	r1, [pc, #48]	; (8000fd0 <__NVIC_SetPriority+0x4c>)
 8000f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa2:	0112      	lsls	r2, r2, #4
 8000fa4:	b2d2      	uxtb	r2, r2
 8000fa6:	440b      	add	r3, r1
 8000fa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fac:	e00a      	b.n	8000fc4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	b2da      	uxtb	r2, r3
 8000fb2:	4908      	ldr	r1, [pc, #32]	; (8000fd4 <__NVIC_SetPriority+0x50>)
 8000fb4:	79fb      	ldrb	r3, [r7, #7]
 8000fb6:	f003 030f 	and.w	r3, r3, #15
 8000fba:	3b04      	subs	r3, #4
 8000fbc:	0112      	lsls	r2, r2, #4
 8000fbe:	b2d2      	uxtb	r2, r2
 8000fc0:	440b      	add	r3, r1
 8000fc2:	761a      	strb	r2, [r3, #24]
}
 8000fc4:	bf00      	nop
 8000fc6:	370c      	adds	r7, #12
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000e100 	.word	0xe000e100
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b089      	sub	sp, #36	; 0x24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	60f8      	str	r0, [r7, #12]
 8000fe0:	60b9      	str	r1, [r7, #8]
 8000fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	f003 0307 	and.w	r3, r3, #7
 8000fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fec:	69fb      	ldr	r3, [r7, #28]
 8000fee:	f1c3 0307 	rsb	r3, r3, #7
 8000ff2:	2b04      	cmp	r3, #4
 8000ff4:	bf28      	it	cs
 8000ff6:	2304      	movcs	r3, #4
 8000ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	3304      	adds	r3, #4
 8000ffe:	2b06      	cmp	r3, #6
 8001000:	d902      	bls.n	8001008 <NVIC_EncodePriority+0x30>
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	3b03      	subs	r3, #3
 8001006:	e000      	b.n	800100a <NVIC_EncodePriority+0x32>
 8001008:	2300      	movs	r3, #0
 800100a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800100c:	f04f 32ff 	mov.w	r2, #4294967295
 8001010:	69bb      	ldr	r3, [r7, #24]
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	43da      	mvns	r2, r3
 8001018:	68bb      	ldr	r3, [r7, #8]
 800101a:	401a      	ands	r2, r3
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001020:	f04f 31ff 	mov.w	r1, #4294967295
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa01 f303 	lsl.w	r3, r1, r3
 800102a:	43d9      	mvns	r1, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001030:	4313      	orrs	r3, r2
         );
}
 8001032:	4618      	mov	r0, r3
 8001034:	3724      	adds	r7, #36	; 0x24
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
	...

08001040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	3b01      	subs	r3, #1
 800104c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001050:	d301      	bcc.n	8001056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001052:	2301      	movs	r3, #1
 8001054:	e00f      	b.n	8001076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <SysTick_Config+0x40>)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800105e:	210f      	movs	r1, #15
 8001060:	f04f 30ff 	mov.w	r0, #4294967295
 8001064:	f7ff ff8e 	bl	8000f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001068:	4b05      	ldr	r3, [pc, #20]	; (8001080 <SysTick_Config+0x40>)
 800106a:	2200      	movs	r2, #0
 800106c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800106e:	4b04      	ldr	r3, [pc, #16]	; (8001080 <SysTick_Config+0x40>)
 8001070:	2207      	movs	r2, #7
 8001072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001074:	2300      	movs	r3, #0
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	e000e010 	.word	0xe000e010

08001084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800108c:	6878      	ldr	r0, [r7, #4]
 800108e:	f7ff ff29 	bl	8000ee4 <__NVIC_SetPriorityGrouping>
}
 8001092:	bf00      	nop
 8001094:	3708      	adds	r7, #8
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800109a:	b580      	push	{r7, lr}
 800109c:	b086      	sub	sp, #24
 800109e:	af00      	add	r7, sp, #0
 80010a0:	4603      	mov	r3, r0
 80010a2:	60b9      	str	r1, [r7, #8]
 80010a4:	607a      	str	r2, [r7, #4]
 80010a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010a8:	2300      	movs	r3, #0
 80010aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010ac:	f7ff ff3e 	bl	8000f2c <__NVIC_GetPriorityGrouping>
 80010b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010b2:	687a      	ldr	r2, [r7, #4]
 80010b4:	68b9      	ldr	r1, [r7, #8]
 80010b6:	6978      	ldr	r0, [r7, #20]
 80010b8:	f7ff ff8e 	bl	8000fd8 <NVIC_EncodePriority>
 80010bc:	4602      	mov	r2, r0
 80010be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010c2:	4611      	mov	r1, r2
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff5d 	bl	8000f84 <__NVIC_SetPriority>
}
 80010ca:	bf00      	nop
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b082      	sub	sp, #8
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	4603      	mov	r3, r0
 80010da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff ff31 	bl	8000f48 <__NVIC_EnableIRQ>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b082      	sub	sp, #8
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f7ff ffa2 	bl	8001040 <SysTick_Config>
 80010fc:	4603      	mov	r3, r0
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001108:	b480      	push	{r7}
 800110a:	b089      	sub	sp, #36	; 0x24
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001112:	2300      	movs	r3, #0
 8001114:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800111e:	2300      	movs	r3, #0
 8001120:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001122:	2300      	movs	r3, #0
 8001124:	61fb      	str	r3, [r7, #28]
 8001126:	e175      	b.n	8001414 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001128:	2201      	movs	r2, #1
 800112a:	69fb      	ldr	r3, [r7, #28]
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	697a      	ldr	r2, [r7, #20]
 8001138:	4013      	ands	r3, r2
 800113a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800113c:	693a      	ldr	r2, [r7, #16]
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	429a      	cmp	r2, r3
 8001142:	f040 8164 	bne.w	800140e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f003 0303 	and.w	r3, r3, #3
 800114e:	2b01      	cmp	r3, #1
 8001150:	d005      	beq.n	800115e <HAL_GPIO_Init+0x56>
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f003 0303 	and.w	r3, r3, #3
 800115a:	2b02      	cmp	r3, #2
 800115c:	d130      	bne.n	80011c0 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	2203      	movs	r2, #3
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	69ba      	ldr	r2, [r7, #24]
 8001172:	4013      	ands	r3, r2
 8001174:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	68da      	ldr	r2, [r3, #12]
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	fa02 f303 	lsl.w	r3, r2, r3
 8001182:	69ba      	ldr	r2, [r7, #24]
 8001184:	4313      	orrs	r3, r2
 8001186:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001194:	2201      	movs	r2, #1
 8001196:	69fb      	ldr	r3, [r7, #28]
 8001198:	fa02 f303 	lsl.w	r3, r2, r3
 800119c:	43db      	mvns	r3, r3
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	4013      	ands	r3, r2
 80011a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	685b      	ldr	r3, [r3, #4]
 80011a8:	091b      	lsrs	r3, r3, #4
 80011aa:	f003 0201 	and.w	r2, r3, #1
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	fa02 f303 	lsl.w	r3, r2, r3
 80011b4:	69ba      	ldr	r2, [r7, #24]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f003 0303 	and.w	r3, r3, #3
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d017      	beq.n	80011fc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	68db      	ldr	r3, [r3, #12]
 80011d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80011d2:	69fb      	ldr	r3, [r7, #28]
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	2203      	movs	r2, #3
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	43db      	mvns	r3, r3
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4013      	ands	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	689a      	ldr	r2, [r3, #8]
 80011e8:	69fb      	ldr	r3, [r7, #28]
 80011ea:	005b      	lsls	r3, r3, #1
 80011ec:	fa02 f303 	lsl.w	r3, r2, r3
 80011f0:	69ba      	ldr	r2, [r7, #24]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011fc:	683b      	ldr	r3, [r7, #0]
 80011fe:	685b      	ldr	r3, [r3, #4]
 8001200:	f003 0303 	and.w	r3, r3, #3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d123      	bne.n	8001250 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001208:	69fb      	ldr	r3, [r7, #28]
 800120a:	08da      	lsrs	r2, r3, #3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	3208      	adds	r2, #8
 8001210:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	f003 0307 	and.w	r3, r3, #7
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	220f      	movs	r2, #15
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	691a      	ldr	r2, [r3, #16]
 8001230:	69fb      	ldr	r3, [r7, #28]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	009b      	lsls	r3, r3, #2
 8001238:	fa02 f303 	lsl.w	r3, r2, r3
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4313      	orrs	r3, r2
 8001240:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	69b9      	ldr	r1, [r7, #24]
 800124c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	005b      	lsls	r3, r3, #1
 800125a:	2203      	movs	r2, #3
 800125c:	fa02 f303 	lsl.w	r3, r2, r3
 8001260:	43db      	mvns	r3, r3
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	4013      	ands	r3, r2
 8001266:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0203 	and.w	r2, r3, #3
 8001270:	69fb      	ldr	r3, [r7, #28]
 8001272:	005b      	lsls	r3, r3, #1
 8001274:	fa02 f303 	lsl.w	r3, r2, r3
 8001278:	69ba      	ldr	r2, [r7, #24]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800128c:	2b00      	cmp	r3, #0
 800128e:	f000 80be 	beq.w	800140e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001292:	4b66      	ldr	r3, [pc, #408]	; (800142c <HAL_GPIO_Init+0x324>)
 8001294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001296:	4a65      	ldr	r2, [pc, #404]	; (800142c <HAL_GPIO_Init+0x324>)
 8001298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800129c:	6453      	str	r3, [r2, #68]	; 0x44
 800129e:	4b63      	ldr	r3, [pc, #396]	; (800142c <HAL_GPIO_Init+0x324>)
 80012a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80012aa:	4a61      	ldr	r2, [pc, #388]	; (8001430 <HAL_GPIO_Init+0x328>)
 80012ac:	69fb      	ldr	r3, [r7, #28]
 80012ae:	089b      	lsrs	r3, r3, #2
 80012b0:	3302      	adds	r3, #2
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80012b8:	69fb      	ldr	r3, [r7, #28]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	220f      	movs	r2, #15
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43db      	mvns	r3, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4013      	ands	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a58      	ldr	r2, [pc, #352]	; (8001434 <HAL_GPIO_Init+0x32c>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d037      	beq.n	8001346 <HAL_GPIO_Init+0x23e>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a57      	ldr	r2, [pc, #348]	; (8001438 <HAL_GPIO_Init+0x330>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d031      	beq.n	8001342 <HAL_GPIO_Init+0x23a>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a56      	ldr	r2, [pc, #344]	; (800143c <HAL_GPIO_Init+0x334>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d02b      	beq.n	800133e <HAL_GPIO_Init+0x236>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a55      	ldr	r2, [pc, #340]	; (8001440 <HAL_GPIO_Init+0x338>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d025      	beq.n	800133a <HAL_GPIO_Init+0x232>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a54      	ldr	r2, [pc, #336]	; (8001444 <HAL_GPIO_Init+0x33c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d01f      	beq.n	8001336 <HAL_GPIO_Init+0x22e>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a53      	ldr	r2, [pc, #332]	; (8001448 <HAL_GPIO_Init+0x340>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d019      	beq.n	8001332 <HAL_GPIO_Init+0x22a>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a52      	ldr	r2, [pc, #328]	; (800144c <HAL_GPIO_Init+0x344>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d013      	beq.n	800132e <HAL_GPIO_Init+0x226>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a51      	ldr	r2, [pc, #324]	; (8001450 <HAL_GPIO_Init+0x348>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d00d      	beq.n	800132a <HAL_GPIO_Init+0x222>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a50      	ldr	r2, [pc, #320]	; (8001454 <HAL_GPIO_Init+0x34c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d007      	beq.n	8001326 <HAL_GPIO_Init+0x21e>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a4f      	ldr	r2, [pc, #316]	; (8001458 <HAL_GPIO_Init+0x350>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d101      	bne.n	8001322 <HAL_GPIO_Init+0x21a>
 800131e:	2309      	movs	r3, #9
 8001320:	e012      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001322:	230a      	movs	r3, #10
 8001324:	e010      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001326:	2308      	movs	r3, #8
 8001328:	e00e      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800132a:	2307      	movs	r3, #7
 800132c:	e00c      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800132e:	2306      	movs	r3, #6
 8001330:	e00a      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001332:	2305      	movs	r3, #5
 8001334:	e008      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001336:	2304      	movs	r3, #4
 8001338:	e006      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800133a:	2303      	movs	r3, #3
 800133c:	e004      	b.n	8001348 <HAL_GPIO_Init+0x240>
 800133e:	2302      	movs	r3, #2
 8001340:	e002      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001342:	2301      	movs	r3, #1
 8001344:	e000      	b.n	8001348 <HAL_GPIO_Init+0x240>
 8001346:	2300      	movs	r3, #0
 8001348:	69fa      	ldr	r2, [r7, #28]
 800134a:	f002 0203 	and.w	r2, r2, #3
 800134e:	0092      	lsls	r2, r2, #2
 8001350:	4093      	lsls	r3, r2
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4313      	orrs	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001358:	4935      	ldr	r1, [pc, #212]	; (8001430 <HAL_GPIO_Init+0x328>)
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	089b      	lsrs	r3, r3, #2
 800135e:	3302      	adds	r3, #2
 8001360:	69ba      	ldr	r2, [r7, #24]
 8001362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001366:	4b3d      	ldr	r3, [pc, #244]	; (800145c <HAL_GPIO_Init+0x354>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	43db      	mvns	r3, r3
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	4013      	ands	r3, r2
 8001374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d003      	beq.n	800138a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001382:	69ba      	ldr	r2, [r7, #24]
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	4313      	orrs	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800138a:	4a34      	ldr	r2, [pc, #208]	; (800145c <HAL_GPIO_Init+0x354>)
 800138c:	69bb      	ldr	r3, [r7, #24]
 800138e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001390:	4b32      	ldr	r3, [pc, #200]	; (800145c <HAL_GPIO_Init+0x354>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	43db      	mvns	r3, r3
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	4013      	ands	r3, r2
 800139e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
 80013a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d003      	beq.n	80013b4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013b4:	4a29      	ldr	r2, [pc, #164]	; (800145c <HAL_GPIO_Init+0x354>)
 80013b6:	69bb      	ldr	r3, [r7, #24]
 80013b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013ba:	4b28      	ldr	r3, [pc, #160]	; (800145c <HAL_GPIO_Init+0x354>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <HAL_GPIO_Init+0x354>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013e4:	4b1d      	ldr	r3, [pc, #116]	; (800145c <HAL_GPIO_Init+0x354>)
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001408:	4a14      	ldr	r2, [pc, #80]	; (800145c <HAL_GPIO_Init+0x354>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	3301      	adds	r3, #1
 8001412:	61fb      	str	r3, [r7, #28]
 8001414:	69fb      	ldr	r3, [r7, #28]
 8001416:	2b0f      	cmp	r3, #15
 8001418:	f67f ae86 	bls.w	8001128 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800141c:	bf00      	nop
 800141e:	bf00      	nop
 8001420:	3724      	adds	r7, #36	; 0x24
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	40023800 	.word	0x40023800
 8001430:	40013800 	.word	0x40013800
 8001434:	40020000 	.word	0x40020000
 8001438:	40020400 	.word	0x40020400
 800143c:	40020800 	.word	0x40020800
 8001440:	40020c00 	.word	0x40020c00
 8001444:	40021000 	.word	0x40021000
 8001448:	40021400 	.word	0x40021400
 800144c:	40021800 	.word	0x40021800
 8001450:	40021c00 	.word	0x40021c00
 8001454:	40022000 	.word	0x40022000
 8001458:	40022400 	.word	0x40022400
 800145c:	40013c00 	.word	0x40013c00

08001460 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	691a      	ldr	r2, [r3, #16]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	4013      	ands	r3, r2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001478:	2301      	movs	r3, #1
 800147a:	73fb      	strb	r3, [r7, #15]
 800147c:	e001      	b.n	8001482 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001482:	7bfb      	ldrb	r3, [r7, #15]
}
 8001484:	4618      	mov	r0, r3
 8001486:	3714      	adds	r7, #20
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	460b      	mov	r3, r1
 800149a:	807b      	strh	r3, [r7, #2]
 800149c:	4613      	mov	r3, r2
 800149e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014a0:	787b      	ldrb	r3, [r7, #1]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d003      	beq.n	80014ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014a6:	887a      	ldrh	r2, [r7, #2]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80014ac:	e003      	b.n	80014b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80014ae:	887b      	ldrh	r3, [r7, #2]
 80014b0:	041a      	lsls	r2, r3, #16
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	619a      	str	r2, [r3, #24]
}
 80014b6:	bf00      	nop
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
	...

080014c4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014d0:	695a      	ldr	r2, [r3, #20]
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4013      	ands	r3, r2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d006      	beq.n	80014e8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80014da:	4a05      	ldr	r2, [pc, #20]	; (80014f0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80014e0:	88fb      	ldrh	r3, [r7, #6]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f000 f806 	bl	80014f4 <HAL_GPIO_EXTI_Callback>
  }
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40013c00 	.word	0x40013c00

080014f4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	4603      	mov	r3, r0
 80014fc:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80014fe:	bf00      	nop
 8001500:	370c      	adds	r7, #12
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
	...

0800150c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001510:	4b05      	ldr	r3, [pc, #20]	; (8001528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a04      	ldr	r2, [pc, #16]	; (8001528 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	6013      	str	r3, [r2, #0]
}
 800151c:	bf00      	nop
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	40007000 	.word	0x40007000

0800152c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b086      	sub	sp, #24
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001534:	2300      	movs	r3, #0
 8001536:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d101      	bne.n	8001542 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e291      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	f000 8087 	beq.w	800165e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001550:	4b96      	ldr	r3, [pc, #600]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
 8001558:	2b04      	cmp	r3, #4
 800155a:	d00c      	beq.n	8001576 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800155c:	4b93      	ldr	r3, [pc, #588]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d112      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
 8001568:	4b90      	ldr	r3, [pc, #576]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001570:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001574:	d10b      	bne.n	800158e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001576:	4b8d      	ldr	r3, [pc, #564]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d06c      	beq.n	800165c <HAL_RCC_OscConfig+0x130>
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d168      	bne.n	800165c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e26b      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x7a>
 8001598:	4b84      	ldr	r3, [pc, #528]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a83      	ldr	r2, [pc, #524]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800159e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	e02e      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x9c>
 80015ae:	4b7f      	ldr	r3, [pc, #508]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a7e      	ldr	r2, [pc, #504]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015b8:	6013      	str	r3, [r2, #0]
 80015ba:	4b7c      	ldr	r3, [pc, #496]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a7b      	ldr	r2, [pc, #492]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015c0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015c4:	6013      	str	r3, [r2, #0]
 80015c6:	e01d      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015d0:	d10c      	bne.n	80015ec <HAL_RCC_OscConfig+0xc0>
 80015d2:	4b76      	ldr	r3, [pc, #472]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a75      	ldr	r2, [pc, #468]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015dc:	6013      	str	r3, [r2, #0]
 80015de:	4b73      	ldr	r3, [pc, #460]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a72      	ldr	r2, [pc, #456]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015e8:	6013      	str	r3, [r2, #0]
 80015ea:	e00b      	b.n	8001604 <HAL_RCC_OscConfig+0xd8>
 80015ec:	4b6f      	ldr	r3, [pc, #444]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b6c      	ldr	r3, [pc, #432]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a6b      	ldr	r2, [pc, #428]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80015fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001602:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d013      	beq.n	8001634 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fc3a 	bl	8000e84 <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001614:	f7ff fc36 	bl	8000e84 <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b64      	cmp	r3, #100	; 0x64
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e21f      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001626:	4b61      	ldr	r3, [pc, #388]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d0f0      	beq.n	8001614 <HAL_RCC_OscConfig+0xe8>
 8001632:	e014      	b.n	800165e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001634:	f7ff fc26 	bl	8000e84 <HAL_GetTick>
 8001638:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163c:	f7ff fc22 	bl	8000e84 <HAL_GetTick>
 8001640:	4602      	mov	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	; 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e20b      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800164e:	4b57      	ldr	r3, [pc, #348]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0x110>
 800165a:	e000      	b.n	800165e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d069      	beq.n	800173e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800166a:	4b50      	ldr	r3, [pc, #320]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 030c 	and.w	r3, r3, #12
 8001672:	2b00      	cmp	r3, #0
 8001674:	d00b      	beq.n	800168e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001676:	4b4d      	ldr	r3, [pc, #308]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	f003 030c 	and.w	r3, r3, #12
 800167e:	2b08      	cmp	r3, #8
 8001680:	d11c      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
 8001682:	4b4a      	ldr	r3, [pc, #296]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d116      	bne.n	80016bc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800168e:	4b47      	ldr	r3, [pc, #284]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 0302 	and.w	r3, r3, #2
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d001      	beq.n	80016a6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e1df      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016a6:	4b41      	ldr	r3, [pc, #260]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	691b      	ldr	r3, [r3, #16]
 80016b2:	00db      	lsls	r3, r3, #3
 80016b4:	493d      	ldr	r1, [pc, #244]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016b6:	4313      	orrs	r3, r2
 80016b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016ba:	e040      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d023      	beq.n	800170c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c4:	4b39      	ldr	r3, [pc, #228]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a38      	ldr	r2, [pc, #224]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ca:	f043 0301 	orr.w	r3, r3, #1
 80016ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016d0:	f7ff fbd8 	bl	8000e84 <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016d8:	f7ff fbd4 	bl	8000e84 <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1bd      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ea:	4b30      	ldr	r3, [pc, #192]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 0302 	and.w	r3, r3, #2
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d0f0      	beq.n	80016d8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4b2d      	ldr	r3, [pc, #180]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	00db      	lsls	r3, r3, #3
 8001704:	4929      	ldr	r1, [pc, #164]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001706:	4313      	orrs	r3, r2
 8001708:	600b      	str	r3, [r1, #0]
 800170a:	e018      	b.n	800173e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170c:	4b27      	ldr	r3, [pc, #156]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a26      	ldr	r2, [pc, #152]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001712:	f023 0301 	bic.w	r3, r3, #1
 8001716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001718:	f7ff fbb4 	bl	8000e84 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fbb0 	bl	8000e84 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e199      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001732:	4b1e      	ldr	r3, [pc, #120]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0308 	and.w	r3, r3, #8
 8001746:	2b00      	cmp	r3, #0
 8001748:	d038      	beq.n	80017bc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	695b      	ldr	r3, [r3, #20]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d019      	beq.n	8001786 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001752:	4b16      	ldr	r3, [pc, #88]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001756:	4a15      	ldr	r2, [pc, #84]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001758:	f043 0301 	orr.w	r3, r3, #1
 800175c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800175e:	f7ff fb91 	bl	8000e84 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001764:	e008      	b.n	8001778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001766:	f7ff fb8d 	bl	8000e84 <HAL_GetTick>
 800176a:	4602      	mov	r2, r0
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	1ad3      	subs	r3, r2, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e176      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800177a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0f0      	beq.n	8001766 <HAL_RCC_OscConfig+0x23a>
 8001784:	e01a      	b.n	80017bc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001786:	4b09      	ldr	r3, [pc, #36]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 8001788:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800178a:	4a08      	ldr	r2, [pc, #32]	; (80017ac <HAL_RCC_OscConfig+0x280>)
 800178c:	f023 0301 	bic.w	r3, r3, #1
 8001790:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001792:	f7ff fb77 	bl	8000e84 <HAL_GetTick>
 8001796:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001798:	e00a      	b.n	80017b0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800179a:	f7ff fb73 	bl	8000e84 <HAL_GetTick>
 800179e:	4602      	mov	r2, r0
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	d903      	bls.n	80017b0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80017a8:	2303      	movs	r3, #3
 80017aa:	e15c      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
 80017ac:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017b0:	4b91      	ldr	r3, [pc, #580]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017b4:	f003 0302 	and.w	r3, r3, #2
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d1ee      	bne.n	800179a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f003 0304 	and.w	r3, r3, #4
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	f000 80a4 	beq.w	8001912 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017ca:	4b8b      	ldr	r3, [pc, #556]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d10d      	bne.n	80017f2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80017d6:	4b88      	ldr	r3, [pc, #544]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	4a87      	ldr	r2, [pc, #540]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017e0:	6413      	str	r3, [r2, #64]	; 0x40
 80017e2:	4b85      	ldr	r3, [pc, #532]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ea:	60bb      	str	r3, [r7, #8]
 80017ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ee:	2301      	movs	r3, #1
 80017f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017f2:	4b82      	ldr	r3, [pc, #520]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d118      	bne.n	8001830 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80017fe:	4b7f      	ldr	r3, [pc, #508]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a7e      	ldr	r2, [pc, #504]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001804:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001808:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800180a:	f7ff fb3b 	bl	8000e84 <HAL_GetTick>
 800180e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	e008      	b.n	8001824 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001812:	f7ff fb37 	bl	8000e84 <HAL_GetTick>
 8001816:	4602      	mov	r2, r0
 8001818:	693b      	ldr	r3, [r7, #16]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	2b64      	cmp	r3, #100	; 0x64
 800181e:	d901      	bls.n	8001824 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e120      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001824:	4b75      	ldr	r3, [pc, #468]	; (80019fc <HAL_RCC_OscConfig+0x4d0>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d0f0      	beq.n	8001812 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	2b01      	cmp	r3, #1
 8001836:	d106      	bne.n	8001846 <HAL_RCC_OscConfig+0x31a>
 8001838:	4b6f      	ldr	r3, [pc, #444]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800183a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800183c:	4a6e      	ldr	r2, [pc, #440]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800183e:	f043 0301 	orr.w	r3, r3, #1
 8001842:	6713      	str	r3, [r2, #112]	; 0x70
 8001844:	e02d      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	689b      	ldr	r3, [r3, #8]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <HAL_RCC_OscConfig+0x33c>
 800184e:	4b6a      	ldr	r3, [pc, #424]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001852:	4a69      	ldr	r2, [pc, #420]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001854:	f023 0301 	bic.w	r3, r3, #1
 8001858:	6713      	str	r3, [r2, #112]	; 0x70
 800185a:	4b67      	ldr	r3, [pc, #412]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800185c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185e:	4a66      	ldr	r2, [pc, #408]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001860:	f023 0304 	bic.w	r3, r3, #4
 8001864:	6713      	str	r3, [r2, #112]	; 0x70
 8001866:	e01c      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d10c      	bne.n	800188a <HAL_RCC_OscConfig+0x35e>
 8001870:	4b61      	ldr	r3, [pc, #388]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a60      	ldr	r2, [pc, #384]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001876:	f043 0304 	orr.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
 800187c:	4b5e      	ldr	r3, [pc, #376]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800187e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001880:	4a5d      	ldr	r2, [pc, #372]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001882:	f043 0301 	orr.w	r3, r3, #1
 8001886:	6713      	str	r3, [r2, #112]	; 0x70
 8001888:	e00b      	b.n	80018a2 <HAL_RCC_OscConfig+0x376>
 800188a:	4b5b      	ldr	r3, [pc, #364]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800188c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800188e:	4a5a      	ldr	r2, [pc, #360]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001890:	f023 0301 	bic.w	r3, r3, #1
 8001894:	6713      	str	r3, [r2, #112]	; 0x70
 8001896:	4b58      	ldr	r3, [pc, #352]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800189a:	4a57      	ldr	r2, [pc, #348]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800189c:	f023 0304 	bic.w	r3, r3, #4
 80018a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d015      	beq.n	80018d6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff faeb 	bl	8000e84 <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fae7 	bl	8000e84 <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e0ce      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018c8:	4b4b      	ldr	r3, [pc, #300]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018cc:	f003 0302 	and.w	r3, r3, #2
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d0ee      	beq.n	80018b2 <HAL_RCC_OscConfig+0x386>
 80018d4:	e014      	b.n	8001900 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d6:	f7ff fad5 	bl	8000e84 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018dc:	e00a      	b.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018de:	f7ff fad1 	bl	8000e84 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e0b8      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018f4:	4b40      	ldr	r3, [pc, #256]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	f003 0302 	and.w	r3, r3, #2
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d1ee      	bne.n	80018de <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001900:	7dfb      	ldrb	r3, [r7, #23]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d105      	bne.n	8001912 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001906:	4b3c      	ldr	r3, [pc, #240]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4a3b      	ldr	r2, [pc, #236]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800190c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001910:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	699b      	ldr	r3, [r3, #24]
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80a4 	beq.w	8001a64 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800191c:	4b36      	ldr	r3, [pc, #216]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d06b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b02      	cmp	r3, #2
 800192e:	d149      	bne.n	80019c4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001930:	4b31      	ldr	r3, [pc, #196]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a30      	ldr	r2, [pc, #192]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800193a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800193c:	f7ff faa2 	bl	8000e84 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fa9e 	bl	8000e84 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e087      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	69da      	ldr	r2, [r3, #28]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	6a1b      	ldr	r3, [r3, #32]
 800196a:	431a      	orrs	r2, r3
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001970:	019b      	lsls	r3, r3, #6
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	085b      	lsrs	r3, r3, #1
 800197a:	3b01      	subs	r3, #1
 800197c:	041b      	lsls	r3, r3, #16
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	4313      	orrs	r3, r2
 8001988:	4a1b      	ldr	r2, [pc, #108]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 800198a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800198e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001990:	4b19      	ldr	r3, [pc, #100]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a18      	ldr	r2, [pc, #96]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 8001996:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800199a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff fa72 	bl	8000e84 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff fa6e 	bl	8000e84 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e057      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d0f0      	beq.n	80019a4 <HAL_RCC_OscConfig+0x478>
 80019c2:	e04f      	b.n	8001a64 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019c4:	4b0c      	ldr	r3, [pc, #48]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d0:	f7ff fa58 	bl	8000e84 <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d8:	f7ff fa54 	bl	8000e84 <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e03d      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019ea:	4b03      	ldr	r3, [pc, #12]	; (80019f8 <HAL_RCC_OscConfig+0x4cc>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d1f0      	bne.n	80019d8 <HAL_RCC_OscConfig+0x4ac>
 80019f6:	e035      	b.n	8001a64 <HAL_RCC_OscConfig+0x538>
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001a00:	4b1b      	ldr	r3, [pc, #108]	; (8001a70 <HAL_RCC_OscConfig+0x544>)
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	699b      	ldr	r3, [r3, #24]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d028      	beq.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d121      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d11a      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a2a:	68fa      	ldr	r2, [r7, #12]
 8001a2c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a30:	4013      	ands	r3, r2
 8001a32:	687a      	ldr	r2, [r7, #4]
 8001a34:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a36:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d111      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a46:	085b      	lsrs	r3, r3, #1
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a4c:	429a      	cmp	r2, r3
 8001a4e:	d107      	bne.n	8001a60 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a5a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0d0      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001a8c:	4b6a      	ldr	r3, [pc, #424]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 030f 	and.w	r3, r3, #15
 8001a94:	683a      	ldr	r2, [r7, #0]
 8001a96:	429a      	cmp	r2, r3
 8001a98:	d910      	bls.n	8001abc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9a:	4b67      	ldr	r3, [pc, #412]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f023 020f 	bic.w	r2, r3, #15
 8001aa2:	4965      	ldr	r1, [pc, #404]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	4313      	orrs	r3, r2
 8001aa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aaa:	4b63      	ldr	r3, [pc, #396]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ab8:	2301      	movs	r3, #1
 8001aba:	e0b8      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0302 	and.w	r3, r3, #2
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d020      	beq.n	8001b0a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 0304 	and.w	r3, r3, #4
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d005      	beq.n	8001ae0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ad4:	4b59      	ldr	r3, [pc, #356]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001ada:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ade:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d005      	beq.n	8001af8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001aec:	4b53      	ldr	r3, [pc, #332]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	4a52      	ldr	r2, [pc, #328]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001af2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001af6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	494d      	ldr	r1, [pc, #308]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b06:	4313      	orrs	r3, r2
 8001b08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0301 	and.w	r3, r3, #1
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d040      	beq.n	8001b98 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d107      	bne.n	8001b2e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d115      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	e07f      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	2b02      	cmp	r3, #2
 8001b34:	d107      	bne.n	8001b46 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b36:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d109      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b42:	2301      	movs	r3, #1
 8001b44:	e073      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b46:	4b3d      	ldr	r3, [pc, #244]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f003 0302 	and.w	r3, r3, #2
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d101      	bne.n	8001b56 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001b52:	2301      	movs	r3, #1
 8001b54:	e06b      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b56:	4b39      	ldr	r3, [pc, #228]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f023 0203 	bic.w	r2, r3, #3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	4936      	ldr	r1, [pc, #216]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b64:	4313      	orrs	r3, r2
 8001b66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b68:	f7ff f98c 	bl	8000e84 <HAL_GetTick>
 8001b6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b70:	f7ff f988 	bl	8000e84 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e053      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	f003 020c 	and.w	r2, r3, #12
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d1eb      	bne.n	8001b70 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001b98:	4b27      	ldr	r3, [pc, #156]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	683a      	ldr	r2, [r7, #0]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d210      	bcs.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba6:	4b24      	ldr	r3, [pc, #144]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f023 020f 	bic.w	r2, r3, #15
 8001bae:	4922      	ldr	r1, [pc, #136]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	4313      	orrs	r3, r2
 8001bb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb6:	4b20      	ldr	r3, [pc, #128]	; (8001c38 <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 030f 	and.w	r3, r3, #15
 8001bbe:	683a      	ldr	r2, [r7, #0]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	d001      	beq.n	8001bc8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e032      	b.n	8001c2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0304 	and.w	r3, r3, #4
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d008      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bd4:	4b19      	ldr	r3, [pc, #100]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	4916      	ldr	r1, [pc, #88]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0308 	and.w	r3, r3, #8
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d009      	beq.n	8001c06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bf2:	4b12      	ldr	r3, [pc, #72]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	691b      	ldr	r3, [r3, #16]
 8001bfe:	00db      	lsls	r3, r3, #3
 8001c00:	490e      	ldr	r1, [pc, #56]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c06:	f000 f821 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCC_ClockConfig+0x1c8>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	091b      	lsrs	r3, r3, #4
 8001c12:	f003 030f 	and.w	r3, r3, #15
 8001c16:	490a      	ldr	r1, [pc, #40]	; (8001c40 <HAL_RCC_ClockConfig+0x1cc>)
 8001c18:	5ccb      	ldrb	r3, [r1, r3]
 8001c1a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1e:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1d0>)
 8001c20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c22:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1d4>)
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f8e8 	bl	8000dfc <HAL_InitTick>

  return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3710      	adds	r7, #16
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40023c00 	.word	0x40023c00
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	080039b8 	.word	0x080039b8
 8001c44:	20000028 	.word	0x20000028
 8001c48:	2000002c 	.word	0x2000002c

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001c50:	b094      	sub	sp, #80	; 0x50
 8001c52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001c54:	2300      	movs	r3, #0
 8001c56:	647b      	str	r3, [r7, #68]	; 0x44
 8001c58:	2300      	movs	r3, #0
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c64:	4b79      	ldr	r3, [pc, #484]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 030c 	and.w	r3, r3, #12
 8001c6c:	2b08      	cmp	r3, #8
 8001c6e:	d00d      	beq.n	8001c8c <HAL_RCC_GetSysClockFreq+0x40>
 8001c70:	2b08      	cmp	r3, #8
 8001c72:	f200 80e1 	bhi.w	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d002      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c7a:	2b04      	cmp	r3, #4
 8001c7c:	d003      	beq.n	8001c86 <HAL_RCC_GetSysClockFreq+0x3a>
 8001c7e:	e0db      	b.n	8001e38 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c80:	4b73      	ldr	r3, [pc, #460]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c82:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c84:	e0db      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c86:	4b73      	ldr	r3, [pc, #460]	; (8001e54 <HAL_RCC_GetSysClockFreq+0x208>)
 8001c88:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001c8a:	e0d8      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c8c:	4b6f      	ldr	r3, [pc, #444]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c94:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001c96:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d063      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ca2:	4b6a      	ldr	r3, [pc, #424]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	099b      	lsrs	r3, r3, #6
 8001ca8:	2200      	movs	r2, #0
 8001caa:	63bb      	str	r3, [r7, #56]	; 0x38
 8001cac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001cae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cb0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001cb4:	633b      	str	r3, [r7, #48]	; 0x30
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8001cba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001cbe:	4622      	mov	r2, r4
 8001cc0:	462b      	mov	r3, r5
 8001cc2:	f04f 0000 	mov.w	r0, #0
 8001cc6:	f04f 0100 	mov.w	r1, #0
 8001cca:	0159      	lsls	r1, r3, #5
 8001ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001cd0:	0150      	lsls	r0, r2, #5
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4621      	mov	r1, r4
 8001cd8:	1a51      	subs	r1, r2, r1
 8001cda:	6139      	str	r1, [r7, #16]
 8001cdc:	4629      	mov	r1, r5
 8001cde:	eb63 0301 	sbc.w	r3, r3, r1
 8001ce2:	617b      	str	r3, [r7, #20]
 8001ce4:	f04f 0200 	mov.w	r2, #0
 8001ce8:	f04f 0300 	mov.w	r3, #0
 8001cec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001cf0:	4659      	mov	r1, fp
 8001cf2:	018b      	lsls	r3, r1, #6
 8001cf4:	4651      	mov	r1, sl
 8001cf6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001cfa:	4651      	mov	r1, sl
 8001cfc:	018a      	lsls	r2, r1, #6
 8001cfe:	4651      	mov	r1, sl
 8001d00:	ebb2 0801 	subs.w	r8, r2, r1
 8001d04:	4659      	mov	r1, fp
 8001d06:	eb63 0901 	sbc.w	r9, r3, r1
 8001d0a:	f04f 0200 	mov.w	r2, #0
 8001d0e:	f04f 0300 	mov.w	r3, #0
 8001d12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d1e:	4690      	mov	r8, r2
 8001d20:	4699      	mov	r9, r3
 8001d22:	4623      	mov	r3, r4
 8001d24:	eb18 0303 	adds.w	r3, r8, r3
 8001d28:	60bb      	str	r3, [r7, #8]
 8001d2a:	462b      	mov	r3, r5
 8001d2c:	eb49 0303 	adc.w	r3, r9, r3
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	f04f 0300 	mov.w	r3, #0
 8001d3a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d3e:	4629      	mov	r1, r5
 8001d40:	024b      	lsls	r3, r1, #9
 8001d42:	4621      	mov	r1, r4
 8001d44:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001d48:	4621      	mov	r1, r4
 8001d4a:	024a      	lsls	r2, r1, #9
 8001d4c:	4610      	mov	r0, r2
 8001d4e:	4619      	mov	r1, r3
 8001d50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d52:	2200      	movs	r2, #0
 8001d54:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d56:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d58:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001d5c:	f7fe faa8 	bl	80002b0 <__aeabi_uldivmod>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4613      	mov	r3, r2
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001d68:	e058      	b.n	8001e1c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001d6a:	4b38      	ldr	r3, [pc, #224]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	099b      	lsrs	r3, r3, #6
 8001d70:	2200      	movs	r2, #0
 8001d72:	4618      	mov	r0, r3
 8001d74:	4611      	mov	r1, r2
 8001d76:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001d7a:	623b      	str	r3, [r7, #32]
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	627b      	str	r3, [r7, #36]	; 0x24
 8001d80:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001d84:	4642      	mov	r2, r8
 8001d86:	464b      	mov	r3, r9
 8001d88:	f04f 0000 	mov.w	r0, #0
 8001d8c:	f04f 0100 	mov.w	r1, #0
 8001d90:	0159      	lsls	r1, r3, #5
 8001d92:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d96:	0150      	lsls	r0, r2, #5
 8001d98:	4602      	mov	r2, r0
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	4641      	mov	r1, r8
 8001d9e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001da2:	4649      	mov	r1, r9
 8001da4:	eb63 0b01 	sbc.w	fp, r3, r1
 8001da8:	f04f 0200 	mov.w	r2, #0
 8001dac:	f04f 0300 	mov.w	r3, #0
 8001db0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001db4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001db8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001dbc:	ebb2 040a 	subs.w	r4, r2, sl
 8001dc0:	eb63 050b 	sbc.w	r5, r3, fp
 8001dc4:	f04f 0200 	mov.w	r2, #0
 8001dc8:	f04f 0300 	mov.w	r3, #0
 8001dcc:	00eb      	lsls	r3, r5, #3
 8001dce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001dd2:	00e2      	lsls	r2, r4, #3
 8001dd4:	4614      	mov	r4, r2
 8001dd6:	461d      	mov	r5, r3
 8001dd8:	4643      	mov	r3, r8
 8001dda:	18e3      	adds	r3, r4, r3
 8001ddc:	603b      	str	r3, [r7, #0]
 8001dde:	464b      	mov	r3, r9
 8001de0:	eb45 0303 	adc.w	r3, r5, r3
 8001de4:	607b      	str	r3, [r7, #4]
 8001de6:	f04f 0200 	mov.w	r2, #0
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001df2:	4629      	mov	r1, r5
 8001df4:	028b      	lsls	r3, r1, #10
 8001df6:	4621      	mov	r1, r4
 8001df8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001dfc:	4621      	mov	r1, r4
 8001dfe:	028a      	lsls	r2, r1, #10
 8001e00:	4610      	mov	r0, r2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e06:	2200      	movs	r2, #0
 8001e08:	61bb      	str	r3, [r7, #24]
 8001e0a:	61fa      	str	r2, [r7, #28]
 8001e0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e10:	f7fe fa4e 	bl	80002b0 <__aeabi_uldivmod>
 8001e14:	4602      	mov	r2, r0
 8001e16:	460b      	mov	r3, r1
 8001e18:	4613      	mov	r3, r2
 8001e1a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCC_GetSysClockFreq+0x200>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	0c1b      	lsrs	r3, r3, #16
 8001e22:	f003 0303 	and.w	r3, r3, #3
 8001e26:	3301      	adds	r3, #1
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001e2c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001e2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e30:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e34:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e36:	e002      	b.n	8001e3e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e38:	4b05      	ldr	r3, [pc, #20]	; (8001e50 <HAL_RCC_GetSysClockFreq+0x204>)
 8001e3a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001e3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	3750      	adds	r7, #80	; 0x50
 8001e44:	46bd      	mov	sp, r7
 8001e46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40023800 	.word	0x40023800
 8001e50:	00f42400 	.word	0x00f42400
 8001e54:	007a1200 	.word	0x007a1200

08001e58 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	46bd      	mov	sp, r7
 8001e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e68:	4770      	bx	lr
 8001e6a:	bf00      	nop
 8001e6c:	20000028 	.word	0x20000028

08001e70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e74:	f7ff fff0 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e7c:	689b      	ldr	r3, [r3, #8]
 8001e7e:	0a9b      	lsrs	r3, r3, #10
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40023800 	.word	0x40023800
 8001e94:	080039c8 	.word	0x080039c8

08001e98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e9c:	f7ff ffdc 	bl	8001e58 <HAL_RCC_GetHCLKFreq>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	4b05      	ldr	r3, [pc, #20]	; (8001eb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	0b5b      	lsrs	r3, r3, #13
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	4903      	ldr	r1, [pc, #12]	; (8001ebc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eae:	5ccb      	ldrb	r3, [r1, r3]
 8001eb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	40023800 	.word	0x40023800
 8001ebc:	080039c8 	.word	0x080039c8

08001ec0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b088      	sub	sp, #32
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0301 	and.w	r3, r3, #1
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d012      	beq.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ee8:	4b69      	ldr	r3, [pc, #420]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	4a68      	ldr	r2, [pc, #416]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001eee:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001ef2:	6093      	str	r3, [r2, #8]
 8001ef4:	4b66      	ldr	r3, [pc, #408]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ef6:	689a      	ldr	r2, [r3, #8]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001efc:	4964      	ldr	r1, [pc, #400]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001efe:	4313      	orrs	r3, r2
 8001f00:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d017      	beq.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f1a:	4b5d      	ldr	r3, [pc, #372]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f1c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f20:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f28:	4959      	ldr	r1, [pc, #356]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f38:	d101      	bne.n	8001f3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001f46:	2301      	movs	r3, #1
 8001f48:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d017      	beq.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001f56:	4b4e      	ldr	r3, [pc, #312]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f5c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	494a      	ldr	r1, [pc, #296]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001f66:	4313      	orrs	r3, r2
 8001f68:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f74:	d101      	bne.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001f76:	2301      	movs	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001f82:	2301      	movs	r3, #1
 8001f84:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001f92:	2301      	movs	r3, #1
 8001f94:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f003 0320 	and.w	r3, r3, #32
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f000 808b 	beq.w	80020ba <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001fa4:	4b3a      	ldr	r3, [pc, #232]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a39      	ldr	r2, [pc, #228]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b37      	ldr	r3, [pc, #220]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb8:	60bb      	str	r3, [r7, #8]
 8001fba:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001fbc:	4b35      	ldr	r3, [pc, #212]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a34      	ldr	r2, [pc, #208]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001fc8:	f7fe ff5c 	bl	8000e84 <HAL_GetTick>
 8001fcc:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fce:	e008      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe ff58 	bl	8000e84 <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b64      	cmp	r3, #100	; 0x64
 8001fdc:	d901      	bls.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e357      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001fe2:	4b2c      	ldr	r3, [pc, #176]	; (8002094 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d0f0      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001fee:	4b28      	ldr	r3, [pc, #160]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ff6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d035      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002006:	693a      	ldr	r2, [r7, #16]
 8002008:	429a      	cmp	r2, r3
 800200a:	d02e      	beq.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800200c:	4b20      	ldr	r3, [pc, #128]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800200e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002010:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002014:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002016:	4b1e      	ldr	r3, [pc, #120]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002018:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800201a:	4a1d      	ldr	r2, [pc, #116]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800201c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002020:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002022:	4b1b      	ldr	r3, [pc, #108]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002024:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002026:	4a1a      	ldr	r2, [pc, #104]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002028:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800202c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800202e:	4a18      	ldr	r2, [pc, #96]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002034:	4b16      	ldr	r3, [pc, #88]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d114      	bne.n	800206a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002040:	f7fe ff20 	bl	8000e84 <HAL_GetTick>
 8002044:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002046:	e00a      	b.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7fe ff1c 	bl	8000e84 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	f241 3288 	movw	r2, #5000	; 0x1388
 8002056:	4293      	cmp	r3, r2
 8002058:	d901      	bls.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800205a:	2303      	movs	r3, #3
 800205c:	e319      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205e:	4b0c      	ldr	r3, [pc, #48]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002062:	f003 0302 	and.w	r3, r3, #2
 8002066:	2b00      	cmp	r3, #0
 8002068:	d0ee      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002076:	d111      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002078:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002086:	400b      	ands	r3, r1
 8002088:	4901      	ldr	r1, [pc, #4]	; (8002090 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800208a:	4313      	orrs	r3, r2
 800208c:	608b      	str	r3, [r1, #8]
 800208e:	e00b      	b.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002090:	40023800 	.word	0x40023800
 8002094:	40007000 	.word	0x40007000
 8002098:	0ffffcff 	.word	0x0ffffcff
 800209c:	4baa      	ldr	r3, [pc, #680]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	4aa9      	ldr	r2, [pc, #676]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020a2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80020a6:	6093      	str	r3, [r2, #8]
 80020a8:	4ba7      	ldr	r3, [pc, #668]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	49a4      	ldr	r1, [pc, #656]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0310 	and.w	r3, r3, #16
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d010      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80020c6:	4ba0      	ldr	r3, [pc, #640]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020cc:	4a9e      	ldr	r2, [pc, #632]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020ce:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80020d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80020d6:	4b9c      	ldr	r3, [pc, #624]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020d8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e0:	4999      	ldr	r1, [pc, #612]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020f4:	4b94      	ldr	r3, [pc, #592]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002102:	4991      	ldr	r1, [pc, #580]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002116:	4b8c      	ldr	r3, [pc, #560]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002118:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002124:	4988      	ldr	r1, [pc, #544]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002138:	4b83      	ldr	r3, [pc, #524]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800213a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002146:	4980      	ldr	r1, [pc, #512]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800215a:	4b7b      	ldr	r3, [pc, #492]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800215c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002160:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	4977      	ldr	r1, [pc, #476]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800217c:	4b72      	ldr	r3, [pc, #456]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f023 0203 	bic.w	r2, r3, #3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	496f      	ldr	r1, [pc, #444]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800219e:	4b6a      	ldr	r3, [pc, #424]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021a4:	f023 020c 	bic.w	r2, r3, #12
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021ac:	4966      	ldr	r1, [pc, #408]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d00a      	beq.n	80021d6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80021c0:	4b61      	ldr	r3, [pc, #388]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021ce:	495e      	ldr	r1, [pc, #376]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d00a      	beq.n	80021f8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80021e2:	4b59      	ldr	r3, [pc, #356]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021e8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f0:	4955      	ldr	r1, [pc, #340]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002200:	2b00      	cmp	r3, #0
 8002202:	d00a      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002204:	4b50      	ldr	r3, [pc, #320]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800220a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	494d      	ldr	r1, [pc, #308]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002222:	2b00      	cmp	r3, #0
 8002224:	d00a      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002226:	4b48      	ldr	r3, [pc, #288]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	4944      	ldr	r1, [pc, #272]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002236:	4313      	orrs	r3, r2
 8002238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00a      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002248:	4b3f      	ldr	r3, [pc, #252]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002256:	493c      	ldr	r1, [pc, #240]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002258:	4313      	orrs	r3, r2
 800225a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d00a      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800226a:	4b37      	ldr	r3, [pc, #220]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002278:	4933      	ldr	r1, [pc, #204]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800227a:	4313      	orrs	r3, r2
 800227c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d00a      	beq.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800228c:	4b2e      	ldr	r3, [pc, #184]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800228e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002292:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800229a:	492b      	ldr	r1, [pc, #172]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800229c:	4313      	orrs	r3, r2
 800229e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d011      	beq.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022ae:	4b26      	ldr	r3, [pc, #152]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022bc:	4922      	ldr	r1, [pc, #136]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80022c8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022cc:	d101      	bne.n	80022d2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80022ce:	2301      	movs	r3, #1
 80022d0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0308 	and.w	r3, r3, #8
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d001      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80022de:	2301      	movs	r3, #1
 80022e0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d00a      	beq.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80022ee:	4b16      	ldr	r3, [pc, #88]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022f4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022fc:	4912      	ldr	r1, [pc, #72]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80022fe:	4313      	orrs	r3, r2
 8002300:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002320:	4909      	ldr	r1, [pc, #36]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002322:	4313      	orrs	r3, r2
 8002324:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d006      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	f000 80d9 	beq.w	80024ee <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800233c:	4b02      	ldr	r3, [pc, #8]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a01      	ldr	r2, [pc, #4]	; (8002348 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002342:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002346:	e001      	b.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002348:	40023800 	.word	0x40023800
 800234c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234e:	f7fe fd99 	bl	8000e84 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002356:	f7fe fd95 	bl	8000e84 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b64      	cmp	r3, #100	; 0x64
 8002362:	d901      	bls.n	8002368 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e194      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002368:	4b6c      	ldr	r3, [pc, #432]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d1f0      	bne.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f003 0301 	and.w	r3, r3, #1
 800237c:	2b00      	cmp	r3, #0
 800237e:	d021      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002384:	2b00      	cmp	r3, #0
 8002386:	d11d      	bne.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002388:	4b64      	ldr	r3, [pc, #400]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800238a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800238e:	0c1b      	lsrs	r3, r3, #16
 8002390:	f003 0303 	and.w	r3, r3, #3
 8002394:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002398:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800239c:	0e1b      	lsrs	r3, r3, #24
 800239e:	f003 030f 	and.w	r3, r3, #15
 80023a2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	019a      	lsls	r2, r3, #6
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	041b      	lsls	r3, r3, #16
 80023ae:	431a      	orrs	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	061b      	lsls	r3, r3, #24
 80023b4:	431a      	orrs	r2, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	689b      	ldr	r3, [r3, #8]
 80023ba:	071b      	lsls	r3, r3, #28
 80023bc:	4957      	ldr	r1, [pc, #348]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023d4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80023d8:	d00a      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d02e      	beq.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023ee:	d129      	bne.n	8002444 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80023f0:	4b4a      	ldr	r3, [pc, #296]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80023f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	f003 0303 	and.w	r3, r3, #3
 80023fc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80023fe:	4b47      	ldr	r3, [pc, #284]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002400:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002404:	0f1b      	lsrs	r3, r3, #28
 8002406:	f003 0307 	and.w	r3, r3, #7
 800240a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	019a      	lsls	r2, r3, #6
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	041b      	lsls	r3, r3, #16
 8002416:	431a      	orrs	r2, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68db      	ldr	r3, [r3, #12]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	431a      	orrs	r2, r3
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	071b      	lsls	r3, r3, #28
 8002424:	493d      	ldr	r1, [pc, #244]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800242c:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800242e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002432:	f023 021f 	bic.w	r2, r3, #31
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	3b01      	subs	r3, #1
 800243c:	4937      	ldr	r1, [pc, #220]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800244c:	2b00      	cmp	r3, #0
 800244e:	d01d      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002452:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002456:	0e1b      	lsrs	r3, r3, #24
 8002458:	f003 030f 	and.w	r3, r3, #15
 800245c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002460:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002464:	0f1b      	lsrs	r3, r3, #28
 8002466:	f003 0307 	and.w	r3, r3, #7
 800246a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	019a      	lsls	r2, r3, #6
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	691b      	ldr	r3, [r3, #16]
 8002476:	041b      	lsls	r3, r3, #16
 8002478:	431a      	orrs	r2, r3
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	061b      	lsls	r3, r3, #24
 800247e:	431a      	orrs	r2, r3
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	071b      	lsls	r3, r3, #28
 8002484:	4925      	ldr	r1, [pc, #148]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d011      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	019a      	lsls	r2, r3, #6
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	041b      	lsls	r3, r3, #16
 80024a4:	431a      	orrs	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	68db      	ldr	r3, [r3, #12]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	071b      	lsls	r3, r3, #28
 80024b4:	4919      	ldr	r1, [pc, #100]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80024bc:	4b17      	ldr	r3, [pc, #92]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a16      	ldr	r2, [pc, #88]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80024c6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024c8:	f7fe fcdc 	bl	8000e84 <HAL_GetTick>
 80024cc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80024d0:	f7fe fcd8 	bl	8000e84 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b64      	cmp	r3, #100	; 0x64
 80024dc:	d901      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e0d7      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	f040 80cd 	bne.w	8002690 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80024f6:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002500:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002502:	f7fe fcbf 	bl	8000e84 <HAL_GetTick>
 8002506:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002508:	e00a      	b.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800250a:	f7fe fcbb 	bl	8000e84 <HAL_GetTick>
 800250e:	4602      	mov	r2, r0
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	1ad3      	subs	r3, r2, r3
 8002514:	2b64      	cmp	r3, #100	; 0x64
 8002516:	d903      	bls.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002518:	2303      	movs	r3, #3
 800251a:	e0ba      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800251c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002520:	4b5e      	ldr	r3, [pc, #376]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002528:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800252c:	d0ed      	beq.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d003      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	2b00      	cmp	r3, #0
 8002540:	d009      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800254a:	2b00      	cmp	r3, #0
 800254c:	d02e      	beq.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	2b00      	cmp	r3, #0
 8002554:	d12a      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002556:	4b51      	ldr	r3, [pc, #324]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255c:	0c1b      	lsrs	r3, r3, #16
 800255e:	f003 0303 	and.w	r3, r3, #3
 8002562:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002564:	4b4d      	ldr	r3, [pc, #308]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	0f1b      	lsrs	r3, r3, #28
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	019a      	lsls	r2, r3, #6
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	041b      	lsls	r3, r3, #16
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	699b      	ldr	r3, [r3, #24]
 8002582:	061b      	lsls	r3, r3, #24
 8002584:	431a      	orrs	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	071b      	lsls	r3, r3, #28
 800258a:	4944      	ldr	r1, [pc, #272]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002592:	4b42      	ldr	r3, [pc, #264]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002594:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002598:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a0:	3b01      	subs	r3, #1
 80025a2:	021b      	lsls	r3, r3, #8
 80025a4:	493d      	ldr	r1, [pc, #244]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025a6:	4313      	orrs	r3, r2
 80025a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d022      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c0:	d11d      	bne.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80025c2:	4b36      	ldr	r3, [pc, #216]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c8:	0e1b      	lsrs	r3, r3, #24
 80025ca:	f003 030f 	and.w	r3, r3, #15
 80025ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80025d0:	4b32      	ldr	r3, [pc, #200]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d6:	0f1b      	lsrs	r3, r3, #28
 80025d8:	f003 0307 	and.w	r3, r3, #7
 80025dc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	695b      	ldr	r3, [r3, #20]
 80025e2:	019a      	lsls	r2, r3, #6
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	041b      	lsls	r3, r3, #16
 80025ea:	431a      	orrs	r2, r3
 80025ec:	693b      	ldr	r3, [r7, #16]
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	431a      	orrs	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	071b      	lsls	r3, r3, #28
 80025f6:	4929      	ldr	r1, [pc, #164]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80025f8:	4313      	orrs	r3, r2
 80025fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0308 	and.w	r3, r3, #8
 8002606:	2b00      	cmp	r3, #0
 8002608:	d028      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800260a:	4b24      	ldr	r3, [pc, #144]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800260c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002610:	0e1b      	lsrs	r3, r3, #24
 8002612:	f003 030f 	and.w	r3, r3, #15
 8002616:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002618:	4b20      	ldr	r3, [pc, #128]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261e:	0c1b      	lsrs	r3, r3, #16
 8002620:	f003 0303 	and.w	r3, r3, #3
 8002624:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	695b      	ldr	r3, [r3, #20]
 800262a:	019a      	lsls	r2, r3, #6
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	041b      	lsls	r3, r3, #16
 8002630:	431a      	orrs	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	061b      	lsls	r3, r3, #24
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	69db      	ldr	r3, [r3, #28]
 800263c:	071b      	lsls	r3, r3, #28
 800263e:	4917      	ldr	r1, [pc, #92]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002648:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800264c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002654:	4911      	ldr	r1, [pc, #68]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002656:	4313      	orrs	r3, r2
 8002658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002666:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002668:	f7fe fc0c 	bl	8000e84 <HAL_GetTick>
 800266c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002670:	f7fe fc08 	bl	8000e84 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b64      	cmp	r3, #100	; 0x64
 800267c:	d901      	bls.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e007      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002682:	4b06      	ldr	r3, [pc, #24]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800268a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800268e:	d1ef      	bne.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	3720      	adds	r7, #32
 8002696:	46bd      	mov	sp, r7
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	40023800 	.word	0x40023800

080026a0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d101      	bne.n	80026b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e040      	b.n	8002734 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d106      	bne.n	80026c8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2200      	movs	r2, #0
 80026be:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026c2:	6878      	ldr	r0, [r7, #4]
 80026c4:	f7fe fb04 	bl	8000cd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2224      	movs	r2, #36	; 0x24
 80026cc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	681a      	ldr	r2, [r3, #0]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f022 0201 	bic.w	r2, r2, #1
 80026dc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8b0 	bl	8002844 <UART_SetConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d101      	bne.n	80026ee <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e022      	b.n	8002734 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d002      	beq.n	80026fc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 fb08 	bl	8002d0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	685a      	ldr	r2, [r3, #4]
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800270a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800271a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681a      	ldr	r2, [r3, #0]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f042 0201 	orr.w	r2, r2, #1
 800272a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800272c:	6878      	ldr	r0, [r7, #4]
 800272e:	f000 fb8f 	bl	8002e50 <UART_CheckIdleState>
 8002732:	4603      	mov	r3, r0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3708      	adds	r7, #8
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	4613      	mov	r3, r2
 800274a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002750:	2b20      	cmp	r3, #32
 8002752:	d171      	bne.n	8002838 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d002      	beq.n	8002760 <HAL_UART_Transmit+0x24>
 800275a:	88fb      	ldrh	r3, [r7, #6]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e06a      	b.n	800283a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	2200      	movs	r2, #0
 8002768:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	2221      	movs	r2, #33	; 0x21
 8002770:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002772:	f7fe fb87 	bl	8000e84 <HAL_GetTick>
 8002776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	88fa      	ldrh	r2, [r7, #6]
 800277c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	88fa      	ldrh	r2, [r7, #6]
 8002784:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002790:	d108      	bne.n	80027a4 <HAL_UART_Transmit+0x68>
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	691b      	ldr	r3, [r3, #16]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d104      	bne.n	80027a4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800279e:	68bb      	ldr	r3, [r7, #8]
 80027a0:	61bb      	str	r3, [r7, #24]
 80027a2:	e003      	b.n	80027ac <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027a8:	2300      	movs	r3, #0
 80027aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027ac:	e02c      	b.n	8002808 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	9300      	str	r3, [sp, #0]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	2200      	movs	r2, #0
 80027b6:	2180      	movs	r1, #128	; 0x80
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 fb80 	bl	8002ebe <UART_WaitOnFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d001      	beq.n	80027c8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e038      	b.n	800283a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d10b      	bne.n	80027e6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	881b      	ldrh	r3, [r3, #0]
 80027d2:	461a      	mov	r2, r3
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80027dc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	3302      	adds	r3, #2
 80027e2:	61bb      	str	r3, [r7, #24]
 80027e4:	e007      	b.n	80027f6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80027e6:	69fb      	ldr	r3, [r7, #28]
 80027e8:	781a      	ldrb	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	3301      	adds	r3, #1
 80027f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80027fc:	b29b      	uxth	r3, r3
 80027fe:	3b01      	subs	r3, #1
 8002800:	b29a      	uxth	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d1cc      	bne.n	80027ae <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	9300      	str	r3, [sp, #0]
 8002818:	697b      	ldr	r3, [r7, #20]
 800281a:	2200      	movs	r2, #0
 800281c:	2140      	movs	r1, #64	; 0x40
 800281e:	68f8      	ldr	r0, [r7, #12]
 8002820:	f000 fb4d 	bl	8002ebe <UART_WaitOnFlagUntilTimeout>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e005      	b.n	800283a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2220      	movs	r2, #32
 8002832:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002834:	2300      	movs	r3, #0
 8002836:	e000      	b.n	800283a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002838:	2302      	movs	r3, #2
  }
}
 800283a:	4618      	mov	r0, r3
 800283c:	3720      	adds	r7, #32
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b088      	sub	sp, #32
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800284c:	2300      	movs	r3, #0
 800284e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689a      	ldr	r2, [r3, #8]
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695b      	ldr	r3, [r3, #20]
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	69db      	ldr	r3, [r3, #28]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	4ba6      	ldr	r3, [pc, #664]	; (8002b08 <UART_SetConfig+0x2c4>)
 8002870:	4013      	ands	r3, r2
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	6812      	ldr	r2, [r2, #0]
 8002876:	6979      	ldr	r1, [r7, #20]
 8002878:	430b      	orrs	r3, r1
 800287a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	68da      	ldr	r2, [r3, #12]
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	430a      	orrs	r2, r1
 8002890:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	699b      	ldr	r3, [r3, #24]
 8002896:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	697a      	ldr	r2, [r7, #20]
 800289e:	4313      	orrs	r3, r2
 80028a0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	697a      	ldr	r2, [r7, #20]
 80028b2:	430a      	orrs	r2, r1
 80028b4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4a94      	ldr	r2, [pc, #592]	; (8002b0c <UART_SetConfig+0x2c8>)
 80028bc:	4293      	cmp	r3, r2
 80028be:	d120      	bne.n	8002902 <UART_SetConfig+0xbe>
 80028c0:	4b93      	ldr	r3, [pc, #588]	; (8002b10 <UART_SetConfig+0x2cc>)
 80028c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	2b03      	cmp	r3, #3
 80028cc:	d816      	bhi.n	80028fc <UART_SetConfig+0xb8>
 80028ce:	a201      	add	r2, pc, #4	; (adr r2, 80028d4 <UART_SetConfig+0x90>)
 80028d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028d4:	080028e5 	.word	0x080028e5
 80028d8:	080028f1 	.word	0x080028f1
 80028dc:	080028eb 	.word	0x080028eb
 80028e0:	080028f7 	.word	0x080028f7
 80028e4:	2301      	movs	r3, #1
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e150      	b.n	8002b8c <UART_SetConfig+0x348>
 80028ea:	2302      	movs	r3, #2
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e14d      	b.n	8002b8c <UART_SetConfig+0x348>
 80028f0:	2304      	movs	r3, #4
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e14a      	b.n	8002b8c <UART_SetConfig+0x348>
 80028f6:	2308      	movs	r3, #8
 80028f8:	77fb      	strb	r3, [r7, #31]
 80028fa:	e147      	b.n	8002b8c <UART_SetConfig+0x348>
 80028fc:	2310      	movs	r3, #16
 80028fe:	77fb      	strb	r3, [r7, #31]
 8002900:	e144      	b.n	8002b8c <UART_SetConfig+0x348>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a83      	ldr	r2, [pc, #524]	; (8002b14 <UART_SetConfig+0x2d0>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d132      	bne.n	8002972 <UART_SetConfig+0x12e>
 800290c:	4b80      	ldr	r3, [pc, #512]	; (8002b10 <UART_SetConfig+0x2cc>)
 800290e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002912:	f003 030c 	and.w	r3, r3, #12
 8002916:	2b0c      	cmp	r3, #12
 8002918:	d828      	bhi.n	800296c <UART_SetConfig+0x128>
 800291a:	a201      	add	r2, pc, #4	; (adr r2, 8002920 <UART_SetConfig+0xdc>)
 800291c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002920:	08002955 	.word	0x08002955
 8002924:	0800296d 	.word	0x0800296d
 8002928:	0800296d 	.word	0x0800296d
 800292c:	0800296d 	.word	0x0800296d
 8002930:	08002961 	.word	0x08002961
 8002934:	0800296d 	.word	0x0800296d
 8002938:	0800296d 	.word	0x0800296d
 800293c:	0800296d 	.word	0x0800296d
 8002940:	0800295b 	.word	0x0800295b
 8002944:	0800296d 	.word	0x0800296d
 8002948:	0800296d 	.word	0x0800296d
 800294c:	0800296d 	.word	0x0800296d
 8002950:	08002967 	.word	0x08002967
 8002954:	2300      	movs	r3, #0
 8002956:	77fb      	strb	r3, [r7, #31]
 8002958:	e118      	b.n	8002b8c <UART_SetConfig+0x348>
 800295a:	2302      	movs	r3, #2
 800295c:	77fb      	strb	r3, [r7, #31]
 800295e:	e115      	b.n	8002b8c <UART_SetConfig+0x348>
 8002960:	2304      	movs	r3, #4
 8002962:	77fb      	strb	r3, [r7, #31]
 8002964:	e112      	b.n	8002b8c <UART_SetConfig+0x348>
 8002966:	2308      	movs	r3, #8
 8002968:	77fb      	strb	r3, [r7, #31]
 800296a:	e10f      	b.n	8002b8c <UART_SetConfig+0x348>
 800296c:	2310      	movs	r3, #16
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e10c      	b.n	8002b8c <UART_SetConfig+0x348>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a68      	ldr	r2, [pc, #416]	; (8002b18 <UART_SetConfig+0x2d4>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d120      	bne.n	80029be <UART_SetConfig+0x17a>
 800297c:	4b64      	ldr	r3, [pc, #400]	; (8002b10 <UART_SetConfig+0x2cc>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002986:	2b30      	cmp	r3, #48	; 0x30
 8002988:	d013      	beq.n	80029b2 <UART_SetConfig+0x16e>
 800298a:	2b30      	cmp	r3, #48	; 0x30
 800298c:	d814      	bhi.n	80029b8 <UART_SetConfig+0x174>
 800298e:	2b20      	cmp	r3, #32
 8002990:	d009      	beq.n	80029a6 <UART_SetConfig+0x162>
 8002992:	2b20      	cmp	r3, #32
 8002994:	d810      	bhi.n	80029b8 <UART_SetConfig+0x174>
 8002996:	2b00      	cmp	r3, #0
 8002998:	d002      	beq.n	80029a0 <UART_SetConfig+0x15c>
 800299a:	2b10      	cmp	r3, #16
 800299c:	d006      	beq.n	80029ac <UART_SetConfig+0x168>
 800299e:	e00b      	b.n	80029b8 <UART_SetConfig+0x174>
 80029a0:	2300      	movs	r3, #0
 80029a2:	77fb      	strb	r3, [r7, #31]
 80029a4:	e0f2      	b.n	8002b8c <UART_SetConfig+0x348>
 80029a6:	2302      	movs	r3, #2
 80029a8:	77fb      	strb	r3, [r7, #31]
 80029aa:	e0ef      	b.n	8002b8c <UART_SetConfig+0x348>
 80029ac:	2304      	movs	r3, #4
 80029ae:	77fb      	strb	r3, [r7, #31]
 80029b0:	e0ec      	b.n	8002b8c <UART_SetConfig+0x348>
 80029b2:	2308      	movs	r3, #8
 80029b4:	77fb      	strb	r3, [r7, #31]
 80029b6:	e0e9      	b.n	8002b8c <UART_SetConfig+0x348>
 80029b8:	2310      	movs	r3, #16
 80029ba:	77fb      	strb	r3, [r7, #31]
 80029bc:	e0e6      	b.n	8002b8c <UART_SetConfig+0x348>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a56      	ldr	r2, [pc, #344]	; (8002b1c <UART_SetConfig+0x2d8>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d120      	bne.n	8002a0a <UART_SetConfig+0x1c6>
 80029c8:	4b51      	ldr	r3, [pc, #324]	; (8002b10 <UART_SetConfig+0x2cc>)
 80029ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ce:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80029d2:	2bc0      	cmp	r3, #192	; 0xc0
 80029d4:	d013      	beq.n	80029fe <UART_SetConfig+0x1ba>
 80029d6:	2bc0      	cmp	r3, #192	; 0xc0
 80029d8:	d814      	bhi.n	8002a04 <UART_SetConfig+0x1c0>
 80029da:	2b80      	cmp	r3, #128	; 0x80
 80029dc:	d009      	beq.n	80029f2 <UART_SetConfig+0x1ae>
 80029de:	2b80      	cmp	r3, #128	; 0x80
 80029e0:	d810      	bhi.n	8002a04 <UART_SetConfig+0x1c0>
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d002      	beq.n	80029ec <UART_SetConfig+0x1a8>
 80029e6:	2b40      	cmp	r3, #64	; 0x40
 80029e8:	d006      	beq.n	80029f8 <UART_SetConfig+0x1b4>
 80029ea:	e00b      	b.n	8002a04 <UART_SetConfig+0x1c0>
 80029ec:	2300      	movs	r3, #0
 80029ee:	77fb      	strb	r3, [r7, #31]
 80029f0:	e0cc      	b.n	8002b8c <UART_SetConfig+0x348>
 80029f2:	2302      	movs	r3, #2
 80029f4:	77fb      	strb	r3, [r7, #31]
 80029f6:	e0c9      	b.n	8002b8c <UART_SetConfig+0x348>
 80029f8:	2304      	movs	r3, #4
 80029fa:	77fb      	strb	r3, [r7, #31]
 80029fc:	e0c6      	b.n	8002b8c <UART_SetConfig+0x348>
 80029fe:	2308      	movs	r3, #8
 8002a00:	77fb      	strb	r3, [r7, #31]
 8002a02:	e0c3      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a04:	2310      	movs	r3, #16
 8002a06:	77fb      	strb	r3, [r7, #31]
 8002a08:	e0c0      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a44      	ldr	r2, [pc, #272]	; (8002b20 <UART_SetConfig+0x2dc>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d125      	bne.n	8002a60 <UART_SetConfig+0x21c>
 8002a14:	4b3e      	ldr	r3, [pc, #248]	; (8002b10 <UART_SetConfig+0x2cc>)
 8002a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a22:	d017      	beq.n	8002a54 <UART_SetConfig+0x210>
 8002a24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002a28:	d817      	bhi.n	8002a5a <UART_SetConfig+0x216>
 8002a2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a2e:	d00b      	beq.n	8002a48 <UART_SetConfig+0x204>
 8002a30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a34:	d811      	bhi.n	8002a5a <UART_SetConfig+0x216>
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d003      	beq.n	8002a42 <UART_SetConfig+0x1fe>
 8002a3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3e:	d006      	beq.n	8002a4e <UART_SetConfig+0x20a>
 8002a40:	e00b      	b.n	8002a5a <UART_SetConfig+0x216>
 8002a42:	2300      	movs	r3, #0
 8002a44:	77fb      	strb	r3, [r7, #31]
 8002a46:	e0a1      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	77fb      	strb	r3, [r7, #31]
 8002a4c:	e09e      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a4e:	2304      	movs	r3, #4
 8002a50:	77fb      	strb	r3, [r7, #31]
 8002a52:	e09b      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a54:	2308      	movs	r3, #8
 8002a56:	77fb      	strb	r3, [r7, #31]
 8002a58:	e098      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	77fb      	strb	r3, [r7, #31]
 8002a5e:	e095      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a2f      	ldr	r2, [pc, #188]	; (8002b24 <UART_SetConfig+0x2e0>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d125      	bne.n	8002ab6 <UART_SetConfig+0x272>
 8002a6a:	4b29      	ldr	r3, [pc, #164]	; (8002b10 <UART_SetConfig+0x2cc>)
 8002a6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a70:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002a74:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a78:	d017      	beq.n	8002aaa <UART_SetConfig+0x266>
 8002a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002a7e:	d817      	bhi.n	8002ab0 <UART_SetConfig+0x26c>
 8002a80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a84:	d00b      	beq.n	8002a9e <UART_SetConfig+0x25a>
 8002a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a8a:	d811      	bhi.n	8002ab0 <UART_SetConfig+0x26c>
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <UART_SetConfig+0x254>
 8002a90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a94:	d006      	beq.n	8002aa4 <UART_SetConfig+0x260>
 8002a96:	e00b      	b.n	8002ab0 <UART_SetConfig+0x26c>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	77fb      	strb	r3, [r7, #31]
 8002a9c:	e076      	b.n	8002b8c <UART_SetConfig+0x348>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	77fb      	strb	r3, [r7, #31]
 8002aa2:	e073      	b.n	8002b8c <UART_SetConfig+0x348>
 8002aa4:	2304      	movs	r3, #4
 8002aa6:	77fb      	strb	r3, [r7, #31]
 8002aa8:	e070      	b.n	8002b8c <UART_SetConfig+0x348>
 8002aaa:	2308      	movs	r3, #8
 8002aac:	77fb      	strb	r3, [r7, #31]
 8002aae:	e06d      	b.n	8002b8c <UART_SetConfig+0x348>
 8002ab0:	2310      	movs	r3, #16
 8002ab2:	77fb      	strb	r3, [r7, #31]
 8002ab4:	e06a      	b.n	8002b8c <UART_SetConfig+0x348>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1b      	ldr	r2, [pc, #108]	; (8002b28 <UART_SetConfig+0x2e4>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d138      	bne.n	8002b32 <UART_SetConfig+0x2ee>
 8002ac0:	4b13      	ldr	r3, [pc, #76]	; (8002b10 <UART_SetConfig+0x2cc>)
 8002ac2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002aca:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ace:	d017      	beq.n	8002b00 <UART_SetConfig+0x2bc>
 8002ad0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ad4:	d82a      	bhi.n	8002b2c <UART_SetConfig+0x2e8>
 8002ad6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ada:	d00b      	beq.n	8002af4 <UART_SetConfig+0x2b0>
 8002adc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ae0:	d824      	bhi.n	8002b2c <UART_SetConfig+0x2e8>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <UART_SetConfig+0x2aa>
 8002ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002aea:	d006      	beq.n	8002afa <UART_SetConfig+0x2b6>
 8002aec:	e01e      	b.n	8002b2c <UART_SetConfig+0x2e8>
 8002aee:	2300      	movs	r3, #0
 8002af0:	77fb      	strb	r3, [r7, #31]
 8002af2:	e04b      	b.n	8002b8c <UART_SetConfig+0x348>
 8002af4:	2302      	movs	r3, #2
 8002af6:	77fb      	strb	r3, [r7, #31]
 8002af8:	e048      	b.n	8002b8c <UART_SetConfig+0x348>
 8002afa:	2304      	movs	r3, #4
 8002afc:	77fb      	strb	r3, [r7, #31]
 8002afe:	e045      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b00:	2308      	movs	r3, #8
 8002b02:	77fb      	strb	r3, [r7, #31]
 8002b04:	e042      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b06:	bf00      	nop
 8002b08:	efff69f3 	.word	0xefff69f3
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	40023800 	.word	0x40023800
 8002b14:	40004400 	.word	0x40004400
 8002b18:	40004800 	.word	0x40004800
 8002b1c:	40004c00 	.word	0x40004c00
 8002b20:	40005000 	.word	0x40005000
 8002b24:	40011400 	.word	0x40011400
 8002b28:	40007800 	.word	0x40007800
 8002b2c:	2310      	movs	r3, #16
 8002b2e:	77fb      	strb	r3, [r7, #31]
 8002b30:	e02c      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a72      	ldr	r2, [pc, #456]	; (8002d00 <UART_SetConfig+0x4bc>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d125      	bne.n	8002b88 <UART_SetConfig+0x344>
 8002b3c:	4b71      	ldr	r3, [pc, #452]	; (8002d04 <UART_SetConfig+0x4c0>)
 8002b3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b42:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002b46:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b4a:	d017      	beq.n	8002b7c <UART_SetConfig+0x338>
 8002b4c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002b50:	d817      	bhi.n	8002b82 <UART_SetConfig+0x33e>
 8002b52:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b56:	d00b      	beq.n	8002b70 <UART_SetConfig+0x32c>
 8002b58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b5c:	d811      	bhi.n	8002b82 <UART_SetConfig+0x33e>
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d003      	beq.n	8002b6a <UART_SetConfig+0x326>
 8002b62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b66:	d006      	beq.n	8002b76 <UART_SetConfig+0x332>
 8002b68:	e00b      	b.n	8002b82 <UART_SetConfig+0x33e>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	77fb      	strb	r3, [r7, #31]
 8002b6e:	e00d      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b70:	2302      	movs	r3, #2
 8002b72:	77fb      	strb	r3, [r7, #31]
 8002b74:	e00a      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b76:	2304      	movs	r3, #4
 8002b78:	77fb      	strb	r3, [r7, #31]
 8002b7a:	e007      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b7c:	2308      	movs	r3, #8
 8002b7e:	77fb      	strb	r3, [r7, #31]
 8002b80:	e004      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b82:	2310      	movs	r3, #16
 8002b84:	77fb      	strb	r3, [r7, #31]
 8002b86:	e001      	b.n	8002b8c <UART_SetConfig+0x348>
 8002b88:	2310      	movs	r3, #16
 8002b8a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b94:	d15b      	bne.n	8002c4e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8002b96:	7ffb      	ldrb	r3, [r7, #31]
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d828      	bhi.n	8002bee <UART_SetConfig+0x3aa>
 8002b9c:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <UART_SetConfig+0x360>)
 8002b9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba2:	bf00      	nop
 8002ba4:	08002bc9 	.word	0x08002bc9
 8002ba8:	08002bd1 	.word	0x08002bd1
 8002bac:	08002bd9 	.word	0x08002bd9
 8002bb0:	08002bef 	.word	0x08002bef
 8002bb4:	08002bdf 	.word	0x08002bdf
 8002bb8:	08002bef 	.word	0x08002bef
 8002bbc:	08002bef 	.word	0x08002bef
 8002bc0:	08002bef 	.word	0x08002bef
 8002bc4:	08002be7 	.word	0x08002be7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bc8:	f7ff f952 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002bcc:	61b8      	str	r0, [r7, #24]
        break;
 8002bce:	e013      	b.n	8002bf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bd0:	f7ff f962 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002bd4:	61b8      	str	r0, [r7, #24]
        break;
 8002bd6:	e00f      	b.n	8002bf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002bd8:	4b4b      	ldr	r3, [pc, #300]	; (8002d08 <UART_SetConfig+0x4c4>)
 8002bda:	61bb      	str	r3, [r7, #24]
        break;
 8002bdc:	e00c      	b.n	8002bf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002bde:	f7ff f835 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002be2:	61b8      	str	r0, [r7, #24]
        break;
 8002be4:	e008      	b.n	8002bf8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002be6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bea:	61bb      	str	r3, [r7, #24]
        break;
 8002bec:	e004      	b.n	8002bf8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	77bb      	strb	r3, [r7, #30]
        break;
 8002bf6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d074      	beq.n	8002ce8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002bfe:	69bb      	ldr	r3, [r7, #24]
 8002c00:	005a      	lsls	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	085b      	lsrs	r3, r3, #1
 8002c08:	441a      	add	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c12:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	2b0f      	cmp	r3, #15
 8002c18:	d916      	bls.n	8002c48 <UART_SetConfig+0x404>
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c20:	d212      	bcs.n	8002c48 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	b29b      	uxth	r3, r3
 8002c26:	f023 030f 	bic.w	r3, r3, #15
 8002c2a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c2c:	693b      	ldr	r3, [r7, #16]
 8002c2e:	085b      	lsrs	r3, r3, #1
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	f003 0307 	and.w	r3, r3, #7
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	89fb      	ldrh	r3, [r7, #14]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	89fa      	ldrh	r2, [r7, #14]
 8002c44:	60da      	str	r2, [r3, #12]
 8002c46:	e04f      	b.n	8002ce8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002c48:	2301      	movs	r3, #1
 8002c4a:	77bb      	strb	r3, [r7, #30]
 8002c4c:	e04c      	b.n	8002ce8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002c4e:	7ffb      	ldrb	r3, [r7, #31]
 8002c50:	2b08      	cmp	r3, #8
 8002c52:	d828      	bhi.n	8002ca6 <UART_SetConfig+0x462>
 8002c54:	a201      	add	r2, pc, #4	; (adr r2, 8002c5c <UART_SetConfig+0x418>)
 8002c56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c5a:	bf00      	nop
 8002c5c:	08002c81 	.word	0x08002c81
 8002c60:	08002c89 	.word	0x08002c89
 8002c64:	08002c91 	.word	0x08002c91
 8002c68:	08002ca7 	.word	0x08002ca7
 8002c6c:	08002c97 	.word	0x08002c97
 8002c70:	08002ca7 	.word	0x08002ca7
 8002c74:	08002ca7 	.word	0x08002ca7
 8002c78:	08002ca7 	.word	0x08002ca7
 8002c7c:	08002c9f 	.word	0x08002c9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c80:	f7ff f8f6 	bl	8001e70 <HAL_RCC_GetPCLK1Freq>
 8002c84:	61b8      	str	r0, [r7, #24]
        break;
 8002c86:	e013      	b.n	8002cb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c88:	f7ff f906 	bl	8001e98 <HAL_RCC_GetPCLK2Freq>
 8002c8c:	61b8      	str	r0, [r7, #24]
        break;
 8002c8e:	e00f      	b.n	8002cb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c90:	4b1d      	ldr	r3, [pc, #116]	; (8002d08 <UART_SetConfig+0x4c4>)
 8002c92:	61bb      	str	r3, [r7, #24]
        break;
 8002c94:	e00c      	b.n	8002cb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c96:	f7fe ffd9 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002c9a:	61b8      	str	r0, [r7, #24]
        break;
 8002c9c:	e008      	b.n	8002cb0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ca2:	61bb      	str	r3, [r7, #24]
        break;
 8002ca4:	e004      	b.n	8002cb0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	77bb      	strb	r3, [r7, #30]
        break;
 8002cae:	bf00      	nop
    }

    if (pclk != 0U)
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d018      	beq.n	8002ce8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	085a      	lsrs	r2, r3, #1
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	441a      	add	r2, r3
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cc8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d909      	bls.n	8002ce4 <UART_SetConfig+0x4a0>
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cd6:	d205      	bcs.n	8002ce4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	b29a      	uxth	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	e001      	b.n	8002ce8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2200      	movs	r2, #0
 8002cec:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002cf4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	40007c00 	.word	0x40007c00
 8002d04:	40023800 	.word	0x40023800
 8002d08:	00f42400 	.word	0x00f42400

08002d0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d00a      	beq.n	8002d36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	430a      	orrs	r2, r1
 8002d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3a:	f003 0302 	and.w	r3, r3, #2
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d00a      	beq.n	8002d58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	f003 0304 	and.w	r3, r3, #4
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00a      	beq.n	8002d7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	f003 0308 	and.w	r3, r3, #8
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00a      	beq.n	8002d9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	430a      	orrs	r2, r1
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	f003 0310 	and.w	r3, r3, #16
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d00a      	beq.n	8002dbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	430a      	orrs	r2, r1
 8002dbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc2:	f003 0320 	and.w	r3, r3, #32
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00a      	beq.n	8002de0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d01a      	beq.n	8002e22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	685b      	ldr	r3, [r3, #4]
 8002df2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e0a:	d10a      	bne.n	8002e22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	430a      	orrs	r2, r1
 8002e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d00a      	beq.n	8002e44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	685b      	ldr	r3, [r3, #4]
 8002e34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	430a      	orrs	r2, r1
 8002e42:	605a      	str	r2, [r3, #4]
  }
}
 8002e44:	bf00      	nop
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af02      	add	r7, sp, #8
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2200      	movs	r2, #0
 8002e5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e60:	f7fe f810 	bl	8000e84 <HAL_GetTick>
 8002e64:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f003 0308 	and.w	r3, r3, #8
 8002e70:	2b08      	cmp	r3, #8
 8002e72:	d10e      	bne.n	8002e92 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f000 f81b 	bl	8002ebe <UART_WaitOnFlagUntilTimeout>
 8002e88:	4603      	mov	r3, r0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d001      	beq.n	8002e92 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e8e:	2303      	movs	r3, #3
 8002e90:	e011      	b.n	8002eb6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2220      	movs	r2, #32
 8002e96:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2220      	movs	r2, #32
 8002e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002eb4:	2300      	movs	r3, #0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b09c      	sub	sp, #112	; 0x70
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	60f8      	str	r0, [r7, #12]
 8002ec6:	60b9      	str	r1, [r7, #8]
 8002ec8:	603b      	str	r3, [r7, #0]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ece:	e0a7      	b.n	8003020 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ed6:	f000 80a3 	beq.w	8003020 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002eda:	f7fd ffd3 	bl	8000e84 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d302      	bcc.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x32>
 8002eea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d13f      	bne.n	8002f70 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ef8:	e853 3f00 	ldrex	r3, [r3]
 8002efc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002efe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f00:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f04:	667b      	str	r3, [r7, #100]	; 0x64
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f0e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002f10:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f12:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002f14:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002f16:	e841 2300 	strex	r3, r2, [r1]
 8002f1a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002f1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1e6      	bne.n	8002ef0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	3308      	adds	r3, #8
 8002f28:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f2c:	e853 3f00 	ldrex	r3, [r3]
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002f32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f34:	f023 0301 	bic.w	r3, r3, #1
 8002f38:	663b      	str	r3, [r7, #96]	; 0x60
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	3308      	adds	r3, #8
 8002f40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f42:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f44:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f4a:	e841 2300 	strex	r3, r2, [r1]
 8002f4e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1e5      	bne.n	8002f22 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	2220      	movs	r2, #32
 8002f5a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	2220      	movs	r2, #32
 8002f60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	2200      	movs	r2, #0
 8002f68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e068      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f003 0304 	and.w	r3, r3, #4
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d050      	beq.n	8003020 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69db      	ldr	r3, [r3, #28]
 8002f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f8c:	d148      	bne.n	8003020 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f96:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fa0:	e853 3f00 	ldrex	r3, [r3]
 8002fa4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fac:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	461a      	mov	r2, r3
 8002fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fb6:	637b      	str	r3, [r7, #52]	; 0x34
 8002fb8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fbc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fbe:	e841 2300 	strex	r3, r2, [r1]
 8002fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1e6      	bne.n	8002f98 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	3308      	adds	r3, #8
 8002fd0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	e853 3f00 	ldrex	r3, [r3]
 8002fd8:	613b      	str	r3, [r7, #16]
   return(result);
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	f023 0301 	bic.w	r3, r3, #1
 8002fe0:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	3308      	adds	r3, #8
 8002fe8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fea:	623a      	str	r2, [r7, #32]
 8002fec:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fee:	69f9      	ldr	r1, [r7, #28]
 8002ff0:	6a3a      	ldr	r2, [r7, #32]
 8002ff2:	e841 2300 	strex	r3, r2, [r1]
 8002ff6:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1e5      	bne.n	8002fca <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2220      	movs	r2, #32
 8003002:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2220      	movs	r2, #32
 8003008:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2220      	movs	r2, #32
 8003010:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e010      	b.n	8003042 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	69da      	ldr	r2, [r3, #28]
 8003026:	68bb      	ldr	r3, [r7, #8]
 8003028:	4013      	ands	r3, r2
 800302a:	68ba      	ldr	r2, [r7, #8]
 800302c:	429a      	cmp	r2, r3
 800302e:	bf0c      	ite	eq
 8003030:	2301      	moveq	r3, #1
 8003032:	2300      	movne	r3, #0
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	79fb      	ldrb	r3, [r7, #7]
 800303a:	429a      	cmp	r2, r3
 800303c:	f43f af48 	beq.w	8002ed0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003040:	2300      	movs	r3, #0
}
 8003042:	4618      	mov	r0, r3
 8003044:	3770      	adds	r7, #112	; 0x70
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
	...

0800304c <__errno>:
 800304c:	4b01      	ldr	r3, [pc, #4]	; (8003054 <__errno+0x8>)
 800304e:	6818      	ldr	r0, [r3, #0]
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	20000034 	.word	0x20000034

08003058 <__libc_init_array>:
 8003058:	b570      	push	{r4, r5, r6, lr}
 800305a:	4d0d      	ldr	r5, [pc, #52]	; (8003090 <__libc_init_array+0x38>)
 800305c:	4c0d      	ldr	r4, [pc, #52]	; (8003094 <__libc_init_array+0x3c>)
 800305e:	1b64      	subs	r4, r4, r5
 8003060:	10a4      	asrs	r4, r4, #2
 8003062:	2600      	movs	r6, #0
 8003064:	42a6      	cmp	r6, r4
 8003066:	d109      	bne.n	800307c <__libc_init_array+0x24>
 8003068:	4d0b      	ldr	r5, [pc, #44]	; (8003098 <__libc_init_array+0x40>)
 800306a:	4c0c      	ldr	r4, [pc, #48]	; (800309c <__libc_init_array+0x44>)
 800306c:	f000 fc8e 	bl	800398c <_init>
 8003070:	1b64      	subs	r4, r4, r5
 8003072:	10a4      	asrs	r4, r4, #2
 8003074:	2600      	movs	r6, #0
 8003076:	42a6      	cmp	r6, r4
 8003078:	d105      	bne.n	8003086 <__libc_init_array+0x2e>
 800307a:	bd70      	pop	{r4, r5, r6, pc}
 800307c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003080:	4798      	blx	r3
 8003082:	3601      	adds	r6, #1
 8003084:	e7ee      	b.n	8003064 <__libc_init_array+0xc>
 8003086:	f855 3b04 	ldr.w	r3, [r5], #4
 800308a:	4798      	blx	r3
 800308c:	3601      	adds	r6, #1
 800308e:	e7f2      	b.n	8003076 <__libc_init_array+0x1e>
 8003090:	08003a0c 	.word	0x08003a0c
 8003094:	08003a0c 	.word	0x08003a0c
 8003098:	08003a0c 	.word	0x08003a0c
 800309c:	08003a10 	.word	0x08003a10

080030a0 <memset>:
 80030a0:	4402      	add	r2, r0
 80030a2:	4603      	mov	r3, r0
 80030a4:	4293      	cmp	r3, r2
 80030a6:	d100      	bne.n	80030aa <memset+0xa>
 80030a8:	4770      	bx	lr
 80030aa:	f803 1b01 	strb.w	r1, [r3], #1
 80030ae:	e7f9      	b.n	80030a4 <memset+0x4>

080030b0 <siprintf>:
 80030b0:	b40e      	push	{r1, r2, r3}
 80030b2:	b500      	push	{lr}
 80030b4:	b09c      	sub	sp, #112	; 0x70
 80030b6:	ab1d      	add	r3, sp, #116	; 0x74
 80030b8:	9002      	str	r0, [sp, #8]
 80030ba:	9006      	str	r0, [sp, #24]
 80030bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80030c0:	4809      	ldr	r0, [pc, #36]	; (80030e8 <siprintf+0x38>)
 80030c2:	9107      	str	r1, [sp, #28]
 80030c4:	9104      	str	r1, [sp, #16]
 80030c6:	4909      	ldr	r1, [pc, #36]	; (80030ec <siprintf+0x3c>)
 80030c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80030cc:	9105      	str	r1, [sp, #20]
 80030ce:	6800      	ldr	r0, [r0, #0]
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	a902      	add	r1, sp, #8
 80030d4:	f000 f868 	bl	80031a8 <_svfiprintf_r>
 80030d8:	9b02      	ldr	r3, [sp, #8]
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
 80030de:	b01c      	add	sp, #112	; 0x70
 80030e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80030e4:	b003      	add	sp, #12
 80030e6:	4770      	bx	lr
 80030e8:	20000034 	.word	0x20000034
 80030ec:	ffff0208 	.word	0xffff0208

080030f0 <__ssputs_r>:
 80030f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80030f4:	688e      	ldr	r6, [r1, #8]
 80030f6:	429e      	cmp	r6, r3
 80030f8:	4682      	mov	sl, r0
 80030fa:	460c      	mov	r4, r1
 80030fc:	4690      	mov	r8, r2
 80030fe:	461f      	mov	r7, r3
 8003100:	d838      	bhi.n	8003174 <__ssputs_r+0x84>
 8003102:	898a      	ldrh	r2, [r1, #12]
 8003104:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003108:	d032      	beq.n	8003170 <__ssputs_r+0x80>
 800310a:	6825      	ldr	r5, [r4, #0]
 800310c:	6909      	ldr	r1, [r1, #16]
 800310e:	eba5 0901 	sub.w	r9, r5, r1
 8003112:	6965      	ldr	r5, [r4, #20]
 8003114:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003118:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800311c:	3301      	adds	r3, #1
 800311e:	444b      	add	r3, r9
 8003120:	106d      	asrs	r5, r5, #1
 8003122:	429d      	cmp	r5, r3
 8003124:	bf38      	it	cc
 8003126:	461d      	movcc	r5, r3
 8003128:	0553      	lsls	r3, r2, #21
 800312a:	d531      	bpl.n	8003190 <__ssputs_r+0xa0>
 800312c:	4629      	mov	r1, r5
 800312e:	f000 fb63 	bl	80037f8 <_malloc_r>
 8003132:	4606      	mov	r6, r0
 8003134:	b950      	cbnz	r0, 800314c <__ssputs_r+0x5c>
 8003136:	230c      	movs	r3, #12
 8003138:	f8ca 3000 	str.w	r3, [sl]
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003142:	81a3      	strh	r3, [r4, #12]
 8003144:	f04f 30ff 	mov.w	r0, #4294967295
 8003148:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800314c:	6921      	ldr	r1, [r4, #16]
 800314e:	464a      	mov	r2, r9
 8003150:	f000 fabe 	bl	80036d0 <memcpy>
 8003154:	89a3      	ldrh	r3, [r4, #12]
 8003156:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800315a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800315e:	81a3      	strh	r3, [r4, #12]
 8003160:	6126      	str	r6, [r4, #16]
 8003162:	6165      	str	r5, [r4, #20]
 8003164:	444e      	add	r6, r9
 8003166:	eba5 0509 	sub.w	r5, r5, r9
 800316a:	6026      	str	r6, [r4, #0]
 800316c:	60a5      	str	r5, [r4, #8]
 800316e:	463e      	mov	r6, r7
 8003170:	42be      	cmp	r6, r7
 8003172:	d900      	bls.n	8003176 <__ssputs_r+0x86>
 8003174:	463e      	mov	r6, r7
 8003176:	6820      	ldr	r0, [r4, #0]
 8003178:	4632      	mov	r2, r6
 800317a:	4641      	mov	r1, r8
 800317c:	f000 fab6 	bl	80036ec <memmove>
 8003180:	68a3      	ldr	r3, [r4, #8]
 8003182:	1b9b      	subs	r3, r3, r6
 8003184:	60a3      	str	r3, [r4, #8]
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	4433      	add	r3, r6
 800318a:	6023      	str	r3, [r4, #0]
 800318c:	2000      	movs	r0, #0
 800318e:	e7db      	b.n	8003148 <__ssputs_r+0x58>
 8003190:	462a      	mov	r2, r5
 8003192:	f000 fba5 	bl	80038e0 <_realloc_r>
 8003196:	4606      	mov	r6, r0
 8003198:	2800      	cmp	r0, #0
 800319a:	d1e1      	bne.n	8003160 <__ssputs_r+0x70>
 800319c:	6921      	ldr	r1, [r4, #16]
 800319e:	4650      	mov	r0, sl
 80031a0:	f000 fabe 	bl	8003720 <_free_r>
 80031a4:	e7c7      	b.n	8003136 <__ssputs_r+0x46>
	...

080031a8 <_svfiprintf_r>:
 80031a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031ac:	4698      	mov	r8, r3
 80031ae:	898b      	ldrh	r3, [r1, #12]
 80031b0:	061b      	lsls	r3, r3, #24
 80031b2:	b09d      	sub	sp, #116	; 0x74
 80031b4:	4607      	mov	r7, r0
 80031b6:	460d      	mov	r5, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	d50e      	bpl.n	80031da <_svfiprintf_r+0x32>
 80031bc:	690b      	ldr	r3, [r1, #16]
 80031be:	b963      	cbnz	r3, 80031da <_svfiprintf_r+0x32>
 80031c0:	2140      	movs	r1, #64	; 0x40
 80031c2:	f000 fb19 	bl	80037f8 <_malloc_r>
 80031c6:	6028      	str	r0, [r5, #0]
 80031c8:	6128      	str	r0, [r5, #16]
 80031ca:	b920      	cbnz	r0, 80031d6 <_svfiprintf_r+0x2e>
 80031cc:	230c      	movs	r3, #12
 80031ce:	603b      	str	r3, [r7, #0]
 80031d0:	f04f 30ff 	mov.w	r0, #4294967295
 80031d4:	e0d1      	b.n	800337a <_svfiprintf_r+0x1d2>
 80031d6:	2340      	movs	r3, #64	; 0x40
 80031d8:	616b      	str	r3, [r5, #20]
 80031da:	2300      	movs	r3, #0
 80031dc:	9309      	str	r3, [sp, #36]	; 0x24
 80031de:	2320      	movs	r3, #32
 80031e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80031e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80031e8:	2330      	movs	r3, #48	; 0x30
 80031ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8003394 <_svfiprintf_r+0x1ec>
 80031ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80031f2:	f04f 0901 	mov.w	r9, #1
 80031f6:	4623      	mov	r3, r4
 80031f8:	469a      	mov	sl, r3
 80031fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80031fe:	b10a      	cbz	r2, 8003204 <_svfiprintf_r+0x5c>
 8003200:	2a25      	cmp	r2, #37	; 0x25
 8003202:	d1f9      	bne.n	80031f8 <_svfiprintf_r+0x50>
 8003204:	ebba 0b04 	subs.w	fp, sl, r4
 8003208:	d00b      	beq.n	8003222 <_svfiprintf_r+0x7a>
 800320a:	465b      	mov	r3, fp
 800320c:	4622      	mov	r2, r4
 800320e:	4629      	mov	r1, r5
 8003210:	4638      	mov	r0, r7
 8003212:	f7ff ff6d 	bl	80030f0 <__ssputs_r>
 8003216:	3001      	adds	r0, #1
 8003218:	f000 80aa 	beq.w	8003370 <_svfiprintf_r+0x1c8>
 800321c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800321e:	445a      	add	r2, fp
 8003220:	9209      	str	r2, [sp, #36]	; 0x24
 8003222:	f89a 3000 	ldrb.w	r3, [sl]
 8003226:	2b00      	cmp	r3, #0
 8003228:	f000 80a2 	beq.w	8003370 <_svfiprintf_r+0x1c8>
 800322c:	2300      	movs	r3, #0
 800322e:	f04f 32ff 	mov.w	r2, #4294967295
 8003232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003236:	f10a 0a01 	add.w	sl, sl, #1
 800323a:	9304      	str	r3, [sp, #16]
 800323c:	9307      	str	r3, [sp, #28]
 800323e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003242:	931a      	str	r3, [sp, #104]	; 0x68
 8003244:	4654      	mov	r4, sl
 8003246:	2205      	movs	r2, #5
 8003248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800324c:	4851      	ldr	r0, [pc, #324]	; (8003394 <_svfiprintf_r+0x1ec>)
 800324e:	f7fc ffdf 	bl	8000210 <memchr>
 8003252:	9a04      	ldr	r2, [sp, #16]
 8003254:	b9d8      	cbnz	r0, 800328e <_svfiprintf_r+0xe6>
 8003256:	06d0      	lsls	r0, r2, #27
 8003258:	bf44      	itt	mi
 800325a:	2320      	movmi	r3, #32
 800325c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003260:	0711      	lsls	r1, r2, #28
 8003262:	bf44      	itt	mi
 8003264:	232b      	movmi	r3, #43	; 0x2b
 8003266:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800326a:	f89a 3000 	ldrb.w	r3, [sl]
 800326e:	2b2a      	cmp	r3, #42	; 0x2a
 8003270:	d015      	beq.n	800329e <_svfiprintf_r+0xf6>
 8003272:	9a07      	ldr	r2, [sp, #28]
 8003274:	4654      	mov	r4, sl
 8003276:	2000      	movs	r0, #0
 8003278:	f04f 0c0a 	mov.w	ip, #10
 800327c:	4621      	mov	r1, r4
 800327e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003282:	3b30      	subs	r3, #48	; 0x30
 8003284:	2b09      	cmp	r3, #9
 8003286:	d94e      	bls.n	8003326 <_svfiprintf_r+0x17e>
 8003288:	b1b0      	cbz	r0, 80032b8 <_svfiprintf_r+0x110>
 800328a:	9207      	str	r2, [sp, #28]
 800328c:	e014      	b.n	80032b8 <_svfiprintf_r+0x110>
 800328e:	eba0 0308 	sub.w	r3, r0, r8
 8003292:	fa09 f303 	lsl.w	r3, r9, r3
 8003296:	4313      	orrs	r3, r2
 8003298:	9304      	str	r3, [sp, #16]
 800329a:	46a2      	mov	sl, r4
 800329c:	e7d2      	b.n	8003244 <_svfiprintf_r+0x9c>
 800329e:	9b03      	ldr	r3, [sp, #12]
 80032a0:	1d19      	adds	r1, r3, #4
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	9103      	str	r1, [sp, #12]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	bfbb      	ittet	lt
 80032aa:	425b      	neglt	r3, r3
 80032ac:	f042 0202 	orrlt.w	r2, r2, #2
 80032b0:	9307      	strge	r3, [sp, #28]
 80032b2:	9307      	strlt	r3, [sp, #28]
 80032b4:	bfb8      	it	lt
 80032b6:	9204      	strlt	r2, [sp, #16]
 80032b8:	7823      	ldrb	r3, [r4, #0]
 80032ba:	2b2e      	cmp	r3, #46	; 0x2e
 80032bc:	d10c      	bne.n	80032d8 <_svfiprintf_r+0x130>
 80032be:	7863      	ldrb	r3, [r4, #1]
 80032c0:	2b2a      	cmp	r3, #42	; 0x2a
 80032c2:	d135      	bne.n	8003330 <_svfiprintf_r+0x188>
 80032c4:	9b03      	ldr	r3, [sp, #12]
 80032c6:	1d1a      	adds	r2, r3, #4
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	9203      	str	r2, [sp, #12]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	bfb8      	it	lt
 80032d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80032d4:	3402      	adds	r4, #2
 80032d6:	9305      	str	r3, [sp, #20]
 80032d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80033a4 <_svfiprintf_r+0x1fc>
 80032dc:	7821      	ldrb	r1, [r4, #0]
 80032de:	2203      	movs	r2, #3
 80032e0:	4650      	mov	r0, sl
 80032e2:	f7fc ff95 	bl	8000210 <memchr>
 80032e6:	b140      	cbz	r0, 80032fa <_svfiprintf_r+0x152>
 80032e8:	2340      	movs	r3, #64	; 0x40
 80032ea:	eba0 000a 	sub.w	r0, r0, sl
 80032ee:	fa03 f000 	lsl.w	r0, r3, r0
 80032f2:	9b04      	ldr	r3, [sp, #16]
 80032f4:	4303      	orrs	r3, r0
 80032f6:	3401      	adds	r4, #1
 80032f8:	9304      	str	r3, [sp, #16]
 80032fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032fe:	4826      	ldr	r0, [pc, #152]	; (8003398 <_svfiprintf_r+0x1f0>)
 8003300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003304:	2206      	movs	r2, #6
 8003306:	f7fc ff83 	bl	8000210 <memchr>
 800330a:	2800      	cmp	r0, #0
 800330c:	d038      	beq.n	8003380 <_svfiprintf_r+0x1d8>
 800330e:	4b23      	ldr	r3, [pc, #140]	; (800339c <_svfiprintf_r+0x1f4>)
 8003310:	bb1b      	cbnz	r3, 800335a <_svfiprintf_r+0x1b2>
 8003312:	9b03      	ldr	r3, [sp, #12]
 8003314:	3307      	adds	r3, #7
 8003316:	f023 0307 	bic.w	r3, r3, #7
 800331a:	3308      	adds	r3, #8
 800331c:	9303      	str	r3, [sp, #12]
 800331e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003320:	4433      	add	r3, r6
 8003322:	9309      	str	r3, [sp, #36]	; 0x24
 8003324:	e767      	b.n	80031f6 <_svfiprintf_r+0x4e>
 8003326:	fb0c 3202 	mla	r2, ip, r2, r3
 800332a:	460c      	mov	r4, r1
 800332c:	2001      	movs	r0, #1
 800332e:	e7a5      	b.n	800327c <_svfiprintf_r+0xd4>
 8003330:	2300      	movs	r3, #0
 8003332:	3401      	adds	r4, #1
 8003334:	9305      	str	r3, [sp, #20]
 8003336:	4619      	mov	r1, r3
 8003338:	f04f 0c0a 	mov.w	ip, #10
 800333c:	4620      	mov	r0, r4
 800333e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003342:	3a30      	subs	r2, #48	; 0x30
 8003344:	2a09      	cmp	r2, #9
 8003346:	d903      	bls.n	8003350 <_svfiprintf_r+0x1a8>
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0c5      	beq.n	80032d8 <_svfiprintf_r+0x130>
 800334c:	9105      	str	r1, [sp, #20]
 800334e:	e7c3      	b.n	80032d8 <_svfiprintf_r+0x130>
 8003350:	fb0c 2101 	mla	r1, ip, r1, r2
 8003354:	4604      	mov	r4, r0
 8003356:	2301      	movs	r3, #1
 8003358:	e7f0      	b.n	800333c <_svfiprintf_r+0x194>
 800335a:	ab03      	add	r3, sp, #12
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	462a      	mov	r2, r5
 8003360:	4b0f      	ldr	r3, [pc, #60]	; (80033a0 <_svfiprintf_r+0x1f8>)
 8003362:	a904      	add	r1, sp, #16
 8003364:	4638      	mov	r0, r7
 8003366:	f3af 8000 	nop.w
 800336a:	1c42      	adds	r2, r0, #1
 800336c:	4606      	mov	r6, r0
 800336e:	d1d6      	bne.n	800331e <_svfiprintf_r+0x176>
 8003370:	89ab      	ldrh	r3, [r5, #12]
 8003372:	065b      	lsls	r3, r3, #25
 8003374:	f53f af2c 	bmi.w	80031d0 <_svfiprintf_r+0x28>
 8003378:	9809      	ldr	r0, [sp, #36]	; 0x24
 800337a:	b01d      	add	sp, #116	; 0x74
 800337c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003380:	ab03      	add	r3, sp, #12
 8003382:	9300      	str	r3, [sp, #0]
 8003384:	462a      	mov	r2, r5
 8003386:	4b06      	ldr	r3, [pc, #24]	; (80033a0 <_svfiprintf_r+0x1f8>)
 8003388:	a904      	add	r1, sp, #16
 800338a:	4638      	mov	r0, r7
 800338c:	f000 f87a 	bl	8003484 <_printf_i>
 8003390:	e7eb      	b.n	800336a <_svfiprintf_r+0x1c2>
 8003392:	bf00      	nop
 8003394:	080039d0 	.word	0x080039d0
 8003398:	080039da 	.word	0x080039da
 800339c:	00000000 	.word	0x00000000
 80033a0:	080030f1 	.word	0x080030f1
 80033a4:	080039d6 	.word	0x080039d6

080033a8 <_printf_common>:
 80033a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80033ac:	4616      	mov	r6, r2
 80033ae:	4699      	mov	r9, r3
 80033b0:	688a      	ldr	r2, [r1, #8]
 80033b2:	690b      	ldr	r3, [r1, #16]
 80033b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80033b8:	4293      	cmp	r3, r2
 80033ba:	bfb8      	it	lt
 80033bc:	4613      	movlt	r3, r2
 80033be:	6033      	str	r3, [r6, #0]
 80033c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80033c4:	4607      	mov	r7, r0
 80033c6:	460c      	mov	r4, r1
 80033c8:	b10a      	cbz	r2, 80033ce <_printf_common+0x26>
 80033ca:	3301      	adds	r3, #1
 80033cc:	6033      	str	r3, [r6, #0]
 80033ce:	6823      	ldr	r3, [r4, #0]
 80033d0:	0699      	lsls	r1, r3, #26
 80033d2:	bf42      	ittt	mi
 80033d4:	6833      	ldrmi	r3, [r6, #0]
 80033d6:	3302      	addmi	r3, #2
 80033d8:	6033      	strmi	r3, [r6, #0]
 80033da:	6825      	ldr	r5, [r4, #0]
 80033dc:	f015 0506 	ands.w	r5, r5, #6
 80033e0:	d106      	bne.n	80033f0 <_printf_common+0x48>
 80033e2:	f104 0a19 	add.w	sl, r4, #25
 80033e6:	68e3      	ldr	r3, [r4, #12]
 80033e8:	6832      	ldr	r2, [r6, #0]
 80033ea:	1a9b      	subs	r3, r3, r2
 80033ec:	42ab      	cmp	r3, r5
 80033ee:	dc26      	bgt.n	800343e <_printf_common+0x96>
 80033f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80033f4:	1e13      	subs	r3, r2, #0
 80033f6:	6822      	ldr	r2, [r4, #0]
 80033f8:	bf18      	it	ne
 80033fa:	2301      	movne	r3, #1
 80033fc:	0692      	lsls	r2, r2, #26
 80033fe:	d42b      	bmi.n	8003458 <_printf_common+0xb0>
 8003400:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003404:	4649      	mov	r1, r9
 8003406:	4638      	mov	r0, r7
 8003408:	47c0      	blx	r8
 800340a:	3001      	adds	r0, #1
 800340c:	d01e      	beq.n	800344c <_printf_common+0xa4>
 800340e:	6823      	ldr	r3, [r4, #0]
 8003410:	68e5      	ldr	r5, [r4, #12]
 8003412:	6832      	ldr	r2, [r6, #0]
 8003414:	f003 0306 	and.w	r3, r3, #6
 8003418:	2b04      	cmp	r3, #4
 800341a:	bf08      	it	eq
 800341c:	1aad      	subeq	r5, r5, r2
 800341e:	68a3      	ldr	r3, [r4, #8]
 8003420:	6922      	ldr	r2, [r4, #16]
 8003422:	bf0c      	ite	eq
 8003424:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003428:	2500      	movne	r5, #0
 800342a:	4293      	cmp	r3, r2
 800342c:	bfc4      	itt	gt
 800342e:	1a9b      	subgt	r3, r3, r2
 8003430:	18ed      	addgt	r5, r5, r3
 8003432:	2600      	movs	r6, #0
 8003434:	341a      	adds	r4, #26
 8003436:	42b5      	cmp	r5, r6
 8003438:	d11a      	bne.n	8003470 <_printf_common+0xc8>
 800343a:	2000      	movs	r0, #0
 800343c:	e008      	b.n	8003450 <_printf_common+0xa8>
 800343e:	2301      	movs	r3, #1
 8003440:	4652      	mov	r2, sl
 8003442:	4649      	mov	r1, r9
 8003444:	4638      	mov	r0, r7
 8003446:	47c0      	blx	r8
 8003448:	3001      	adds	r0, #1
 800344a:	d103      	bne.n	8003454 <_printf_common+0xac>
 800344c:	f04f 30ff 	mov.w	r0, #4294967295
 8003450:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003454:	3501      	adds	r5, #1
 8003456:	e7c6      	b.n	80033e6 <_printf_common+0x3e>
 8003458:	18e1      	adds	r1, r4, r3
 800345a:	1c5a      	adds	r2, r3, #1
 800345c:	2030      	movs	r0, #48	; 0x30
 800345e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003462:	4422      	add	r2, r4
 8003464:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003468:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800346c:	3302      	adds	r3, #2
 800346e:	e7c7      	b.n	8003400 <_printf_common+0x58>
 8003470:	2301      	movs	r3, #1
 8003472:	4622      	mov	r2, r4
 8003474:	4649      	mov	r1, r9
 8003476:	4638      	mov	r0, r7
 8003478:	47c0      	blx	r8
 800347a:	3001      	adds	r0, #1
 800347c:	d0e6      	beq.n	800344c <_printf_common+0xa4>
 800347e:	3601      	adds	r6, #1
 8003480:	e7d9      	b.n	8003436 <_printf_common+0x8e>
	...

08003484 <_printf_i>:
 8003484:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003488:	7e0f      	ldrb	r7, [r1, #24]
 800348a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800348c:	2f78      	cmp	r7, #120	; 0x78
 800348e:	4691      	mov	r9, r2
 8003490:	4680      	mov	r8, r0
 8003492:	460c      	mov	r4, r1
 8003494:	469a      	mov	sl, r3
 8003496:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800349a:	d807      	bhi.n	80034ac <_printf_i+0x28>
 800349c:	2f62      	cmp	r7, #98	; 0x62
 800349e:	d80a      	bhi.n	80034b6 <_printf_i+0x32>
 80034a0:	2f00      	cmp	r7, #0
 80034a2:	f000 80d8 	beq.w	8003656 <_printf_i+0x1d2>
 80034a6:	2f58      	cmp	r7, #88	; 0x58
 80034a8:	f000 80a3 	beq.w	80035f2 <_printf_i+0x16e>
 80034ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80034b4:	e03a      	b.n	800352c <_printf_i+0xa8>
 80034b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80034ba:	2b15      	cmp	r3, #21
 80034bc:	d8f6      	bhi.n	80034ac <_printf_i+0x28>
 80034be:	a101      	add	r1, pc, #4	; (adr r1, 80034c4 <_printf_i+0x40>)
 80034c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80034c4:	0800351d 	.word	0x0800351d
 80034c8:	08003531 	.word	0x08003531
 80034cc:	080034ad 	.word	0x080034ad
 80034d0:	080034ad 	.word	0x080034ad
 80034d4:	080034ad 	.word	0x080034ad
 80034d8:	080034ad 	.word	0x080034ad
 80034dc:	08003531 	.word	0x08003531
 80034e0:	080034ad 	.word	0x080034ad
 80034e4:	080034ad 	.word	0x080034ad
 80034e8:	080034ad 	.word	0x080034ad
 80034ec:	080034ad 	.word	0x080034ad
 80034f0:	0800363d 	.word	0x0800363d
 80034f4:	08003561 	.word	0x08003561
 80034f8:	0800361f 	.word	0x0800361f
 80034fc:	080034ad 	.word	0x080034ad
 8003500:	080034ad 	.word	0x080034ad
 8003504:	0800365f 	.word	0x0800365f
 8003508:	080034ad 	.word	0x080034ad
 800350c:	08003561 	.word	0x08003561
 8003510:	080034ad 	.word	0x080034ad
 8003514:	080034ad 	.word	0x080034ad
 8003518:	08003627 	.word	0x08003627
 800351c:	682b      	ldr	r3, [r5, #0]
 800351e:	1d1a      	adds	r2, r3, #4
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	602a      	str	r2, [r5, #0]
 8003524:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003528:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800352c:	2301      	movs	r3, #1
 800352e:	e0a3      	b.n	8003678 <_printf_i+0x1f4>
 8003530:	6820      	ldr	r0, [r4, #0]
 8003532:	6829      	ldr	r1, [r5, #0]
 8003534:	0606      	lsls	r6, r0, #24
 8003536:	f101 0304 	add.w	r3, r1, #4
 800353a:	d50a      	bpl.n	8003552 <_printf_i+0xce>
 800353c:	680e      	ldr	r6, [r1, #0]
 800353e:	602b      	str	r3, [r5, #0]
 8003540:	2e00      	cmp	r6, #0
 8003542:	da03      	bge.n	800354c <_printf_i+0xc8>
 8003544:	232d      	movs	r3, #45	; 0x2d
 8003546:	4276      	negs	r6, r6
 8003548:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800354c:	485e      	ldr	r0, [pc, #376]	; (80036c8 <_printf_i+0x244>)
 800354e:	230a      	movs	r3, #10
 8003550:	e019      	b.n	8003586 <_printf_i+0x102>
 8003552:	680e      	ldr	r6, [r1, #0]
 8003554:	602b      	str	r3, [r5, #0]
 8003556:	f010 0f40 	tst.w	r0, #64	; 0x40
 800355a:	bf18      	it	ne
 800355c:	b236      	sxthne	r6, r6
 800355e:	e7ef      	b.n	8003540 <_printf_i+0xbc>
 8003560:	682b      	ldr	r3, [r5, #0]
 8003562:	6820      	ldr	r0, [r4, #0]
 8003564:	1d19      	adds	r1, r3, #4
 8003566:	6029      	str	r1, [r5, #0]
 8003568:	0601      	lsls	r1, r0, #24
 800356a:	d501      	bpl.n	8003570 <_printf_i+0xec>
 800356c:	681e      	ldr	r6, [r3, #0]
 800356e:	e002      	b.n	8003576 <_printf_i+0xf2>
 8003570:	0646      	lsls	r6, r0, #25
 8003572:	d5fb      	bpl.n	800356c <_printf_i+0xe8>
 8003574:	881e      	ldrh	r6, [r3, #0]
 8003576:	4854      	ldr	r0, [pc, #336]	; (80036c8 <_printf_i+0x244>)
 8003578:	2f6f      	cmp	r7, #111	; 0x6f
 800357a:	bf0c      	ite	eq
 800357c:	2308      	moveq	r3, #8
 800357e:	230a      	movne	r3, #10
 8003580:	2100      	movs	r1, #0
 8003582:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003586:	6865      	ldr	r5, [r4, #4]
 8003588:	60a5      	str	r5, [r4, #8]
 800358a:	2d00      	cmp	r5, #0
 800358c:	bfa2      	ittt	ge
 800358e:	6821      	ldrge	r1, [r4, #0]
 8003590:	f021 0104 	bicge.w	r1, r1, #4
 8003594:	6021      	strge	r1, [r4, #0]
 8003596:	b90e      	cbnz	r6, 800359c <_printf_i+0x118>
 8003598:	2d00      	cmp	r5, #0
 800359a:	d04d      	beq.n	8003638 <_printf_i+0x1b4>
 800359c:	4615      	mov	r5, r2
 800359e:	fbb6 f1f3 	udiv	r1, r6, r3
 80035a2:	fb03 6711 	mls	r7, r3, r1, r6
 80035a6:	5dc7      	ldrb	r7, [r0, r7]
 80035a8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80035ac:	4637      	mov	r7, r6
 80035ae:	42bb      	cmp	r3, r7
 80035b0:	460e      	mov	r6, r1
 80035b2:	d9f4      	bls.n	800359e <_printf_i+0x11a>
 80035b4:	2b08      	cmp	r3, #8
 80035b6:	d10b      	bne.n	80035d0 <_printf_i+0x14c>
 80035b8:	6823      	ldr	r3, [r4, #0]
 80035ba:	07de      	lsls	r6, r3, #31
 80035bc:	d508      	bpl.n	80035d0 <_printf_i+0x14c>
 80035be:	6923      	ldr	r3, [r4, #16]
 80035c0:	6861      	ldr	r1, [r4, #4]
 80035c2:	4299      	cmp	r1, r3
 80035c4:	bfde      	ittt	le
 80035c6:	2330      	movle	r3, #48	; 0x30
 80035c8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80035cc:	f105 35ff 	addle.w	r5, r5, #4294967295
 80035d0:	1b52      	subs	r2, r2, r5
 80035d2:	6122      	str	r2, [r4, #16]
 80035d4:	f8cd a000 	str.w	sl, [sp]
 80035d8:	464b      	mov	r3, r9
 80035da:	aa03      	add	r2, sp, #12
 80035dc:	4621      	mov	r1, r4
 80035de:	4640      	mov	r0, r8
 80035e0:	f7ff fee2 	bl	80033a8 <_printf_common>
 80035e4:	3001      	adds	r0, #1
 80035e6:	d14c      	bne.n	8003682 <_printf_i+0x1fe>
 80035e8:	f04f 30ff 	mov.w	r0, #4294967295
 80035ec:	b004      	add	sp, #16
 80035ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035f2:	4835      	ldr	r0, [pc, #212]	; (80036c8 <_printf_i+0x244>)
 80035f4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80035f8:	6829      	ldr	r1, [r5, #0]
 80035fa:	6823      	ldr	r3, [r4, #0]
 80035fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8003600:	6029      	str	r1, [r5, #0]
 8003602:	061d      	lsls	r5, r3, #24
 8003604:	d514      	bpl.n	8003630 <_printf_i+0x1ac>
 8003606:	07df      	lsls	r7, r3, #31
 8003608:	bf44      	itt	mi
 800360a:	f043 0320 	orrmi.w	r3, r3, #32
 800360e:	6023      	strmi	r3, [r4, #0]
 8003610:	b91e      	cbnz	r6, 800361a <_printf_i+0x196>
 8003612:	6823      	ldr	r3, [r4, #0]
 8003614:	f023 0320 	bic.w	r3, r3, #32
 8003618:	6023      	str	r3, [r4, #0]
 800361a:	2310      	movs	r3, #16
 800361c:	e7b0      	b.n	8003580 <_printf_i+0xfc>
 800361e:	6823      	ldr	r3, [r4, #0]
 8003620:	f043 0320 	orr.w	r3, r3, #32
 8003624:	6023      	str	r3, [r4, #0]
 8003626:	2378      	movs	r3, #120	; 0x78
 8003628:	4828      	ldr	r0, [pc, #160]	; (80036cc <_printf_i+0x248>)
 800362a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800362e:	e7e3      	b.n	80035f8 <_printf_i+0x174>
 8003630:	0659      	lsls	r1, r3, #25
 8003632:	bf48      	it	mi
 8003634:	b2b6      	uxthmi	r6, r6
 8003636:	e7e6      	b.n	8003606 <_printf_i+0x182>
 8003638:	4615      	mov	r5, r2
 800363a:	e7bb      	b.n	80035b4 <_printf_i+0x130>
 800363c:	682b      	ldr	r3, [r5, #0]
 800363e:	6826      	ldr	r6, [r4, #0]
 8003640:	6961      	ldr	r1, [r4, #20]
 8003642:	1d18      	adds	r0, r3, #4
 8003644:	6028      	str	r0, [r5, #0]
 8003646:	0635      	lsls	r5, r6, #24
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	d501      	bpl.n	8003650 <_printf_i+0x1cc>
 800364c:	6019      	str	r1, [r3, #0]
 800364e:	e002      	b.n	8003656 <_printf_i+0x1d2>
 8003650:	0670      	lsls	r0, r6, #25
 8003652:	d5fb      	bpl.n	800364c <_printf_i+0x1c8>
 8003654:	8019      	strh	r1, [r3, #0]
 8003656:	2300      	movs	r3, #0
 8003658:	6123      	str	r3, [r4, #16]
 800365a:	4615      	mov	r5, r2
 800365c:	e7ba      	b.n	80035d4 <_printf_i+0x150>
 800365e:	682b      	ldr	r3, [r5, #0]
 8003660:	1d1a      	adds	r2, r3, #4
 8003662:	602a      	str	r2, [r5, #0]
 8003664:	681d      	ldr	r5, [r3, #0]
 8003666:	6862      	ldr	r2, [r4, #4]
 8003668:	2100      	movs	r1, #0
 800366a:	4628      	mov	r0, r5
 800366c:	f7fc fdd0 	bl	8000210 <memchr>
 8003670:	b108      	cbz	r0, 8003676 <_printf_i+0x1f2>
 8003672:	1b40      	subs	r0, r0, r5
 8003674:	6060      	str	r0, [r4, #4]
 8003676:	6863      	ldr	r3, [r4, #4]
 8003678:	6123      	str	r3, [r4, #16]
 800367a:	2300      	movs	r3, #0
 800367c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003680:	e7a8      	b.n	80035d4 <_printf_i+0x150>
 8003682:	6923      	ldr	r3, [r4, #16]
 8003684:	462a      	mov	r2, r5
 8003686:	4649      	mov	r1, r9
 8003688:	4640      	mov	r0, r8
 800368a:	47d0      	blx	sl
 800368c:	3001      	adds	r0, #1
 800368e:	d0ab      	beq.n	80035e8 <_printf_i+0x164>
 8003690:	6823      	ldr	r3, [r4, #0]
 8003692:	079b      	lsls	r3, r3, #30
 8003694:	d413      	bmi.n	80036be <_printf_i+0x23a>
 8003696:	68e0      	ldr	r0, [r4, #12]
 8003698:	9b03      	ldr	r3, [sp, #12]
 800369a:	4298      	cmp	r0, r3
 800369c:	bfb8      	it	lt
 800369e:	4618      	movlt	r0, r3
 80036a0:	e7a4      	b.n	80035ec <_printf_i+0x168>
 80036a2:	2301      	movs	r3, #1
 80036a4:	4632      	mov	r2, r6
 80036a6:	4649      	mov	r1, r9
 80036a8:	4640      	mov	r0, r8
 80036aa:	47d0      	blx	sl
 80036ac:	3001      	adds	r0, #1
 80036ae:	d09b      	beq.n	80035e8 <_printf_i+0x164>
 80036b0:	3501      	adds	r5, #1
 80036b2:	68e3      	ldr	r3, [r4, #12]
 80036b4:	9903      	ldr	r1, [sp, #12]
 80036b6:	1a5b      	subs	r3, r3, r1
 80036b8:	42ab      	cmp	r3, r5
 80036ba:	dcf2      	bgt.n	80036a2 <_printf_i+0x21e>
 80036bc:	e7eb      	b.n	8003696 <_printf_i+0x212>
 80036be:	2500      	movs	r5, #0
 80036c0:	f104 0619 	add.w	r6, r4, #25
 80036c4:	e7f5      	b.n	80036b2 <_printf_i+0x22e>
 80036c6:	bf00      	nop
 80036c8:	080039e1 	.word	0x080039e1
 80036cc:	080039f2 	.word	0x080039f2

080036d0 <memcpy>:
 80036d0:	440a      	add	r2, r1
 80036d2:	4291      	cmp	r1, r2
 80036d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80036d8:	d100      	bne.n	80036dc <memcpy+0xc>
 80036da:	4770      	bx	lr
 80036dc:	b510      	push	{r4, lr}
 80036de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036e6:	4291      	cmp	r1, r2
 80036e8:	d1f9      	bne.n	80036de <memcpy+0xe>
 80036ea:	bd10      	pop	{r4, pc}

080036ec <memmove>:
 80036ec:	4288      	cmp	r0, r1
 80036ee:	b510      	push	{r4, lr}
 80036f0:	eb01 0402 	add.w	r4, r1, r2
 80036f4:	d902      	bls.n	80036fc <memmove+0x10>
 80036f6:	4284      	cmp	r4, r0
 80036f8:	4623      	mov	r3, r4
 80036fa:	d807      	bhi.n	800370c <memmove+0x20>
 80036fc:	1e43      	subs	r3, r0, #1
 80036fe:	42a1      	cmp	r1, r4
 8003700:	d008      	beq.n	8003714 <memmove+0x28>
 8003702:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003706:	f803 2f01 	strb.w	r2, [r3, #1]!
 800370a:	e7f8      	b.n	80036fe <memmove+0x12>
 800370c:	4402      	add	r2, r0
 800370e:	4601      	mov	r1, r0
 8003710:	428a      	cmp	r2, r1
 8003712:	d100      	bne.n	8003716 <memmove+0x2a>
 8003714:	bd10      	pop	{r4, pc}
 8003716:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800371a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800371e:	e7f7      	b.n	8003710 <memmove+0x24>

08003720 <_free_r>:
 8003720:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003722:	2900      	cmp	r1, #0
 8003724:	d044      	beq.n	80037b0 <_free_r+0x90>
 8003726:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800372a:	9001      	str	r0, [sp, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	f1a1 0404 	sub.w	r4, r1, #4
 8003732:	bfb8      	it	lt
 8003734:	18e4      	addlt	r4, r4, r3
 8003736:	f000 f913 	bl	8003960 <__malloc_lock>
 800373a:	4a1e      	ldr	r2, [pc, #120]	; (80037b4 <_free_r+0x94>)
 800373c:	9801      	ldr	r0, [sp, #4]
 800373e:	6813      	ldr	r3, [r2, #0]
 8003740:	b933      	cbnz	r3, 8003750 <_free_r+0x30>
 8003742:	6063      	str	r3, [r4, #4]
 8003744:	6014      	str	r4, [r2, #0]
 8003746:	b003      	add	sp, #12
 8003748:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800374c:	f000 b90e 	b.w	800396c <__malloc_unlock>
 8003750:	42a3      	cmp	r3, r4
 8003752:	d908      	bls.n	8003766 <_free_r+0x46>
 8003754:	6825      	ldr	r5, [r4, #0]
 8003756:	1961      	adds	r1, r4, r5
 8003758:	428b      	cmp	r3, r1
 800375a:	bf01      	itttt	eq
 800375c:	6819      	ldreq	r1, [r3, #0]
 800375e:	685b      	ldreq	r3, [r3, #4]
 8003760:	1949      	addeq	r1, r1, r5
 8003762:	6021      	streq	r1, [r4, #0]
 8003764:	e7ed      	b.n	8003742 <_free_r+0x22>
 8003766:	461a      	mov	r2, r3
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	b10b      	cbz	r3, 8003770 <_free_r+0x50>
 800376c:	42a3      	cmp	r3, r4
 800376e:	d9fa      	bls.n	8003766 <_free_r+0x46>
 8003770:	6811      	ldr	r1, [r2, #0]
 8003772:	1855      	adds	r5, r2, r1
 8003774:	42a5      	cmp	r5, r4
 8003776:	d10b      	bne.n	8003790 <_free_r+0x70>
 8003778:	6824      	ldr	r4, [r4, #0]
 800377a:	4421      	add	r1, r4
 800377c:	1854      	adds	r4, r2, r1
 800377e:	42a3      	cmp	r3, r4
 8003780:	6011      	str	r1, [r2, #0]
 8003782:	d1e0      	bne.n	8003746 <_free_r+0x26>
 8003784:	681c      	ldr	r4, [r3, #0]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	6053      	str	r3, [r2, #4]
 800378a:	4421      	add	r1, r4
 800378c:	6011      	str	r1, [r2, #0]
 800378e:	e7da      	b.n	8003746 <_free_r+0x26>
 8003790:	d902      	bls.n	8003798 <_free_r+0x78>
 8003792:	230c      	movs	r3, #12
 8003794:	6003      	str	r3, [r0, #0]
 8003796:	e7d6      	b.n	8003746 <_free_r+0x26>
 8003798:	6825      	ldr	r5, [r4, #0]
 800379a:	1961      	adds	r1, r4, r5
 800379c:	428b      	cmp	r3, r1
 800379e:	bf04      	itt	eq
 80037a0:	6819      	ldreq	r1, [r3, #0]
 80037a2:	685b      	ldreq	r3, [r3, #4]
 80037a4:	6063      	str	r3, [r4, #4]
 80037a6:	bf04      	itt	eq
 80037a8:	1949      	addeq	r1, r1, r5
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	6054      	str	r4, [r2, #4]
 80037ae:	e7ca      	b.n	8003746 <_free_r+0x26>
 80037b0:	b003      	add	sp, #12
 80037b2:	bd30      	pop	{r4, r5, pc}
 80037b4:	20000144 	.word	0x20000144

080037b8 <sbrk_aligned>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	4e0e      	ldr	r6, [pc, #56]	; (80037f4 <sbrk_aligned+0x3c>)
 80037bc:	460c      	mov	r4, r1
 80037be:	6831      	ldr	r1, [r6, #0]
 80037c0:	4605      	mov	r5, r0
 80037c2:	b911      	cbnz	r1, 80037ca <sbrk_aligned+0x12>
 80037c4:	f000 f8bc 	bl	8003940 <_sbrk_r>
 80037c8:	6030      	str	r0, [r6, #0]
 80037ca:	4621      	mov	r1, r4
 80037cc:	4628      	mov	r0, r5
 80037ce:	f000 f8b7 	bl	8003940 <_sbrk_r>
 80037d2:	1c43      	adds	r3, r0, #1
 80037d4:	d00a      	beq.n	80037ec <sbrk_aligned+0x34>
 80037d6:	1cc4      	adds	r4, r0, #3
 80037d8:	f024 0403 	bic.w	r4, r4, #3
 80037dc:	42a0      	cmp	r0, r4
 80037de:	d007      	beq.n	80037f0 <sbrk_aligned+0x38>
 80037e0:	1a21      	subs	r1, r4, r0
 80037e2:	4628      	mov	r0, r5
 80037e4:	f000 f8ac 	bl	8003940 <_sbrk_r>
 80037e8:	3001      	adds	r0, #1
 80037ea:	d101      	bne.n	80037f0 <sbrk_aligned+0x38>
 80037ec:	f04f 34ff 	mov.w	r4, #4294967295
 80037f0:	4620      	mov	r0, r4
 80037f2:	bd70      	pop	{r4, r5, r6, pc}
 80037f4:	20000148 	.word	0x20000148

080037f8 <_malloc_r>:
 80037f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037fc:	1ccd      	adds	r5, r1, #3
 80037fe:	f025 0503 	bic.w	r5, r5, #3
 8003802:	3508      	adds	r5, #8
 8003804:	2d0c      	cmp	r5, #12
 8003806:	bf38      	it	cc
 8003808:	250c      	movcc	r5, #12
 800380a:	2d00      	cmp	r5, #0
 800380c:	4607      	mov	r7, r0
 800380e:	db01      	blt.n	8003814 <_malloc_r+0x1c>
 8003810:	42a9      	cmp	r1, r5
 8003812:	d905      	bls.n	8003820 <_malloc_r+0x28>
 8003814:	230c      	movs	r3, #12
 8003816:	603b      	str	r3, [r7, #0]
 8003818:	2600      	movs	r6, #0
 800381a:	4630      	mov	r0, r6
 800381c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003820:	4e2e      	ldr	r6, [pc, #184]	; (80038dc <_malloc_r+0xe4>)
 8003822:	f000 f89d 	bl	8003960 <__malloc_lock>
 8003826:	6833      	ldr	r3, [r6, #0]
 8003828:	461c      	mov	r4, r3
 800382a:	bb34      	cbnz	r4, 800387a <_malloc_r+0x82>
 800382c:	4629      	mov	r1, r5
 800382e:	4638      	mov	r0, r7
 8003830:	f7ff ffc2 	bl	80037b8 <sbrk_aligned>
 8003834:	1c43      	adds	r3, r0, #1
 8003836:	4604      	mov	r4, r0
 8003838:	d14d      	bne.n	80038d6 <_malloc_r+0xde>
 800383a:	6834      	ldr	r4, [r6, #0]
 800383c:	4626      	mov	r6, r4
 800383e:	2e00      	cmp	r6, #0
 8003840:	d140      	bne.n	80038c4 <_malloc_r+0xcc>
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4631      	mov	r1, r6
 8003846:	4638      	mov	r0, r7
 8003848:	eb04 0803 	add.w	r8, r4, r3
 800384c:	f000 f878 	bl	8003940 <_sbrk_r>
 8003850:	4580      	cmp	r8, r0
 8003852:	d13a      	bne.n	80038ca <_malloc_r+0xd2>
 8003854:	6821      	ldr	r1, [r4, #0]
 8003856:	3503      	adds	r5, #3
 8003858:	1a6d      	subs	r5, r5, r1
 800385a:	f025 0503 	bic.w	r5, r5, #3
 800385e:	3508      	adds	r5, #8
 8003860:	2d0c      	cmp	r5, #12
 8003862:	bf38      	it	cc
 8003864:	250c      	movcc	r5, #12
 8003866:	4629      	mov	r1, r5
 8003868:	4638      	mov	r0, r7
 800386a:	f7ff ffa5 	bl	80037b8 <sbrk_aligned>
 800386e:	3001      	adds	r0, #1
 8003870:	d02b      	beq.n	80038ca <_malloc_r+0xd2>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	442b      	add	r3, r5
 8003876:	6023      	str	r3, [r4, #0]
 8003878:	e00e      	b.n	8003898 <_malloc_r+0xa0>
 800387a:	6822      	ldr	r2, [r4, #0]
 800387c:	1b52      	subs	r2, r2, r5
 800387e:	d41e      	bmi.n	80038be <_malloc_r+0xc6>
 8003880:	2a0b      	cmp	r2, #11
 8003882:	d916      	bls.n	80038b2 <_malloc_r+0xba>
 8003884:	1961      	adds	r1, r4, r5
 8003886:	42a3      	cmp	r3, r4
 8003888:	6025      	str	r5, [r4, #0]
 800388a:	bf18      	it	ne
 800388c:	6059      	strne	r1, [r3, #4]
 800388e:	6863      	ldr	r3, [r4, #4]
 8003890:	bf08      	it	eq
 8003892:	6031      	streq	r1, [r6, #0]
 8003894:	5162      	str	r2, [r4, r5]
 8003896:	604b      	str	r3, [r1, #4]
 8003898:	4638      	mov	r0, r7
 800389a:	f104 060b 	add.w	r6, r4, #11
 800389e:	f000 f865 	bl	800396c <__malloc_unlock>
 80038a2:	f026 0607 	bic.w	r6, r6, #7
 80038a6:	1d23      	adds	r3, r4, #4
 80038a8:	1af2      	subs	r2, r6, r3
 80038aa:	d0b6      	beq.n	800381a <_malloc_r+0x22>
 80038ac:	1b9b      	subs	r3, r3, r6
 80038ae:	50a3      	str	r3, [r4, r2]
 80038b0:	e7b3      	b.n	800381a <_malloc_r+0x22>
 80038b2:	6862      	ldr	r2, [r4, #4]
 80038b4:	42a3      	cmp	r3, r4
 80038b6:	bf0c      	ite	eq
 80038b8:	6032      	streq	r2, [r6, #0]
 80038ba:	605a      	strne	r2, [r3, #4]
 80038bc:	e7ec      	b.n	8003898 <_malloc_r+0xa0>
 80038be:	4623      	mov	r3, r4
 80038c0:	6864      	ldr	r4, [r4, #4]
 80038c2:	e7b2      	b.n	800382a <_malloc_r+0x32>
 80038c4:	4634      	mov	r4, r6
 80038c6:	6876      	ldr	r6, [r6, #4]
 80038c8:	e7b9      	b.n	800383e <_malloc_r+0x46>
 80038ca:	230c      	movs	r3, #12
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4638      	mov	r0, r7
 80038d0:	f000 f84c 	bl	800396c <__malloc_unlock>
 80038d4:	e7a1      	b.n	800381a <_malloc_r+0x22>
 80038d6:	6025      	str	r5, [r4, #0]
 80038d8:	e7de      	b.n	8003898 <_malloc_r+0xa0>
 80038da:	bf00      	nop
 80038dc:	20000144 	.word	0x20000144

080038e0 <_realloc_r>:
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	4680      	mov	r8, r0
 80038e6:	4614      	mov	r4, r2
 80038e8:	460e      	mov	r6, r1
 80038ea:	b921      	cbnz	r1, 80038f6 <_realloc_r+0x16>
 80038ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f0:	4611      	mov	r1, r2
 80038f2:	f7ff bf81 	b.w	80037f8 <_malloc_r>
 80038f6:	b92a      	cbnz	r2, 8003904 <_realloc_r+0x24>
 80038f8:	f7ff ff12 	bl	8003720 <_free_r>
 80038fc:	4625      	mov	r5, r4
 80038fe:	4628      	mov	r0, r5
 8003900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003904:	f000 f838 	bl	8003978 <_malloc_usable_size_r>
 8003908:	4284      	cmp	r4, r0
 800390a:	4607      	mov	r7, r0
 800390c:	d802      	bhi.n	8003914 <_realloc_r+0x34>
 800390e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8003912:	d812      	bhi.n	800393a <_realloc_r+0x5a>
 8003914:	4621      	mov	r1, r4
 8003916:	4640      	mov	r0, r8
 8003918:	f7ff ff6e 	bl	80037f8 <_malloc_r>
 800391c:	4605      	mov	r5, r0
 800391e:	2800      	cmp	r0, #0
 8003920:	d0ed      	beq.n	80038fe <_realloc_r+0x1e>
 8003922:	42bc      	cmp	r4, r7
 8003924:	4622      	mov	r2, r4
 8003926:	4631      	mov	r1, r6
 8003928:	bf28      	it	cs
 800392a:	463a      	movcs	r2, r7
 800392c:	f7ff fed0 	bl	80036d0 <memcpy>
 8003930:	4631      	mov	r1, r6
 8003932:	4640      	mov	r0, r8
 8003934:	f7ff fef4 	bl	8003720 <_free_r>
 8003938:	e7e1      	b.n	80038fe <_realloc_r+0x1e>
 800393a:	4635      	mov	r5, r6
 800393c:	e7df      	b.n	80038fe <_realloc_r+0x1e>
	...

08003940 <_sbrk_r>:
 8003940:	b538      	push	{r3, r4, r5, lr}
 8003942:	4d06      	ldr	r5, [pc, #24]	; (800395c <_sbrk_r+0x1c>)
 8003944:	2300      	movs	r3, #0
 8003946:	4604      	mov	r4, r0
 8003948:	4608      	mov	r0, r1
 800394a:	602b      	str	r3, [r5, #0]
 800394c:	f7fd f948 	bl	8000be0 <_sbrk>
 8003950:	1c43      	adds	r3, r0, #1
 8003952:	d102      	bne.n	800395a <_sbrk_r+0x1a>
 8003954:	682b      	ldr	r3, [r5, #0]
 8003956:	b103      	cbz	r3, 800395a <_sbrk_r+0x1a>
 8003958:	6023      	str	r3, [r4, #0]
 800395a:	bd38      	pop	{r3, r4, r5, pc}
 800395c:	2000014c 	.word	0x2000014c

08003960 <__malloc_lock>:
 8003960:	4801      	ldr	r0, [pc, #4]	; (8003968 <__malloc_lock+0x8>)
 8003962:	f000 b811 	b.w	8003988 <__retarget_lock_acquire_recursive>
 8003966:	bf00      	nop
 8003968:	20000150 	.word	0x20000150

0800396c <__malloc_unlock>:
 800396c:	4801      	ldr	r0, [pc, #4]	; (8003974 <__malloc_unlock+0x8>)
 800396e:	f000 b80c 	b.w	800398a <__retarget_lock_release_recursive>
 8003972:	bf00      	nop
 8003974:	20000150 	.word	0x20000150

08003978 <_malloc_usable_size_r>:
 8003978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800397c:	1f18      	subs	r0, r3, #4
 800397e:	2b00      	cmp	r3, #0
 8003980:	bfbc      	itt	lt
 8003982:	580b      	ldrlt	r3, [r1, r0]
 8003984:	18c0      	addlt	r0, r0, r3
 8003986:	4770      	bx	lr

08003988 <__retarget_lock_acquire_recursive>:
 8003988:	4770      	bx	lr

0800398a <__retarget_lock_release_recursive>:
 800398a:	4770      	bx	lr

0800398c <_init>:
 800398c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800398e:	bf00      	nop
 8003990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003992:	bc08      	pop	{r3}
 8003994:	469e      	mov	lr, r3
 8003996:	4770      	bx	lr

08003998 <_fini>:
 8003998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800399a:	bf00      	nop
 800399c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800399e:	bc08      	pop	{r3}
 80039a0:	469e      	mov	lr, r3
 80039a2:	4770      	bx	lr
