
L07_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba4  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005d6c  08005d6c  00015d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d98  08005d98  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  08005d98  08005d98  00015d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005da0  08005da0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005da4  08005da4  00015da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  08005da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000248  20000098  08005e40  00020098  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005e40  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016954  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035ec  00000000  00000000  00036a1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0003a008  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fc8  00000000  00000000  0003b190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000275f0  00000000  00000000  0003c158  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018a60  00000000  00000000  00063748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2ff1  00000000  00000000  0007c1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016f199  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000045a4  00000000  00000000  0016f1ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000098 	.word	0x20000098
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08005d54 	.word	0x08005d54

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	2000009c 	.word	0x2000009c
 8000204:	08005d54 	.word	0x08005d54

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <BTN_DIO_Read>:
  * @brief Reads button state
  * @param[in] hbtn		: button DIO handler
  * @retval	Button state (BTN_PRESSED or BTN_RELEASED)
  */
BTN_DIO_State_TypeDef BTN_DIO_Read(const BTN_DIO_Handle_TypeDef* hbtn)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
	_Bool state = DIO_Read(&(hbtn->Input));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	4618      	mov	r0, r3
 8000518:	f000 f878 	bl	800060c <DIO_Read>
 800051c:	4603      	mov	r3, r0
 800051e:	73fb      	strb	r3, [r7, #15]
	return (hbtn->Pull == BTN_PULL_DOWN) ? state : !state;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	7a1b      	ldrb	r3, [r3, #8]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d101      	bne.n	800052c <BTN_DIO_Read+0x20>
 8000528:	7bfb      	ldrb	r3, [r7, #15]
 800052a:	e003      	b.n	8000534 <BTN_DIO_Read+0x28>
 800052c:	7bfb      	ldrb	r3, [r7, #15]
 800052e:	f083 0301 	eor.w	r3, r3, #1
 8000532:	b2db      	uxtb	r3, r3
}
 8000534:	4618      	mov	r0, r3
 8000536:	3710      	adds	r7, #16
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}

0800053c <BTN_DIO_EdgeDetected>:
  * @brief Detects button state change
  * @param[in/out] hbtn		: button DIO handler
  * @retval	Detected edge (BTN_NO_EDGE, BTN_PRESSED_EDGE or BTN_RELEASED_EDGE)
  */
BTN_DIO_Edge_TypeDef BTN_DIO_EdgeDetected(BTN_DIO_Handle_TypeDef* hbtn)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b084      	sub	sp, #16
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	BTN_DIO_State_TypeDef state = BTN_DIO_Read(hbtn);
 8000544:	6878      	ldr	r0, [r7, #4]
 8000546:	f7ff ffe1 	bl	800050c <BTN_DIO_Read>
 800054a:	4603      	mov	r3, r0
 800054c:	73bb      	strb	r3, [r7, #14]
	BTN_DIO_Edge_TypeDef edge = BTN_NO_EDGE;
 800054e:	2300      	movs	r3, #0
 8000550:	73fb      	strb	r3, [r7, #15]
	if(state == BTN_PRESSED && hbtn->PrevState == BTN_RELEASED)
 8000552:	7bbb      	ldrb	r3, [r7, #14]
 8000554:	2b01      	cmp	r3, #1
 8000556:	d106      	bne.n	8000566 <BTN_DIO_EdgeDetected+0x2a>
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	7a5b      	ldrb	r3, [r3, #9]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d102      	bne.n	8000566 <BTN_DIO_EdgeDetected+0x2a>
		edge = BTN_PRESSED_EDGE;
 8000560:	2301      	movs	r3, #1
 8000562:	73fb      	strb	r3, [r7, #15]
 8000564:	e008      	b.n	8000578 <BTN_DIO_EdgeDetected+0x3c>
	else if(state == BTN_RELEASED && hbtn->PrevState == BTN_PRESSED)
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	2b00      	cmp	r3, #0
 800056a:	d105      	bne.n	8000578 <BTN_DIO_EdgeDetected+0x3c>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	7a5b      	ldrb	r3, [r3, #9]
 8000570:	2b01      	cmp	r3, #1
 8000572:	d101      	bne.n	8000578 <BTN_DIO_EdgeDetected+0x3c>
		edge = BTN_RELEASED_EDGE;
 8000574:	2302      	movs	r3, #2
 8000576:	73fb      	strb	r3, [r7, #15]
	hbtn->PrevState = state;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	7bba      	ldrb	r2, [r7, #14]
 800057c:	725a      	strb	r2, [r3, #9]
	return edge;
 800057e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000580:	4618      	mov	r0, r3
 8000582:	3710      	adds	r7, #16
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}

08000588 <DIO_WriteLow>:
 * @brief Resets digital output (writes '0')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteLow(const DIO_Handle_TypeDef* hdio)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b082      	sub	sp, #8
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_RESET);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	6818      	ldr	r0, [r3, #0]
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	889b      	ldrh	r3, [r3, #4]
 8000598:	2200      	movs	r2, #0
 800059a:	4619      	mov	r1, r3
 800059c:	f002 fd0a 	bl	8002fb4 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	3708      	adds	r7, #8
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}

080005a8 <DIO_WriteHigh>:
 * @brief Sets digital output (writes '1')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_WriteHigh(const DIO_Handle_TypeDef* hdio)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b082      	sub	sp, #8
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, GPIO_PIN_SET);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6818      	ldr	r0, [r3, #0]
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	889b      	ldrh	r3, [r3, #4]
 80005b8:	2201      	movs	r2, #1
 80005ba:	4619      	mov	r1, r3
 80005bc:	f002 fcfa 	bl	8002fb4 <HAL_GPIO_WritePin>
}
 80005c0:	bf00      	nop
 80005c2:	3708      	adds	r7, #8
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}

080005c8 <DIO_Write>:
 * @param[in] hdio  : Digital I/O handler
 * @param[in] state : Digital output state (0 or 1)
 * @retval None
 */
void DIO_Write(const DIO_Handle_TypeDef* hdio, _Bool state)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b082      	sub	sp, #8
 80005cc:	af00      	add	r7, sp, #0
 80005ce:	6078      	str	r0, [r7, #4]
 80005d0:	460b      	mov	r3, r1
 80005d2:	70fb      	strb	r3, [r7, #3]
  HAL_GPIO_WritePin(hdio->Port, hdio->Pin, (GPIO_PinState)state);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	6818      	ldr	r0, [r3, #0]
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	78fa      	ldrb	r2, [r7, #3]
 80005de:	4619      	mov	r1, r3
 80005e0:	f002 fce8 	bl	8002fb4 <HAL_GPIO_WritePin>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}

080005ec <DIO_Toggle>:
 * @brief Toggles digital output ('0' to '1' or '1' to '0')
 * @param[in] hdio  : Digital I/O handler
 * @retval None
 */
void DIO_Toggle(const DIO_Handle_TypeDef* hdio)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(hdio->Port, hdio->Pin);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	889b      	ldrh	r3, [r3, #4]
 80005fc:	4619      	mov	r1, r3
 80005fe:	4610      	mov	r0, r2
 8000600:	f002 fcf1 	bl	8002fe6 <HAL_GPIO_TogglePin>
}
 8000604:	bf00      	nop
 8000606:	3708      	adds	r7, #8
 8000608:	46bd      	mov	sp, r7
 800060a:	bd80      	pop	{r7, pc}

0800060c <DIO_Read>:
 * @brief Reads digital input
 * @param[in] hdio  : Digital I/O handler
 * @retval Input state (0 or 1)
 */
_Bool DIO_Read(const DIO_Handle_TypeDef* hdio)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
 8000612:	6078      	str	r0, [r7, #4]
  return (_Bool)HAL_GPIO_ReadPin(hdio->Port, hdio->Pin);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	681a      	ldr	r2, [r3, #0]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	889b      	ldrh	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	4610      	mov	r0, r2
 8000620:	f002 fcb0 	bl	8002f84 <HAL_GPIO_ReadPin>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	bf14      	ite	ne
 800062a:	2301      	movne	r3, #1
 800062c:	2300      	moveq	r3, #0
 800062e:	b2db      	uxtb	r3, r3
}
 8000630:	4618      	mov	r0, r3
 8000632:	3708      	adds	r7, #8
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}

08000638 <disp_write_data>:

/* Public function prototypes ------------------------------------------------*/

/* Private functions ---------------------------------------------------------*/
void disp_write_data(DISP_HandleTypeDef* hdisp, uint8_t data)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b084      	sub	sp, #16
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	460b      	mov	r3, r1
 8000642:	70fb      	strb	r3, [r7, #3]
  for(uint8_t i = 0; i < DISP_SEG_NO; i++)
 8000644:	2300      	movs	r3, #0
 8000646:	73fb      	strb	r3, [r7, #15]
 8000648:	e015      	b.n	8000676 <disp_write_data+0x3e>
    DIO_Write(&(hdisp->SegmentOutput[i]), (data >> i) & 0x01);
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	3304      	adds	r3, #4
 800064e:	00db      	lsls	r3, r3, #3
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	18d0      	adds	r0, r2, r3
 8000654:	78fa      	ldrb	r2, [r7, #3]
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	fa42 f303 	asr.w	r3, r2, r3
 800065c:	f003 0301 	and.w	r3, r3, #1
 8000660:	2b00      	cmp	r3, #0
 8000662:	bf14      	ite	ne
 8000664:	2301      	movne	r3, #1
 8000666:	2300      	moveq	r3, #0
 8000668:	b2db      	uxtb	r3, r3
 800066a:	4619      	mov	r1, r3
 800066c:	f7ff ffac 	bl	80005c8 <DIO_Write>
  for(uint8_t i = 0; i < DISP_SEG_NO; i++)
 8000670:	7bfb      	ldrb	r3, [r7, #15]
 8000672:	3301      	adds	r3, #1
 8000674:	73fb      	strb	r3, [r7, #15]
 8000676:	7bfb      	ldrb	r3, [r7, #15]
 8000678:	2b06      	cmp	r3, #6
 800067a:	d9e6      	bls.n	800064a <disp_write_data+0x12>
}
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}

08000686 <disp_disable_all_digits>:

void disp_disable_all_digits(DISP_HandleTypeDef* hdisp)
{
 8000686:	b580      	push	{r7, lr}
 8000688:	b084      	sub	sp, #16
 800068a:	af00      	add	r7, sp, #0
 800068c:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 800068e:	2300      	movs	r3, #0
 8000690:	73fb      	strb	r3, [r7, #15]
 8000692:	e009      	b.n	80006a8 <disp_disable_all_digits+0x22>
    DIO_WriteLow(&(hdisp->DigitOutput[i]));
 8000694:	7bfb      	ldrb	r3, [r7, #15]
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	687a      	ldr	r2, [r7, #4]
 800069a:	4413      	add	r3, r2
 800069c:	4618      	mov	r0, r3
 800069e:	f7ff ff73 	bl	8000588 <DIO_WriteLow>
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 80006a2:	7bfb      	ldrb	r3, [r7, #15]
 80006a4:	3301      	adds	r3, #1
 80006a6:	73fb      	strb	r3, [r7, #15]
 80006a8:	7bfb      	ldrb	r3, [r7, #15]
 80006aa:	2b03      	cmp	r3, #3
 80006ac:	d9f2      	bls.n	8000694 <disp_disable_all_digits+0xe>
}
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	3710      	adds	r7, #16
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <disp_enable_digit>:

void disp_enable_digit(DISP_HandleTypeDef* hdisp, uint8_t dig)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	460b      	mov	r3, r1
 80006c2:	70fb      	strb	r3, [r7, #3]
  if(dig < DISP_DIG_NO)
 80006c4:	78fb      	ldrb	r3, [r7, #3]
 80006c6:	2b03      	cmp	r3, #3
 80006c8:	d806      	bhi.n	80006d8 <disp_enable_digit+0x20>
    DIO_WriteHigh(&(hdisp->DigitOutput[dig]));
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	00db      	lsls	r3, r3, #3
 80006ce:	687a      	ldr	r2, [r7, #4]
 80006d0:	4413      	add	r3, r2
 80006d2:	4618      	mov	r0, r3
 80006d4:	f7ff ff68 	bl	80005a8 <DIO_WriteHigh>
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <disp_enable_decimal_point>:

void disp_enable_decimal_point(DISP_HandleTypeDef* hdisp)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
  DIO_WriteLow(&(hdisp->DecimalPointOutput));
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	3358      	adds	r3, #88	; 0x58
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff ff4b 	bl	8000588 <DIO_WriteLow>
}
 80006f2:	bf00      	nop
 80006f4:	3708      	adds	r7, #8
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}

080006fa <disp_disable_decimal_point>:

void disp_disable_decimal_point(DISP_HandleTypeDef* hdisp)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	b082      	sub	sp, #8
 80006fe:	af00      	add	r7, sp, #0
 8000700:	6078      	str	r0, [r7, #4]
  DIO_WriteHigh(&(hdisp->DecimalPointOutput));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	3358      	adds	r3, #88	; 0x58
 8000706:	4618      	mov	r0, r3
 8000708:	f7ff ff4e 	bl	80005a8 <DIO_WriteHigh>
}
 800070c:	bf00      	nop
 800070e:	3708      	adds	r7, #8
 8000710:	46bd      	mov	sp, r7
 8000712:	bd80      	pop	{r7, pc}

08000714 <DISP_printDecUInt>:
 * @brief TODO
 * @param[in] hdisp :
 * @param[in] dec   :
 */
void DISP_printDecUInt(DISP_HandleTypeDef* hdisp, uint16_t dec)
{
 8000714:	b480      	push	{r7}
 8000716:	b085      	sub	sp, #20
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
 800071c:	460b      	mov	r3, r1
 800071e:	807b      	strh	r3, [r7, #2]
  uint16_t div = __POWER_OF_TEN(3);
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	81fb      	strh	r3, [r7, #14]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000726:	2300      	movs	r3, #0
 8000728:	737b      	strb	r3, [r7, #13]
 800072a:	e01c      	b.n	8000766 <DISP_printDecUInt+0x52>
  {
    hdisp->DataArray[i] = dec / div;
 800072c:	887a      	ldrh	r2, [r7, #2]
 800072e:	89fb      	ldrh	r3, [r7, #14]
 8000730:	fbb2 f3f3 	udiv	r3, r2, r3
 8000734:	b29a      	uxth	r2, r3
 8000736:	7b7b      	ldrb	r3, [r7, #13]
 8000738:	b2d1      	uxtb	r1, r2
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	460a      	mov	r2, r1
 8000740:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
    dec = dec % div;
 8000744:	887b      	ldrh	r3, [r7, #2]
 8000746:	89fa      	ldrh	r2, [r7, #14]
 8000748:	fbb3 f1f2 	udiv	r1, r3, r2
 800074c:	fb01 f202 	mul.w	r2, r1, r2
 8000750:	1a9b      	subs	r3, r3, r2
 8000752:	807b      	strh	r3, [r7, #2]
    div /= 10;
 8000754:	89fb      	ldrh	r3, [r7, #14]
 8000756:	4a09      	ldr	r2, [pc, #36]	; (800077c <DISP_printDecUInt+0x68>)
 8000758:	fba2 2303 	umull	r2, r3, r2, r3
 800075c:	08db      	lsrs	r3, r3, #3
 800075e:	81fb      	strh	r3, [r7, #14]
  for(uint8_t i = 0; i < DISP_DIG_NO; i++)
 8000760:	7b7b      	ldrb	r3, [r7, #13]
 8000762:	3301      	adds	r3, #1
 8000764:	737b      	strb	r3, [r7, #13]
 8000766:	7b7b      	ldrb	r3, [r7, #13]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d9df      	bls.n	800072c <DISP_printDecUInt+0x18>
  }
}
 800076c:	bf00      	nop
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	cccccccd 	.word	0xcccccccd

08000780 <DISP_ROUTINE>:
/**
 * @brief TODO
 * @param[in] hdisp :
 */
void DISP_ROUTINE(DISP_HandleTypeDef* hdisp)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b084      	sub	sp, #16
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  static uint8_t dig = 0;  // active digit selector

  // Disable all segments
  disp_disable_all_digits(hdisp);
 8000788:	6878      	ldr	r0, [r7, #4]
 800078a:	f7ff ff7c 	bl	8000686 <disp_disable_all_digits>

  // Enable single segment
  disp_enable_digit(hdisp, dig);
 800078e:	4b1e      	ldr	r3, [pc, #120]	; (8000808 <DISP_ROUTINE+0x88>)
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4619      	mov	r1, r3
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff8f 	bl	80006b8 <disp_enable_digit>

  // Write to selected segment
  uint8_t idx = hdisp->DataArray[dig];
 800079a:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <DISP_ROUTINE+0x88>)
 800079c:	781b      	ldrb	r3, [r3, #0]
 800079e:	461a      	mov	r2, r3
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4413      	add	r3, r2
 80007a4:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 80007a8:	73fb      	strb	r3, [r7, #15]
  
  /* DECIMAL POSITIVE NUMBERS: 0000-9999 */
  if(idx < DISP_DECIMALS_NO)
 80007aa:	7bfb      	ldrb	r3, [r7, #15]
 80007ac:	2b09      	cmp	r3, #9
 80007ae:	d807      	bhi.n	80007c0 <DISP_ROUTINE+0x40>
    disp_write_data(hdisp, DISP_COMMON_ANODE_DECIMALS[idx]);
 80007b0:	7bfb      	ldrb	r3, [r7, #15]
 80007b2:	4a16      	ldr	r2, [pc, #88]	; (800080c <DISP_ROUTINE+0x8c>)
 80007b4:	5cd3      	ldrb	r3, [r2, r3]
 80007b6:	4619      	mov	r1, r3
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f7ff ff3d 	bl	8000638 <disp_write_data>
 80007be:	e004      	b.n	80007ca <DISP_ROUTINE+0x4a>
     negative decimal number handling 
     etc */
     
  /* EMPTY CHARACTER (BLANK) */
  else
    disp_write_data(hdisp, DISP_COMMON_ANODE_DECIMALS[DISP_EMPTY_CHAR]);
 80007c0:	23ff      	movs	r3, #255	; 0xff
 80007c2:	4619      	mov	r1, r3
 80007c4:	6878      	ldr	r0, [r7, #4]
 80007c6:	f7ff ff37 	bl	8000638 <disp_write_data>

  // Decimal point control
  if(hdisp->DecimalPoint == dig)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
 80007d0:	4b0d      	ldr	r3, [pc, #52]	; (8000808 <DISP_ROUTINE+0x88>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	429a      	cmp	r2, r3
 80007d6:	d103      	bne.n	80007e0 <DISP_ROUTINE+0x60>
    disp_enable_decimal_point(hdisp);
 80007d8:	6878      	ldr	r0, [r7, #4]
 80007da:	f7ff ff81 	bl	80006e0 <disp_enable_decimal_point>
 80007de:	e002      	b.n	80007e6 <DISP_ROUTINE+0x66>
  else
    disp_disable_decimal_point(hdisp);
 80007e0:	6878      	ldr	r0, [r7, #4]
 80007e2:	f7ff ff8a 	bl	80006fa <disp_disable_decimal_point>

  // Select next segment
  dig = (dig < DISP_DIG_NO-1) ? (dig+1) : (0);
 80007e6:	4b08      	ldr	r3, [pc, #32]	; (8000808 <DISP_ROUTINE+0x88>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	d804      	bhi.n	80007f8 <DISP_ROUTINE+0x78>
 80007ee:	4b06      	ldr	r3, [pc, #24]	; (8000808 <DISP_ROUTINE+0x88>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	3301      	adds	r3, #1
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	e000      	b.n	80007fa <DISP_ROUTINE+0x7a>
 80007f8:	2300      	movs	r3, #0
 80007fa:	4a03      	ldr	r2, [pc, #12]	; (8000808 <DISP_ROUTINE+0x88>)
 80007fc:	7013      	strb	r3, [r2, #0]
}
 80007fe:	bf00      	nop
 8000800:	3710      	adds	r7, #16
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	200000b4 	.word	0x200000b4
 800080c:	08005d6c 	.word	0x08005d6c

08000810 <LED_DIO_Toggle>:
  * @brief Toggles LED state
  * @param[in] hled   : LED DIO handler
  * @retval None
  */
void LED_DIO_Toggle(const LED_DIO_Handle_TypeDef* hled)
{
 8000810:	b580      	push	{r7, lr}
 8000812:	b082      	sub	sp, #8
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  DIO_Toggle(&(hled->Output));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4618      	mov	r0, r3
 800081c:	f7ff fee6 	bl	80005ec <DIO_Toggle>
}
 8000820:	bf00      	nop
 8000822:	3708      	adds	r7, #8
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}

08000828 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800082e:	463b      	mov	r3, r7
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
 8000834:	605a      	str	r2, [r3, #4]
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800083a:	4b28      	ldr	r3, [pc, #160]	; (80008dc <MX_ADC1_Init+0xb4>)
 800083c:	4a28      	ldr	r2, [pc, #160]	; (80008e0 <MX_ADC1_Init+0xb8>)
 800083e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000840:	4b26      	ldr	r3, [pc, #152]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000842:	2200      	movs	r2, #0
 8000844:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000846:	4b25      	ldr	r3, [pc, #148]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800084c:	4b23      	ldr	r3, [pc, #140]	; (80008dc <MX_ADC1_Init+0xb4>)
 800084e:	2201      	movs	r2, #1
 8000850:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000852:	4b22      	ldr	r3, [pc, #136]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000854:	2200      	movs	r2, #0
 8000856:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000858:	4b20      	ldr	r3, [pc, #128]	; (80008dc <MX_ADC1_Init+0xb4>)
 800085a:	2200      	movs	r2, #0
 800085c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000862:	2200      	movs	r2, #0
 8000864:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000868:	4a1e      	ldr	r2, [pc, #120]	; (80008e4 <MX_ADC1_Init+0xbc>)
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <MX_ADC1_Init+0xb4>)
 800086e:	2200      	movs	r2, #0
 8000870:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000872:	4b1a      	ldr	r3, [pc, #104]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000874:	2202      	movs	r2, #2
 8000876:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000878:	4b18      	ldr	r3, [pc, #96]	; (80008dc <MX_ADC1_Init+0xb4>)
 800087a:	2201      	movs	r2, #1
 800087c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000880:	4b16      	ldr	r3, [pc, #88]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <MX_ADC1_Init+0xb4>)
 8000888:	f000 ff6c 	bl	8001764 <HAL_ADC_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000892:	f000 fbf1 	bl	8001078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8000896:	2309      	movs	r3, #9
 8000898:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800089a:	2301      	movs	r3, #1
 800089c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 800089e:	2307      	movs	r3, #7
 80008a0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008a2:	463b      	mov	r3, r7
 80008a4:	4619      	mov	r1, r3
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <MX_ADC1_Init+0xb4>)
 80008a8:	f001 f9c8 	bl	8001c3c <HAL_ADC_ConfigChannel>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008b2:	f000 fbe1 	bl	8001078 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 80008b6:	230c      	movs	r3, #12
 80008b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80008ba:	2302      	movs	r3, #2
 80008bc:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008be:	463b      	mov	r3, r7
 80008c0:	4619      	mov	r1, r3
 80008c2:	4806      	ldr	r0, [pc, #24]	; (80008dc <MX_ADC1_Init+0xb4>)
 80008c4:	f001 f9ba 	bl	8001c3c <HAL_ADC_ConfigChannel>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008ce:	f000 fbd3 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008d2:	bf00      	nop
 80008d4:	3710      	adds	r7, #16
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	200000b8 	.word	0x200000b8
 80008e0:	40012000 	.word	0x40012000
 80008e4:	0f000001 	.word	0x0f000001

080008e8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80008e8:	b580      	push	{r7, lr}
 80008ea:	b08a      	sub	sp, #40	; 0x28
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f0:	f107 0314 	add.w	r3, r7, #20
 80008f4:	2200      	movs	r2, #0
 80008f6:	601a      	str	r2, [r3, #0]
 80008f8:	605a      	str	r2, [r3, #4]
 80008fa:	609a      	str	r2, [r3, #8]
 80008fc:	60da      	str	r2, [r3, #12]
 80008fe:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a3d      	ldr	r2, [pc, #244]	; (80009fc <HAL_ADC_MspInit+0x114>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d173      	bne.n	80009f2 <HAL_ADC_MspInit+0x10a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800090a:	4b3d      	ldr	r3, [pc, #244]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a3c      	ldr	r2, [pc, #240]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000910:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b3a      	ldr	r3, [pc, #232]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800091e:	613b      	str	r3, [r7, #16]
 8000920:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000922:	4b37      	ldr	r3, [pc, #220]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	4a36      	ldr	r2, [pc, #216]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000928:	f043 0304 	orr.w	r3, r3, #4
 800092c:	6313      	str	r3, [r2, #48]	; 0x30
 800092e:	4b34      	ldr	r3, [pc, #208]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	f003 0304 	and.w	r3, r3, #4
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800093a:	4b31      	ldr	r3, [pc, #196]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	4a30      	ldr	r2, [pc, #192]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000940:	f043 0302 	orr.w	r3, r3, #2
 8000944:	6313      	str	r3, [r2, #48]	; 0x30
 8000946:	4b2e      	ldr	r3, [pc, #184]	; (8000a00 <HAL_ADC_MspInit+0x118>)
 8000948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094a:	f003 0302 	and.w	r3, r3, #2
 800094e:	60bb      	str	r3, [r7, #8]
 8000950:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = POTENTIOMETER2_Pin;
 8000952:	2304      	movs	r3, #4
 8000954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000956:	2303      	movs	r3, #3
 8000958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER2_GPIO_Port, &GPIO_InitStruct);
 800095e:	f107 0314 	add.w	r3, r7, #20
 8000962:	4619      	mov	r1, r3
 8000964:	4827      	ldr	r0, [pc, #156]	; (8000a04 <HAL_ADC_MspInit+0x11c>)
 8000966:	f002 f961 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = POTENTIOMETER1_Pin;
 800096a:	2302      	movs	r3, #2
 800096c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800096e:	2303      	movs	r3, #3
 8000970:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(POTENTIOMETER1_GPIO_Port, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4822      	ldr	r0, [pc, #136]	; (8000a08 <HAL_ADC_MspInit+0x120>)
 800097e:	f002 f955 	bl	8002c2c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 8000984:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_ADC_MspInit+0x128>)
 8000986:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 800098a:	2200      	movs	r2, #0
 800098c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800098e:	4b1f      	ldr	r3, [pc, #124]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000994:	4b1d      	ldr	r3, [pc, #116]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800099a:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 800099c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80009a0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80009a2:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80009a8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009b0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80009b2:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80009b8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80009ba:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009bc:	2200      	movs	r2, #0
 80009be:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80009c0:	4b12      	ldr	r3, [pc, #72]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80009c6:	4811      	ldr	r0, [pc, #68]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009c8:	f001 fd26 	bl	8002418 <HAL_DMA_Init>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d001      	beq.n	80009d6 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80009d2:	f000 fb51 	bl	8001078 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a0c      	ldr	r2, [pc, #48]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009da:	639a      	str	r2, [r3, #56]	; 0x38
 80009dc:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <HAL_ADC_MspInit+0x124>)
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80009e2:	2200      	movs	r2, #0
 80009e4:	2100      	movs	r1, #0
 80009e6:	2012      	movs	r0, #18
 80009e8:	f001 fcdf 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80009ec:	2012      	movs	r0, #18
 80009ee:	f001 fcf8 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80009f2:	bf00      	nop
 80009f4:	3728      	adds	r7, #40	; 0x28
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	40012000 	.word	0x40012000
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40020800 	.word	0x40020800
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	20000100 	.word	0x20000100
 8000a10:	40026410 	.word	0x40026410

08000a14 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b082      	sub	sp, #8
 8000a18:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a1a:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <MX_DMA_Init+0x38>)
 8000a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <MX_DMA_Init+0x38>)
 8000a20:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000a24:	6313      	str	r3, [r2, #48]	; 0x30
 8000a26:	4b09      	ldr	r3, [pc, #36]	; (8000a4c <MX_DMA_Init+0x38>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	2038      	movs	r0, #56	; 0x38
 8000a38:	f001 fcb7 	bl	80023aa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a3c:	2038      	movs	r0, #56	; 0x38
 8000a3e:	f001 fcd0 	bl	80023e2 <HAL_NVIC_EnableIRQ>

}
 8000a42:	bf00      	nop
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	40023800 	.word	0x40023800

08000a50 <MX_GPIO_Init>:
     PG13   ------> ETH_TXD0
     PB8   ------> I2C1_SCL
     PB9   ------> I2C1_SDA
*/
void MX_GPIO_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08e      	sub	sp, #56	; 0x38
 8000a54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	601a      	str	r2, [r3, #0]
 8000a5e:	605a      	str	r2, [r3, #4]
 8000a60:	609a      	str	r2, [r3, #8]
 8000a62:	60da      	str	r2, [r3, #12]
 8000a64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a66:	4bb2      	ldr	r3, [pc, #712]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4ab1      	ldr	r2, [pc, #708]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a6c:	f043 0310 	orr.w	r3, r3, #16
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4baf      	ldr	r3, [pc, #700]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0310 	and.w	r3, r3, #16
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a7e:	4bac      	ldr	r3, [pc, #688]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	4aab      	ldr	r2, [pc, #684]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a84:	f043 0304 	orr.w	r3, r3, #4
 8000a88:	6313      	str	r3, [r2, #48]	; 0x30
 8000a8a:	4ba9      	ldr	r3, [pc, #676]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a8e:	f003 0304 	and.w	r3, r3, #4
 8000a92:	61fb      	str	r3, [r7, #28]
 8000a94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a96:	4ba6      	ldr	r3, [pc, #664]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a9a:	4aa5      	ldr	r2, [pc, #660]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000a9c:	f043 0320 	orr.w	r3, r3, #32
 8000aa0:	6313      	str	r3, [r2, #48]	; 0x30
 8000aa2:	4ba3      	ldr	r3, [pc, #652]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aa6:	f003 0320 	and.w	r3, r3, #32
 8000aaa:	61bb      	str	r3, [r7, #24]
 8000aac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aae:	4ba0      	ldr	r3, [pc, #640]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab2:	4a9f      	ldr	r2, [pc, #636]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ab4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aba:	4b9d      	ldr	r3, [pc, #628]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ac2:	617b      	str	r3, [r7, #20]
 8000ac4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac6:	4b9a      	ldr	r3, [pc, #616]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aca:	4a99      	ldr	r2, [pc, #612]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad2:	4b97      	ldr	r3, [pc, #604]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad6:	f003 0301 	and.w	r3, r3, #1
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b94      	ldr	r3, [pc, #592]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ae2:	4a93      	ldr	r2, [pc, #588]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000ae4:	f043 0302 	orr.w	r3, r3, #2
 8000ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8000aea:	4b91      	ldr	r3, [pc, #580]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000af6:	4b8e      	ldr	r3, [pc, #568]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	4a8d      	ldr	r2, [pc, #564]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000afc:	f043 0308 	orr.w	r3, r3, #8
 8000b00:	6313      	str	r3, [r2, #48]	; 0x30
 8000b02:	4b8b      	ldr	r3, [pc, #556]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b06:	f003 0308 	and.w	r3, r3, #8
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b0e:	4b88      	ldr	r3, [pc, #544]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b12:	4a87      	ldr	r2, [pc, #540]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b18:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1a:	4b85      	ldr	r3, [pc, #532]	; (8000d30 <MX_GPIO_Init+0x2e0>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000b22:	607b      	str	r3, [r7, #4]
 8000b24:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SPI4_CS_Pin|DISP_E_Pin|DISP_F_Pin|DISP_D_Pin
 8000b26:	2200      	movs	r2, #0
 8000b28:	f64f 5190 	movw	r1, #64912	; 0xfd90
 8000b2c:	4881      	ldr	r0, [pc, #516]	; (8000d34 <MX_GPIO_Init+0x2e4>)
 8000b2e:	f002 fa41 	bl	8002fb4 <HAL_GPIO_WritePin>
                          |DISP_1_Pin|DISP_C_Pin|DISP_3_Pin|DISP_B_Pin
                          |DISP_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, LAMP_TRIAC_Pin|DISP_2_Pin|DISP_4_Pin, GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f24c 0108 	movw	r1, #49160	; 0xc008
 8000b38:	487f      	ldr	r0, [pc, #508]	; (8000d38 <MX_GPIO_Init+0x2e8>)
 8000b3a:	f002 fa3b 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f244 0181 	movw	r1, #16513	; 0x4081
 8000b44:	487d      	ldr	r0, [pc, #500]	; (8000d3c <MX_GPIO_Init+0x2ec>)
 8000b46:	f002 fa35 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, USB_PowerSwitchOn_Pin|DISP_G_Pin|DISP_H_Pin, GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f244 2140 	movw	r1, #16960	; 0x4240
 8000b50:	487b      	ldr	r0, [pc, #492]	; (8000d40 <MX_GPIO_Init+0x2f0>)
 8000b52:	f002 fa2f 	bl	8002fb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5a:	2302      	movs	r3, #2
 8000b5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b62:	2303      	movs	r3, #3
 8000b64:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000b66:	2305      	movs	r3, #5
 8000b68:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	4619      	mov	r1, r3
 8000b70:	4870      	ldr	r0, [pc, #448]	; (8000d34 <MX_GPIO_Init+0x2e4>)
 8000b72:	f002 f85b 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SPI4_CS_Pin|DISP_1_Pin|DISP_3_Pin;
 8000b76:	f642 0310 	movw	r3, #10256	; 0x2810
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b7c:	2301      	movs	r3, #1
 8000b7e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b84:	2300      	movs	r3, #0
 8000b86:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4869      	ldr	r0, [pc, #420]	; (8000d34 <MX_GPIO_Init+0x2e4>)
 8000b90:	f002 f84c 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000b94:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000b9a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000b9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000ba4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba8:	4619      	mov	r1, r3
 8000baa:	4866      	ldr	r0, [pc, #408]	; (8000d44 <MX_GPIO_Init+0x2f4>)
 8000bac:	f002 f83e 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	485c      	ldr	r0, [pc, #368]	; (8000d38 <MX_GPIO_Init+0x2e8>)
 8000bc8:	f002 f830 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 8000bcc:	2320      	movs	r3, #32
 8000bce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000bd0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8000bda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bde:	4619      	mov	r1, r3
 8000be0:	4855      	ldr	r0, [pc, #340]	; (8000d38 <MX_GPIO_Init+0x2e8>)
 8000be2:	f002 f823 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8000be6:	2301      	movs	r3, #1
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000bea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000bee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8000bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4852      	ldr	r0, [pc, #328]	; (8000d44 <MX_GPIO_Init+0x2f4>)
 8000bfc:	f002 f816 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000c00:	2332      	movs	r3, #50	; 0x32
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c10:	230b      	movs	r3, #11
 8000c12:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c18:	4619      	mov	r1, r3
 8000c1a:	484a      	ldr	r0, [pc, #296]	; (8000d44 <MX_GPIO_Init+0x2f4>)
 8000c1c:	f002 f806 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8000c20:	2308      	movs	r3, #8
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c32:	4619      	mov	r1, r3
 8000c34:	4843      	ldr	r0, [pc, #268]	; (8000d44 <MX_GPIO_Init+0x2f4>)
 8000c36:	f001 fff9 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000c3a:	2386      	movs	r3, #134	; 0x86
 8000c3c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c46:	2303      	movs	r3, #3
 8000c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c4a:	230b      	movs	r3, #11
 8000c4c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	483c      	ldr	r0, [pc, #240]	; (8000d48 <MX_GPIO_Init+0x2f8>)
 8000c56:	f001 ffe9 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000c5a:	2308      	movs	r3, #8
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <MX_GPIO_Init+0x2f8>)
 8000c76:	f001 ffd9 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c7a:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c80:	2301      	movs	r3, #1
 8000c82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	482a      	ldr	r0, [pc, #168]	; (8000d3c <MX_GPIO_Init+0x2ec>)
 8000c94:	f001 ffca 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = DISP_2_Pin|DISP_4_Pin;
 8000c98:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cae:	4619      	mov	r1, r3
 8000cb0:	4821      	ldr	r0, [pc, #132]	; (8000d38 <MX_GPIO_Init+0x2e8>)
 8000cb2:	f001 ffbb 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin
                           PEPin PEPin */
  GPIO_InitStruct.Pin = DISP_E_Pin|DISP_F_Pin|DISP_D_Pin|DISP_C_Pin
 8000cb6:	f24d 5380 	movw	r3, #54656	; 0xd580
 8000cba:	627b      	str	r3, [r7, #36]	; 0x24
                          |DISP_B_Pin|DISP_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cbc:	2311      	movs	r3, #17
 8000cbe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cc0:	2301      	movs	r3, #1
 8000cc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000cc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4819      	ldr	r0, [pc, #100]	; (8000d34 <MX_GPIO_Init+0x2e4>)
 8000cd0:	f001 ffac 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000cd4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cda:	2302      	movs	r3, #2
 8000cdc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ce2:	2303      	movs	r3, #3
 8000ce4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000ce6:	230b      	movs	r3, #11
 8000ce8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000cea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cee:	4619      	mov	r1, r3
 8000cf0:	4812      	ldr	r0, [pc, #72]	; (8000d3c <MX_GPIO_Init+0x2ec>)
 8000cf2:	f001 ff9b 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HEATER_Pin;
 8000cf6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cfa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d00:	2300      	movs	r3, #0
 8000d02:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d04:	2300      	movs	r3, #0
 8000d06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000d08:	2302      	movs	r3, #2
 8000d0a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(HEATER_GPIO_Port, &GPIO_InitStruct);
 8000d0c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d10:	4619      	mov	r1, r3
 8000d12:	480e      	ldr	r0, [pc, #56]	; (8000d4c <MX_GPIO_Init+0x2fc>)
 8000d14:	f001 ff8a 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d18:	2340      	movs	r3, #64	; 0x40
 8000d1a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d24:	2300      	movs	r3, #0
 8000d26:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d28:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	e00f      	b.n	8000d50 <MX_GPIO_Init+0x300>
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40021000 	.word	0x40021000
 8000d38:	40021400 	.word	0x40021400
 8000d3c:	40020400 	.word	0x40020400
 8000d40:	40021800 	.word	0x40021800
 8000d44:	40020800 	.word	0x40020800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020c00 	.word	0x40020c00
 8000d50:	4830      	ldr	r0, [pc, #192]	; (8000e14 <MX_GPIO_Init+0x3c4>)
 8000d52:	f001 ff6b 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d56:	2380      	movs	r3, #128	; 0x80
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d66:	4619      	mov	r1, r3
 8000d68:	482a      	ldr	r0, [pc, #168]	; (8000e14 <MX_GPIO_Init+0x3c4>)
 8000d6a:	f001 ff5f 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000d6e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000d72:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000d80:	230a      	movs	r3, #10
 8000d82:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4823      	ldr	r0, [pc, #140]	; (8000e18 <MX_GPIO_Init+0x3c8>)
 8000d8c:	f001 ff4e 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000d90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d94:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d96:	2300      	movs	r3, #0
 8000d98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000d9e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000da2:	4619      	mov	r1, r3
 8000da4:	481c      	ldr	r0, [pc, #112]	; (8000e18 <MX_GPIO_Init+0x3c8>)
 8000da6:	f001 ff41 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = DISP_G_Pin|DISP_H_Pin;
 8000daa:	f44f 4384 	mov.w	r3, #16896	; 0x4200
 8000dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000db0:	2311      	movs	r3, #17
 8000db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4814      	ldr	r0, [pc, #80]	; (8000e14 <MX_GPIO_Init+0x3c4>)
 8000dc4:	f001 ff32 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000dc8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dce:	2302      	movs	r3, #2
 8000dd0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd6:	2303      	movs	r3, #3
 8000dd8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dda:	230b      	movs	r3, #11
 8000ddc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000de2:	4619      	mov	r1, r3
 8000de4:	480b      	ldr	r0, [pc, #44]	; (8000e14 <MX_GPIO_Init+0x3c4>)
 8000de6:	f001 ff21 	bl	8002c2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = BH1750_SCL_Pin|BH1750_SDA_Pin;
 8000dea:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df0:	2312      	movs	r3, #18
 8000df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dfc:	2304      	movs	r3, #4
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	4619      	mov	r1, r3
 8000e06:	4805      	ldr	r0, [pc, #20]	; (8000e1c <MX_GPIO_Init+0x3cc>)
 8000e08:	f001 ff10 	bl	8002c2c <HAL_GPIO_Init>

}
 8000e0c:	bf00      	nop
 8000e0e:	3738      	adds	r7, #56	; 0x38
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40021800 	.word	0x40021800
 8000e18:	40020000 	.word	0x40020000
 8000e1c:	40020400 	.word	0x40020400

08000e20 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a1c      	ldr	r2, [pc, #112]	; (8000e9c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d107      	bne.n	8000e40 <HAL_TIM_PeriodElapsedCallback+0x20>
  {
    LED_DIO_Toggle(&hld1);
 8000e30:	481b      	ldr	r0, [pc, #108]	; (8000ea0 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000e32:	f7ff fced 	bl	8000810 <LED_DIO_Toggle>
    HAL_ADC_Start_IT(&hadc1);

#elif TASK == 6

    // Non-blocking mode #2: direct memory access
    HAL_ADC_Start_DMA(&hadc1, (uint32_t*)ADC1_DMA_BUF, ADC1_NUMBER_OF_CONV);
 8000e36:	2202      	movs	r2, #2
 8000e38:	491a      	ldr	r1, [pc, #104]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000e3a:	481b      	ldr	r0, [pc, #108]	; (8000ea8 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000e3c:	f000 fde6 	bl	8001a0c <HAL_ADC_Start_DMA>

#endif

  }
  if(htim == &htim6)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a1a      	ldr	r2, [pc, #104]	; (8000eac <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d124      	bne.n	8000e92 <HAL_TIM_PeriodElapsedCallback+0x72>
  {
    static int disp_input = 0;

    if(BTN_DIO_EdgeDetected(&hbtn1) == BTN_PRESSED_EDGE)
 8000e48:	4819      	ldr	r0, [pc, #100]	; (8000eb0 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000e4a:	f7ff fb77 	bl	800053c <BTN_DIO_EdgeDetected>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d102      	bne.n	8000e5a <HAL_TIM_PeriodElapsedCallback+0x3a>
      disp_input = 0;
 8000e54:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]

    if(BTN_DIO_EdgeDetected(&hbtn2) == BTN_PRESSED_EDGE)
 8000e5a:	4817      	ldr	r0, [pc, #92]	; (8000eb8 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000e5c:	f7ff fb6e 	bl	800053c <BTN_DIO_EdgeDetected>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d102      	bne.n	8000e6c <HAL_TIM_PeriodElapsedCallback+0x4c>
      disp_input = 1;
 8000e66:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	601a      	str	r2, [r3, #0]

    DISP_printDecUInt(&hdisp1, (int)pot_volts[disp_input]);
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a12      	ldr	r2, [pc, #72]	; (8000ebc <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	4413      	add	r3, r2
 8000e76:	edd3 7a00 	vldr	s15, [r3]
 8000e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e7e:	ee17 3a90 	vmov	r3, s15
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	4619      	mov	r1, r3
 8000e86:	480e      	ldr	r0, [pc, #56]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e88:	f7ff fc44 	bl	8000714 <DISP_printDecUInt>
    DISP_ROUTINE(&hdisp1);
 8000e8c:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000e8e:	f7ff fc77 	bl	8000780 <DISP_ROUTINE>
  }
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000170 	.word	0x20000170
 8000ea0:	20000080 	.word	0x20000080
 8000ea4:	20000160 	.word	0x20000160
 8000ea8:	200000b8 	.word	0x200000b8
 8000eac:	20000208 	.word	0x20000208
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	2000016c 	.word	0x2000016c
 8000eb8:	2000000c 	.word	0x2000000c
 8000ebc:	20000164 	.word	0x20000164
 8000ec0:	20000018 	.word	0x20000018

08000ec4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b083      	sub	sp, #12
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if(hadc == &hadc1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	4a1c      	ldr	r2, [pc, #112]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d12e      	bne.n	8000f32 <HAL_ADC_ConvCpltCallback+0x6e>
    hadc->NbrOfCurrentConversionRank++;
    if( hadc->NbrOfCurrentConversionRank == hadc->Init.NbrOfConversion )
      hadc->NbrOfCurrentConversionRank = 0;
#elif TASK == 6
    // Iterate over all conversions
    for(hadc1.NbrOfCurrentConversionRank = 0;
 8000ed4:	4b1a      	ldr	r3, [pc, #104]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
 8000eda:	e024      	b.n	8000f26 <HAL_ADC_ConvCpltCallback+0x62>
        hadc1.NbrOfCurrentConversionRank < hadc1.Init.NbrOfConversion;
        hadc1.NbrOfCurrentConversionRank++)
    {
      // Reading i-ranked conversion result from DMA buffer
      pot_volts[hadc1.NbrOfCurrentConversionRank] = ADC_REG2VOLTAGE(ADC1_DMA_BUF[hadc1.NbrOfCurrentConversionRank]);
 8000edc:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ee0:	4a18      	ldr	r2, [pc, #96]	; (8000f44 <HAL_ADC_ConvCpltCallback+0x80>)
 8000ee2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ee6:	ee07 3a90 	vmov	s15, r3
 8000eea:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000eee:	eddf 6a16 	vldr	s13, [pc, #88]	; 8000f48 <HAL_ADC_ConvCpltCallback+0x84>
 8000ef2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ef6:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8000f4c <HAL_ADC_ConvCpltCallback+0x88>
 8000efa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000efe:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000f50 <HAL_ADC_ConvCpltCallback+0x8c>
 8000f02:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000f06:	4b0e      	ldr	r3, [pc, #56]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f0a:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8000f54 <HAL_ADC_ConvCpltCallback+0x90>
 8000f0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000f12:	4a11      	ldr	r2, [pc, #68]	; (8000f58 <HAL_ADC_ConvCpltCallback+0x94>)
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	4413      	add	r3, r2
 8000f18:	edc3 7a00 	vstr	s15, [r3]
        hadc1.NbrOfCurrentConversionRank++)
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f24:	6353      	str	r3, [r2, #52]	; 0x34
        hadc1.NbrOfCurrentConversionRank < hadc1.Init.NbrOfConversion;
 8000f26:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2a:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <HAL_ADC_ConvCpltCallback+0x7c>)
 8000f2c:	69db      	ldr	r3, [r3, #28]
    for(hadc1.NbrOfCurrentConversionRank = 0;
 8000f2e:	429a      	cmp	r2, r3
 8000f30:	d3d4      	bcc.n	8000edc <HAL_ADC_ConvCpltCallback+0x18>
    }
#endif
  }
}
 8000f32:	bf00      	nop
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	200000b8 	.word	0x200000b8
 8000f44:	20000160 	.word	0x20000160
 8000f48:	457ff000 	.word	0x457ff000
 8000f4c:	40533333 	.word	0x40533333
 8000f50:	00000000 	.word	0x00000000
 8000f54:	447a0000 	.word	0x447a0000
 8000f58:	20000164 	.word	0x20000164

08000f5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f60:	f000 fba3 	bl	80016aa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f64:	f000 f81a 	bl	8000f9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f68:	f7ff fd72 	bl	8000a50 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f6c:	f000 fadc 	bl	8001528 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000f70:	f000 f968 	bl	8001244 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000f74:	f000 f918 	bl	80011a8 <MX_TIM2_Init>
  MX_DMA_Init();
 8000f78:	f7ff fd4c 	bl	8000a14 <MX_DMA_Init>
  MX_ADC1_Init();
 8000f7c:	f7ff fc54 	bl	8000828 <MX_ADC1_Init>
  MX_TIM6_Init();
 8000f80:	f000 f9b6 	bl	80012f0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000f84:	4803      	ldr	r0, [pc, #12]	; (8000f94 <main+0x38>)
 8000f86:	f003 f9bb 	bl	8004300 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim6);
 8000f8a:	4803      	ldr	r0, [pc, #12]	; (8000f98 <main+0x3c>)
 8000f8c:	f003 f9b8 	bl	8004300 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x34>
 8000f92:	bf00      	nop
 8000f94:	20000170 	.word	0x20000170
 8000f98:	20000208 	.word	0x20000208

08000f9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b094      	sub	sp, #80	; 0x50
 8000fa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fa2:	f107 0320 	add.w	r3, r7, #32
 8000fa6:	2230      	movs	r2, #48	; 0x30
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f004 feca 	bl	8005d44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fb0:	f107 030c 	add.w	r3, r7, #12
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	601a      	str	r2, [r3, #0]
 8000fb8:	605a      	str	r2, [r3, #4]
 8000fba:	609a      	str	r2, [r3, #8]
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000fc0:	f002 f82c 	bl	800301c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fc4:	4b2a      	ldr	r3, [pc, #168]	; (8001070 <SystemClock_Config+0xd4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a29      	ldr	r2, [pc, #164]	; (8001070 <SystemClock_Config+0xd4>)
 8000fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b27      	ldr	r3, [pc, #156]	; (8001070 <SystemClock_Config+0xd4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd8:	60bb      	str	r3, [r7, #8]
 8000fda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xd8>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	4a24      	ldr	r2, [pc, #144]	; (8001074 <SystemClock_Config+0xd8>)
 8000fe2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fe6:	6013      	str	r3, [r2, #0]
 8000fe8:	4b22      	ldr	r3, [pc, #136]	; (8001074 <SystemClock_Config+0xd8>)
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000ff8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000ffc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ffe:	2302      	movs	r3, #2
 8001000:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001002:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001006:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001008:	2304      	movs	r3, #4
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800100c:	23d8      	movs	r3, #216	; 0xd8
 800100e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001010:	2302      	movs	r3, #2
 8001012:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001014:	2303      	movs	r3, #3
 8001016:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001018:	f107 0320 	add.w	r3, r7, #32
 800101c:	4618      	mov	r0, r3
 800101e:	f002 f85d 	bl	80030dc <HAL_RCC_OscConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001028:	f000 f826 	bl	8001078 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800102c:	f002 f806 	bl	800303c <HAL_PWREx_EnableOverDrive>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001036:	f000 f81f 	bl	8001078 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103a:	230f      	movs	r3, #15
 800103c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103e:	2302      	movs	r3, #2
 8001040:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001042:	2300      	movs	r3, #0
 8001044:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001046:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800104c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001050:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001052:	f107 030c 	add.w	r3, r7, #12
 8001056:	2107      	movs	r1, #7
 8001058:	4618      	mov	r0, r3
 800105a:	f002 fae3 	bl	8003624 <HAL_RCC_ClockConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001064:	f000 f808 	bl	8001078 <Error_Handler>
  }
}
 8001068:	bf00      	nop
 800106a:	3750      	adds	r7, #80	; 0x50
 800106c:	46bd      	mov	sp, r7
 800106e:	bd80      	pop	{r7, pc}
 8001070:	40023800 	.word	0x40023800
 8001074:	40007000 	.word	0x40007000

08001078 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800107c:	b672      	cpsid	i
}
 800107e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001080:	e7fe      	b.n	8001080 <Error_Handler+0x8>
	...

08001084 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800108a:	4b0f      	ldr	r3, [pc, #60]	; (80010c8 <HAL_MspInit+0x44>)
 800108c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108e:	4a0e      	ldr	r2, [pc, #56]	; (80010c8 <HAL_MspInit+0x44>)
 8001090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001094:	6413      	str	r3, [r2, #64]	; 0x40
 8001096:	4b0c      	ldr	r3, [pc, #48]	; (80010c8 <HAL_MspInit+0x44>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800109e:	607b      	str	r3, [r7, #4]
 80010a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	4b09      	ldr	r3, [pc, #36]	; (80010c8 <HAL_MspInit+0x44>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	4a08      	ldr	r2, [pc, #32]	; (80010c8 <HAL_MspInit+0x44>)
 80010a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010ac:	6453      	str	r3, [r2, #68]	; 0x44
 80010ae:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_MspInit+0x44>)
 80010b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b6:	603b      	str	r3, [r7, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ba:	bf00      	nop
 80010bc:	370c      	adds	r7, #12
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40023800 	.word	0x40023800

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010d0:	e7fe      	b.n	80010d0 <NMI_Handler+0x4>

080010d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d2:	b480      	push	{r7}
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d6:	e7fe      	b.n	80010d6 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	e7fe      	b.n	80010dc <MemManage_Handler+0x4>

080010de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010de:	b480      	push	{r7}
 80010e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e2:	e7fe      	b.n	80010e2 <BusFault_Handler+0x4>

080010e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010e8:	e7fe      	b.n	80010e8 <UsageFault_Handler+0x4>

080010ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010ea:	b480      	push	{r7}
 80010ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010ee:	bf00      	nop
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr

080010f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr

08001106 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	46bd      	mov	sp, r7
 800110e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 fb04 	bl	8001724 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001124:	4802      	ldr	r0, [pc, #8]	; (8001130 <ADC_IRQHandler+0x10>)
 8001126:	f000 fb61 	bl	80017ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200000b8 	.word	0x200000b8

08001134 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001138:	4802      	ldr	r0, [pc, #8]	; (8001144 <TIM2_IRQHandler+0x10>)
 800113a:	f003 f9ff 	bl	800453c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000170 	.word	0x20000170

08001148 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800114c:	4802      	ldr	r0, [pc, #8]	; (8001158 <USART3_IRQHandler+0x10>)
 800114e:	f003 fe3b 	bl	8004dc8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000254 	.word	0x20000254

0800115c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001160:	4802      	ldr	r0, [pc, #8]	; (800116c <TIM6_DAC_IRQHandler+0x10>)
 8001162:	f003 f9eb 	bl	800453c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	20000208 	.word	0x20000208

08001170 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001174:	4802      	ldr	r0, [pc, #8]	; (8001180 <DMA2_Stream0_IRQHandler+0x10>)
 8001176:	f001 faef 	bl	8002758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	20000100 	.word	0x20000100

08001184 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <SystemInit+0x20>)
 800118a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800118e:	4a05      	ldr	r2, [pc, #20]	; (80011a4 <SystemInit+0x20>)
 8001190:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001194:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001198:	bf00      	nop
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	e000ed00 	.word	0xe000ed00

080011a8 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b088      	sub	sp, #32
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c6:	4b1d      	ldr	r3, [pc, #116]	; (800123c <MX_TIM2_Init+0x94>)
 80011c8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011cc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_TIM2_Init+0x94>)
 80011d0:	226b      	movs	r2, #107	; 0x6b
 80011d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_TIM2_Init+0x94>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 80011da:	4b18      	ldr	r3, [pc, #96]	; (800123c <MX_TIM2_Init+0x94>)
 80011dc:	4a18      	ldr	r2, [pc, #96]	; (8001240 <MX_TIM2_Init+0x98>)
 80011de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_TIM2_Init+0x94>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b15      	ldr	r3, [pc, #84]	; (800123c <MX_TIM2_Init+0x94>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ec:	4813      	ldr	r0, [pc, #76]	; (800123c <MX_TIM2_Init+0x94>)
 80011ee:	f003 f82f 	bl	8004250 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f8:	f7ff ff3e 	bl	8001078 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0310 	add.w	r3, r7, #16
 8001206:	4619      	mov	r1, r3
 8001208:	480c      	ldr	r0, [pc, #48]	; (800123c <MX_TIM2_Init+0x94>)
 800120a:	f003 fab7 	bl	800477c <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001214:	f7ff ff30 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001220:	1d3b      	adds	r3, r7, #4
 8001222:	4619      	mov	r1, r3
 8001224:	4805      	ldr	r0, [pc, #20]	; (800123c <MX_TIM2_Init+0x94>)
 8001226:	f003 fcd5 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001230:	f7ff ff22 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	3720      	adds	r7, #32
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000170 	.word	0x20000170
 8001240:	0001869f 	.word	0x0001869f

08001244 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08c      	sub	sp, #48	; 0x30
 8001248:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800124a:	f107 030c 	add.w	r3, r7, #12
 800124e:	2224      	movs	r2, #36	; 0x24
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f004 fd76 	bl	8005d44 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001258:	463b      	mov	r3, r7
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_TIM3_Init+0xa4>)
 8001264:	4a21      	ldr	r2, [pc, #132]	; (80012ec <MX_TIM3_Init+0xa8>)
 8001266:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_TIM3_Init+0xa4>)
 800126a:	2200      	movs	r2, #0
 800126c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM3_Init+0xa4>)
 8001270:	2200      	movs	r2, #0
 8001272:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 400;
 8001274:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_TIM3_Init+0xa4>)
 8001276:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800127a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM3_Init+0xa4>)
 800127e:	2200      	movs	r2, #0
 8001280:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM3_Init+0xa4>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001288:	2303      	movs	r3, #3
 800128a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001298:	230f      	movs	r3, #15
 800129a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80012a8:	230f      	movs	r3, #15
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_TIM3_Init+0xa4>)
 80012b4:	f003 f89c 	bl	80043f0 <HAL_TIM_Encoder_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80012be:	f7ff fedb 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012ca:	463b      	mov	r3, r7
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_TIM3_Init+0xa4>)
 80012d0:	f003 fc80 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80012da:	f7ff fecd 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	200001bc 	.word	0x200001bc
 80012ec:	40000400 	.word	0x40000400

080012f0 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f6:	1d3b      	adds	r3, r7, #4
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	605a      	str	r2, [r3, #4]
 80012fe:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001300:	4b14      	ldr	r3, [pc, #80]	; (8001354 <MX_TIM6_Init+0x64>)
 8001302:	4a15      	ldr	r2, [pc, #84]	; (8001358 <MX_TIM6_Init+0x68>)
 8001304:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 107;
 8001306:	4b13      	ldr	r3, [pc, #76]	; (8001354 <MX_TIM6_Init+0x64>)
 8001308:	226b      	movs	r2, #107	; 0x6b
 800130a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800130c:	4b11      	ldr	r3, [pc, #68]	; (8001354 <MX_TIM6_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 4999;
 8001312:	4b10      	ldr	r3, [pc, #64]	; (8001354 <MX_TIM6_Init+0x64>)
 8001314:	f241 3287 	movw	r2, #4999	; 0x1387
 8001318:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800131a:	4b0e      	ldr	r3, [pc, #56]	; (8001354 <MX_TIM6_Init+0x64>)
 800131c:	2200      	movs	r2, #0
 800131e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001320:	480c      	ldr	r0, [pc, #48]	; (8001354 <MX_TIM6_Init+0x64>)
 8001322:	f002 ff95 	bl	8004250 <HAL_TIM_Base_Init>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800132c:	f7ff fea4 	bl	8001078 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4805      	ldr	r0, [pc, #20]	; (8001354 <MX_TIM6_Init+0x64>)
 800133e:	f003 fc49 	bl	8004bd4 <HAL_TIMEx_MasterConfigSynchronization>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001348:	f7ff fe96 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800134c:	bf00      	nop
 800134e:	3710      	adds	r7, #16
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000208 	.word	0x20000208
 8001358:	40001000 	.word	0x40001000

0800135c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b08c      	sub	sp, #48	; 0x30
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800137c:	d14d      	bne.n	800141a <HAL_TIM_Base_MspInit+0xbe>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800137e:	4b35      	ldr	r3, [pc, #212]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	4a34      	ldr	r2, [pc, #208]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6413      	str	r3, [r2, #64]	; 0x40
 800138a:	4b32      	ldr	r3, [pc, #200]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 800138c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	61bb      	str	r3, [r7, #24]
 8001394:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001396:	4b2f      	ldr	r3, [pc, #188]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	4a2e      	ldr	r2, [pc, #184]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6313      	str	r3, [r2, #48]	; 0x30
 80013a2:	4b2c      	ldr	r3, [pc, #176]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 80013a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a6:	f003 0301 	and.w	r3, r3, #1
 80013aa:	617b      	str	r3, [r7, #20]
 80013ac:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013ae:	4b29      	ldr	r3, [pc, #164]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b2:	4a28      	ldr	r2, [pc, #160]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 80013b4:	f043 0302 	orr.w	r3, r3, #2
 80013b8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ba:	4b26      	ldr	r3, [pc, #152]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB10     ------> TIM2_CH3
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = LED_RGB_R_Pin;
 80013c6:	2320      	movs	r3, #32
 80013c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d6:	2301      	movs	r3, #1
 80013d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(LED_RGB_R_GPIO_Port, &GPIO_InitStruct);
 80013da:	f107 031c 	add.w	r3, r7, #28
 80013de:	4619      	mov	r1, r3
 80013e0:	481d      	ldr	r0, [pc, #116]	; (8001458 <HAL_TIM_Base_MspInit+0xfc>)
 80013e2:	f001 fc23 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_RGB_G_Pin|LED_RGB_B_Pin;
 80013e6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80013ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ec:	2302      	movs	r3, #2
 80013ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f4:	2300      	movs	r3, #0
 80013f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4816      	ldr	r0, [pc, #88]	; (800145c <HAL_TIM_Base_MspInit+0x100>)
 8001404:	f001 fc12 	bl	8002c2c <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	201c      	movs	r0, #28
 800140e:	f000 ffcc 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001412:	201c      	movs	r0, #28
 8001414:	f000 ffe5 	bl	80023e2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001418:	e018      	b.n	800144c <HAL_TIM_Base_MspInit+0xf0>
  else if(tim_baseHandle->Instance==TIM6)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	4a10      	ldr	r2, [pc, #64]	; (8001460 <HAL_TIM_Base_MspInit+0x104>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d113      	bne.n	800144c <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001424:	4b0b      	ldr	r3, [pc, #44]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 8001426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001428:	4a0a      	ldr	r2, [pc, #40]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 800142a:	f043 0310 	orr.w	r3, r3, #16
 800142e:	6413      	str	r3, [r2, #64]	; 0x40
 8001430:	4b08      	ldr	r3, [pc, #32]	; (8001454 <HAL_TIM_Base_MspInit+0xf8>)
 8001432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001434:	f003 0310 	and.w	r3, r3, #16
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	2036      	movs	r0, #54	; 0x36
 8001442:	f000 ffb2 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001446:	2036      	movs	r0, #54	; 0x36
 8001448:	f000 ffcb 	bl	80023e2 <HAL_NVIC_EnableIRQ>
}
 800144c:	bf00      	nop
 800144e:	3730      	adds	r7, #48	; 0x30
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800
 8001458:	40020000 	.word	0x40020000
 800145c:	40020400 	.word	0x40020400
 8001460:	40001000 	.word	0x40001000

08001464 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b08a      	sub	sp, #40	; 0x28
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800146c:	f107 0314 	add.w	r3, r7, #20
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]
 8001474:	605a      	str	r2, [r3, #4]
 8001476:	609a      	str	r2, [r3, #8]
 8001478:	60da      	str	r2, [r3, #12]
 800147a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a25      	ldr	r2, [pc, #148]	; (8001518 <HAL_TIM_Encoder_MspInit+0xb4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d143      	bne.n	800150e <HAL_TIM_Encoder_MspInit+0xaa>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001486:	4b25      	ldr	r3, [pc, #148]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800148a:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6413      	str	r3, [r2, #64]	; 0x40
 8001492:	4b22      	ldr	r3, [pc, #136]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	613b      	str	r3, [r7, #16]
 800149c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149e:	4b1f      	ldr	r3, [pc, #124]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a2:	4a1e      	ldr	r2, [pc, #120]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	; 0x30
 80014aa:	4b1c      	ldr	r3, [pc, #112]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014bc:	f043 0304 	orr.w	r3, r3, #4
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b16      	ldr	r3, [pc, #88]	; (800151c <HAL_TIM_Encoder_MspInit+0xb8>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0304 	and.w	r3, r3, #4
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = ENC_CLK_Pin;
 80014ce:	2340      	movs	r3, #64	; 0x40
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014de:	2302      	movs	r3, #2
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_CLK_GPIO_Port, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	480d      	ldr	r0, [pc, #52]	; (8001520 <HAL_TIM_Encoder_MspInit+0xbc>)
 80014ea:	f001 fb9f 	bl	8002c2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ENC_DT_Pin;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f2:	2302      	movs	r3, #2
 80014f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f6:	2300      	movs	r3, #0
 80014f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fa:	2300      	movs	r3, #0
 80014fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80014fe:	2302      	movs	r3, #2
 8001500:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ENC_DT_GPIO_Port, &GPIO_InitStruct);
 8001502:	f107 0314 	add.w	r3, r7, #20
 8001506:	4619      	mov	r1, r3
 8001508:	4806      	ldr	r0, [pc, #24]	; (8001524 <HAL_TIM_Encoder_MspInit+0xc0>)
 800150a:	f001 fb8f 	bl	8002c2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800150e:	bf00      	nop
 8001510:	3728      	adds	r7, #40	; 0x28
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40000400 	.word	0x40000400
 800151c:	40023800 	.word	0x40023800
 8001520:	40020000 	.word	0x40020000
 8001524:	40020800 	.word	0x40020800

08001528 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800152c:	4b14      	ldr	r3, [pc, #80]	; (8001580 <MX_USART3_UART_Init+0x58>)
 800152e:	4a15      	ldr	r2, [pc, #84]	; (8001584 <MX_USART3_UART_Init+0x5c>)
 8001530:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001532:	4b13      	ldr	r3, [pc, #76]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001534:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001538:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_USART3_UART_Init+0x58>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001542:	2200      	movs	r2, #0
 8001544:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001548:	2200      	movs	r2, #0
 800154a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_USART3_UART_Init+0x58>)
 800154e:	220c      	movs	r2, #12
 8001550:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001554:	2200      	movs	r2, #0
 8001556:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_USART3_UART_Init+0x58>)
 800155a:	2200      	movs	r2, #0
 800155c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001560:	2200      	movs	r2, #0
 8001562:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001564:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_USART3_UART_Init+0x58>)
 8001566:	2200      	movs	r2, #0
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800156a:	4805      	ldr	r0, [pc, #20]	; (8001580 <MX_USART3_UART_Init+0x58>)
 800156c:	f003 fbde 	bl	8004d2c <HAL_UART_Init>
 8001570:	4603      	mov	r3, r0
 8001572:	2b00      	cmp	r3, #0
 8001574:	d001      	beq.n	800157a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001576:	f7ff fd7f 	bl	8001078 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000254 	.word	0x20000254
 8001584:	40004800 	.word	0x40004800

08001588 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b0aa      	sub	sp, #168	; 0xa8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001590:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001594:	2200      	movs	r2, #0
 8001596:	601a      	str	r2, [r3, #0]
 8001598:	605a      	str	r2, [r3, #4]
 800159a:	609a      	str	r2, [r3, #8]
 800159c:	60da      	str	r2, [r3, #12]
 800159e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015a0:	f107 0310 	add.w	r3, r7, #16
 80015a4:	2284      	movs	r2, #132	; 0x84
 80015a6:	2100      	movs	r1, #0
 80015a8:	4618      	mov	r0, r3
 80015aa:	f004 fbcb 	bl	8005d44 <memset>
  if(uartHandle->Instance==USART3)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_UART_MspInit+0xc4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d144      	bne.n	8001642 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80015b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015bc:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80015be:	2310      	movs	r3, #16
 80015c0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015c2:	f107 0310 	add.w	r3, r7, #16
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 fa52 	bl	8003a70 <HAL_RCCEx_PeriphCLKConfig>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80015d2:	f7ff fd51 	bl	8001078 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015d6:	4b1e      	ldr	r3, [pc, #120]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	4a1d      	ldr	r2, [pc, #116]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e0:	6413      	str	r3, [r2, #64]	; 0x40
 80015e2:	4b1b      	ldr	r3, [pc, #108]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ee:	4b18      	ldr	r3, [pc, #96]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a17      	ldr	r2, [pc, #92]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015f4:	f043 0308 	orr.w	r3, r3, #8
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b15      	ldr	r3, [pc, #84]	; (8001650 <HAL_UART_MspInit+0xc8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0308 	and.w	r3, r3, #8
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160e:	2302      	movs	r3, #2
 8001610:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001614:	2300      	movs	r3, #0
 8001616:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001620:	2307      	movs	r3, #7
 8001622:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001626:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800162a:	4619      	mov	r1, r3
 800162c:	4809      	ldr	r0, [pc, #36]	; (8001654 <HAL_UART_MspInit+0xcc>)
 800162e:	f001 fafd 	bl	8002c2c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001632:	2200      	movs	r2, #0
 8001634:	2100      	movs	r1, #0
 8001636:	2027      	movs	r0, #39	; 0x27
 8001638:	f000 feb7 	bl	80023aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800163c:	2027      	movs	r0, #39	; 0x27
 800163e:	f000 fed0 	bl	80023e2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001642:	bf00      	nop
 8001644:	37a8      	adds	r7, #168	; 0xa8
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	40004800 	.word	0x40004800
 8001650:	40023800 	.word	0x40023800
 8001654:	40020c00 	.word	0x40020c00

08001658 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001658:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001690 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800165e:	490e      	ldr	r1, [pc, #56]	; (8001698 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001660:	4a0e      	ldr	r2, [pc, #56]	; (800169c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001664:	e002      	b.n	800166c <LoopCopyDataInit>

08001666 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001666:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001668:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166a:	3304      	adds	r3, #4

0800166c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800166c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800166e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001670:	d3f9      	bcc.n	8001666 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001672:	4a0b      	ldr	r2, [pc, #44]	; (80016a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001674:	4c0b      	ldr	r4, [pc, #44]	; (80016a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001676:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001678:	e001      	b.n	800167e <LoopFillZerobss>

0800167a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800167c:	3204      	adds	r2, #4

0800167e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800167e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001680:	d3fb      	bcc.n	800167a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001682:	f7ff fd7f 	bl	8001184 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001686:	f004 fb39 	bl	8005cfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800168a:	f7ff fc67 	bl	8000f5c <main>
  bx  lr    
 800168e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001690:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001694:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001698:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 800169c:	08005da8 	.word	0x08005da8
  ldr r2, =_sbss
 80016a0:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 80016a4:	200002e0 	.word	0x200002e0

080016a8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016a8:	e7fe      	b.n	80016a8 <CAN1_RX0_IRQHandler>

080016aa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016aa:	b580      	push	{r7, lr}
 80016ac:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016ae:	2003      	movs	r0, #3
 80016b0:	f000 fe70 	bl	8002394 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016b4:	2000      	movs	r0, #0
 80016b6:	f000 f805 	bl	80016c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ba:	f7ff fce3 	bl	8001084 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016be:	2300      	movs	r3, #0
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016cc:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_InitTick+0x54>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_InitTick+0x58>)
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4619      	mov	r1, r3
 80016d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016da:	fbb3 f3f1 	udiv	r3, r3, r1
 80016de:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 fe8b 	bl	80023fe <HAL_SYSTICK_Config>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e00e      	b.n	8001710 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	2b0f      	cmp	r3, #15
 80016f6:	d80a      	bhi.n	800170e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016f8:	2200      	movs	r2, #0
 80016fa:	6879      	ldr	r1, [r7, #4]
 80016fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001700:	f000 fe53 	bl	80023aa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001704:	4a06      	ldr	r2, [pc, #24]	; (8001720 <HAL_InitTick+0x5c>)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e000      	b.n	8001710 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800170e:	2301      	movs	r3, #1
}
 8001710:	4618      	mov	r0, r3
 8001712:	3708      	adds	r7, #8
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	2000008c 	.word	0x2000008c
 800171c:	20000094 	.word	0x20000094
 8001720:	20000090 	.word	0x20000090

08001724 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001728:	4b06      	ldr	r3, [pc, #24]	; (8001744 <HAL_IncTick+0x20>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	4b06      	ldr	r3, [pc, #24]	; (8001748 <HAL_IncTick+0x24>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4413      	add	r3, r2
 8001734:	4a04      	ldr	r2, [pc, #16]	; (8001748 <HAL_IncTick+0x24>)
 8001736:	6013      	str	r3, [r2, #0]
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	20000094 	.word	0x20000094
 8001748:	200002dc 	.word	0x200002dc

0800174c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  return uwTick;
 8001750:	4b03      	ldr	r3, [pc, #12]	; (8001760 <HAL_GetTick+0x14>)
 8001752:	681b      	ldr	r3, [r3, #0]
}
 8001754:	4618      	mov	r0, r3
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	200002dc 	.word	0x200002dc

08001764 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800176c:	2300      	movs	r3, #0
 800176e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e031      	b.n	80017de <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	2b00      	cmp	r3, #0
 8001780:	d109      	bne.n	8001796 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001782:	6878      	ldr	r0, [r7, #4]
 8001784:	f7ff f8b0 	bl	80008e8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	f003 0310 	and.w	r3, r3, #16
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d116      	bne.n	80017d0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017a6:	4b10      	ldr	r3, [pc, #64]	; (80017e8 <HAL_ADC_Init+0x84>)
 80017a8:	4013      	ands	r3, r2
 80017aa:	f043 0202 	orr.w	r2, r3, #2
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 fb98 	bl	8001ee8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	2200      	movs	r2, #0
 80017bc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c2:	f023 0303 	bic.w	r3, r3, #3
 80017c6:	f043 0201 	orr.w	r2, r3, #1
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	641a      	str	r2, [r3, #64]	; 0x40
 80017ce:	e001      	b.n	80017d4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	2200      	movs	r2, #0
 80017d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80017dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80017de:	4618      	mov	r0, r3
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}
 80017e6:	bf00      	nop
 80017e8:	ffffeefd 	.word	0xffffeefd

080017ec <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b086      	sub	sp, #24
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80017f4:	2300      	movs	r3, #0
 80017f6:	617b      	str	r3, [r7, #20]
 80017f8:	2300      	movs	r3, #0
 80017fa:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	f003 0320 	and.w	r3, r3, #32
 800181a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d049      	beq.n	80018b6 <HAL_ADC_IRQHandler+0xca>
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d046      	beq.n	80018b6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182c:	f003 0310 	and.w	r3, r3, #16
 8001830:	2b00      	cmp	r3, #0
 8001832:	d105      	bne.n	8001840 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001838:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800184a:	2b00      	cmp	r3, #0
 800184c:	d12b      	bne.n	80018a6 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001852:	2b00      	cmp	r3, #0
 8001854:	d127      	bne.n	80018a6 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800186e:	2b00      	cmp	r3, #0
 8001870:	d119      	bne.n	80018a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	685a      	ldr	r2, [r3, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0220 	bic.w	r2, r2, #32
 8001880:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001886:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001892:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189e:	f043 0201 	orr.w	r2, r3, #1
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff fb0c 	bl	8000ec4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f06f 0212 	mvn.w	r2, #18
 80018b4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	f003 0304 	and.w	r3, r3, #4
 80018bc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80018be:	68bb      	ldr	r3, [r7, #8]
 80018c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018c4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d057      	beq.n	800197c <HAL_ADC_IRQHandler+0x190>
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d054      	beq.n	800197c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	f003 0310 	and.w	r3, r3, #16
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d105      	bne.n	80018ea <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d139      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018fe:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001902:	2b00      	cmp	r3, #0
 8001904:	d006      	beq.n	8001914 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12b      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800191e:	2b00      	cmp	r3, #0
 8001920:	d124      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800192c:	2b00      	cmp	r3, #0
 800192e:	d11d      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001934:	2b00      	cmp	r3, #0
 8001936:	d119      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001946:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f000 fc37 	bl	80021e0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f06f 020c 	mvn.w	r2, #12
 800197a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f003 0301 	and.w	r3, r3, #1
 8001982:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800198a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d017      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x1d6>
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d014      	beq.n	80019c2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d10d      	bne.n	80019c2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019aa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 f92e 	bl	8001c14 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f06f 0201 	mvn.w	r2, #1
 80019c0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f003 0320 	and.w	r3, r3, #32
 80019c8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80019ca:	68bb      	ldr	r3, [r7, #8]
 80019cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019d0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d015      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x218>
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d012      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019e2:	f043 0202 	orr.w	r2, r3, #2
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	f06f 0220 	mvn.w	r2, #32
 80019f2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 f917 	bl	8001c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f06f 0220 	mvn.w	r2, #32
 8001a02:	601a      	str	r2, [r3, #0]
  }
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b086      	sub	sp, #24
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d101      	bne.n	8001a2a <HAL_ADC_Start_DMA+0x1e>
 8001a26:	2302      	movs	r3, #2
 8001a28:	e0d4      	b.n	8001bd4 <HAL_ADC_Start_DMA+0x1c8>
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d018      	beq.n	8001a72 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	689a      	ldr	r2, [r3, #8]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a50:	4b62      	ldr	r3, [pc, #392]	; (8001bdc <HAL_ADC_Start_DMA+0x1d0>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a62      	ldr	r2, [pc, #392]	; (8001be0 <HAL_ADC_Start_DMA+0x1d4>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9a      	lsrs	r2, r3, #18
 8001a5c:	4613      	mov	r3, r2
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	4413      	add	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a64:	e002      	b.n	8001a6c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001a66:	697b      	ldr	r3, [r7, #20]
 8001a68:	3b01      	subs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d1f9      	bne.n	8001a66 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	689b      	ldr	r3, [r3, #8]
 8001a78:	f003 0301 	and.w	r3, r3, #1
 8001a7c:	2b01      	cmp	r3, #1
 8001a7e:	f040 809c 	bne.w	8001bba <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001a86:	4b57      	ldr	r3, [pc, #348]	; (8001be4 <HAL_ADC_Start_DMA+0x1d8>)
 8001a88:	4013      	ands	r3, r2
 8001a8a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d007      	beq.n	8001ab0 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001aa8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ab8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001abc:	d106      	bne.n	8001acc <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac2:	f023 0206 	bic.w	r2, r3, #6
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	645a      	str	r2, [r3, #68]	; 0x44
 8001aca:	e002      	b.n	8001ad2 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ade:	4a42      	ldr	r2, [pc, #264]	; (8001be8 <HAL_ADC_Start_DMA+0x1dc>)
 8001ae0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	4a41      	ldr	r2, [pc, #260]	; (8001bec <HAL_ADC_Start_DMA+0x1e0>)
 8001ae8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aee:	4a40      	ldr	r2, [pc, #256]	; (8001bf0 <HAL_ADC_Start_DMA+0x1e4>)
 8001af0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001afa:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	685a      	ldr	r2, [r3, #4]
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001b0a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	689a      	ldr	r2, [r3, #8]
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001b1a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	334c      	adds	r3, #76	; 0x4c
 8001b26:	4619      	mov	r1, r3
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	f000 fd22 	bl	8002574 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001b30:	4b30      	ldr	r3, [pc, #192]	; (8001bf4 <HAL_ADC_Start_DMA+0x1e8>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10f      	bne.n	8001b5c <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d143      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	689a      	ldr	r2, [r3, #8]
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b58:	609a      	str	r2, [r3, #8]
 8001b5a:	e03a      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a25      	ldr	r2, [pc, #148]	; (8001bf8 <HAL_ADC_Start_DMA+0x1ec>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d10e      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x178>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689b      	ldr	r3, [r3, #8]
 8001b6c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d107      	bne.n	8001b84 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	689a      	ldr	r2, [r3, #8]
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b82:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001b84:	4b1b      	ldr	r3, [pc, #108]	; (8001bf4 <HAL_ADC_Start_DMA+0x1e8>)
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0310 	and.w	r3, r3, #16
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d120      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_ADC_Start_DMA+0x1f0>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d11b      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d114      	bne.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	689a      	ldr	r2, [r3, #8]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	e00b      	b.n	8001bd2 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	f043 0210 	orr.w	r2, r3, #16
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f043 0201 	orr.w	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001bd2:	2300      	movs	r3, #0
}
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	3718      	adds	r7, #24
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000008c 	.word	0x2000008c
 8001be0:	431bde83 	.word	0x431bde83
 8001be4:	fffff8fe 	.word	0xfffff8fe
 8001be8:	080020dd 	.word	0x080020dd
 8001bec:	08002197 	.word	0x08002197
 8001bf0:	080021b3 	.word	0x080021b3
 8001bf4:	40012300 	.word	0x40012300
 8001bf8:	40012000 	.word	0x40012000
 8001bfc:	40012200 	.word	0x40012200

08001c00 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001c08:	bf00      	nop
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001c1c:	bf00      	nop
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d101      	bne.n	8001c58 <HAL_ADC_ConfigChannel+0x1c>
 8001c54:	2302      	movs	r3, #2
 8001c56:	e136      	b.n	8001ec6 <HAL_ADC_ConfigChannel+0x28a>
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2201      	movs	r2, #1
 8001c5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	2b09      	cmp	r3, #9
 8001c66:	d93a      	bls.n	8001cde <HAL_ADC_ConfigChannel+0xa2>
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001c70:	d035      	beq.n	8001cde <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	68d9      	ldr	r1, [r3, #12]
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	b29b      	uxth	r3, r3
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4613      	mov	r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4413      	add	r3, r2
 8001c86:	3b1e      	subs	r3, #30
 8001c88:	2207      	movs	r2, #7
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43da      	mvns	r2, r3
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	400a      	ands	r2, r1
 8001c96:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a8d      	ldr	r2, [pc, #564]	; (8001ed4 <HAL_ADC_ConfigChannel+0x298>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d10a      	bne.n	8001cb8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	68d9      	ldr	r1, [r3, #12]
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	061a      	lsls	r2, r3, #24
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	430a      	orrs	r2, r1
 8001cb4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cb6:	e035      	b.n	8001d24 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68d9      	ldr	r1, [r3, #12]
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	689a      	ldr	r2, [r3, #8]
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	4618      	mov	r0, r3
 8001cca:	4603      	mov	r3, r0
 8001ccc:	005b      	lsls	r3, r3, #1
 8001cce:	4403      	add	r3, r0
 8001cd0:	3b1e      	subs	r3, #30
 8001cd2:	409a      	lsls	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cdc:	e022      	b.n	8001d24 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	6919      	ldr	r1, [r3, #16]
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4613      	mov	r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4413      	add	r3, r2
 8001cf2:	2207      	movs	r2, #7
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43da      	mvns	r2, r3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	400a      	ands	r2, r1
 8001d00:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	6919      	ldr	r1, [r3, #16]
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	689a      	ldr	r2, [r3, #8]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	b29b      	uxth	r3, r3
 8001d12:	4618      	mov	r0, r3
 8001d14:	4603      	mov	r3, r0
 8001d16:	005b      	lsls	r3, r3, #1
 8001d18:	4403      	add	r3, r0
 8001d1a:	409a      	lsls	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	430a      	orrs	r2, r1
 8001d22:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b06      	cmp	r3, #6
 8001d2a:	d824      	bhi.n	8001d76 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	4613      	mov	r3, r2
 8001d38:	009b      	lsls	r3, r3, #2
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3b05      	subs	r3, #5
 8001d3e:	221f      	movs	r2, #31
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43da      	mvns	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685a      	ldr	r2, [r3, #4]
 8001d60:	4613      	mov	r3, r2
 8001d62:	009b      	lsls	r3, r3, #2
 8001d64:	4413      	add	r3, r2
 8001d66:	3b05      	subs	r3, #5
 8001d68:	fa00 f203 	lsl.w	r2, r0, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	635a      	str	r2, [r3, #52]	; 0x34
 8001d74:	e04c      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b0c      	cmp	r3, #12
 8001d7c:	d824      	bhi.n	8001dc8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4613      	mov	r3, r2
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	4413      	add	r3, r2
 8001d8e:	3b23      	subs	r3, #35	; 0x23
 8001d90:	221f      	movs	r2, #31
 8001d92:	fa02 f303 	lsl.w	r3, r2, r3
 8001d96:	43da      	mvns	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	400a      	ands	r2, r1
 8001d9e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	b29b      	uxth	r3, r3
 8001dac:	4618      	mov	r0, r3
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	685a      	ldr	r2, [r3, #4]
 8001db2:	4613      	mov	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4413      	add	r3, r2
 8001db8:	3b23      	subs	r3, #35	; 0x23
 8001dba:	fa00 f203 	lsl.w	r2, r0, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	631a      	str	r2, [r3, #48]	; 0x30
 8001dc6:	e023      	b.n	8001e10 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b41      	subs	r3, #65	; 0x41
 8001dda:	221f      	movs	r2, #31
 8001ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8001de0:	43da      	mvns	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	400a      	ands	r2, r1
 8001de8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	b29b      	uxth	r3, r3
 8001df6:	4618      	mov	r0, r3
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b41      	subs	r3, #65	; 0x41
 8001e04:	fa00 f203 	lsl.w	r2, r0, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	430a      	orrs	r2, r1
 8001e0e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a30      	ldr	r2, [pc, #192]	; (8001ed8 <HAL_ADC_ConfigChannel+0x29c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d10a      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1f4>
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001e22:	d105      	bne.n	8001e30 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001e24:	4b2d      	ldr	r3, [pc, #180]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e26:	685b      	ldr	r3, [r3, #4]
 8001e28:	4a2c      	ldr	r2, [pc, #176]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e2a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001e2e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a28      	ldr	r2, [pc, #160]	; (8001ed8 <HAL_ADC_ConfigChannel+0x29c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d10f      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x21e>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	2b12      	cmp	r3, #18
 8001e40:	d10b      	bne.n	8001e5a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001e42:	4b26      	ldr	r3, [pc, #152]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	4a25      	ldr	r2, [pc, #148]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e48:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001e4c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001e4e:	4b23      	ldr	r3, [pc, #140]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	4a22      	ldr	r2, [pc, #136]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001e58:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4a1e      	ldr	r2, [pc, #120]	; (8001ed8 <HAL_ADC_ConfigChannel+0x29c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d12b      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x280>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a1a      	ldr	r2, [pc, #104]	; (8001ed4 <HAL_ADC_ConfigChannel+0x298>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d003      	beq.n	8001e76 <HAL_ADC_ConfigChannel+0x23a>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2b11      	cmp	r3, #17
 8001e74:	d122      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001e76:	4b19      	ldr	r3, [pc, #100]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	4a18      	ldr	r2, [pc, #96]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e7c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001e80:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_ADC_ConfigChannel+0x2a0>)
 8001e88:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001e8c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a10      	ldr	r2, [pc, #64]	; (8001ed4 <HAL_ADC_ConfigChannel+0x298>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d111      	bne.n	8001ebc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001e98:	4b11      	ldr	r3, [pc, #68]	; (8001ee0 <HAL_ADC_ConfigChannel+0x2a4>)
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a11      	ldr	r2, [pc, #68]	; (8001ee4 <HAL_ADC_ConfigChannel+0x2a8>)
 8001e9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ea2:	0c9a      	lsrs	r2, r3, #18
 8001ea4:	4613      	mov	r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	4413      	add	r3, r2
 8001eaa:	005b      	lsls	r3, r3, #1
 8001eac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eae:	e002      	b.n	8001eb6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f9      	bne.n	8001eb0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001ec4:	2300      	movs	r3, #0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3714      	adds	r7, #20
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	10000012 	.word	0x10000012
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	40012300 	.word	0x40012300
 8001ee0:	2000008c 	.word	0x2000008c
 8001ee4:	431bde83 	.word	0x431bde83

08001ee8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	b083      	sub	sp, #12
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001ef0:	4b78      	ldr	r3, [pc, #480]	; (80020d4 <ADC_Init+0x1ec>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	4a77      	ldr	r2, [pc, #476]	; (80020d4 <ADC_Init+0x1ec>)
 8001ef6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001efa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001efc:	4b75      	ldr	r3, [pc, #468]	; (80020d4 <ADC_Init+0x1ec>)
 8001efe:	685a      	ldr	r2, [r3, #4]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	4973      	ldr	r1, [pc, #460]	; (80020d4 <ADC_Init+0x1ec>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	6859      	ldr	r1, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	021a      	lsls	r2, r3, #8
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	430a      	orrs	r2, r1
 8001f2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	6859      	ldr	r1, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689a      	ldr	r2, [r3, #8]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689a      	ldr	r2, [r3, #8]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	6899      	ldr	r1, [r3, #8]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68da      	ldr	r2, [r3, #12]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f76:	4a58      	ldr	r2, [pc, #352]	; (80020d8 <ADC_Init+0x1f0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d022      	beq.n	8001fc2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	689a      	ldr	r2, [r3, #8]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001f8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	6899      	ldr	r1, [r3, #8]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	689a      	ldr	r2, [r3, #8]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	6899      	ldr	r1, [r3, #8]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	430a      	orrs	r2, r1
 8001fbe:	609a      	str	r2, [r3, #8]
 8001fc0:	e00f      	b.n	8001fe2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689a      	ldr	r2, [r3, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	689a      	ldr	r2, [r3, #8]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001fe0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 0202 	bic.w	r2, r2, #2
 8001ff0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	6899      	ldr	r1, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	699b      	ldr	r3, [r3, #24]
 8001ffc:	005a      	lsls	r2, r3, #1
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	430a      	orrs	r2, r1
 8002004:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 3020 	ldrb.w	r3, [r3, #32]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d01b      	beq.n	8002048 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	685a      	ldr	r2, [r3, #4]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800201e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	685a      	ldr	r2, [r3, #4]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800202e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203a:	3b01      	subs	r3, #1
 800203c:	035a      	lsls	r2, r3, #13
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	605a      	str	r2, [r3, #4]
 8002046:	e007      	b.n	8002058 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002056:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	69db      	ldr	r3, [r3, #28]
 8002072:	3b01      	subs	r3, #1
 8002074:	051a      	lsls	r2, r3, #20
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	689a      	ldr	r2, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800208c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	6899      	ldr	r1, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800209a:	025a      	lsls	r2, r3, #9
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	430a      	orrs	r2, r1
 80020a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	6899      	ldr	r1, [r3, #8]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	029a      	lsls	r2, r3, #10
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	430a      	orrs	r2, r1
 80020c6:	609a      	str	r2, [r3, #8]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	40012300 	.word	0x40012300
 80020d8:	0f000001 	.word	0x0f000001

080020dc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d13c      	bne.n	8002170 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fa:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800210c:	2b00      	cmp	r3, #0
 800210e:	d12b      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002114:	2b00      	cmp	r3, #0
 8002116:	d127      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002122:	2b00      	cmp	r3, #0
 8002124:	d006      	beq.n	8002134 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002130:	2b00      	cmp	r3, #0
 8002132:	d119      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	685a      	ldr	r2, [r3, #4]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f022 0220 	bic.w	r2, r2, #32
 8002142:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002154:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002158:	2b00      	cmp	r3, #0
 800215a:	d105      	bne.n	8002168 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002160:	f043 0201 	orr.w	r2, r3, #1
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002168:	68f8      	ldr	r0, [r7, #12]
 800216a:	f7fe feab 	bl	8000ec4 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800216e:	e00e      	b.n	800218e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	d003      	beq.n	8002184 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fd53 	bl	8001c28 <HAL_ADC_ErrorCallback>
}
 8002182:	e004      	b.n	800218e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	4798      	blx	r3
}
 800218e:	bf00      	nop
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}

08002196 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002196:	b580      	push	{r7, lr}
 8002198:	b084      	sub	sp, #16
 800219a:	af00      	add	r7, sp, #0
 800219c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021a2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fd2b 	bl	8001c00 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b084      	sub	sp, #16
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021be:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	2240      	movs	r2, #64	; 0x40
 80021c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ca:	f043 0204 	orr.w	r2, r3, #4
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80021d2:	68f8      	ldr	r0, [r7, #12]
 80021d4:	f7ff fd28 	bl	8001c28 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80021d8:	bf00      	nop
 80021da:	3710      	adds	r7, #16
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80021e8:	bf00      	nop
 80021ea:	370c      	adds	r7, #12
 80021ec:	46bd      	mov	sp, r7
 80021ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f2:	4770      	bx	lr

080021f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002204:	4b0b      	ldr	r3, [pc, #44]	; (8002234 <__NVIC_SetPriorityGrouping+0x40>)
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800220a:	68ba      	ldr	r2, [r7, #8]
 800220c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002210:	4013      	ands	r3, r2
 8002212:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800221c:	4b06      	ldr	r3, [pc, #24]	; (8002238 <__NVIC_SetPriorityGrouping+0x44>)
 800221e:	4313      	orrs	r3, r2
 8002220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002222:	4a04      	ldr	r2, [pc, #16]	; (8002234 <__NVIC_SetPriorityGrouping+0x40>)
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	60d3      	str	r3, [r2, #12]
}
 8002228:	bf00      	nop
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000ed00 	.word	0xe000ed00
 8002238:	05fa0000 	.word	0x05fa0000

0800223c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002240:	4b04      	ldr	r3, [pc, #16]	; (8002254 <__NVIC_GetPriorityGrouping+0x18>)
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	0a1b      	lsrs	r3, r3, #8
 8002246:	f003 0307 	and.w	r3, r3, #7
}
 800224a:	4618      	mov	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002266:	2b00      	cmp	r3, #0
 8002268:	db0b      	blt.n	8002282 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800226a:	79fb      	ldrb	r3, [r7, #7]
 800226c:	f003 021f 	and.w	r2, r3, #31
 8002270:	4907      	ldr	r1, [pc, #28]	; (8002290 <__NVIC_EnableIRQ+0x38>)
 8002272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002276:	095b      	lsrs	r3, r3, #5
 8002278:	2001      	movs	r0, #1
 800227a:	fa00 f202 	lsl.w	r2, r0, r2
 800227e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002282:	bf00      	nop
 8002284:	370c      	adds	r7, #12
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	e000e100 	.word	0xe000e100

08002294 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	4603      	mov	r3, r0
 800229c:	6039      	str	r1, [r7, #0]
 800229e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	db0a      	blt.n	80022be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	490c      	ldr	r1, [pc, #48]	; (80022e0 <__NVIC_SetPriority+0x4c>)
 80022ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b2:	0112      	lsls	r2, r2, #4
 80022b4:	b2d2      	uxtb	r2, r2
 80022b6:	440b      	add	r3, r1
 80022b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022bc:	e00a      	b.n	80022d4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	b2da      	uxtb	r2, r3
 80022c2:	4908      	ldr	r1, [pc, #32]	; (80022e4 <__NVIC_SetPriority+0x50>)
 80022c4:	79fb      	ldrb	r3, [r7, #7]
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	3b04      	subs	r3, #4
 80022cc:	0112      	lsls	r2, r2, #4
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	440b      	add	r3, r1
 80022d2:	761a      	strb	r2, [r3, #24]
}
 80022d4:	bf00      	nop
 80022d6:	370c      	adds	r7, #12
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr
 80022e0:	e000e100 	.word	0xe000e100
 80022e4:	e000ed00 	.word	0xe000ed00

080022e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	f1c3 0307 	rsb	r3, r3, #7
 8002302:	2b04      	cmp	r3, #4
 8002304:	bf28      	it	cs
 8002306:	2304      	movcs	r3, #4
 8002308:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	3304      	adds	r3, #4
 800230e:	2b06      	cmp	r3, #6
 8002310:	d902      	bls.n	8002318 <NVIC_EncodePriority+0x30>
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	3b03      	subs	r3, #3
 8002316:	e000      	b.n	800231a <NVIC_EncodePriority+0x32>
 8002318:	2300      	movs	r3, #0
 800231a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800231c:	f04f 32ff 	mov.w	r2, #4294967295
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	43da      	mvns	r2, r3
 8002328:	68bb      	ldr	r3, [r7, #8]
 800232a:	401a      	ands	r2, r3
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002330:	f04f 31ff 	mov.w	r1, #4294967295
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	fa01 f303 	lsl.w	r3, r1, r3
 800233a:	43d9      	mvns	r1, r3
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002340:	4313      	orrs	r3, r2
         );
}
 8002342:	4618      	mov	r0, r3
 8002344:	3724      	adds	r7, #36	; 0x24
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	3b01      	subs	r3, #1
 800235c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002360:	d301      	bcc.n	8002366 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002362:	2301      	movs	r3, #1
 8002364:	e00f      	b.n	8002386 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002366:	4a0a      	ldr	r2, [pc, #40]	; (8002390 <SysTick_Config+0x40>)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3b01      	subs	r3, #1
 800236c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800236e:	210f      	movs	r1, #15
 8002370:	f04f 30ff 	mov.w	r0, #4294967295
 8002374:	f7ff ff8e 	bl	8002294 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002378:	4b05      	ldr	r3, [pc, #20]	; (8002390 <SysTick_Config+0x40>)
 800237a:	2200      	movs	r2, #0
 800237c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800237e:	4b04      	ldr	r3, [pc, #16]	; (8002390 <SysTick_Config+0x40>)
 8002380:	2207      	movs	r2, #7
 8002382:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002384:	2300      	movs	r3, #0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	e000e010 	.word	0xe000e010

08002394 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800239c:	6878      	ldr	r0, [r7, #4]
 800239e:	f7ff ff29 	bl	80021f4 <__NVIC_SetPriorityGrouping>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b086      	sub	sp, #24
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	4603      	mov	r3, r0
 80023b2:	60b9      	str	r1, [r7, #8]
 80023b4:	607a      	str	r2, [r7, #4]
 80023b6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023b8:	2300      	movs	r3, #0
 80023ba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023bc:	f7ff ff3e 	bl	800223c <__NVIC_GetPriorityGrouping>
 80023c0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	68b9      	ldr	r1, [r7, #8]
 80023c6:	6978      	ldr	r0, [r7, #20]
 80023c8:	f7ff ff8e 	bl	80022e8 <NVIC_EncodePriority>
 80023cc:	4602      	mov	r2, r0
 80023ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023d2:	4611      	mov	r1, r2
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff ff5d 	bl	8002294 <__NVIC_SetPriority>
}
 80023da:	bf00      	nop
 80023dc:	3718      	adds	r7, #24
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}

080023e2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023e2:	b580      	push	{r7, lr}
 80023e4:	b082      	sub	sp, #8
 80023e6:	af00      	add	r7, sp, #0
 80023e8:	4603      	mov	r3, r0
 80023ea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80023ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff31 	bl	8002258 <__NVIC_EnableIRQ>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f7ff ffa2 	bl	8002350 <SysTick_Config>
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3708      	adds	r7, #8
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
	...

08002418 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b086      	sub	sp, #24
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002420:	2300      	movs	r3, #0
 8002422:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002424:	f7ff f992 	bl	800174c <HAL_GetTick>
 8002428:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d101      	bne.n	8002434 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002430:	2301      	movs	r3, #1
 8002432:	e099      	b.n	8002568 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2202      	movs	r2, #2
 8002438:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2200      	movs	r2, #0
 8002440:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002454:	e00f      	b.n	8002476 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002456:	f7ff f979 	bl	800174c <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b05      	cmp	r3, #5
 8002462:	d908      	bls.n	8002476 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2220      	movs	r2, #32
 8002468:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2203      	movs	r2, #3
 800246e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e078      	b.n	8002568 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1e8      	bne.n	8002456 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	4b38      	ldr	r3, [pc, #224]	; (8002570 <HAL_DMA_Init+0x158>)
 8002490:	4013      	ands	r3, r2
 8002492:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685a      	ldr	r2, [r3, #4]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80024ae:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80024ba:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6a1b      	ldr	r3, [r3, #32]
 80024c0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80024c2:	697a      	ldr	r2, [r7, #20]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	2b04      	cmp	r3, #4
 80024ce:	d107      	bne.n	80024e0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	4313      	orrs	r3, r2
 80024da:	697a      	ldr	r2, [r7, #20]
 80024dc:	4313      	orrs	r3, r2
 80024de:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	697a      	ldr	r2, [r7, #20]
 80024e6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f023 0307 	bic.w	r3, r3, #7
 80024f6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	697a      	ldr	r2, [r7, #20]
 80024fe:	4313      	orrs	r3, r2
 8002500:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002506:	2b04      	cmp	r3, #4
 8002508:	d117      	bne.n	800253a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	4313      	orrs	r3, r2
 8002512:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002518:	2b00      	cmp	r3, #0
 800251a:	d00e      	beq.n	800253a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fb09 	bl	8002b34 <DMA_CheckFifoParam>
 8002522:	4603      	mov	r3, r0
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2240      	movs	r2, #64	; 0x40
 800252c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002536:	2301      	movs	r3, #1
 8002538:	e016      	b.n	8002568 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002542:	6878      	ldr	r0, [r7, #4]
 8002544:	f000 fac0 	bl	8002ac8 <DMA_CalcBaseAndBitshift>
 8002548:	4603      	mov	r3, r0
 800254a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002550:	223f      	movs	r2, #63	; 0x3f
 8002552:	409a      	lsls	r2, r3
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2201      	movs	r2, #1
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3718      	adds	r7, #24
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	f010803f 	.word	0xf010803f

08002574 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b086      	sub	sp, #24
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
 8002580:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002582:	2300      	movs	r3, #0
 8002584:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800258a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002592:	2b01      	cmp	r3, #1
 8002594:	d101      	bne.n	800259a <HAL_DMA_Start_IT+0x26>
 8002596:	2302      	movs	r3, #2
 8002598:	e048      	b.n	800262c <HAL_DMA_Start_IT+0xb8>
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	2201      	movs	r2, #1
 800259e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025a8:	b2db      	uxtb	r3, r3
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d137      	bne.n	800261e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2202      	movs	r2, #2
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	68b9      	ldr	r1, [r7, #8]
 80025c2:	68f8      	ldr	r0, [r7, #12]
 80025c4:	f000 fa52 	bl	8002a6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025cc:	223f      	movs	r2, #63	; 0x3f
 80025ce:	409a      	lsls	r2, r3
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f042 0216 	orr.w	r2, r2, #22
 80025e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80025f2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d007      	beq.n	800260c <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f042 0208 	orr.w	r2, r2, #8
 800260a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	681a      	ldr	r2, [r3, #0]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f042 0201 	orr.w	r2, r2, #1
 800261a:	601a      	str	r2, [r3, #0]
 800261c:	e005      	b.n	800262a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002626:	2302      	movs	r3, #2
 8002628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800262a:	7dfb      	ldrb	r3, [r7, #23]
}
 800262c:	4618      	mov	r0, r3
 800262e:	3718      	adds	r7, #24
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002640:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002642:	f7ff f883 	bl	800174c <HAL_GetTick>
 8002646:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800264e:	b2db      	uxtb	r3, r3
 8002650:	2b02      	cmp	r3, #2
 8002652:	d008      	beq.n	8002666 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2280      	movs	r2, #128	; 0x80
 8002658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e052      	b.n	800270c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f022 0216 	bic.w	r2, r2, #22
 8002674:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	695a      	ldr	r2, [r3, #20]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002684:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268a:	2b00      	cmp	r3, #0
 800268c:	d103      	bne.n	8002696 <HAL_DMA_Abort+0x62>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002692:	2b00      	cmp	r3, #0
 8002694:	d007      	beq.n	80026a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f022 0208 	bic.w	r2, r2, #8
 80026a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f022 0201 	bic.w	r2, r2, #1
 80026b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026b6:	e013      	b.n	80026e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026b8:	f7ff f848 	bl	800174c <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b05      	cmp	r3, #5
 80026c4:	d90c      	bls.n	80026e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2220      	movs	r2, #32
 80026ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2203      	movs	r2, #3
 80026d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80026dc:	2303      	movs	r3, #3
 80026de:	e015      	b.n	800270c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0301 	and.w	r3, r3, #1
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d1e4      	bne.n	80026b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f2:	223f      	movs	r2, #63	; 0x3f
 80026f4:	409a      	lsls	r2, r3
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800270a:	2300      	movs	r3, #0
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002722:	b2db      	uxtb	r3, r3
 8002724:	2b02      	cmp	r3, #2
 8002726:	d004      	beq.n	8002732 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2280      	movs	r2, #128	; 0x80
 800272c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e00c      	b.n	800274c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2205      	movs	r2, #5
 8002736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f022 0201 	bic.w	r2, r2, #1
 8002748:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr

08002758 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b086      	sub	sp, #24
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002760:	2300      	movs	r3, #0
 8002762:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002764:	4b8e      	ldr	r3, [pc, #568]	; (80029a0 <HAL_DMA_IRQHandler+0x248>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a8e      	ldr	r2, [pc, #568]	; (80029a4 <HAL_DMA_IRQHandler+0x24c>)
 800276a:	fba2 2303 	umull	r2, r3, r2, r3
 800276e:	0a9b      	lsrs	r3, r3, #10
 8002770:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002776:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002782:	2208      	movs	r2, #8
 8002784:	409a      	lsls	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d01a      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0304 	and.w	r3, r3, #4
 8002798:	2b00      	cmp	r3, #0
 800279a:	d013      	beq.n	80027c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0204 	bic.w	r2, r2, #4
 80027aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b0:	2208      	movs	r2, #8
 80027b2:	409a      	lsls	r2, r3
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027bc:	f043 0201 	orr.w	r2, r3, #1
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c8:	2201      	movs	r2, #1
 80027ca:	409a      	lsls	r2, r3
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	4013      	ands	r3, r2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d012      	beq.n	80027fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695b      	ldr	r3, [r3, #20]
 80027da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d00b      	beq.n	80027fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e6:	2201      	movs	r2, #1
 80027e8:	409a      	lsls	r2, r3
 80027ea:	693b      	ldr	r3, [r7, #16]
 80027ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	f043 0202 	orr.w	r2, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fe:	2204      	movs	r2, #4
 8002800:	409a      	lsls	r2, r3
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	4013      	ands	r3, r2
 8002806:	2b00      	cmp	r3, #0
 8002808:	d012      	beq.n	8002830 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0302 	and.w	r3, r3, #2
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00b      	beq.n	8002830 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281c:	2204      	movs	r2, #4
 800281e:	409a      	lsls	r2, r3
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	f043 0204 	orr.w	r2, r3, #4
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002834:	2210      	movs	r2, #16
 8002836:	409a      	lsls	r2, r3
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	4013      	ands	r3, r2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d043      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 0308 	and.w	r3, r3, #8
 800284a:	2b00      	cmp	r3, #0
 800284c:	d03c      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002852:	2210      	movs	r2, #16
 8002854:	409a      	lsls	r2, r3
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d018      	beq.n	800289a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d108      	bne.n	8002888 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287a:	2b00      	cmp	r3, #0
 800287c:	d024      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	4798      	blx	r3
 8002886:	e01f      	b.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800288c:	2b00      	cmp	r3, #0
 800288e:	d01b      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	4798      	blx	r3
 8002898:	e016      	b.n	80028c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d107      	bne.n	80028b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0208 	bic.w	r2, r2, #8
 80028b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d003      	beq.n	80028c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028cc:	2220      	movs	r2, #32
 80028ce:	409a      	lsls	r2, r3
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	f000 808f 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0310 	and.w	r3, r3, #16
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8087 	beq.w	80029f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ee:	2220      	movs	r2, #32
 80028f0:	409a      	lsls	r2, r3
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	2b05      	cmp	r3, #5
 8002900:	d136      	bne.n	8002970 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	681a      	ldr	r2, [r3, #0]
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f022 0216 	bic.w	r2, r2, #22
 8002910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	695a      	ldr	r2, [r3, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002920:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	2b00      	cmp	r3, #0
 8002928:	d103      	bne.n	8002932 <HAL_DMA_IRQHandler+0x1da>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800292e:	2b00      	cmp	r3, #0
 8002930:	d007      	beq.n	8002942 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f022 0208 	bic.w	r2, r2, #8
 8002940:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002946:	223f      	movs	r2, #63	; 0x3f
 8002948:	409a      	lsls	r2, r3
 800294a:	693b      	ldr	r3, [r7, #16]
 800294c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2201      	movs	r2, #1
 8002952:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002962:	2b00      	cmp	r3, #0
 8002964:	d07e      	beq.n	8002a64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	4798      	blx	r3
        }
        return;
 800296e:	e079      	b.n	8002a64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d01d      	beq.n	80029ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002988:	2b00      	cmp	r3, #0
 800298a:	d10d      	bne.n	80029a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002990:	2b00      	cmp	r3, #0
 8002992:	d031      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	4798      	blx	r3
 800299c:	e02c      	b.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
 800299e:	bf00      	nop
 80029a0:	2000008c 	.word	0x2000008c
 80029a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d023      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	4798      	blx	r3
 80029b8:	e01e      	b.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d10f      	bne.n	80029e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	681a      	ldr	r2, [r3, #0]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f022 0210 	bic.w	r2, r2, #16
 80029d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2200      	movs	r2, #0
 80029e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d003      	beq.n	80029f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029f4:	6878      	ldr	r0, [r7, #4]
 80029f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d032      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a04:	f003 0301 	and.w	r3, r3, #1
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d022      	beq.n	8002a52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2205      	movs	r2, #5
 8002a10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f022 0201 	bic.w	r2, r2, #1
 8002a22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	3301      	adds	r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d307      	bcc.n	8002a40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0301 	and.w	r3, r3, #1
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1f2      	bne.n	8002a24 <HAL_DMA_IRQHandler+0x2cc>
 8002a3e:	e000      	b.n	8002a42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002a40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	4798      	blx	r3
 8002a62:	e000      	b.n	8002a66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002a64:	bf00      	nop
    }
  }
}
 8002a66:	3718      	adds	r7, #24
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b085      	sub	sp, #20
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	607a      	str	r2, [r7, #4]
 8002a78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002a88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	2b40      	cmp	r3, #64	; 0x40
 8002a98:	d108      	bne.n	8002aac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002aaa:	e007      	b.n	8002abc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68ba      	ldr	r2, [r7, #8]
 8002ab2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	60da      	str	r2, [r3, #12]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac6:	4770      	bx	lr

08002ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b085      	sub	sp, #20
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	b2db      	uxtb	r3, r3
 8002ad6:	3b10      	subs	r3, #16
 8002ad8:	4a13      	ldr	r2, [pc, #76]	; (8002b28 <DMA_CalcBaseAndBitshift+0x60>)
 8002ada:	fba2 2303 	umull	r2, r3, r2, r3
 8002ade:	091b      	lsrs	r3, r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002ae2:	4a12      	ldr	r2, [pc, #72]	; (8002b2c <DMA_CalcBaseAndBitshift+0x64>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	4413      	add	r3, r2
 8002ae8:	781b      	ldrb	r3, [r3, #0]
 8002aea:	461a      	mov	r2, r3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	2b03      	cmp	r3, #3
 8002af4:	d908      	bls.n	8002b08 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	461a      	mov	r2, r3
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <DMA_CalcBaseAndBitshift+0x68>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	1d1a      	adds	r2, r3, #4
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	659a      	str	r2, [r3, #88]	; 0x58
 8002b06:	e006      	b.n	8002b16 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	4b08      	ldr	r3, [pc, #32]	; (8002b30 <DMA_CalcBaseAndBitshift+0x68>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	aaaaaaab 	.word	0xaaaaaaab
 8002b2c:	08005d90 	.word	0x08005d90
 8002b30:	fffffc00 	.word	0xfffffc00

08002b34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d11f      	bne.n	8002b8e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	2b03      	cmp	r3, #3
 8002b52:	d856      	bhi.n	8002c02 <DMA_CheckFifoParam+0xce>
 8002b54:	a201      	add	r2, pc, #4	; (adr r2, 8002b5c <DMA_CheckFifoParam+0x28>)
 8002b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b5a:	bf00      	nop
 8002b5c:	08002b6d 	.word	0x08002b6d
 8002b60:	08002b7f 	.word	0x08002b7f
 8002b64:	08002b6d 	.word	0x08002b6d
 8002b68:	08002c03 	.word	0x08002c03
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d046      	beq.n	8002c06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b7c:	e043      	b.n	8002c06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b86:	d140      	bne.n	8002c0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b8c:	e03d      	b.n	8002c0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b96:	d121      	bne.n	8002bdc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	2b03      	cmp	r3, #3
 8002b9c:	d837      	bhi.n	8002c0e <DMA_CheckFifoParam+0xda>
 8002b9e:	a201      	add	r2, pc, #4	; (adr r2, 8002ba4 <DMA_CheckFifoParam+0x70>)
 8002ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ba4:	08002bb5 	.word	0x08002bb5
 8002ba8:	08002bbb 	.word	0x08002bbb
 8002bac:	08002bb5 	.word	0x08002bb5
 8002bb0:	08002bcd 	.word	0x08002bcd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb8:	e030      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d025      	beq.n	8002c12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bca:	e022      	b.n	8002c12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002bd4:	d11f      	bne.n	8002c16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002bda:	e01c      	b.n	8002c16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002bdc:	68bb      	ldr	r3, [r7, #8]
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d903      	bls.n	8002bea <DMA_CheckFifoParam+0xb6>
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	2b03      	cmp	r3, #3
 8002be6:	d003      	beq.n	8002bf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002be8:	e018      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	73fb      	strb	r3, [r7, #15]
      break;
 8002bee:	e015      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00e      	beq.n	8002c1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e00b      	b.n	8002c1a <DMA_CheckFifoParam+0xe6>
      break;
 8002c02:	bf00      	nop
 8002c04:	e00a      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c06:	bf00      	nop
 8002c08:	e008      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c0a:	bf00      	nop
 8002c0c:	e006      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c0e:	bf00      	nop
 8002c10:	e004      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c12:	bf00      	nop
 8002c14:	e002      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;   
 8002c16:	bf00      	nop
 8002c18:	e000      	b.n	8002c1c <DMA_CheckFifoParam+0xe8>
      break;
 8002c1a:	bf00      	nop
    }
  } 
  
  return status; 
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop

08002c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b089      	sub	sp, #36	; 0x24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
 8002c34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002c36:	2300      	movs	r3, #0
 8002c38:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002c42:	2300      	movs	r3, #0
 8002c44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002c46:	2300      	movs	r3, #0
 8002c48:	61fb      	str	r3, [r7, #28]
 8002c4a:	e175      	b.n	8002f38 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002c4c:	2201      	movs	r2, #1
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	fa02 f303 	lsl.w	r3, r2, r3
 8002c54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c60:	693a      	ldr	r2, [r7, #16]
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	429a      	cmp	r2, r3
 8002c66:	f040 8164 	bne.w	8002f32 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	f003 0303 	and.w	r3, r3, #3
 8002c72:	2b01      	cmp	r3, #1
 8002c74:	d005      	beq.n	8002c82 <HAL_GPIO_Init+0x56>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b02      	cmp	r3, #2
 8002c80:	d130      	bne.n	8002ce4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c88:	69fb      	ldr	r3, [r7, #28]
 8002c8a:	005b      	lsls	r3, r3, #1
 8002c8c:	2203      	movs	r2, #3
 8002c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c92:	43db      	mvns	r3, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4013      	ands	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	005b      	lsls	r3, r3, #1
 8002ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca6:	69ba      	ldr	r2, [r7, #24]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cb8:	2201      	movs	r2, #1
 8002cba:	69fb      	ldr	r3, [r7, #28]
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43db      	mvns	r3, r3
 8002cc2:	69ba      	ldr	r2, [r7, #24]
 8002cc4:	4013      	ands	r3, r2
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	091b      	lsrs	r3, r3, #4
 8002cce:	f003 0201 	and.w	r2, r3, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	69ba      	ldr	r2, [r7, #24]
 8002ce2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f003 0303 	and.w	r3, r3, #3
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	2203      	movs	r2, #3
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	43db      	mvns	r3, r3
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	4013      	ands	r3, r2
 8002d06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	005b      	lsls	r3, r3, #1
 8002d10:	fa02 f303 	lsl.w	r3, r2, r3
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	4313      	orrs	r3, r2
 8002d18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	69ba      	ldr	r2, [r7, #24]
 8002d1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f003 0303 	and.w	r3, r3, #3
 8002d28:	2b02      	cmp	r3, #2
 8002d2a:	d123      	bne.n	8002d74 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	08da      	lsrs	r2, r3, #3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3208      	adds	r2, #8
 8002d34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	f003 0307 	and.w	r3, r3, #7
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	220f      	movs	r2, #15
 8002d44:	fa02 f303 	lsl.w	r3, r2, r3
 8002d48:	43db      	mvns	r3, r3
 8002d4a:	69ba      	ldr	r2, [r7, #24]
 8002d4c:	4013      	ands	r3, r2
 8002d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	69ba      	ldr	r2, [r7, #24]
 8002d62:	4313      	orrs	r3, r2
 8002d64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	08da      	lsrs	r2, r3, #3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	3208      	adds	r2, #8
 8002d6e:	69b9      	ldr	r1, [r7, #24]
 8002d70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	005b      	lsls	r3, r3, #1
 8002d7e:	2203      	movs	r2, #3
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f003 0203 	and.w	r2, r3, #3
 8002d94:	69fb      	ldr	r3, [r7, #28]
 8002d96:	005b      	lsls	r3, r3, #1
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f000 80be 	beq.w	8002f32 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002db6:	4b66      	ldr	r3, [pc, #408]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dba:	4a65      	ldr	r2, [pc, #404]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8002dc2:	4b63      	ldr	r3, [pc, #396]	; (8002f50 <HAL_GPIO_Init+0x324>)
 8002dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dca:	60fb      	str	r3, [r7, #12]
 8002dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002dce:	4a61      	ldr	r2, [pc, #388]	; (8002f54 <HAL_GPIO_Init+0x328>)
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	089b      	lsrs	r3, r3, #2
 8002dd4:	3302      	adds	r3, #2
 8002dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	220f      	movs	r2, #15
 8002de6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dea:	43db      	mvns	r3, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4013      	ands	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	4a58      	ldr	r2, [pc, #352]	; (8002f58 <HAL_GPIO_Init+0x32c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d037      	beq.n	8002e6a <HAL_GPIO_Init+0x23e>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	4a57      	ldr	r2, [pc, #348]	; (8002f5c <HAL_GPIO_Init+0x330>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d031      	beq.n	8002e66 <HAL_GPIO_Init+0x23a>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a56      	ldr	r2, [pc, #344]	; (8002f60 <HAL_GPIO_Init+0x334>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d02b      	beq.n	8002e62 <HAL_GPIO_Init+0x236>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a55      	ldr	r2, [pc, #340]	; (8002f64 <HAL_GPIO_Init+0x338>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d025      	beq.n	8002e5e <HAL_GPIO_Init+0x232>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a54      	ldr	r2, [pc, #336]	; (8002f68 <HAL_GPIO_Init+0x33c>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d01f      	beq.n	8002e5a <HAL_GPIO_Init+0x22e>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a53      	ldr	r2, [pc, #332]	; (8002f6c <HAL_GPIO_Init+0x340>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d019      	beq.n	8002e56 <HAL_GPIO_Init+0x22a>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a52      	ldr	r2, [pc, #328]	; (8002f70 <HAL_GPIO_Init+0x344>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d013      	beq.n	8002e52 <HAL_GPIO_Init+0x226>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a51      	ldr	r2, [pc, #324]	; (8002f74 <HAL_GPIO_Init+0x348>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d00d      	beq.n	8002e4e <HAL_GPIO_Init+0x222>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a50      	ldr	r2, [pc, #320]	; (8002f78 <HAL_GPIO_Init+0x34c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d007      	beq.n	8002e4a <HAL_GPIO_Init+0x21e>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a4f      	ldr	r2, [pc, #316]	; (8002f7c <HAL_GPIO_Init+0x350>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d101      	bne.n	8002e46 <HAL_GPIO_Init+0x21a>
 8002e42:	2309      	movs	r3, #9
 8002e44:	e012      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e46:	230a      	movs	r3, #10
 8002e48:	e010      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00e      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e4e:	2307      	movs	r3, #7
 8002e50:	e00c      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e52:	2306      	movs	r3, #6
 8002e54:	e00a      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e56:	2305      	movs	r3, #5
 8002e58:	e008      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5a:	2304      	movs	r3, #4
 8002e5c:	e006      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e004      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e62:	2302      	movs	r3, #2
 8002e64:	e002      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e66:	2301      	movs	r3, #1
 8002e68:	e000      	b.n	8002e6c <HAL_GPIO_Init+0x240>
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	69fa      	ldr	r2, [r7, #28]
 8002e6e:	f002 0203 	and.w	r2, r2, #3
 8002e72:	0092      	lsls	r2, r2, #2
 8002e74:	4093      	lsls	r3, r2
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e7c:	4935      	ldr	r1, [pc, #212]	; (8002f54 <HAL_GPIO_Init+0x328>)
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	089b      	lsrs	r3, r3, #2
 8002e82:	3302      	adds	r3, #2
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e8a:	4b3d      	ldr	r3, [pc, #244]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	43db      	mvns	r3, r3
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	4013      	ands	r3, r2
 8002e98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	685b      	ldr	r3, [r3, #4]
 8002e9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d003      	beq.n	8002eae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ea6:	69ba      	ldr	r2, [r7, #24]
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eae:	4a34      	ldr	r2, [pc, #208]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb4:	4b32      	ldr	r3, [pc, #200]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eb6:	68db      	ldr	r3, [r3, #12]
 8002eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	43db      	mvns	r3, r3
 8002ebe:	69ba      	ldr	r2, [r7, #24]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d003      	beq.n	8002ed8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	4313      	orrs	r3, r2
 8002ed6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed8:	4a29      	ldr	r2, [pc, #164]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ede:	4b28      	ldr	r3, [pc, #160]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	43db      	mvns	r3, r3
 8002ee8:	69ba      	ldr	r2, [r7, #24]
 8002eea:	4013      	ands	r3, r2
 8002eec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685b      	ldr	r3, [r3, #4]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	693b      	ldr	r3, [r7, #16]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f02:	4a1f      	ldr	r2, [pc, #124]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f08:	4b1d      	ldr	r3, [pc, #116]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	43db      	mvns	r3, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	4013      	ands	r3, r2
 8002f16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d003      	beq.n	8002f2c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	693b      	ldr	r3, [r7, #16]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f2c:	4a14      	ldr	r2, [pc, #80]	; (8002f80 <HAL_GPIO_Init+0x354>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	3301      	adds	r3, #1
 8002f36:	61fb      	str	r3, [r7, #28]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	2b0f      	cmp	r3, #15
 8002f3c:	f67f ae86 	bls.w	8002c4c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002f40:	bf00      	nop
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	40023800 	.word	0x40023800
 8002f54:	40013800 	.word	0x40013800
 8002f58:	40020000 	.word	0x40020000
 8002f5c:	40020400 	.word	0x40020400
 8002f60:	40020800 	.word	0x40020800
 8002f64:	40020c00 	.word	0x40020c00
 8002f68:	40021000 	.word	0x40021000
 8002f6c:	40021400 	.word	0x40021400
 8002f70:	40021800 	.word	0x40021800
 8002f74:	40021c00 	.word	0x40021c00
 8002f78:	40022000 	.word	0x40022000
 8002f7c:	40022400 	.word	0x40022400
 8002f80:	40013c00 	.word	0x40013c00

08002f84 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	691a      	ldr	r2, [r3, #16]
 8002f94:	887b      	ldrh	r3, [r7, #2]
 8002f96:	4013      	ands	r3, r2
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d002      	beq.n	8002fa2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	73fb      	strb	r3, [r7, #15]
 8002fa0:	e001      	b.n	8002fa6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3714      	adds	r7, #20
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	807b      	strh	r3, [r7, #2]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002fc4:	787b      	ldrb	r3, [r7, #1]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fca:	887a      	ldrh	r2, [r7, #2]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002fd0:	e003      	b.n	8002fda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002fd2:	887b      	ldrh	r3, [r7, #2]
 8002fd4:	041a      	lsls	r2, r3, #16
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	619a      	str	r2, [r3, #24]
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b085      	sub	sp, #20
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
 8002fee:	460b      	mov	r3, r1
 8002ff0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002ff8:	887a      	ldrh	r2, [r7, #2]
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	041a      	lsls	r2, r3, #16
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	43d9      	mvns	r1, r3
 8003004:	887b      	ldrh	r3, [r7, #2]
 8003006:	400b      	ands	r3, r1
 8003008:	431a      	orrs	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	619a      	str	r2, [r3, #24]
}
 800300e:	bf00      	nop
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr
	...

0800301c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003020:	4b05      	ldr	r3, [pc, #20]	; (8003038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a04      	ldr	r2, [pc, #16]	; (8003038 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800302a:	6013      	str	r3, [r2, #0]
}
 800302c:	bf00      	nop
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr
 8003036:	bf00      	nop
 8003038:	40007000 	.word	0x40007000

0800303c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003042:	2300      	movs	r3, #0
 8003044:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	4b23      	ldr	r3, [pc, #140]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	4a22      	ldr	r2, [pc, #136]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x98>)
 800304c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003050:	6413      	str	r3, [r2, #64]	; 0x40
 8003052:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800305a:	603b      	str	r3, [r7, #0]
 800305c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800305e:	4b1e      	ldr	r3, [pc, #120]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4a1d      	ldr	r2, [pc, #116]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003064:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003068:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800306a:	f7fe fb6f 	bl	800174c <HAL_GetTick>
 800306e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003070:	e009      	b.n	8003086 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003072:	f7fe fb6b 	bl	800174c <HAL_GetTick>
 8003076:	4602      	mov	r2, r0
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	1ad3      	subs	r3, r2, r3
 800307c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003080:	d901      	bls.n	8003086 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	e022      	b.n	80030cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003086:	4b14      	ldr	r3, [pc, #80]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800308e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003092:	d1ee      	bne.n	8003072 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a0f      	ldr	r2, [pc, #60]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800309a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80030a0:	f7fe fb54 	bl	800174c <HAL_GetTick>
 80030a4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030a6:	e009      	b.n	80030bc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80030a8:	f7fe fb50 	bl	800174c <HAL_GetTick>
 80030ac:	4602      	mov	r2, r0
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	1ad3      	subs	r3, r2, r3
 80030b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030b6:	d901      	bls.n	80030bc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80030b8:	2303      	movs	r3, #3
 80030ba:	e007      	b.n	80030cc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80030bc:	4b06      	ldr	r3, [pc, #24]	; (80030d8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80030c8:	d1ee      	bne.n	80030a8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80030ca:	2300      	movs	r3, #0
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	40023800 	.word	0x40023800
 80030d8:	40007000 	.word	0x40007000

080030dc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80030dc:	b580      	push	{r7, lr}
 80030de:	b086      	sub	sp, #24
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80030e4:	2300      	movs	r3, #0
 80030e6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d101      	bne.n	80030f2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	e291      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0301 	and.w	r3, r3, #1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	f000 8087 	beq.w	800320e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003100:	4b96      	ldr	r3, [pc, #600]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	f003 030c 	and.w	r3, r3, #12
 8003108:	2b04      	cmp	r3, #4
 800310a:	d00c      	beq.n	8003126 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800310c:	4b93      	ldr	r3, [pc, #588]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	f003 030c 	and.w	r3, r3, #12
 8003114:	2b08      	cmp	r3, #8
 8003116:	d112      	bne.n	800313e <HAL_RCC_OscConfig+0x62>
 8003118:	4b90      	ldr	r3, [pc, #576]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003120:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003124:	d10b      	bne.n	800313e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003126:	4b8d      	ldr	r3, [pc, #564]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800312e:	2b00      	cmp	r3, #0
 8003130:	d06c      	beq.n	800320c <HAL_RCC_OscConfig+0x130>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d168      	bne.n	800320c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e26b      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003146:	d106      	bne.n	8003156 <HAL_RCC_OscConfig+0x7a>
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a83      	ldr	r2, [pc, #524]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800314e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003152:	6013      	str	r3, [r2, #0]
 8003154:	e02e      	b.n	80031b4 <HAL_RCC_OscConfig+0xd8>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10c      	bne.n	8003178 <HAL_RCC_OscConfig+0x9c>
 800315e:	4b7f      	ldr	r3, [pc, #508]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a7e      	ldr	r2, [pc, #504]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003164:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003168:	6013      	str	r3, [r2, #0]
 800316a:	4b7c      	ldr	r3, [pc, #496]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a7b      	ldr	r2, [pc, #492]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003170:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003174:	6013      	str	r3, [r2, #0]
 8003176:	e01d      	b.n	80031b4 <HAL_RCC_OscConfig+0xd8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003180:	d10c      	bne.n	800319c <HAL_RCC_OscConfig+0xc0>
 8003182:	4b76      	ldr	r3, [pc, #472]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a75      	ldr	r2, [pc, #468]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003188:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800318c:	6013      	str	r3, [r2, #0]
 800318e:	4b73      	ldr	r3, [pc, #460]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a72      	ldr	r2, [pc, #456]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003194:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003198:	6013      	str	r3, [r2, #0]
 800319a:	e00b      	b.n	80031b4 <HAL_RCC_OscConfig+0xd8>
 800319c:	4b6f      	ldr	r3, [pc, #444]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a6e      	ldr	r2, [pc, #440]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80031a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	4b6c      	ldr	r3, [pc, #432]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a6b      	ldr	r2, [pc, #428]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80031ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031bc:	f7fe fac6 	bl	800174c <HAL_GetTick>
 80031c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031c2:	e008      	b.n	80031d6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031c4:	f7fe fac2 	bl	800174c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b64      	cmp	r3, #100	; 0x64
 80031d0:	d901      	bls.n	80031d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	e21f      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b61      	ldr	r3, [pc, #388]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d0f0      	beq.n	80031c4 <HAL_RCC_OscConfig+0xe8>
 80031e2:	e014      	b.n	800320e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e4:	f7fe fab2 	bl	800174c <HAL_GetTick>
 80031e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031ea:	e008      	b.n	80031fe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031ec:	f7fe faae 	bl	800174c <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b64      	cmp	r3, #100	; 0x64
 80031f8:	d901      	bls.n	80031fe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	e20b      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031fe:	4b57      	ldr	r3, [pc, #348]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003206:	2b00      	cmp	r3, #0
 8003208:	d1f0      	bne.n	80031ec <HAL_RCC_OscConfig+0x110>
 800320a:	e000      	b.n	800320e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800320c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b00      	cmp	r3, #0
 8003218:	d069      	beq.n	80032ee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800321a:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	f003 030c 	and.w	r3, r3, #12
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00b      	beq.n	800323e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003226:	4b4d      	ldr	r3, [pc, #308]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003228:	689b      	ldr	r3, [r3, #8]
 800322a:	f003 030c 	and.w	r3, r3, #12
 800322e:	2b08      	cmp	r3, #8
 8003230:	d11c      	bne.n	800326c <HAL_RCC_OscConfig+0x190>
 8003232:	4b4a      	ldr	r3, [pc, #296]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d116      	bne.n	800326c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800323e:	4b47      	ldr	r3, [pc, #284]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0302 	and.w	r3, r3, #2
 8003246:	2b00      	cmp	r3, #0
 8003248:	d005      	beq.n	8003256 <HAL_RCC_OscConfig+0x17a>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68db      	ldr	r3, [r3, #12]
 800324e:	2b01      	cmp	r3, #1
 8003250:	d001      	beq.n	8003256 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e1df      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003256:	4b41      	ldr	r3, [pc, #260]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	691b      	ldr	r3, [r3, #16]
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	493d      	ldr	r1, [pc, #244]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003266:	4313      	orrs	r3, r2
 8003268:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	e040      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	68db      	ldr	r3, [r3, #12]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d023      	beq.n	80032bc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003274:	4b39      	ldr	r3, [pc, #228]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a38      	ldr	r2, [pc, #224]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800327a:	f043 0301 	orr.w	r3, r3, #1
 800327e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003280:	f7fe fa64 	bl	800174c <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003286:	e008      	b.n	800329a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003288:	f7fe fa60 	bl	800174c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d901      	bls.n	800329a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e1bd      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329a:	4b30      	ldr	r3, [pc, #192]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	f003 0302 	and.w	r3, r3, #2
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d0f0      	beq.n	8003288 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a6:	4b2d      	ldr	r3, [pc, #180]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4929      	ldr	r1, [pc, #164]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	600b      	str	r3, [r1, #0]
 80032ba:	e018      	b.n	80032ee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032bc:	4b27      	ldr	r3, [pc, #156]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	4a26      	ldr	r2, [pc, #152]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80032c2:	f023 0301 	bic.w	r3, r3, #1
 80032c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c8:	f7fe fa40 	bl	800174c <HAL_GetTick>
 80032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ce:	e008      	b.n	80032e2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032d0:	f7fe fa3c 	bl	800174c <HAL_GetTick>
 80032d4:	4602      	mov	r2, r0
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	1ad3      	subs	r3, r2, r3
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d901      	bls.n	80032e2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80032de:	2303      	movs	r3, #3
 80032e0:	e199      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032e2:	4b1e      	ldr	r3, [pc, #120]	; (800335c <HAL_RCC_OscConfig+0x280>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1f0      	bne.n	80032d0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0308 	and.w	r3, r3, #8
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d038      	beq.n	800336c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d019      	beq.n	8003336 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003302:	4b16      	ldr	r3, [pc, #88]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003304:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003306:	4a15      	ldr	r2, [pc, #84]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003308:	f043 0301 	orr.w	r3, r3, #1
 800330c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800330e:	f7fe fa1d 	bl	800174c <HAL_GetTick>
 8003312:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003314:	e008      	b.n	8003328 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003316:	f7fe fa19 	bl	800174c <HAL_GetTick>
 800331a:	4602      	mov	r2, r0
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	2b02      	cmp	r3, #2
 8003322:	d901      	bls.n	8003328 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e176      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003328:	4b0c      	ldr	r3, [pc, #48]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800332a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d0f0      	beq.n	8003316 <HAL_RCC_OscConfig+0x23a>
 8003334:	e01a      	b.n	800336c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003336:	4b09      	ldr	r3, [pc, #36]	; (800335c <HAL_RCC_OscConfig+0x280>)
 8003338:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800333a:	4a08      	ldr	r2, [pc, #32]	; (800335c <HAL_RCC_OscConfig+0x280>)
 800333c:	f023 0301 	bic.w	r3, r3, #1
 8003340:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003342:	f7fe fa03 	bl	800174c <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003348:	e00a      	b.n	8003360 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800334a:	f7fe f9ff 	bl	800174c <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d903      	bls.n	8003360 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e15c      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
 800335c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003360:	4b91      	ldr	r3, [pc, #580]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003362:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d1ee      	bne.n	800334a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	f000 80a4 	beq.w	80034c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800337a:	4b8b      	ldr	r3, [pc, #556]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800337c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10d      	bne.n	80033a2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003386:	4b88      	ldr	r3, [pc, #544]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a87      	ldr	r2, [pc, #540]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b85      	ldr	r3, [pc, #532]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033a2:	4b82      	ldr	r3, [pc, #520]	; (80035ac <HAL_RCC_OscConfig+0x4d0>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80033ae:	4b7f      	ldr	r3, [pc, #508]	; (80035ac <HAL_RCC_OscConfig+0x4d0>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7e      	ldr	r2, [pc, #504]	; (80035ac <HAL_RCC_OscConfig+0x4d0>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fe f9c7 	bl	800174c <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fe f9c3 	bl	800174c <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b64      	cmp	r3, #100	; 0x64
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e120      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80033d4:	4b75      	ldr	r3, [pc, #468]	; (80035ac <HAL_RCC_OscConfig+0x4d0>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x31a>
 80033e8:	4b6f      	ldr	r3, [pc, #444]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a6e      	ldr	r2, [pc, #440]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	e02d      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x33c>
 80033fe:	4b6a      	ldr	r3, [pc, #424]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a69      	ldr	r2, [pc, #420]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003404:	f023 0301 	bic.w	r3, r3, #1
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	4b67      	ldr	r3, [pc, #412]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a66      	ldr	r2, [pc, #408]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003410:	f023 0304 	bic.w	r3, r3, #4
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e01c      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689b      	ldr	r3, [r3, #8]
 800341c:	2b05      	cmp	r3, #5
 800341e:	d10c      	bne.n	800343a <HAL_RCC_OscConfig+0x35e>
 8003420:	4b61      	ldr	r3, [pc, #388]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003424:	4a60      	ldr	r2, [pc, #384]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003426:	f043 0304 	orr.w	r3, r3, #4
 800342a:	6713      	str	r3, [r2, #112]	; 0x70
 800342c:	4b5e      	ldr	r3, [pc, #376]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800342e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003430:	4a5d      	ldr	r2, [pc, #372]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003432:	f043 0301 	orr.w	r3, r3, #1
 8003436:	6713      	str	r3, [r2, #112]	; 0x70
 8003438:	e00b      	b.n	8003452 <HAL_RCC_OscConfig+0x376>
 800343a:	4b5b      	ldr	r3, [pc, #364]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800343c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800343e:	4a5a      	ldr	r2, [pc, #360]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003440:	f023 0301 	bic.w	r3, r3, #1
 8003444:	6713      	str	r3, [r2, #112]	; 0x70
 8003446:	4b58      	ldr	r3, [pc, #352]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800344a:	4a57      	ldr	r2, [pc, #348]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800344c:	f023 0304 	bic.w	r3, r3, #4
 8003450:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d015      	beq.n	8003486 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800345a:	f7fe f977 	bl	800174c <HAL_GetTick>
 800345e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003460:	e00a      	b.n	8003478 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003462:	f7fe f973 	bl	800174c <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003470:	4293      	cmp	r3, r2
 8003472:	d901      	bls.n	8003478 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e0ce      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003478:	4b4b      	ldr	r3, [pc, #300]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800347a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800347c:	f003 0302 	and.w	r3, r3, #2
 8003480:	2b00      	cmp	r3, #0
 8003482:	d0ee      	beq.n	8003462 <HAL_RCC_OscConfig+0x386>
 8003484:	e014      	b.n	80034b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003486:	f7fe f961 	bl	800174c <HAL_GetTick>
 800348a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800348c:	e00a      	b.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348e:	f7fe f95d 	bl	800174c <HAL_GetTick>
 8003492:	4602      	mov	r2, r0
 8003494:	693b      	ldr	r3, [r7, #16]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	f241 3288 	movw	r2, #5000	; 0x1388
 800349c:	4293      	cmp	r3, r2
 800349e:	d901      	bls.n	80034a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e0b8      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034a4:	4b40      	ldr	r3, [pc, #256]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ee      	bne.n	800348e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80034b0:	7dfb      	ldrb	r3, [r7, #23]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d105      	bne.n	80034c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034b6:	4b3c      	ldr	r3, [pc, #240]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034ba:	4a3b      	ldr	r2, [pc, #236]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80034c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	f000 80a4 	beq.w	8003614 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034cc:	4b36      	ldr	r3, [pc, #216]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f003 030c 	and.w	r3, r3, #12
 80034d4:	2b08      	cmp	r3, #8
 80034d6:	d06b      	beq.n	80035b0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	699b      	ldr	r3, [r3, #24]
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d149      	bne.n	8003574 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034e0:	4b31      	ldr	r3, [pc, #196]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a30      	ldr	r2, [pc, #192]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 80034e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034ec:	f7fe f92e 	bl	800174c <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034f4:	f7fe f92a 	bl	800174c <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e087      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003506:	4b28      	ldr	r3, [pc, #160]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1f0      	bne.n	80034f4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	69da      	ldr	r2, [r3, #28]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003520:	019b      	lsls	r3, r3, #6
 8003522:	431a      	orrs	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003528:	085b      	lsrs	r3, r3, #1
 800352a:	3b01      	subs	r3, #1
 800352c:	041b      	lsls	r3, r3, #16
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003534:	061b      	lsls	r3, r3, #24
 8003536:	4313      	orrs	r3, r2
 8003538:	4a1b      	ldr	r2, [pc, #108]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800353a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800353e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003540:	4b19      	ldr	r3, [pc, #100]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a18      	ldr	r2, [pc, #96]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003546:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fe f8fe 	bl	800174c <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003554:	f7fe f8fa 	bl	800174c <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e057      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003566:	4b10      	ldr	r3, [pc, #64]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x478>
 8003572:	e04f      	b.n	8003614 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003574:	4b0c      	ldr	r3, [pc, #48]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4a0b      	ldr	r2, [pc, #44]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800357a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800357e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003580:	f7fe f8e4 	bl	800174c <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	e008      	b.n	800359a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003588:	f7fe f8e0 	bl	800174c <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d901      	bls.n	800359a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e03d      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800359a:	4b03      	ldr	r3, [pc, #12]	; (80035a8 <HAL_RCC_OscConfig+0x4cc>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d1f0      	bne.n	8003588 <HAL_RCC_OscConfig+0x4ac>
 80035a6:	e035      	b.n	8003614 <HAL_RCC_OscConfig+0x538>
 80035a8:	40023800 	.word	0x40023800
 80035ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <HAL_RCC_OscConfig+0x544>)
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d028      	beq.n	8003610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d121      	bne.n	8003610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035d6:	429a      	cmp	r2, r3
 80035d8:	d11a      	bne.n	8003610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035e0:	4013      	ands	r3, r2
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035e6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d111      	bne.n	8003610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035f6:	085b      	lsrs	r3, r3, #1
 80035f8:	3b01      	subs	r3, #1
 80035fa:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d107      	bne.n	8003610 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800360c:	429a      	cmp	r2, r3
 800360e:	d001      	beq.n	8003614 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e000      	b.n	8003616 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
 800362c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800362e:	2300      	movs	r3, #0
 8003630:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e0d0      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800363c:	4b6a      	ldr	r3, [pc, #424]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 030f 	and.w	r3, r3, #15
 8003644:	683a      	ldr	r2, [r7, #0]
 8003646:	429a      	cmp	r2, r3
 8003648:	d910      	bls.n	800366c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800364a:	4b67      	ldr	r3, [pc, #412]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f023 020f 	bic.w	r2, r3, #15
 8003652:	4965      	ldr	r1, [pc, #404]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	4313      	orrs	r3, r2
 8003658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800365a:	4b63      	ldr	r3, [pc, #396]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	683a      	ldr	r2, [r7, #0]
 8003664:	429a      	cmp	r2, r3
 8003666:	d001      	beq.n	800366c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e0b8      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f003 0302 	and.w	r3, r3, #2
 8003674:	2b00      	cmp	r3, #0
 8003676:	d020      	beq.n	80036ba <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0304 	and.w	r3, r3, #4
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003684:	4b59      	ldr	r3, [pc, #356]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	4a58      	ldr	r2, [pc, #352]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 800368a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800368e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f003 0308 	and.w	r3, r3, #8
 8003698:	2b00      	cmp	r3, #0
 800369a:	d005      	beq.n	80036a8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800369c:	4b53      	ldr	r3, [pc, #332]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	4a52      	ldr	r2, [pc, #328]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036a6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036a8:	4b50      	ldr	r3, [pc, #320]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	494d      	ldr	r1, [pc, #308]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036b6:	4313      	orrs	r3, r2
 80036b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 0301 	and.w	r3, r3, #1
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d040      	beq.n	8003748 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036ce:	4b47      	ldr	r3, [pc, #284]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d115      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e07f      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d107      	bne.n	80036f6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e6:	4b41      	ldr	r3, [pc, #260]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e073      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036f6:	4b3d      	ldr	r3, [pc, #244]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 0302 	and.w	r3, r3, #2
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e06b      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003706:	4b39      	ldr	r3, [pc, #228]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f023 0203 	bic.w	r2, r3, #3
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	4936      	ldr	r1, [pc, #216]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003714:	4313      	orrs	r3, r2
 8003716:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003718:	f7fe f818 	bl	800174c <HAL_GetTick>
 800371c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	e00a      	b.n	8003736 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003720:	f7fe f814 	bl	800174c <HAL_GetTick>
 8003724:	4602      	mov	r2, r0
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	1ad3      	subs	r3, r2, r3
 800372a:	f241 3288 	movw	r2, #5000	; 0x1388
 800372e:	4293      	cmp	r3, r2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e053      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003736:	4b2d      	ldr	r3, [pc, #180]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 020c 	and.w	r2, r3, #12
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	429a      	cmp	r2, r3
 8003746:	d1eb      	bne.n	8003720 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003748:	4b27      	ldr	r3, [pc, #156]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 030f 	and.w	r3, r3, #15
 8003750:	683a      	ldr	r2, [r7, #0]
 8003752:	429a      	cmp	r2, r3
 8003754:	d210      	bcs.n	8003778 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003756:	4b24      	ldr	r3, [pc, #144]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f023 020f 	bic.w	r2, r3, #15
 800375e:	4922      	ldr	r1, [pc, #136]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	4313      	orrs	r3, r2
 8003764:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003766:	4b20      	ldr	r3, [pc, #128]	; (80037e8 <HAL_RCC_ClockConfig+0x1c4>)
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f003 030f 	and.w	r3, r3, #15
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d001      	beq.n	8003778 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e032      	b.n	80037de <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f003 0304 	and.w	r3, r3, #4
 8003780:	2b00      	cmp	r3, #0
 8003782:	d008      	beq.n	8003796 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003784:	4b19      	ldr	r3, [pc, #100]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4916      	ldr	r1, [pc, #88]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 0308 	and.w	r3, r3, #8
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80037a2:	4b12      	ldr	r3, [pc, #72]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	00db      	lsls	r3, r3, #3
 80037b0:	490e      	ldr	r1, [pc, #56]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037b2:	4313      	orrs	r3, r2
 80037b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80037b6:	f000 f821 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 80037ba:	4602      	mov	r2, r0
 80037bc:	4b0b      	ldr	r3, [pc, #44]	; (80037ec <HAL_RCC_ClockConfig+0x1c8>)
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	091b      	lsrs	r3, r3, #4
 80037c2:	f003 030f 	and.w	r3, r3, #15
 80037c6:	490a      	ldr	r1, [pc, #40]	; (80037f0 <HAL_RCC_ClockConfig+0x1cc>)
 80037c8:	5ccb      	ldrb	r3, [r1, r3]
 80037ca:	fa22 f303 	lsr.w	r3, r2, r3
 80037ce:	4a09      	ldr	r2, [pc, #36]	; (80037f4 <HAL_RCC_ClockConfig+0x1d0>)
 80037d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037d2:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_ClockConfig+0x1d4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7fd ff74 	bl	80016c4 <HAL_InitTick>

  return HAL_OK;
 80037dc:	2300      	movs	r3, #0
}
 80037de:	4618      	mov	r0, r3
 80037e0:	3710      	adds	r7, #16
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	40023c00 	.word	0x40023c00
 80037ec:	40023800 	.word	0x40023800
 80037f0:	08005d78 	.word	0x08005d78
 80037f4:	2000008c 	.word	0x2000008c
 80037f8:	20000090 	.word	0x20000090

080037fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003800:	b094      	sub	sp, #80	; 0x50
 8003802:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003804:	2300      	movs	r3, #0
 8003806:	647b      	str	r3, [r7, #68]	; 0x44
 8003808:	2300      	movs	r3, #0
 800380a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800380c:	2300      	movs	r3, #0
 800380e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003810:	2300      	movs	r3, #0
 8003812:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003814:	4b79      	ldr	r3, [pc, #484]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f003 030c 	and.w	r3, r3, #12
 800381c:	2b08      	cmp	r3, #8
 800381e:	d00d      	beq.n	800383c <HAL_RCC_GetSysClockFreq+0x40>
 8003820:	2b08      	cmp	r3, #8
 8003822:	f200 80e1 	bhi.w	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d002      	beq.n	8003830 <HAL_RCC_GetSysClockFreq+0x34>
 800382a:	2b04      	cmp	r3, #4
 800382c:	d003      	beq.n	8003836 <HAL_RCC_GetSysClockFreq+0x3a>
 800382e:	e0db      	b.n	80039e8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003830:	4b73      	ldr	r3, [pc, #460]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 8003832:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003834:	e0db      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003836:	4b73      	ldr	r3, [pc, #460]	; (8003a04 <HAL_RCC_GetSysClockFreq+0x208>)
 8003838:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800383a:	e0d8      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800383c:	4b6f      	ldr	r3, [pc, #444]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003844:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003846:	4b6d      	ldr	r3, [pc, #436]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d063      	beq.n	800391a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003852:	4b6a      	ldr	r3, [pc, #424]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	099b      	lsrs	r3, r3, #6
 8003858:	2200      	movs	r2, #0
 800385a:	63bb      	str	r3, [r7, #56]	; 0x38
 800385c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800385e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003860:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003864:	633b      	str	r3, [r7, #48]	; 0x30
 8003866:	2300      	movs	r3, #0
 8003868:	637b      	str	r3, [r7, #52]	; 0x34
 800386a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800386e:	4622      	mov	r2, r4
 8003870:	462b      	mov	r3, r5
 8003872:	f04f 0000 	mov.w	r0, #0
 8003876:	f04f 0100 	mov.w	r1, #0
 800387a:	0159      	lsls	r1, r3, #5
 800387c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003880:	0150      	lsls	r0, r2, #5
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4621      	mov	r1, r4
 8003888:	1a51      	subs	r1, r2, r1
 800388a:	6139      	str	r1, [r7, #16]
 800388c:	4629      	mov	r1, r5
 800388e:	eb63 0301 	sbc.w	r3, r3, r1
 8003892:	617b      	str	r3, [r7, #20]
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038a0:	4659      	mov	r1, fp
 80038a2:	018b      	lsls	r3, r1, #6
 80038a4:	4651      	mov	r1, sl
 80038a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80038aa:	4651      	mov	r1, sl
 80038ac:	018a      	lsls	r2, r1, #6
 80038ae:	4651      	mov	r1, sl
 80038b0:	ebb2 0801 	subs.w	r8, r2, r1
 80038b4:	4659      	mov	r1, fp
 80038b6:	eb63 0901 	sbc.w	r9, r3, r1
 80038ba:	f04f 0200 	mov.w	r2, #0
 80038be:	f04f 0300 	mov.w	r3, #0
 80038c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80038c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80038ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80038ce:	4690      	mov	r8, r2
 80038d0:	4699      	mov	r9, r3
 80038d2:	4623      	mov	r3, r4
 80038d4:	eb18 0303 	adds.w	r3, r8, r3
 80038d8:	60bb      	str	r3, [r7, #8]
 80038da:	462b      	mov	r3, r5
 80038dc:	eb49 0303 	adc.w	r3, r9, r3
 80038e0:	60fb      	str	r3, [r7, #12]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80038ee:	4629      	mov	r1, r5
 80038f0:	024b      	lsls	r3, r1, #9
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80038f8:	4621      	mov	r1, r4
 80038fa:	024a      	lsls	r2, r1, #9
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003902:	2200      	movs	r2, #0
 8003904:	62bb      	str	r3, [r7, #40]	; 0x28
 8003906:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003908:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800390c:	f7fc fc7c 	bl	8000208 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003918:	e058      	b.n	80039cc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800391a:	4b38      	ldr	r3, [pc, #224]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	099b      	lsrs	r3, r3, #6
 8003920:	2200      	movs	r2, #0
 8003922:	4618      	mov	r0, r3
 8003924:	4611      	mov	r1, r2
 8003926:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800392a:	623b      	str	r3, [r7, #32]
 800392c:	2300      	movs	r3, #0
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
 8003930:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003934:	4642      	mov	r2, r8
 8003936:	464b      	mov	r3, r9
 8003938:	f04f 0000 	mov.w	r0, #0
 800393c:	f04f 0100 	mov.w	r1, #0
 8003940:	0159      	lsls	r1, r3, #5
 8003942:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003946:	0150      	lsls	r0, r2, #5
 8003948:	4602      	mov	r2, r0
 800394a:	460b      	mov	r3, r1
 800394c:	4641      	mov	r1, r8
 800394e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003952:	4649      	mov	r1, r9
 8003954:	eb63 0b01 	sbc.w	fp, r3, r1
 8003958:	f04f 0200 	mov.w	r2, #0
 800395c:	f04f 0300 	mov.w	r3, #0
 8003960:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003964:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003968:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800396c:	ebb2 040a 	subs.w	r4, r2, sl
 8003970:	eb63 050b 	sbc.w	r5, r3, fp
 8003974:	f04f 0200 	mov.w	r2, #0
 8003978:	f04f 0300 	mov.w	r3, #0
 800397c:	00eb      	lsls	r3, r5, #3
 800397e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003982:	00e2      	lsls	r2, r4, #3
 8003984:	4614      	mov	r4, r2
 8003986:	461d      	mov	r5, r3
 8003988:	4643      	mov	r3, r8
 800398a:	18e3      	adds	r3, r4, r3
 800398c:	603b      	str	r3, [r7, #0]
 800398e:	464b      	mov	r3, r9
 8003990:	eb45 0303 	adc.w	r3, r5, r3
 8003994:	607b      	str	r3, [r7, #4]
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	f04f 0300 	mov.w	r3, #0
 800399e:	e9d7 4500 	ldrd	r4, r5, [r7]
 80039a2:	4629      	mov	r1, r5
 80039a4:	028b      	lsls	r3, r1, #10
 80039a6:	4621      	mov	r1, r4
 80039a8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039ac:	4621      	mov	r1, r4
 80039ae:	028a      	lsls	r2, r1, #10
 80039b0:	4610      	mov	r0, r2
 80039b2:	4619      	mov	r1, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	2200      	movs	r2, #0
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	61fa      	str	r2, [r7, #28]
 80039bc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80039c0:	f7fc fc22 	bl	8000208 <__aeabi_uldivmod>
 80039c4:	4602      	mov	r2, r0
 80039c6:	460b      	mov	r3, r1
 80039c8:	4613      	mov	r3, r2
 80039ca:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80039cc:	4b0b      	ldr	r3, [pc, #44]	; (80039fc <HAL_RCC_GetSysClockFreq+0x200>)
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	0c1b      	lsrs	r3, r3, #16
 80039d2:	f003 0303 	and.w	r3, r3, #3
 80039d6:	3301      	adds	r3, #1
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80039dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80039de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039e6:	e002      	b.n	80039ee <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e8:	4b05      	ldr	r3, [pc, #20]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x204>)
 80039ea:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80039ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	3750      	adds	r7, #80	; 0x50
 80039f4:	46bd      	mov	sp, r7
 80039f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	00f42400 	.word	0x00f42400
 8003a04:	007a1200 	.word	0x007a1200

08003a08 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a0c:	4b03      	ldr	r3, [pc, #12]	; (8003a1c <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
 8003a1a:	bf00      	nop
 8003a1c:	2000008c 	.word	0x2000008c

08003a20 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003a24:	f7ff fff0 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	0a9b      	lsrs	r3, r3, #10
 8003a30:	f003 0307 	and.w	r3, r3, #7
 8003a34:	4903      	ldr	r1, [pc, #12]	; (8003a44 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a36:	5ccb      	ldrb	r3, [r1, r3]
 8003a38:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	40023800 	.word	0x40023800
 8003a44:	08005d88 	.word	0x08005d88

08003a48 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003a4c:	f7ff ffdc 	bl	8003a08 <HAL_RCC_GetHCLKFreq>
 8003a50:	4602      	mov	r2, r0
 8003a52:	4b05      	ldr	r3, [pc, #20]	; (8003a68 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	0b5b      	lsrs	r3, r3, #13
 8003a58:	f003 0307 	and.w	r3, r3, #7
 8003a5c:	4903      	ldr	r1, [pc, #12]	; (8003a6c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003a5e:	5ccb      	ldrb	r3, [r1, r3]
 8003a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	40023800 	.word	0x40023800
 8003a6c:	08005d88 	.word	0x08005d88

08003a70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003a78:	2300      	movs	r3, #0
 8003a7a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0301 	and.w	r3, r3, #1
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d012      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003a98:	4b69      	ldr	r3, [pc, #420]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9a:	689b      	ldr	r3, [r3, #8]
 8003a9c:	4a68      	ldr	r2, [pc, #416]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a9e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003aa2:	6093      	str	r3, [r2, #8]
 8003aa4:	4b66      	ldr	r3, [pc, #408]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aa6:	689a      	ldr	r2, [r3, #8]
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003aac:	4964      	ldr	r1, [pc, #400]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003aba:	2301      	movs	r3, #1
 8003abc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d017      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003aca:	4b5d      	ldr	r3, [pc, #372]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003acc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ad0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad8:	4959      	ldr	r1, [pc, #356]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ada:	4313      	orrs	r3, r2
 8003adc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ae4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae8:	d101      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003aea:	2301      	movs	r3, #1
 8003aec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d017      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003b06:	4b4e      	ldr	r3, [pc, #312]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b14:	494a      	ldr	r1, [pc, #296]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b24:	d101      	bne.n	8003b2a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003b26:	2301      	movs	r3, #1
 8003b28:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d101      	bne.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003b42:	2301      	movs	r3, #1
 8003b44:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0320 	and.w	r3, r3, #32
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	f000 808b 	beq.w	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b54:	4b3a      	ldr	r3, [pc, #232]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b58:	4a39      	ldr	r2, [pc, #228]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b5a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8003b60:	4b37      	ldr	r3, [pc, #220]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003b6c:	4b35      	ldr	r3, [pc, #212]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	4a34      	ldr	r2, [pc, #208]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b76:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003b78:	f7fd fde8 	bl	800174c <HAL_GetTick>
 8003b7c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b80:	f7fd fde4 	bl	800174c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	; 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e357      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003b92:	4b2c      	ldr	r3, [pc, #176]	; (8003c44 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d0f0      	beq.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003b9e:	4b28      	ldr	r3, [pc, #160]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ba2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ba6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d035      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	429a      	cmp	r2, r3
 8003bba:	d02e      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003bbc:	4b20      	ldr	r3, [pc, #128]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003bc6:	4b1e      	ldr	r3, [pc, #120]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bca:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003bd2:	4b1b      	ldr	r3, [pc, #108]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bd6:	4a1a      	ldr	r2, [pc, #104]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003bd8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bdc:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003bde:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003be4:	4b16      	ldr	r3, [pc, #88]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d114      	bne.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fdac 	bl	800174c <HAL_GetTick>
 8003bf4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bf6:	e00a      	b.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fda8 	bl	800174c <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d901      	bls.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e319      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c0e:	4b0c      	ldr	r3, [pc, #48]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0ee      	beq.n	8003bf8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c26:	d111      	bne.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003c28:	4b05      	ldr	r3, [pc, #20]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003c34:	4b04      	ldr	r3, [pc, #16]	; (8003c48 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003c36:	400b      	ands	r3, r1
 8003c38:	4901      	ldr	r1, [pc, #4]	; (8003c40 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003c3a:	4313      	orrs	r3, r2
 8003c3c:	608b      	str	r3, [r1, #8]
 8003c3e:	e00b      	b.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003c40:	40023800 	.word	0x40023800
 8003c44:	40007000 	.word	0x40007000
 8003c48:	0ffffcff 	.word	0x0ffffcff
 8003c4c:	4baa      	ldr	r3, [pc, #680]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	4aa9      	ldr	r2, [pc, #676]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c52:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c56:	6093      	str	r3, [r2, #8]
 8003c58:	4ba7      	ldr	r3, [pc, #668]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c5a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c64:	49a4      	ldr	r1, [pc, #656]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c66:	4313      	orrs	r3, r2
 8003c68:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0310 	and.w	r3, r3, #16
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d010      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003c76:	4ba0      	ldr	r3, [pc, #640]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003c7c:	4a9e      	ldr	r2, [pc, #632]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c7e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003c82:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003c86:	4b9c      	ldr	r3, [pc, #624]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c88:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c90:	4999      	ldr	r1, [pc, #612]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003c92:	4313      	orrs	r3, r2
 8003c94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d00a      	beq.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ca4:	4b94      	ldr	r3, [pc, #592]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003caa:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003cb2:	4991      	ldr	r1, [pc, #580]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00a      	beq.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003cc6:	4b8c      	ldr	r3, [pc, #560]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ccc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003cd4:	4988      	ldr	r1, [pc, #544]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cd6:	4313      	orrs	r3, r2
 8003cd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00a      	beq.n	8003cfe <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003ce8:	4b83      	ldr	r3, [pc, #524]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003cf6:	4980      	ldr	r1, [pc, #512]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00a      	beq.n	8003d20 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003d0a:	4b7b      	ldr	r3, [pc, #492]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d10:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d18:	4977      	ldr	r1, [pc, #476]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d00a      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d2c:	4b72      	ldr	r3, [pc, #456]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f023 0203 	bic.w	r2, r3, #3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d3a:	496f      	ldr	r1, [pc, #444]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d00a      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003d4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d54:	f023 020c 	bic.w	r2, r3, #12
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d5c:	4966      	ldr	r1, [pc, #408]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d00a      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d70:	4b61      	ldr	r3, [pc, #388]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d76:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d7e:	495e      	ldr	r1, [pc, #376]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d80:	4313      	orrs	r3, r2
 8003d82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d00a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003d92:	4b59      	ldr	r3, [pc, #356]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003d94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d98:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003da0:	4955      	ldr	r1, [pc, #340]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003da2:	4313      	orrs	r3, r2
 8003da4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d00a      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003db4:	4b50      	ldr	r3, [pc, #320]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc2:	494d      	ldr	r1, [pc, #308]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d00a      	beq.n	8003dec <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ddc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003de4:	4944      	ldr	r1, [pc, #272]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003de6:	4313      	orrs	r3, r2
 8003de8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d00a      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003dfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e06:	493c      	ldr	r1, [pc, #240]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e08:	4313      	orrs	r3, r2
 8003e0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003e1a:	4b37      	ldr	r3, [pc, #220]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e20:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e28:	4933      	ldr	r1, [pc, #204]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d00a      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e3c:	4b2e      	ldr	r3, [pc, #184]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e42:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003e4a:	492b      	ldr	r1, [pc, #172]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d011      	beq.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003e5e:	4b26      	ldr	r3, [pc, #152]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e64:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e6c:	4922      	ldr	r1, [pc, #136]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003e6e:	4313      	orrs	r3, r2
 8003e70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e7c:	d101      	bne.n	8003e82 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f003 0308 	and.w	r3, r3, #8
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d00a      	beq.n	8003eb4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e9e:	4b16      	ldr	r3, [pc, #88]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ea0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ea4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eac:	4912      	ldr	r1, [pc, #72]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00b      	beq.n	8003ed8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003ec0:	4b0d      	ldr	r3, [pc, #52]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ec2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ed0:	4909      	ldr	r1, [pc, #36]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d006      	beq.n	8003eec <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	f000 80d9 	beq.w	800409e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003eec:	4b02      	ldr	r3, [pc, #8]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a01      	ldr	r2, [pc, #4]	; (8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003ef2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003ef6:	e001      	b.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8003ef8:	40023800 	.word	0x40023800
 8003efc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003efe:	f7fd fc25 	bl	800174c <HAL_GetTick>
 8003f02:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f04:	e008      	b.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f06:	f7fd fc21 	bl	800174c <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b64      	cmp	r3, #100	; 0x64
 8003f12:	d901      	bls.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e194      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003f18:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d1f0      	bne.n	8003f06 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d021      	beq.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d11d      	bne.n	8003f74 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f38:	4b64      	ldr	r3, [pc, #400]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f3e:	0c1b      	lsrs	r3, r3, #16
 8003f40:	f003 0303 	and.w	r3, r3, #3
 8003f44:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f46:	4b61      	ldr	r3, [pc, #388]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f4c:	0e1b      	lsrs	r3, r3, #24
 8003f4e:	f003 030f 	and.w	r3, r3, #15
 8003f52:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	019a      	lsls	r2, r3, #6
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	041b      	lsls	r3, r3, #16
 8003f5e:	431a      	orrs	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	061b      	lsls	r3, r3, #24
 8003f64:	431a      	orrs	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	071b      	lsls	r3, r3, #28
 8003f6c:	4957      	ldr	r1, [pc, #348]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d004      	beq.n	8003f8a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f88:	d00a      	beq.n	8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d02e      	beq.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f9e:	d129      	bne.n	8003ff4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003fa0:	4b4a      	ldr	r3, [pc, #296]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fa6:	0c1b      	lsrs	r3, r3, #16
 8003fa8:	f003 0303 	and.w	r3, r3, #3
 8003fac:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003fae:	4b47      	ldr	r3, [pc, #284]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fb0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003fb4:	0f1b      	lsrs	r3, r3, #28
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	019a      	lsls	r2, r3, #6
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	041b      	lsls	r3, r3, #16
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	061b      	lsls	r3, r3, #24
 8003fce:	431a      	orrs	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	071b      	lsls	r3, r3, #28
 8003fd4:	493d      	ldr	r1, [pc, #244]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003fdc:	4b3b      	ldr	r3, [pc, #236]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fde:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003fe2:	f023 021f 	bic.w	r2, r3, #31
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fea:	3b01      	subs	r3, #1
 8003fec:	4937      	ldr	r1, [pc, #220]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d01d      	beq.n	800403c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004000:	4b32      	ldr	r3, [pc, #200]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004002:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004006:	0e1b      	lsrs	r3, r3, #24
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800400e:	4b2f      	ldr	r3, [pc, #188]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004010:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004014:	0f1b      	lsrs	r3, r3, #28
 8004016:	f003 0307 	and.w	r3, r3, #7
 800401a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	019a      	lsls	r2, r3, #6
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	691b      	ldr	r3, [r3, #16]
 8004026:	041b      	lsls	r3, r3, #16
 8004028:	431a      	orrs	r2, r3
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	061b      	lsls	r3, r3, #24
 800402e:	431a      	orrs	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	071b      	lsls	r3, r3, #28
 8004034:	4925      	ldr	r1, [pc, #148]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004036:	4313      	orrs	r3, r2
 8004038:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004044:	2b00      	cmp	r3, #0
 8004046:	d011      	beq.n	800406c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	019a      	lsls	r2, r3, #6
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	041b      	lsls	r3, r3, #16
 8004054:	431a      	orrs	r2, r3
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	061b      	lsls	r3, r3, #24
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	071b      	lsls	r3, r3, #28
 8004064:	4919      	ldr	r1, [pc, #100]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800406c:	4b17      	ldr	r3, [pc, #92]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a16      	ldr	r2, [pc, #88]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004072:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004076:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004078:	f7fd fb68 	bl	800174c <HAL_GetTick>
 800407c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800407e:	e008      	b.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004080:	f7fd fb64 	bl	800174c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	697b      	ldr	r3, [r7, #20]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	2b64      	cmp	r3, #100	; 0x64
 800408c:	d901      	bls.n	8004092 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0d7      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004092:	4b0e      	ldr	r3, [pc, #56]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800409a:	2b00      	cmp	r3, #0
 800409c:	d0f0      	beq.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	f040 80cd 	bne.w	8004240 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80040a6:	4b09      	ldr	r3, [pc, #36]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a08      	ldr	r2, [pc, #32]	; (80040cc <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80040ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040b0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040b2:	f7fd fb4b 	bl	800174c <HAL_GetTick>
 80040b6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040b8:	e00a      	b.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80040ba:	f7fd fb47 	bl	800174c <HAL_GetTick>
 80040be:	4602      	mov	r2, r0
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	1ad3      	subs	r3, r2, r3
 80040c4:	2b64      	cmp	r3, #100	; 0x64
 80040c6:	d903      	bls.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80040c8:	2303      	movs	r3, #3
 80040ca:	e0ba      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80040cc:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80040d0:	4b5e      	ldr	r3, [pc, #376]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80040d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80040dc:	d0ed      	beq.n	80040ba <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d003      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d009      	beq.n	8004106 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d02e      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d12a      	bne.n	800415c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004106:	4b51      	ldr	r3, [pc, #324]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410c:	0c1b      	lsrs	r3, r3, #16
 800410e:	f003 0303 	and.w	r3, r3, #3
 8004112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004114:	4b4d      	ldr	r3, [pc, #308]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004116:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800411a:	0f1b      	lsrs	r3, r3, #28
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	019a      	lsls	r2, r3, #6
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	041b      	lsls	r3, r3, #16
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	699b      	ldr	r3, [r3, #24]
 8004132:	061b      	lsls	r3, r3, #24
 8004134:	431a      	orrs	r2, r3
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	071b      	lsls	r3, r3, #28
 800413a:	4944      	ldr	r1, [pc, #272]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800413c:	4313      	orrs	r3, r2
 800413e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004142:	4b42      	ldr	r3, [pc, #264]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004148:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004150:	3b01      	subs	r3, #1
 8004152:	021b      	lsls	r3, r3, #8
 8004154:	493d      	ldr	r1, [pc, #244]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004156:	4313      	orrs	r3, r2
 8004158:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d022      	beq.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800416c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004170:	d11d      	bne.n	80041ae <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004172:	4b36      	ldr	r3, [pc, #216]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004178:	0e1b      	lsrs	r3, r3, #24
 800417a:	f003 030f 	and.w	r3, r3, #15
 800417e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004180:	4b32      	ldr	r3, [pc, #200]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004186:	0f1b      	lsrs	r3, r3, #28
 8004188:	f003 0307 	and.w	r3, r3, #7
 800418c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	019a      	lsls	r2, r3, #6
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	041b      	lsls	r3, r3, #16
 800419a:	431a      	orrs	r2, r3
 800419c:	693b      	ldr	r3, [r7, #16]
 800419e:	061b      	lsls	r3, r3, #24
 80041a0:	431a      	orrs	r2, r3
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	071b      	lsls	r3, r3, #28
 80041a6:	4929      	ldr	r1, [pc, #164]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041a8:	4313      	orrs	r3, r2
 80041aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d028      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80041ba:	4b24      	ldr	r3, [pc, #144]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c0:	0e1b      	lsrs	r3, r3, #24
 80041c2:	f003 030f 	and.w	r3, r3, #15
 80041c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80041c8:	4b20      	ldr	r3, [pc, #128]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ce:	0c1b      	lsrs	r3, r3, #16
 80041d0:	f003 0303 	and.w	r3, r3, #3
 80041d4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	695b      	ldr	r3, [r3, #20]
 80041da:	019a      	lsls	r2, r3, #6
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	041b      	lsls	r3, r3, #16
 80041e0:	431a      	orrs	r2, r3
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	061b      	lsls	r3, r3, #24
 80041e6:	431a      	orrs	r2, r3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	69db      	ldr	r3, [r3, #28]
 80041ec:	071b      	lsls	r3, r3, #28
 80041ee:	4917      	ldr	r1, [pc, #92]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80041f6:	4b15      	ldr	r3, [pc, #84]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80041f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80041fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004204:	4911      	ldr	r1, [pc, #68]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800420c:	4b0f      	ldr	r3, [pc, #60]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a0e      	ldr	r2, [pc, #56]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004212:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004218:	f7fd fa98 	bl	800174c <HAL_GetTick>
 800421c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004220:	f7fd fa94 	bl	800174c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b64      	cmp	r3, #100	; 0x64
 800422c:	d901      	bls.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e007      	b.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004232:	4b06      	ldr	r3, [pc, #24]	; (800424c <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800423a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800423e:	d1ef      	bne.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8004240:	2300      	movs	r3, #0
}
 8004242:	4618      	mov	r0, r3
 8004244:	3720      	adds	r7, #32
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40023800 	.word	0x40023800

08004250 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b082      	sub	sp, #8
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d101      	bne.n	8004262 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e049      	b.n	80042f6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004268:	b2db      	uxtb	r3, r3
 800426a:	2b00      	cmp	r3, #0
 800426c:	d106      	bne.n	800427c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f7fd f870 	bl	800135c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2202      	movs	r2, #2
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	4619      	mov	r1, r3
 800428e:	4610      	mov	r0, r2
 8004290:	f000 fb66 	bl	8004960 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2201      	movs	r2, #1
 80042d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2201      	movs	r2, #1
 80042d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2201      	movs	r2, #1
 80042e8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042f4:	2300      	movs	r3, #0
}
 80042f6:	4618      	mov	r0, r3
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e054      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d022      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d01d      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d018      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_TIM_Base_Start_IT+0xdc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d115      	bne.n	80043ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_TIM_Base_Start_IT+0xec>)
 8004388:	4013      	ands	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b06      	cmp	r3, #6
 8004390:	d015      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d011      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e008      	b.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b086      	sub	sp, #24
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d101      	bne.n	8004404 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e08f      	b.n	8004524 <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800440a:	b2db      	uxtb	r3, r3
 800440c:	2b00      	cmp	r3, #0
 800440e:	d106      	bne.n	800441e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004418:	6878      	ldr	r0, [r7, #4]
 800441a:	f7fd f823 	bl	8001464 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2202      	movs	r2, #2
 8004422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	6899      	ldr	r1, [r3, #8]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681a      	ldr	r2, [r3, #0]
 8004430:	4b3e      	ldr	r3, [pc, #248]	; (800452c <HAL_TIM_Encoder_Init+0x13c>)
 8004432:	400b      	ands	r3, r1
 8004434:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	3304      	adds	r3, #4
 800443e:	4619      	mov	r1, r3
 8004440:	4610      	mov	r0, r2
 8004442:	f000 fa8d 	bl	8004960 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	689b      	ldr	r3, [r3, #8]
 800444c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	697a      	ldr	r2, [r7, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004468:	693a      	ldr	r2, [r7, #16]
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <HAL_TIM_Encoder_Init+0x140>)
 800446c:	4013      	ands	r3, r2
 800446e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	021b      	lsls	r3, r3, #8
 800447a:	4313      	orrs	r3, r2
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004482:	693a      	ldr	r2, [r7, #16]
 8004484:	4b2b      	ldr	r3, [pc, #172]	; (8004534 <HAL_TIM_Encoder_Init+0x144>)
 8004486:	4013      	ands	r3, r2
 8004488:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800448a:	693a      	ldr	r2, [r7, #16]
 800448c:	4b2a      	ldr	r3, [pc, #168]	; (8004538 <HAL_TIM_Encoder_Init+0x148>)
 800448e:	4013      	ands	r3, r2
 8004490:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	683b      	ldr	r3, [r7, #0]
 8004498:	69db      	ldr	r3, [r3, #28]
 800449a:	021b      	lsls	r3, r3, #8
 800449c:	4313      	orrs	r3, r2
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	4313      	orrs	r3, r2
 80044a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	691b      	ldr	r3, [r3, #16]
 80044a8:	011a      	lsls	r2, r3, #4
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	031b      	lsls	r3, r3, #12
 80044b0:	4313      	orrs	r3, r2
 80044b2:	693a      	ldr	r2, [r7, #16]
 80044b4:	4313      	orrs	r3, r2
 80044b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80044c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685a      	ldr	r2, [r3, #4]
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	695b      	ldr	r3, [r3, #20]
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	4313      	orrs	r3, r2
 80044d4:	68fa      	ldr	r2, [r7, #12]
 80044d6:	4313      	orrs	r3, r2
 80044d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2201      	movs	r2, #1
 8004506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2201      	movs	r2, #1
 800450e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2201      	movs	r2, #1
 8004516:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2201      	movs	r2, #1
 800451e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004522:	2300      	movs	r3, #0
}
 8004524:	4618      	mov	r0, r3
 8004526:	3718      	adds	r7, #24
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}
 800452c:	fffebff8 	.word	0xfffebff8
 8004530:	fffffcfc 	.word	0xfffffcfc
 8004534:	fffff3f3 	.word	0xfffff3f3
 8004538:	ffff0f0f 	.word	0xffff0f0f

0800453c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
 8004542:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	f003 0302 	and.w	r3, r3, #2
 800454e:	2b02      	cmp	r3, #2
 8004550:	d122      	bne.n	8004598 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68db      	ldr	r3, [r3, #12]
 8004558:	f003 0302 	and.w	r3, r3, #2
 800455c:	2b02      	cmp	r3, #2
 800455e:	d11b      	bne.n	8004598 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f06f 0202 	mvn.w	r2, #2
 8004568:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	2201      	movs	r2, #1
 800456e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	699b      	ldr	r3, [r3, #24]
 8004576:	f003 0303 	and.w	r3, r3, #3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 f9d0 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 8004584:	e005      	b.n	8004592 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004586:	6878      	ldr	r0, [r7, #4]
 8004588:	f000 f9c2 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800458c:	6878      	ldr	r0, [r7, #4]
 800458e:	f000 f9d3 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2200      	movs	r2, #0
 8004596:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0304 	and.w	r3, r3, #4
 80045a2:	2b04      	cmp	r3, #4
 80045a4:	d122      	bne.n	80045ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b04      	cmp	r3, #4
 80045b2:	d11b      	bne.n	80045ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0204 	mvn.w	r2, #4
 80045bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2202      	movs	r2, #2
 80045c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d003      	beq.n	80045da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045d2:	6878      	ldr	r0, [r7, #4]
 80045d4:	f000 f9a6 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 80045d8:	e005      	b.n	80045e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f000 f998 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045e0:	6878      	ldr	r0, [r7, #4]
 80045e2:	f000 f9a9 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b08      	cmp	r3, #8
 80045f8:	d122      	bne.n	8004640 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	68db      	ldr	r3, [r3, #12]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d11b      	bne.n	8004640 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f06f 0208 	mvn.w	r2, #8
 8004610:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2204      	movs	r2, #4
 8004616:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	69db      	ldr	r3, [r3, #28]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f97c 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 800462c:	e005      	b.n	800463a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f96e 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	f000 f97f 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2200      	movs	r2, #0
 800463e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	691b      	ldr	r3, [r3, #16]
 8004646:	f003 0310 	and.w	r3, r3, #16
 800464a:	2b10      	cmp	r3, #16
 800464c:	d122      	bne.n	8004694 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	68db      	ldr	r3, [r3, #12]
 8004654:	f003 0310 	and.w	r3, r3, #16
 8004658:	2b10      	cmp	r3, #16
 800465a:	d11b      	bne.n	8004694 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f06f 0210 	mvn.w	r2, #16
 8004664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2208      	movs	r2, #8
 800466a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	69db      	ldr	r3, [r3, #28]
 8004672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f952 	bl	8004924 <HAL_TIM_IC_CaptureCallback>
 8004680:	e005      	b.n	800468e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	f000 f944 	bl	8004910 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f000 f955 	bl	8004938 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	691b      	ldr	r3, [r3, #16]
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b01      	cmp	r3, #1
 80046a0:	d10e      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	f003 0301 	and.w	r3, r3, #1
 80046ac:	2b01      	cmp	r3, #1
 80046ae:	d107      	bne.n	80046c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f06f 0201 	mvn.w	r2, #1
 80046b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7fc fbb0 	bl	8000e20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046ca:	2b80      	cmp	r3, #128	; 0x80
 80046cc:	d10e      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	68db      	ldr	r3, [r3, #12]
 80046d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046d8:	2b80      	cmp	r3, #128	; 0x80
 80046da:	d107      	bne.n	80046ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fb0c 	bl	8004d04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	691b      	ldr	r3, [r3, #16]
 80046f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046fa:	d10e      	bne.n	800471a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	68db      	ldr	r3, [r3, #12]
 8004702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004706:	2b80      	cmp	r3, #128	; 0x80
 8004708:	d107      	bne.n	800471a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 faff 	bl	8004d18 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	691b      	ldr	r3, [r3, #16]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d10e      	bne.n	8004746 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	68db      	ldr	r3, [r3, #12]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b40      	cmp	r3, #64	; 0x40
 8004734:	d107      	bne.n	8004746 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800473e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f903 	bl	800494c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d10e      	bne.n	8004772 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	f003 0320 	and.w	r3, r3, #32
 800475e:	2b20      	cmp	r3, #32
 8004760:	d107      	bne.n	8004772 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f06f 0220 	mvn.w	r2, #32
 800476a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 fabf 	bl	8004cf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004772:	bf00      	nop
 8004774:	3708      	adds	r7, #8
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
	...

0800477c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004786:	2300      	movs	r3, #0
 8004788:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004790:	2b01      	cmp	r3, #1
 8004792:	d101      	bne.n	8004798 <HAL_TIM_ConfigClockSource+0x1c>
 8004794:	2302      	movs	r3, #2
 8004796:	e0b4      	b.n	8004902 <HAL_TIM_ConfigClockSource+0x186>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2202      	movs	r2, #2
 80047a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80047b0:	68ba      	ldr	r2, [r7, #8]
 80047b2:	4b56      	ldr	r3, [pc, #344]	; (800490c <HAL_TIM_ConfigClockSource+0x190>)
 80047b4:	4013      	ands	r3, r2
 80047b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80047be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68ba      	ldr	r2, [r7, #8]
 80047c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d0:	d03e      	beq.n	8004850 <HAL_TIM_ConfigClockSource+0xd4>
 80047d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047d6:	f200 8087 	bhi.w	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047de:	f000 8086 	beq.w	80048ee <HAL_TIM_ConfigClockSource+0x172>
 80047e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e6:	d87f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047e8:	2b70      	cmp	r3, #112	; 0x70
 80047ea:	d01a      	beq.n	8004822 <HAL_TIM_ConfigClockSource+0xa6>
 80047ec:	2b70      	cmp	r3, #112	; 0x70
 80047ee:	d87b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f0:	2b60      	cmp	r3, #96	; 0x60
 80047f2:	d050      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x11a>
 80047f4:	2b60      	cmp	r3, #96	; 0x60
 80047f6:	d877      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 80047f8:	2b50      	cmp	r3, #80	; 0x50
 80047fa:	d03c      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0xfa>
 80047fc:	2b50      	cmp	r3, #80	; 0x50
 80047fe:	d873      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004800:	2b40      	cmp	r3, #64	; 0x40
 8004802:	d058      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x13a>
 8004804:	2b40      	cmp	r3, #64	; 0x40
 8004806:	d86f      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004808:	2b30      	cmp	r3, #48	; 0x30
 800480a:	d064      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 800480c:	2b30      	cmp	r3, #48	; 0x30
 800480e:	d86b      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004810:	2b20      	cmp	r3, #32
 8004812:	d060      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004814:	2b20      	cmp	r3, #32
 8004816:	d867      	bhi.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
 8004818:	2b00      	cmp	r3, #0
 800481a:	d05c      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 800481c:	2b10      	cmp	r3, #16
 800481e:	d05a      	beq.n	80048d6 <HAL_TIM_ConfigClockSource+0x15a>
 8004820:	e062      	b.n	80048e8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6818      	ldr	r0, [r3, #0]
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	6899      	ldr	r1, [r3, #8]
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685a      	ldr	r2, [r3, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	68db      	ldr	r3, [r3, #12]
 8004832:	f000 f9af 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004844:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	68ba      	ldr	r2, [r7, #8]
 800484c:	609a      	str	r2, [r3, #8]
      break;
 800484e:	e04f      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	6899      	ldr	r1, [r3, #8]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685a      	ldr	r2, [r3, #4]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	68db      	ldr	r3, [r3, #12]
 8004860:	f000 f998 	bl	8004b94 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689a      	ldr	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004872:	609a      	str	r2, [r3, #8]
      break;
 8004874:	e03c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f000 f90c 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2150      	movs	r1, #80	; 0x50
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f965 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 8004894:	e02c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f92b 	bl	8004afe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2160      	movs	r1, #96	; 0x60
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f955 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048b4:	e01c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6818      	ldr	r0, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	6859      	ldr	r1, [r3, #4]
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	68db      	ldr	r3, [r3, #12]
 80048c2:	461a      	mov	r2, r3
 80048c4:	f000 f8ec 	bl	8004aa0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	2140      	movs	r1, #64	; 0x40
 80048ce:	4618      	mov	r0, r3
 80048d0:	f000 f945 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048d4:	e00c      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	4619      	mov	r1, r3
 80048e0:	4610      	mov	r0, r2
 80048e2:	f000 f93c 	bl	8004b5e <TIM_ITRx_SetConfig>
      break;
 80048e6:	e003      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	73fb      	strb	r3, [r7, #15]
      break;
 80048ec:	e000      	b.n	80048f0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80048ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004900:	7bfb      	ldrb	r3, [r7, #15]
}
 8004902:	4618      	mov	r0, r3
 8004904:	3710      	adds	r7, #16
 8004906:	46bd      	mov	sp, r7
 8004908:	bd80      	pop	{r7, pc}
 800490a:	bf00      	nop
 800490c:	fffeff88 	.word	0xfffeff88

08004910 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004918:	bf00      	nop
 800491a:	370c      	adds	r7, #12
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800492c:	bf00      	nop
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr

0800494c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800494c:	b480      	push	{r7}
 800494e:	b083      	sub	sp, #12
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004954:	bf00      	nop
 8004956:	370c      	adds	r7, #12
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
 8004968:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	4a40      	ldr	r2, [pc, #256]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d013      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800497e:	d00f      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a3d      	ldr	r2, [pc, #244]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 8004984:	4293      	cmp	r3, r2
 8004986:	d00b      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	4a3c      	ldr	r2, [pc, #240]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d007      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	4a3b      	ldr	r2, [pc, #236]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 8004994:	4293      	cmp	r3, r2
 8004996:	d003      	beq.n	80049a0 <TIM_Base_SetConfig+0x40>
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	4a3a      	ldr	r2, [pc, #232]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d108      	bne.n	80049b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	68fa      	ldr	r2, [r7, #12]
 80049ae:	4313      	orrs	r3, r2
 80049b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	4a2f      	ldr	r2, [pc, #188]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d02b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c0:	d027      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	4a2c      	ldr	r2, [pc, #176]	; (8004a78 <TIM_Base_SetConfig+0x118>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d023      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4a2b      	ldr	r2, [pc, #172]	; (8004a7c <TIM_Base_SetConfig+0x11c>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d01f      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	4a2a      	ldr	r2, [pc, #168]	; (8004a80 <TIM_Base_SetConfig+0x120>)
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d01b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a29      	ldr	r2, [pc, #164]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d017      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a28      	ldr	r2, [pc, #160]	; (8004a88 <TIM_Base_SetConfig+0x128>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a27      	ldr	r2, [pc, #156]	; (8004a8c <TIM_Base_SetConfig+0x12c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00f      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a26      	ldr	r2, [pc, #152]	; (8004a90 <TIM_Base_SetConfig+0x130>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d00b      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a25      	ldr	r2, [pc, #148]	; (8004a94 <TIM_Base_SetConfig+0x134>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d007      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a24      	ldr	r2, [pc, #144]	; (8004a98 <TIM_Base_SetConfig+0x138>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d003      	beq.n	8004a12 <TIM_Base_SetConfig+0xb2>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a23      	ldr	r2, [pc, #140]	; (8004a9c <TIM_Base_SetConfig+0x13c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d108      	bne.n	8004a24 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	68db      	ldr	r3, [r3, #12]
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681a      	ldr	r2, [r3, #0]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	4a0a      	ldr	r2, [pc, #40]	; (8004a74 <TIM_Base_SetConfig+0x114>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d003      	beq.n	8004a58 <TIM_Base_SetConfig+0xf8>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	4a0c      	ldr	r2, [pc, #48]	; (8004a84 <TIM_Base_SetConfig+0x124>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d103      	bne.n	8004a60 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2201      	movs	r2, #1
 8004a64:	615a      	str	r2, [r3, #20]
}
 8004a66:	bf00      	nop
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
 8004a72:	bf00      	nop
 8004a74:	40010000 	.word	0x40010000
 8004a78:	40000400 	.word	0x40000400
 8004a7c:	40000800 	.word	0x40000800
 8004a80:	40000c00 	.word	0x40000c00
 8004a84:	40010400 	.word	0x40010400
 8004a88:	40014000 	.word	0x40014000
 8004a8c:	40014400 	.word	0x40014400
 8004a90:	40014800 	.word	0x40014800
 8004a94:	40001800 	.word	0x40001800
 8004a98:	40001c00 	.word	0x40001c00
 8004a9c:	40002000 	.word	0x40002000

08004aa0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b087      	sub	sp, #28
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	60f8      	str	r0, [r7, #12]
 8004aa8:	60b9      	str	r1, [r7, #8]
 8004aaa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1b      	ldr	r3, [r3, #32]
 8004ab0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a1b      	ldr	r3, [r3, #32]
 8004ab6:	f023 0201 	bic.w	r2, r3, #1
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004aca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	011b      	lsls	r3, r3, #4
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	4313      	orrs	r3, r2
 8004ad4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	f023 030a 	bic.w	r3, r3, #10
 8004adc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	4313      	orrs	r3, r2
 8004ae4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	693a      	ldr	r2, [r7, #16]
 8004aea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	697a      	ldr	r2, [r7, #20]
 8004af0:	621a      	str	r2, [r3, #32]
}
 8004af2:	bf00      	nop
 8004af4:	371c      	adds	r7, #28
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	f023 0210 	bic.w	r2, r3, #16
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004b22:	697b      	ldr	r3, [r7, #20]
 8004b24:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004b28:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	031b      	lsls	r3, r3, #12
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004b3a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	011b      	lsls	r3, r3, #4
 8004b40:	693a      	ldr	r2, [r7, #16]
 8004b42:	4313      	orrs	r3, r2
 8004b44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	697a      	ldr	r2, [r7, #20]
 8004b4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	693a      	ldr	r2, [r7, #16]
 8004b50:	621a      	str	r2, [r3, #32]
}
 8004b52:	bf00      	nop
 8004b54:	371c      	adds	r7, #28
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr

08004b5e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004b5e:	b480      	push	{r7}
 8004b60:	b085      	sub	sp, #20
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	6078      	str	r0, [r7, #4]
 8004b66:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b74:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b76:	683a      	ldr	r2, [r7, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f043 0307 	orr.w	r3, r3, #7
 8004b80:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	609a      	str	r2, [r3, #8]
}
 8004b88:	bf00      	nop
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b087      	sub	sp, #28
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	60f8      	str	r0, [r7, #12]
 8004b9c:	60b9      	str	r1, [r7, #8]
 8004b9e:	607a      	str	r2, [r7, #4]
 8004ba0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004ba8:	697b      	ldr	r3, [r7, #20]
 8004baa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	021a      	lsls	r2, r3, #8
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	68bb      	ldr	r3, [r7, #8]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	697a      	ldr	r2, [r7, #20]
 8004bc6:	609a      	str	r2, [r3, #8]
}
 8004bc8:	bf00      	nop
 8004bca:	371c      	adds	r7, #28
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bd2:	4770      	bx	lr

08004bd4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
 8004bdc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004be4:	2b01      	cmp	r3, #1
 8004be6:	d101      	bne.n	8004bec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004be8:	2302      	movs	r3, #2
 8004bea:	e06d      	b.n	8004cc8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2201      	movs	r2, #1
 8004bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2202      	movs	r2, #2
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a30      	ldr	r2, [pc, #192]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d004      	beq.n	8004c20 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	4a2f      	ldr	r2, [pc, #188]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d108      	bne.n	8004c32 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004c26:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	68fa      	ldr	r2, [r7, #12]
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c38:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	68fa      	ldr	r2, [r7, #12]
 8004c4a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a20      	ldr	r2, [pc, #128]	; (8004cd4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d022      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c5e:	d01d      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1d      	ldr	r2, [pc, #116]	; (8004cdc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d018      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1c      	ldr	r2, [pc, #112]	; (8004ce0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d013      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1a      	ldr	r2, [pc, #104]	; (8004ce4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d00e      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a15      	ldr	r2, [pc, #84]	; (8004cd8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d009      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a16      	ldr	r2, [pc, #88]	; (8004ce8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d004      	beq.n	8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a15      	ldr	r2, [pc, #84]	; (8004cec <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10c      	bne.n	8004cb6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ca2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	4313      	orrs	r3, r2
 8004cac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004cc6:	2300      	movs	r3, #0
}
 8004cc8:	4618      	mov	r0, r3
 8004cca:	3714      	adds	r7, #20
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr
 8004cd4:	40010000 	.word	0x40010000
 8004cd8:	40010400 	.word	0x40010400
 8004cdc:	40000400 	.word	0x40000400
 8004ce0:	40000800 	.word	0x40000800
 8004ce4:	40000c00 	.word	0x40000c00
 8004ce8:	40014000 	.word	0x40014000
 8004cec:	40001800 	.word	0x40001800

08004cf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004cf0:	b480      	push	{r7}
 8004cf2:	b083      	sub	sp, #12
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004cf8:	bf00      	nop
 8004cfa:	370c      	adds	r7, #12
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d02:	4770      	bx	lr

08004d04 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d04:	b480      	push	{r7}
 8004d06:	b083      	sub	sp, #12
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d0c:	bf00      	nop
 8004d0e:	370c      	adds	r7, #12
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8004d20:	bf00      	nop
 8004d22:	370c      	adds	r7, #12
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr

08004d2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e040      	b.n	8004dc0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d106      	bne.n	8004d54 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2200      	movs	r2, #0
 8004d4a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004d4e:	6878      	ldr	r0, [r7, #4]
 8004d50:	f7fc fc1a 	bl	8001588 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	2224      	movs	r2, #36	; 0x24
 8004d58:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f022 0201 	bic.w	r2, r2, #1
 8004d68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fb1e 	bl	80053ac <UART_SetConfig>
 8004d70:	4603      	mov	r3, r0
 8004d72:	2b01      	cmp	r3, #1
 8004d74:	d101      	bne.n	8004d7a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004d76:	2301      	movs	r3, #1
 8004d78:	e022      	b.n	8004dc0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d002      	beq.n	8004d88 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fd76 	bl	8005874 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004d96:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004da6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	681a      	ldr	r2, [r3, #0]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f042 0201 	orr.w	r2, r2, #1
 8004db6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004db8:	6878      	ldr	r0, [r7, #4]
 8004dba:	f000 fdfd 	bl	80059b8 <UART_CheckIdleState>
 8004dbe:	4603      	mov	r3, r0
}
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b0ba      	sub	sp, #232	; 0xe8
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	69db      	ldr	r3, [r3, #28]
 8004dd6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004dee:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004df2:	f640 030f 	movw	r3, #2063	; 0x80f
 8004df6:	4013      	ands	r3, r2
 8004df8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004dfc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d115      	bne.n	8004e30 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004e04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e08:	f003 0320 	and.w	r3, r3, #32
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d00f      	beq.n	8004e30 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004e10:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e14:	f003 0320 	and.w	r3, r3, #32
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d009      	beq.n	8004e30 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8297 	beq.w	8005354 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
      }
      return;
 8004e2e:	e291      	b.n	8005354 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004e30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	f000 8117 	beq.w	8005068 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8004e3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d106      	bne.n	8004e54 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004e46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8004e4a:	4b85      	ldr	r3, [pc, #532]	; (8005060 <HAL_UART_IRQHandler+0x298>)
 8004e4c:	4013      	ands	r3, r2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	f000 810a 	beq.w	8005068 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004e54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d011      	beq.n	8004e84 <HAL_UART_IRQHandler+0xbc>
 8004e60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d00b      	beq.n	8004e84 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	2201      	movs	r2, #1
 8004e72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e7a:	f043 0201 	orr.w	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d011      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xec>
 8004e90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e94:	f003 0301 	and.w	r3, r3, #1
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d00b      	beq.n	8004eb4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	2202      	movs	r2, #2
 8004ea2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eaa:	f043 0204 	orr.w	r2, r3, #4
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004eb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eb8:	f003 0304 	and.w	r3, r3, #4
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d011      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x11c>
 8004ec0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ec4:	f003 0301 	and.w	r3, r3, #1
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00b      	beq.n	8004ee4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	2204      	movs	r2, #4
 8004ed2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004eda:	f043 0202 	orr.w	r2, r3, #2
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004ee4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d017      	beq.n	8004f20 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004ef0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef4:	f003 0320 	and.w	r3, r3, #32
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d105      	bne.n	8004f08 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f00:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d00b      	beq.n	8004f20 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	2208      	movs	r2, #8
 8004f0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f16:	f043 0208 	orr.w	r2, r3, #8
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d012      	beq.n	8004f52 <HAL_UART_IRQHandler+0x18a>
 8004f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d00c      	beq.n	8004f52 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f48:	f043 0220 	orr.w	r2, r3, #32
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	f000 81fd 	beq.w	8005358 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f62:	f003 0320 	and.w	r3, r3, #32
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00d      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004f6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f6e:	f003 0320 	and.w	r3, r3, #32
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	689b      	ldr	r3, [r3, #8]
 8004f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f9a:	2b40      	cmp	r3, #64	; 0x40
 8004f9c:	d005      	beq.n	8004faa <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004f9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d04f      	beq.n	800504a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 fe01 	bl	8005bb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	689b      	ldr	r3, [r3, #8]
 8004fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fba:	2b40      	cmp	r3, #64	; 0x40
 8004fbc:	d141      	bne.n	8005042 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004fcc:	e853 3f00 	ldrex	r3, [r3]
 8004fd0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004fd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fdc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	3308      	adds	r3, #8
 8004fe6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004fea:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004fee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ff6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ffa:	e841 2300 	strex	r3, r2, [r1]
 8004ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005002:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1d9      	bne.n	8004fbe <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500e:	2b00      	cmp	r3, #0
 8005010:	d013      	beq.n	800503a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005016:	4a13      	ldr	r2, [pc, #76]	; (8005064 <HAL_UART_IRQHandler+0x29c>)
 8005018:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800501e:	4618      	mov	r0, r3
 8005020:	f7fd fb78 	bl	8002714 <HAL_DMA_Abort_IT>
 8005024:	4603      	mov	r3, r0
 8005026:	2b00      	cmp	r3, #0
 8005028:	d017      	beq.n	800505a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800502e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8005034:	4610      	mov	r0, r2
 8005036:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005038:	e00f      	b.n	800505a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f000 f9a0 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005040:	e00b      	b.n	800505a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005042:	6878      	ldr	r0, [r7, #4]
 8005044:	f000 f99c 	bl	8005380 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005048:	e007      	b.n	800505a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800504a:	6878      	ldr	r0, [r7, #4]
 800504c:	f000 f998 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2200      	movs	r2, #0
 8005054:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8005058:	e17e      	b.n	8005358 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800505a:	bf00      	nop
    return;
 800505c:	e17c      	b.n	8005358 <HAL_UART_IRQHandler+0x590>
 800505e:	bf00      	nop
 8005060:	04000120 	.word	0x04000120
 8005064:	08005c7b 	.word	0x08005c7b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800506c:	2b01      	cmp	r3, #1
 800506e:	f040 814c 	bne.w	800530a <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005076:	f003 0310 	and.w	r3, r3, #16
 800507a:	2b00      	cmp	r3, #0
 800507c:	f000 8145 	beq.w	800530a <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005080:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005084:	f003 0310 	and.w	r3, r3, #16
 8005088:	2b00      	cmp	r3, #0
 800508a:	f000 813e 	beq.w	800530a <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2210      	movs	r2, #16
 8005094:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050a0:	2b40      	cmp	r3, #64	; 0x40
 80050a2:	f040 80b6 	bne.w	8005212 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050b2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8150 	beq.w	800535c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80050c2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050c6:	429a      	cmp	r2, r3
 80050c8:	f080 8148 	bcs.w	800535c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80050d2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050da:	69db      	ldr	r3, [r3, #28]
 80050dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80050e0:	f000 8086 	beq.w	80051f0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80050f0:	e853 3f00 	ldrex	r3, [r3]
 80050f4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80050f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80050fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005100:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	461a      	mov	r2, r3
 800510a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800510e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005112:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005116:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800511a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800512a:	2b00      	cmp	r3, #0
 800512c:	d1da      	bne.n	80050e4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	3308      	adds	r3, #8
 8005134:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005136:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800513e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005140:	f023 0301 	bic.w	r3, r3, #1
 8005144:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	3308      	adds	r3, #8
 800514e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005152:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005156:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005158:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800515a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800515e:	e841 2300 	strex	r3, r2, [r1]
 8005162:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005164:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1e1      	bne.n	800512e <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3308      	adds	r3, #8
 8005170:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005174:	e853 3f00 	ldrex	r3, [r3]
 8005178:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005180:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	3308      	adds	r3, #8
 800518a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800518e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005190:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005192:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005194:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005196:	e841 2300 	strex	r3, r2, [r1]
 800519a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800519c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1e3      	bne.n	800516a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2220      	movs	r2, #32
 80051a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80051b8:	e853 3f00 	ldrex	r3, [r3]
 80051bc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80051be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051c0:	f023 0310 	bic.w	r3, r3, #16
 80051c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	461a      	mov	r2, r3
 80051ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80051d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80051d4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80051d8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051da:	e841 2300 	strex	r3, r2, [r1]
 80051de:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80051e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d1e4      	bne.n	80051b0 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80051ea:	4618      	mov	r0, r3
 80051ec:	f7fd fa22 	bl	8002634 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2202      	movs	r2, #2
 80051f4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005202:	b29b      	uxth	r3, r3
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	b29b      	uxth	r3, r3
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f000 f8c2 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005210:	e0a4      	b.n	800535c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800521e:	b29b      	uxth	r3, r3
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800522c:	b29b      	uxth	r3, r3
 800522e:	2b00      	cmp	r3, #0
 8005230:	f000 8096 	beq.w	8005360 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8005234:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005238:	2b00      	cmp	r3, #0
 800523a:	f000 8091 	beq.w	8005360 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005244:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005246:	e853 3f00 	ldrex	r3, [r3]
 800524a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800524c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800524e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005252:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	461a      	mov	r2, r3
 800525c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005260:	647b      	str	r3, [r7, #68]	; 0x44
 8005262:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005264:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005266:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005268:	e841 2300 	strex	r3, r2, [r1]
 800526c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800526e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005270:	2b00      	cmp	r3, #0
 8005272:	d1e4      	bne.n	800523e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	3308      	adds	r3, #8
 800527a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800527c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800527e:	e853 3f00 	ldrex	r3, [r3]
 8005282:	623b      	str	r3, [r7, #32]
   return(result);
 8005284:	6a3b      	ldr	r3, [r7, #32]
 8005286:	f023 0301 	bic.w	r3, r3, #1
 800528a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3308      	adds	r3, #8
 8005294:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005298:	633a      	str	r2, [r7, #48]	; 0x30
 800529a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800529c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800529e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052a0:	e841 2300 	strex	r3, r2, [r1]
 80052a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e3      	bne.n	8005274 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	2220      	movs	r2, #32
 80052b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2200      	movs	r2, #0
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	e853 3f00 	ldrex	r3, [r3]
 80052cc:	60fb      	str	r3, [r7, #12]
   return(result);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f023 0310 	bic.w	r3, r3, #16
 80052d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	461a      	mov	r2, r3
 80052de:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80052e2:	61fb      	str	r3, [r7, #28]
 80052e4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e6:	69b9      	ldr	r1, [r7, #24]
 80052e8:	69fa      	ldr	r2, [r7, #28]
 80052ea:	e841 2300 	strex	r3, r2, [r1]
 80052ee:	617b      	str	r3, [r7, #20]
   return(result);
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d1e4      	bne.n	80052c0 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2202      	movs	r2, #2
 80052fa:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80052fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005300:	4619      	mov	r1, r3
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f000 f846 	bl	8005394 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005308:	e02a      	b.n	8005360 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800530a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800530e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00e      	beq.n	8005334 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005316:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800531a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531e:	2b00      	cmp	r3, #0
 8005320:	d008      	beq.n	8005334 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005326:	2b00      	cmp	r3, #0
 8005328:	d01c      	beq.n	8005364 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800532e:	6878      	ldr	r0, [r7, #4]
 8005330:	4798      	blx	r3
    }
    return;
 8005332:	e017      	b.n	8005364 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005334:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533c:	2b00      	cmp	r3, #0
 800533e:	d012      	beq.n	8005366 <HAL_UART_IRQHandler+0x59e>
 8005340:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00c      	beq.n	8005366 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800534c:	6878      	ldr	r0, [r7, #4]
 800534e:	f000 fcaa 	bl	8005ca6 <UART_EndTransmit_IT>
    return;
 8005352:	e008      	b.n	8005366 <HAL_UART_IRQHandler+0x59e>
      return;
 8005354:	bf00      	nop
 8005356:	e006      	b.n	8005366 <HAL_UART_IRQHandler+0x59e>
    return;
 8005358:	bf00      	nop
 800535a:	e004      	b.n	8005366 <HAL_UART_IRQHandler+0x59e>
      return;
 800535c:	bf00      	nop
 800535e:	e002      	b.n	8005366 <HAL_UART_IRQHandler+0x59e>
      return;
 8005360:	bf00      	nop
 8005362:	e000      	b.n	8005366 <HAL_UART_IRQHandler+0x59e>
    return;
 8005364:	bf00      	nop
  }

}
 8005366:	37e8      	adds	r7, #232	; 0xe8
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	460b      	mov	r3, r1
 800539e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053a0:	bf00      	nop
 80053a2:	370c      	adds	r7, #12
 80053a4:	46bd      	mov	sp, r7
 80053a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053aa:	4770      	bx	lr

080053ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b088      	sub	sp, #32
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80053b4:	2300      	movs	r3, #0
 80053b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	691b      	ldr	r3, [r3, #16]
 80053c0:	431a      	orrs	r2, r3
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	431a      	orrs	r2, r3
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	69db      	ldr	r3, [r3, #28]
 80053cc:	4313      	orrs	r3, r2
 80053ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	4ba6      	ldr	r3, [pc, #664]	; (8005670 <UART_SetConfig+0x2c4>)
 80053d8:	4013      	ands	r3, r2
 80053da:	687a      	ldr	r2, [r7, #4]
 80053dc:	6812      	ldr	r2, [r2, #0]
 80053de:	6979      	ldr	r1, [r7, #20]
 80053e0:	430b      	orrs	r3, r1
 80053e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6a1b      	ldr	r3, [r3, #32]
 8005404:	697a      	ldr	r2, [r7, #20]
 8005406:	4313      	orrs	r3, r2
 8005408:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	430a      	orrs	r2, r1
 800541c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	4a94      	ldr	r2, [pc, #592]	; (8005674 <UART_SetConfig+0x2c8>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d120      	bne.n	800546a <UART_SetConfig+0xbe>
 8005428:	4b93      	ldr	r3, [pc, #588]	; (8005678 <UART_SetConfig+0x2cc>)
 800542a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800542e:	f003 0303 	and.w	r3, r3, #3
 8005432:	2b03      	cmp	r3, #3
 8005434:	d816      	bhi.n	8005464 <UART_SetConfig+0xb8>
 8005436:	a201      	add	r2, pc, #4	; (adr r2, 800543c <UART_SetConfig+0x90>)
 8005438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800543c:	0800544d 	.word	0x0800544d
 8005440:	08005459 	.word	0x08005459
 8005444:	08005453 	.word	0x08005453
 8005448:	0800545f 	.word	0x0800545f
 800544c:	2301      	movs	r3, #1
 800544e:	77fb      	strb	r3, [r7, #31]
 8005450:	e150      	b.n	80056f4 <UART_SetConfig+0x348>
 8005452:	2302      	movs	r3, #2
 8005454:	77fb      	strb	r3, [r7, #31]
 8005456:	e14d      	b.n	80056f4 <UART_SetConfig+0x348>
 8005458:	2304      	movs	r3, #4
 800545a:	77fb      	strb	r3, [r7, #31]
 800545c:	e14a      	b.n	80056f4 <UART_SetConfig+0x348>
 800545e:	2308      	movs	r3, #8
 8005460:	77fb      	strb	r3, [r7, #31]
 8005462:	e147      	b.n	80056f4 <UART_SetConfig+0x348>
 8005464:	2310      	movs	r3, #16
 8005466:	77fb      	strb	r3, [r7, #31]
 8005468:	e144      	b.n	80056f4 <UART_SetConfig+0x348>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a83      	ldr	r2, [pc, #524]	; (800567c <UART_SetConfig+0x2d0>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d132      	bne.n	80054da <UART_SetConfig+0x12e>
 8005474:	4b80      	ldr	r3, [pc, #512]	; (8005678 <UART_SetConfig+0x2cc>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f003 030c 	and.w	r3, r3, #12
 800547e:	2b0c      	cmp	r3, #12
 8005480:	d828      	bhi.n	80054d4 <UART_SetConfig+0x128>
 8005482:	a201      	add	r2, pc, #4	; (adr r2, 8005488 <UART_SetConfig+0xdc>)
 8005484:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005488:	080054bd 	.word	0x080054bd
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054d5 	.word	0x080054d5
 8005494:	080054d5 	.word	0x080054d5
 8005498:	080054c9 	.word	0x080054c9
 800549c:	080054d5 	.word	0x080054d5
 80054a0:	080054d5 	.word	0x080054d5
 80054a4:	080054d5 	.word	0x080054d5
 80054a8:	080054c3 	.word	0x080054c3
 80054ac:	080054d5 	.word	0x080054d5
 80054b0:	080054d5 	.word	0x080054d5
 80054b4:	080054d5 	.word	0x080054d5
 80054b8:	080054cf 	.word	0x080054cf
 80054bc:	2300      	movs	r3, #0
 80054be:	77fb      	strb	r3, [r7, #31]
 80054c0:	e118      	b.n	80056f4 <UART_SetConfig+0x348>
 80054c2:	2302      	movs	r3, #2
 80054c4:	77fb      	strb	r3, [r7, #31]
 80054c6:	e115      	b.n	80056f4 <UART_SetConfig+0x348>
 80054c8:	2304      	movs	r3, #4
 80054ca:	77fb      	strb	r3, [r7, #31]
 80054cc:	e112      	b.n	80056f4 <UART_SetConfig+0x348>
 80054ce:	2308      	movs	r3, #8
 80054d0:	77fb      	strb	r3, [r7, #31]
 80054d2:	e10f      	b.n	80056f4 <UART_SetConfig+0x348>
 80054d4:	2310      	movs	r3, #16
 80054d6:	77fb      	strb	r3, [r7, #31]
 80054d8:	e10c      	b.n	80056f4 <UART_SetConfig+0x348>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a68      	ldr	r2, [pc, #416]	; (8005680 <UART_SetConfig+0x2d4>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d120      	bne.n	8005526 <UART_SetConfig+0x17a>
 80054e4:	4b64      	ldr	r3, [pc, #400]	; (8005678 <UART_SetConfig+0x2cc>)
 80054e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80054ee:	2b30      	cmp	r3, #48	; 0x30
 80054f0:	d013      	beq.n	800551a <UART_SetConfig+0x16e>
 80054f2:	2b30      	cmp	r3, #48	; 0x30
 80054f4:	d814      	bhi.n	8005520 <UART_SetConfig+0x174>
 80054f6:	2b20      	cmp	r3, #32
 80054f8:	d009      	beq.n	800550e <UART_SetConfig+0x162>
 80054fa:	2b20      	cmp	r3, #32
 80054fc:	d810      	bhi.n	8005520 <UART_SetConfig+0x174>
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d002      	beq.n	8005508 <UART_SetConfig+0x15c>
 8005502:	2b10      	cmp	r3, #16
 8005504:	d006      	beq.n	8005514 <UART_SetConfig+0x168>
 8005506:	e00b      	b.n	8005520 <UART_SetConfig+0x174>
 8005508:	2300      	movs	r3, #0
 800550a:	77fb      	strb	r3, [r7, #31]
 800550c:	e0f2      	b.n	80056f4 <UART_SetConfig+0x348>
 800550e:	2302      	movs	r3, #2
 8005510:	77fb      	strb	r3, [r7, #31]
 8005512:	e0ef      	b.n	80056f4 <UART_SetConfig+0x348>
 8005514:	2304      	movs	r3, #4
 8005516:	77fb      	strb	r3, [r7, #31]
 8005518:	e0ec      	b.n	80056f4 <UART_SetConfig+0x348>
 800551a:	2308      	movs	r3, #8
 800551c:	77fb      	strb	r3, [r7, #31]
 800551e:	e0e9      	b.n	80056f4 <UART_SetConfig+0x348>
 8005520:	2310      	movs	r3, #16
 8005522:	77fb      	strb	r3, [r7, #31]
 8005524:	e0e6      	b.n	80056f4 <UART_SetConfig+0x348>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	4a56      	ldr	r2, [pc, #344]	; (8005684 <UART_SetConfig+0x2d8>)
 800552c:	4293      	cmp	r3, r2
 800552e:	d120      	bne.n	8005572 <UART_SetConfig+0x1c6>
 8005530:	4b51      	ldr	r3, [pc, #324]	; (8005678 <UART_SetConfig+0x2cc>)
 8005532:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005536:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800553a:	2bc0      	cmp	r3, #192	; 0xc0
 800553c:	d013      	beq.n	8005566 <UART_SetConfig+0x1ba>
 800553e:	2bc0      	cmp	r3, #192	; 0xc0
 8005540:	d814      	bhi.n	800556c <UART_SetConfig+0x1c0>
 8005542:	2b80      	cmp	r3, #128	; 0x80
 8005544:	d009      	beq.n	800555a <UART_SetConfig+0x1ae>
 8005546:	2b80      	cmp	r3, #128	; 0x80
 8005548:	d810      	bhi.n	800556c <UART_SetConfig+0x1c0>
 800554a:	2b00      	cmp	r3, #0
 800554c:	d002      	beq.n	8005554 <UART_SetConfig+0x1a8>
 800554e:	2b40      	cmp	r3, #64	; 0x40
 8005550:	d006      	beq.n	8005560 <UART_SetConfig+0x1b4>
 8005552:	e00b      	b.n	800556c <UART_SetConfig+0x1c0>
 8005554:	2300      	movs	r3, #0
 8005556:	77fb      	strb	r3, [r7, #31]
 8005558:	e0cc      	b.n	80056f4 <UART_SetConfig+0x348>
 800555a:	2302      	movs	r3, #2
 800555c:	77fb      	strb	r3, [r7, #31]
 800555e:	e0c9      	b.n	80056f4 <UART_SetConfig+0x348>
 8005560:	2304      	movs	r3, #4
 8005562:	77fb      	strb	r3, [r7, #31]
 8005564:	e0c6      	b.n	80056f4 <UART_SetConfig+0x348>
 8005566:	2308      	movs	r3, #8
 8005568:	77fb      	strb	r3, [r7, #31]
 800556a:	e0c3      	b.n	80056f4 <UART_SetConfig+0x348>
 800556c:	2310      	movs	r3, #16
 800556e:	77fb      	strb	r3, [r7, #31]
 8005570:	e0c0      	b.n	80056f4 <UART_SetConfig+0x348>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	4a44      	ldr	r2, [pc, #272]	; (8005688 <UART_SetConfig+0x2dc>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d125      	bne.n	80055c8 <UART_SetConfig+0x21c>
 800557c:	4b3e      	ldr	r3, [pc, #248]	; (8005678 <UART_SetConfig+0x2cc>)
 800557e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005586:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800558a:	d017      	beq.n	80055bc <UART_SetConfig+0x210>
 800558c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005590:	d817      	bhi.n	80055c2 <UART_SetConfig+0x216>
 8005592:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005596:	d00b      	beq.n	80055b0 <UART_SetConfig+0x204>
 8005598:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800559c:	d811      	bhi.n	80055c2 <UART_SetConfig+0x216>
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d003      	beq.n	80055aa <UART_SetConfig+0x1fe>
 80055a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055a6:	d006      	beq.n	80055b6 <UART_SetConfig+0x20a>
 80055a8:	e00b      	b.n	80055c2 <UART_SetConfig+0x216>
 80055aa:	2300      	movs	r3, #0
 80055ac:	77fb      	strb	r3, [r7, #31]
 80055ae:	e0a1      	b.n	80056f4 <UART_SetConfig+0x348>
 80055b0:	2302      	movs	r3, #2
 80055b2:	77fb      	strb	r3, [r7, #31]
 80055b4:	e09e      	b.n	80056f4 <UART_SetConfig+0x348>
 80055b6:	2304      	movs	r3, #4
 80055b8:	77fb      	strb	r3, [r7, #31]
 80055ba:	e09b      	b.n	80056f4 <UART_SetConfig+0x348>
 80055bc:	2308      	movs	r3, #8
 80055be:	77fb      	strb	r3, [r7, #31]
 80055c0:	e098      	b.n	80056f4 <UART_SetConfig+0x348>
 80055c2:	2310      	movs	r3, #16
 80055c4:	77fb      	strb	r3, [r7, #31]
 80055c6:	e095      	b.n	80056f4 <UART_SetConfig+0x348>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4a2f      	ldr	r2, [pc, #188]	; (800568c <UART_SetConfig+0x2e0>)
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d125      	bne.n	800561e <UART_SetConfig+0x272>
 80055d2:	4b29      	ldr	r3, [pc, #164]	; (8005678 <UART_SetConfig+0x2cc>)
 80055d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80055dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e0:	d017      	beq.n	8005612 <UART_SetConfig+0x266>
 80055e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80055e6:	d817      	bhi.n	8005618 <UART_SetConfig+0x26c>
 80055e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055ec:	d00b      	beq.n	8005606 <UART_SetConfig+0x25a>
 80055ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80055f2:	d811      	bhi.n	8005618 <UART_SetConfig+0x26c>
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <UART_SetConfig+0x254>
 80055f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055fc:	d006      	beq.n	800560c <UART_SetConfig+0x260>
 80055fe:	e00b      	b.n	8005618 <UART_SetConfig+0x26c>
 8005600:	2301      	movs	r3, #1
 8005602:	77fb      	strb	r3, [r7, #31]
 8005604:	e076      	b.n	80056f4 <UART_SetConfig+0x348>
 8005606:	2302      	movs	r3, #2
 8005608:	77fb      	strb	r3, [r7, #31]
 800560a:	e073      	b.n	80056f4 <UART_SetConfig+0x348>
 800560c:	2304      	movs	r3, #4
 800560e:	77fb      	strb	r3, [r7, #31]
 8005610:	e070      	b.n	80056f4 <UART_SetConfig+0x348>
 8005612:	2308      	movs	r3, #8
 8005614:	77fb      	strb	r3, [r7, #31]
 8005616:	e06d      	b.n	80056f4 <UART_SetConfig+0x348>
 8005618:	2310      	movs	r3, #16
 800561a:	77fb      	strb	r3, [r7, #31]
 800561c:	e06a      	b.n	80056f4 <UART_SetConfig+0x348>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a1b      	ldr	r2, [pc, #108]	; (8005690 <UART_SetConfig+0x2e4>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d138      	bne.n	800569a <UART_SetConfig+0x2ee>
 8005628:	4b13      	ldr	r3, [pc, #76]	; (8005678 <UART_SetConfig+0x2cc>)
 800562a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005632:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005636:	d017      	beq.n	8005668 <UART_SetConfig+0x2bc>
 8005638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800563c:	d82a      	bhi.n	8005694 <UART_SetConfig+0x2e8>
 800563e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005642:	d00b      	beq.n	800565c <UART_SetConfig+0x2b0>
 8005644:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005648:	d824      	bhi.n	8005694 <UART_SetConfig+0x2e8>
 800564a:	2b00      	cmp	r3, #0
 800564c:	d003      	beq.n	8005656 <UART_SetConfig+0x2aa>
 800564e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005652:	d006      	beq.n	8005662 <UART_SetConfig+0x2b6>
 8005654:	e01e      	b.n	8005694 <UART_SetConfig+0x2e8>
 8005656:	2300      	movs	r3, #0
 8005658:	77fb      	strb	r3, [r7, #31]
 800565a:	e04b      	b.n	80056f4 <UART_SetConfig+0x348>
 800565c:	2302      	movs	r3, #2
 800565e:	77fb      	strb	r3, [r7, #31]
 8005660:	e048      	b.n	80056f4 <UART_SetConfig+0x348>
 8005662:	2304      	movs	r3, #4
 8005664:	77fb      	strb	r3, [r7, #31]
 8005666:	e045      	b.n	80056f4 <UART_SetConfig+0x348>
 8005668:	2308      	movs	r3, #8
 800566a:	77fb      	strb	r3, [r7, #31]
 800566c:	e042      	b.n	80056f4 <UART_SetConfig+0x348>
 800566e:	bf00      	nop
 8005670:	efff69f3 	.word	0xefff69f3
 8005674:	40011000 	.word	0x40011000
 8005678:	40023800 	.word	0x40023800
 800567c:	40004400 	.word	0x40004400
 8005680:	40004800 	.word	0x40004800
 8005684:	40004c00 	.word	0x40004c00
 8005688:	40005000 	.word	0x40005000
 800568c:	40011400 	.word	0x40011400
 8005690:	40007800 	.word	0x40007800
 8005694:	2310      	movs	r3, #16
 8005696:	77fb      	strb	r3, [r7, #31]
 8005698:	e02c      	b.n	80056f4 <UART_SetConfig+0x348>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	4a72      	ldr	r2, [pc, #456]	; (8005868 <UART_SetConfig+0x4bc>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d125      	bne.n	80056f0 <UART_SetConfig+0x344>
 80056a4:	4b71      	ldr	r3, [pc, #452]	; (800586c <UART_SetConfig+0x4c0>)
 80056a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80056ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056b2:	d017      	beq.n	80056e4 <UART_SetConfig+0x338>
 80056b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80056b8:	d817      	bhi.n	80056ea <UART_SetConfig+0x33e>
 80056ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056be:	d00b      	beq.n	80056d8 <UART_SetConfig+0x32c>
 80056c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056c4:	d811      	bhi.n	80056ea <UART_SetConfig+0x33e>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <UART_SetConfig+0x326>
 80056ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80056ce:	d006      	beq.n	80056de <UART_SetConfig+0x332>
 80056d0:	e00b      	b.n	80056ea <UART_SetConfig+0x33e>
 80056d2:	2300      	movs	r3, #0
 80056d4:	77fb      	strb	r3, [r7, #31]
 80056d6:	e00d      	b.n	80056f4 <UART_SetConfig+0x348>
 80056d8:	2302      	movs	r3, #2
 80056da:	77fb      	strb	r3, [r7, #31]
 80056dc:	e00a      	b.n	80056f4 <UART_SetConfig+0x348>
 80056de:	2304      	movs	r3, #4
 80056e0:	77fb      	strb	r3, [r7, #31]
 80056e2:	e007      	b.n	80056f4 <UART_SetConfig+0x348>
 80056e4:	2308      	movs	r3, #8
 80056e6:	77fb      	strb	r3, [r7, #31]
 80056e8:	e004      	b.n	80056f4 <UART_SetConfig+0x348>
 80056ea:	2310      	movs	r3, #16
 80056ec:	77fb      	strb	r3, [r7, #31]
 80056ee:	e001      	b.n	80056f4 <UART_SetConfig+0x348>
 80056f0:	2310      	movs	r3, #16
 80056f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	69db      	ldr	r3, [r3, #28]
 80056f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056fc:	d15b      	bne.n	80057b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80056fe:	7ffb      	ldrb	r3, [r7, #31]
 8005700:	2b08      	cmp	r3, #8
 8005702:	d828      	bhi.n	8005756 <UART_SetConfig+0x3aa>
 8005704:	a201      	add	r2, pc, #4	; (adr r2, 800570c <UART_SetConfig+0x360>)
 8005706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800570a:	bf00      	nop
 800570c:	08005731 	.word	0x08005731
 8005710:	08005739 	.word	0x08005739
 8005714:	08005741 	.word	0x08005741
 8005718:	08005757 	.word	0x08005757
 800571c:	08005747 	.word	0x08005747
 8005720:	08005757 	.word	0x08005757
 8005724:	08005757 	.word	0x08005757
 8005728:	08005757 	.word	0x08005757
 800572c:	0800574f 	.word	0x0800574f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005730:	f7fe f976 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 8005734:	61b8      	str	r0, [r7, #24]
        break;
 8005736:	e013      	b.n	8005760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005738:	f7fe f986 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 800573c:	61b8      	str	r0, [r7, #24]
        break;
 800573e:	e00f      	b.n	8005760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005740:	4b4b      	ldr	r3, [pc, #300]	; (8005870 <UART_SetConfig+0x4c4>)
 8005742:	61bb      	str	r3, [r7, #24]
        break;
 8005744:	e00c      	b.n	8005760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005746:	f7fe f859 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 800574a:	61b8      	str	r0, [r7, #24]
        break;
 800574c:	e008      	b.n	8005760 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800574e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005752:	61bb      	str	r3, [r7, #24]
        break;
 8005754:	e004      	b.n	8005760 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800575a:	2301      	movs	r3, #1
 800575c:	77bb      	strb	r3, [r7, #30]
        break;
 800575e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005760:	69bb      	ldr	r3, [r7, #24]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d074      	beq.n	8005850 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005766:	69bb      	ldr	r3, [r7, #24]
 8005768:	005a      	lsls	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	085b      	lsrs	r3, r3, #1
 8005770:	441a      	add	r2, r3
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	fbb2 f3f3 	udiv	r3, r2, r3
 800577a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800577c:	693b      	ldr	r3, [r7, #16]
 800577e:	2b0f      	cmp	r3, #15
 8005780:	d916      	bls.n	80057b0 <UART_SetConfig+0x404>
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005788:	d212      	bcs.n	80057b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	b29b      	uxth	r3, r3
 800578e:	f023 030f 	bic.w	r3, r3, #15
 8005792:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	085b      	lsrs	r3, r3, #1
 8005798:	b29b      	uxth	r3, r3
 800579a:	f003 0307 	and.w	r3, r3, #7
 800579e:	b29a      	uxth	r2, r3
 80057a0:	89fb      	ldrh	r3, [r7, #14]
 80057a2:	4313      	orrs	r3, r2
 80057a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	89fa      	ldrh	r2, [r7, #14]
 80057ac:	60da      	str	r2, [r3, #12]
 80057ae:	e04f      	b.n	8005850 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80057b0:	2301      	movs	r3, #1
 80057b2:	77bb      	strb	r3, [r7, #30]
 80057b4:	e04c      	b.n	8005850 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057b6:	7ffb      	ldrb	r3, [r7, #31]
 80057b8:	2b08      	cmp	r3, #8
 80057ba:	d828      	bhi.n	800580e <UART_SetConfig+0x462>
 80057bc:	a201      	add	r2, pc, #4	; (adr r2, 80057c4 <UART_SetConfig+0x418>)
 80057be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c2:	bf00      	nop
 80057c4:	080057e9 	.word	0x080057e9
 80057c8:	080057f1 	.word	0x080057f1
 80057cc:	080057f9 	.word	0x080057f9
 80057d0:	0800580f 	.word	0x0800580f
 80057d4:	080057ff 	.word	0x080057ff
 80057d8:	0800580f 	.word	0x0800580f
 80057dc:	0800580f 	.word	0x0800580f
 80057e0:	0800580f 	.word	0x0800580f
 80057e4:	08005807 	.word	0x08005807
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80057e8:	f7fe f91a 	bl	8003a20 <HAL_RCC_GetPCLK1Freq>
 80057ec:	61b8      	str	r0, [r7, #24]
        break;
 80057ee:	e013      	b.n	8005818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80057f0:	f7fe f92a 	bl	8003a48 <HAL_RCC_GetPCLK2Freq>
 80057f4:	61b8      	str	r0, [r7, #24]
        break;
 80057f6:	e00f      	b.n	8005818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80057f8:	4b1d      	ldr	r3, [pc, #116]	; (8005870 <UART_SetConfig+0x4c4>)
 80057fa:	61bb      	str	r3, [r7, #24]
        break;
 80057fc:	e00c      	b.n	8005818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80057fe:	f7fd fffd 	bl	80037fc <HAL_RCC_GetSysClockFreq>
 8005802:	61b8      	str	r0, [r7, #24]
        break;
 8005804:	e008      	b.n	8005818 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005806:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800580a:	61bb      	str	r3, [r7, #24]
        break;
 800580c:	e004      	b.n	8005818 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800580e:	2300      	movs	r3, #0
 8005810:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	77bb      	strb	r3, [r7, #30]
        break;
 8005816:	bf00      	nop
    }

    if (pclk != 0U)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b00      	cmp	r3, #0
 800581c:	d018      	beq.n	8005850 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	085a      	lsrs	r2, r3, #1
 8005824:	69bb      	ldr	r3, [r7, #24]
 8005826:	441a      	add	r2, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005830:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	2b0f      	cmp	r3, #15
 8005836:	d909      	bls.n	800584c <UART_SetConfig+0x4a0>
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800583e:	d205      	bcs.n	800584c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	b29a      	uxth	r2, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	60da      	str	r2, [r3, #12]
 800584a:	e001      	b.n	8005850 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800584c:	2301      	movs	r3, #1
 800584e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2200      	movs	r2, #0
 8005854:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2200      	movs	r2, #0
 800585a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800585c:	7fbb      	ldrb	r3, [r7, #30]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3720      	adds	r7, #32
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	40007c00 	.word	0x40007c00
 800586c:	40023800 	.word	0x40023800
 8005870:	00f42400 	.word	0x00f42400

08005874 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	f003 0301 	and.w	r3, r3, #1
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00a      	beq.n	800589e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	430a      	orrs	r2, r1
 800589c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	f003 0302 	and.w	r3, r3, #2
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d00a      	beq.n	80058c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058c4:	f003 0304 	and.w	r3, r3, #4
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d00a      	beq.n	80058e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	430a      	orrs	r2, r1
 80058e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e6:	f003 0308 	and.w	r3, r3, #8
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	430a      	orrs	r2, r1
 8005902:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005908:	f003 0310 	and.w	r3, r3, #16
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	430a      	orrs	r2, r1
 8005924:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	430a      	orrs	r2, r1
 8005946:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800594c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005950:	2b00      	cmp	r3, #0
 8005952:	d01a      	beq.n	800598a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	430a      	orrs	r2, r1
 8005968:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005972:	d10a      	bne.n	800598a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	430a      	orrs	r2, r1
 8005988:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	605a      	str	r2, [r3, #4]
  }
}
 80059ac:	bf00      	nop
 80059ae:	370c      	adds	r7, #12
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af02      	add	r7, sp, #8
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059c8:	f7fb fec0 	bl	800174c <HAL_GetTick>
 80059cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0308 	and.w	r3, r3, #8
 80059d8:	2b08      	cmp	r3, #8
 80059da:	d10e      	bne.n	80059fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80059dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80059e0:	9300      	str	r3, [sp, #0]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 f81b 	bl	8005a26 <UART_WaitOnFlagUntilTimeout>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d001      	beq.n	80059fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e011      	b.n	8005a1e <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2220      	movs	r2, #32
 80059fe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}

08005a26 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	b09c      	sub	sp, #112	; 0x70
 8005a2a:	af00      	add	r7, sp, #0
 8005a2c:	60f8      	str	r0, [r7, #12]
 8005a2e:	60b9      	str	r1, [r7, #8]
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	4613      	mov	r3, r2
 8005a34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a36:	e0a7      	b.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a38:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3e:	f000 80a3 	beq.w	8005b88 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a42:	f7fb fe83 	bl	800174c <HAL_GetTick>
 8005a46:	4602      	mov	r2, r0
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	1ad3      	subs	r3, r2, r3
 8005a4c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005a4e:	429a      	cmp	r2, r3
 8005a50:	d302      	bcc.n	8005a58 <UART_WaitOnFlagUntilTimeout+0x32>
 8005a52:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d13f      	bne.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a60:	e853 3f00 	ldrex	r3, [r3]
 8005a64:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005a6c:	667b      	str	r3, [r7, #100]	; 0x64
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	461a      	mov	r2, r3
 8005a74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a78:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a7a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005a7c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005a7e:	e841 2300 	strex	r3, r2, [r1]
 8005a82:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8005a84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1e6      	bne.n	8005a58 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a9c:	f023 0301 	bic.w	r3, r3, #1
 8005aa0:	663b      	str	r3, [r7, #96]	; 0x60
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3308      	adds	r3, #8
 8005aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005aaa:	64ba      	str	r2, [r7, #72]	; 0x48
 8005aac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005ab0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8005ab8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2220      	movs	r2, #32
 8005ac2:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8005ad4:	2303      	movs	r3, #3
 8005ad6:	e068      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0304 	and.w	r3, r3, #4
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d050      	beq.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	69db      	ldr	r3, [r3, #28]
 8005aec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005af0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005af4:	d148      	bne.n	8005b88 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005afe:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b08:	e853 3f00 	ldrex	r3, [r3]
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b10:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b14:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b1e:	637b      	str	r3, [r7, #52]	; 0x34
 8005b20:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b24:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b26:	e841 2300 	strex	r3, r2, [r1]
 8005b2a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d1e6      	bne.n	8005b00 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3308      	adds	r3, #8
 8005b38:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	e853 3f00 	ldrex	r3, [r3]
 8005b40:	613b      	str	r3, [r7, #16]
   return(result);
 8005b42:	693b      	ldr	r3, [r7, #16]
 8005b44:	f023 0301 	bic.w	r3, r3, #1
 8005b48:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3308      	adds	r3, #8
 8005b50:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005b52:	623a      	str	r2, [r7, #32]
 8005b54:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b56:	69f9      	ldr	r1, [r7, #28]
 8005b58:	6a3a      	ldr	r2, [r7, #32]
 8005b5a:	e841 2300 	strex	r3, r2, [r1]
 8005b5e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005b60:	69bb      	ldr	r3, [r7, #24]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d1e5      	bne.n	8005b32 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2220      	movs	r2, #32
 8005b6a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2220      	movs	r2, #32
 8005b78:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	e010      	b.n	8005baa <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	69da      	ldr	r2, [r3, #28]
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	68ba      	ldr	r2, [r7, #8]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	bf0c      	ite	eq
 8005b98:	2301      	moveq	r3, #1
 8005b9a:	2300      	movne	r3, #0
 8005b9c:	b2db      	uxtb	r3, r3
 8005b9e:	461a      	mov	r2, r3
 8005ba0:	79fb      	ldrb	r3, [r7, #7]
 8005ba2:	429a      	cmp	r2, r3
 8005ba4:	f43f af48 	beq.w	8005a38 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3770      	adds	r7, #112	; 0x70
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bb2:	b480      	push	{r7}
 8005bb4:	b095      	sub	sp, #84	; 0x54
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bc2:	e853 3f00 	ldrex	r3, [r3]
 8005bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	461a      	mov	r2, r3
 8005bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8005bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005be0:	e841 2300 	strex	r3, r2, [r1]
 8005be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d1e6      	bne.n	8005bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	3308      	adds	r3, #8
 8005bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf4:	6a3b      	ldr	r3, [r7, #32]
 8005bf6:	e853 3f00 	ldrex	r3, [r3]
 8005bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f023 0301 	bic.w	r3, r3, #1
 8005c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	3308      	adds	r3, #8
 8005c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c14:	e841 2300 	strex	r3, r2, [r1]
 8005c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d1e5      	bne.n	8005bec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d118      	bne.n	8005c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	e853 3f00 	ldrex	r3, [r3]
 8005c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	f023 0310 	bic.w	r3, r3, #16
 8005c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	461a      	mov	r2, r3
 8005c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c46:	61bb      	str	r3, [r7, #24]
 8005c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c4a:	6979      	ldr	r1, [r7, #20]
 8005c4c:	69ba      	ldr	r2, [r7, #24]
 8005c4e:	e841 2300 	strex	r3, r2, [r1]
 8005c52:	613b      	str	r3, [r7, #16]
   return(result);
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d1e6      	bne.n	8005c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005c6e:	bf00      	nop
 8005c70:	3754      	adds	r7, #84	; 0x54
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr

08005c7a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c86:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f7ff fb71 	bl	8005380 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c9e:	bf00      	nop
 8005ca0:	3710      	adds	r7, #16
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b088      	sub	sp, #32
 8005caa:	af00      	add	r7, sp, #0
 8005cac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cc2:	61fb      	str	r3, [r7, #28]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	461a      	mov	r2, r3
 8005cca:	69fb      	ldr	r3, [r7, #28]
 8005ccc:	61bb      	str	r3, [r7, #24]
 8005cce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd0:	6979      	ldr	r1, [r7, #20]
 8005cd2:	69ba      	ldr	r2, [r7, #24]
 8005cd4:	e841 2300 	strex	r3, r2, [r1]
 8005cd8:	613b      	str	r3, [r7, #16]
   return(result);
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d1e6      	bne.n	8005cae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2220      	movs	r2, #32
 8005ce4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cec:	6878      	ldr	r0, [r7, #4]
 8005cee:	f7ff fb3d 	bl	800536c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005cf2:	bf00      	nop
 8005cf4:	3720      	adds	r7, #32
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}
	...

08005cfc <__libc_init_array>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4d0d      	ldr	r5, [pc, #52]	; (8005d34 <__libc_init_array+0x38>)
 8005d00:	4c0d      	ldr	r4, [pc, #52]	; (8005d38 <__libc_init_array+0x3c>)
 8005d02:	1b64      	subs	r4, r4, r5
 8005d04:	10a4      	asrs	r4, r4, #2
 8005d06:	2600      	movs	r6, #0
 8005d08:	42a6      	cmp	r6, r4
 8005d0a:	d109      	bne.n	8005d20 <__libc_init_array+0x24>
 8005d0c:	4d0b      	ldr	r5, [pc, #44]	; (8005d3c <__libc_init_array+0x40>)
 8005d0e:	4c0c      	ldr	r4, [pc, #48]	; (8005d40 <__libc_init_array+0x44>)
 8005d10:	f000 f820 	bl	8005d54 <_init>
 8005d14:	1b64      	subs	r4, r4, r5
 8005d16:	10a4      	asrs	r4, r4, #2
 8005d18:	2600      	movs	r6, #0
 8005d1a:	42a6      	cmp	r6, r4
 8005d1c:	d105      	bne.n	8005d2a <__libc_init_array+0x2e>
 8005d1e:	bd70      	pop	{r4, r5, r6, pc}
 8005d20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d24:	4798      	blx	r3
 8005d26:	3601      	adds	r6, #1
 8005d28:	e7ee      	b.n	8005d08 <__libc_init_array+0xc>
 8005d2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d2e:	4798      	blx	r3
 8005d30:	3601      	adds	r6, #1
 8005d32:	e7f2      	b.n	8005d1a <__libc_init_array+0x1e>
 8005d34:	08005da0 	.word	0x08005da0
 8005d38:	08005da0 	.word	0x08005da0
 8005d3c:	08005da0 	.word	0x08005da0
 8005d40:	08005da4 	.word	0x08005da4

08005d44 <memset>:
 8005d44:	4402      	add	r2, r0
 8005d46:	4603      	mov	r3, r0
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d100      	bne.n	8005d4e <memset+0xa>
 8005d4c:	4770      	bx	lr
 8005d4e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d52:	e7f9      	b.n	8005d48 <memset+0x4>

08005d54 <_init>:
 8005d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d56:	bf00      	nop
 8005d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d5a:	bc08      	pop	{r3}
 8005d5c:	469e      	mov	lr, r3
 8005d5e:	4770      	bx	lr

08005d60 <_fini>:
 8005d60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d62:	bf00      	nop
 8005d64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d66:	bc08      	pop	{r3}
 8005d68:	469e      	mov	lr, r3
 8005d6a:	4770      	bx	lr
