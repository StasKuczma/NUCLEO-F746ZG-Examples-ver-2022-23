
L02_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005268  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002f0  08005438  08005438  00015438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005728  08005728  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  08005728  08005728  00015728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005730  08005730  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005734  08005734  00015734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d0  20000000  08005738  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000548  200000d0  08005808  000200d0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000618  08005808  00020618  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cbe6  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022b6  00000000  00000000  0002cce6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0002efa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000890  00000000  00000000  0002f958  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000041d3  00000000  00000000  000301e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e032  00000000  00000000  000343bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e8267  00000000  00000000  000423ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012a654  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e6c  00000000  00000000  0012a6a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d0 	.word	0x200000d0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005420 	.word	0x08005420

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000d4 	.word	0x200000d4
 800020c:	08005420 	.word	0x08005420

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b974 	b.w	80005c0 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468e      	mov	lr, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14d      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4694      	mov	ip, r2
 8000302:	d969      	bls.n	80003d8 <__udivmoddi4+0xe8>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b152      	cbz	r2, 8000320 <__udivmoddi4+0x30>
 800030a:	fa01 f302 	lsl.w	r3, r1, r2
 800030e:	f1c2 0120 	rsb	r1, r2, #32
 8000312:	fa20 f101 	lsr.w	r1, r0, r1
 8000316:	fa0c fc02 	lsl.w	ip, ip, r2
 800031a:	ea41 0e03 	orr.w	lr, r1, r3
 800031e:	4094      	lsls	r4, r2
 8000320:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000324:	0c21      	lsrs	r1, r4, #16
 8000326:	fbbe f6f8 	udiv	r6, lr, r8
 800032a:	fa1f f78c 	uxth.w	r7, ip
 800032e:	fb08 e316 	mls	r3, r8, r6, lr
 8000332:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000336:	fb06 f107 	mul.w	r1, r6, r7
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f106 30ff 	add.w	r0, r6, #4294967295
 8000346:	f080 811f 	bcs.w	8000588 <__udivmoddi4+0x298>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 811c 	bls.w	8000588 <__udivmoddi4+0x298>
 8000350:	3e02      	subs	r6, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a5b      	subs	r3, r3, r1
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb3 f0f8 	udiv	r0, r3, r8
 800035c:	fb08 3310 	mls	r3, r8, r0, r3
 8000360:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000364:	fb00 f707 	mul.w	r7, r0, r7
 8000368:	42a7      	cmp	r7, r4
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x92>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 33ff 	add.w	r3, r0, #4294967295
 8000374:	f080 810a 	bcs.w	800058c <__udivmoddi4+0x29c>
 8000378:	42a7      	cmp	r7, r4
 800037a:	f240 8107 	bls.w	800058c <__udivmoddi4+0x29c>
 800037e:	4464      	add	r4, ip
 8000380:	3802      	subs	r0, #2
 8000382:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000386:	1be4      	subs	r4, r4, r7
 8000388:	2600      	movs	r6, #0
 800038a:	b11d      	cbz	r5, 8000394 <__udivmoddi4+0xa4>
 800038c:	40d4      	lsrs	r4, r2
 800038e:	2300      	movs	r3, #0
 8000390:	e9c5 4300 	strd	r4, r3, [r5]
 8000394:	4631      	mov	r1, r6
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d909      	bls.n	80003b2 <__udivmoddi4+0xc2>
 800039e:	2d00      	cmp	r5, #0
 80003a0:	f000 80ef 	beq.w	8000582 <__udivmoddi4+0x292>
 80003a4:	2600      	movs	r6, #0
 80003a6:	e9c5 0100 	strd	r0, r1, [r5]
 80003aa:	4630      	mov	r0, r6
 80003ac:	4631      	mov	r1, r6
 80003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b2:	fab3 f683 	clz	r6, r3
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	d14a      	bne.n	8000450 <__udivmoddi4+0x160>
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d302      	bcc.n	80003c4 <__udivmoddi4+0xd4>
 80003be:	4282      	cmp	r2, r0
 80003c0:	f200 80f9 	bhi.w	80005b6 <__udivmoddi4+0x2c6>
 80003c4:	1a84      	subs	r4, r0, r2
 80003c6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ca:	2001      	movs	r0, #1
 80003cc:	469e      	mov	lr, r3
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	d0e0      	beq.n	8000394 <__udivmoddi4+0xa4>
 80003d2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003d6:	e7dd      	b.n	8000394 <__udivmoddi4+0xa4>
 80003d8:	b902      	cbnz	r2, 80003dc <__udivmoddi4+0xec>
 80003da:	deff      	udf	#255	; 0xff
 80003dc:	fab2 f282 	clz	r2, r2
 80003e0:	2a00      	cmp	r2, #0
 80003e2:	f040 8092 	bne.w	800050a <__udivmoddi4+0x21a>
 80003e6:	eba1 010c 	sub.w	r1, r1, ip
 80003ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ee:	fa1f fe8c 	uxth.w	lr, ip
 80003f2:	2601      	movs	r6, #1
 80003f4:	0c20      	lsrs	r0, r4, #16
 80003f6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003fa:	fb07 1113 	mls	r1, r7, r3, r1
 80003fe:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000402:	fb0e f003 	mul.w	r0, lr, r3
 8000406:	4288      	cmp	r0, r1
 8000408:	d908      	bls.n	800041c <__udivmoddi4+0x12c>
 800040a:	eb1c 0101 	adds.w	r1, ip, r1
 800040e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000412:	d202      	bcs.n	800041a <__udivmoddi4+0x12a>
 8000414:	4288      	cmp	r0, r1
 8000416:	f200 80cb 	bhi.w	80005b0 <__udivmoddi4+0x2c0>
 800041a:	4643      	mov	r3, r8
 800041c:	1a09      	subs	r1, r1, r0
 800041e:	b2a4      	uxth	r4, r4
 8000420:	fbb1 f0f7 	udiv	r0, r1, r7
 8000424:	fb07 1110 	mls	r1, r7, r0, r1
 8000428:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800042c:	fb0e fe00 	mul.w	lr, lr, r0
 8000430:	45a6      	cmp	lr, r4
 8000432:	d908      	bls.n	8000446 <__udivmoddi4+0x156>
 8000434:	eb1c 0404 	adds.w	r4, ip, r4
 8000438:	f100 31ff 	add.w	r1, r0, #4294967295
 800043c:	d202      	bcs.n	8000444 <__udivmoddi4+0x154>
 800043e:	45a6      	cmp	lr, r4
 8000440:	f200 80bb 	bhi.w	80005ba <__udivmoddi4+0x2ca>
 8000444:	4608      	mov	r0, r1
 8000446:	eba4 040e 	sub.w	r4, r4, lr
 800044a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800044e:	e79c      	b.n	800038a <__udivmoddi4+0x9a>
 8000450:	f1c6 0720 	rsb	r7, r6, #32
 8000454:	40b3      	lsls	r3, r6
 8000456:	fa22 fc07 	lsr.w	ip, r2, r7
 800045a:	ea4c 0c03 	orr.w	ip, ip, r3
 800045e:	fa20 f407 	lsr.w	r4, r0, r7
 8000462:	fa01 f306 	lsl.w	r3, r1, r6
 8000466:	431c      	orrs	r4, r3
 8000468:	40f9      	lsrs	r1, r7
 800046a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800046e:	fa00 f306 	lsl.w	r3, r0, r6
 8000472:	fbb1 f8f9 	udiv	r8, r1, r9
 8000476:	0c20      	lsrs	r0, r4, #16
 8000478:	fa1f fe8c 	uxth.w	lr, ip
 800047c:	fb09 1118 	mls	r1, r9, r8, r1
 8000480:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000484:	fb08 f00e 	mul.w	r0, r8, lr
 8000488:	4288      	cmp	r0, r1
 800048a:	fa02 f206 	lsl.w	r2, r2, r6
 800048e:	d90b      	bls.n	80004a8 <__udivmoddi4+0x1b8>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f108 3aff 	add.w	sl, r8, #4294967295
 8000498:	f080 8088 	bcs.w	80005ac <__udivmoddi4+0x2bc>
 800049c:	4288      	cmp	r0, r1
 800049e:	f240 8085 	bls.w	80005ac <__udivmoddi4+0x2bc>
 80004a2:	f1a8 0802 	sub.w	r8, r8, #2
 80004a6:	4461      	add	r1, ip
 80004a8:	1a09      	subs	r1, r1, r0
 80004aa:	b2a4      	uxth	r4, r4
 80004ac:	fbb1 f0f9 	udiv	r0, r1, r9
 80004b0:	fb09 1110 	mls	r1, r9, r0, r1
 80004b4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004b8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004bc:	458e      	cmp	lr, r1
 80004be:	d908      	bls.n	80004d2 <__udivmoddi4+0x1e2>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004c8:	d26c      	bcs.n	80005a4 <__udivmoddi4+0x2b4>
 80004ca:	458e      	cmp	lr, r1
 80004cc:	d96a      	bls.n	80005a4 <__udivmoddi4+0x2b4>
 80004ce:	3802      	subs	r0, #2
 80004d0:	4461      	add	r1, ip
 80004d2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004d6:	fba0 9402 	umull	r9, r4, r0, r2
 80004da:	eba1 010e 	sub.w	r1, r1, lr
 80004de:	42a1      	cmp	r1, r4
 80004e0:	46c8      	mov	r8, r9
 80004e2:	46a6      	mov	lr, r4
 80004e4:	d356      	bcc.n	8000594 <__udivmoddi4+0x2a4>
 80004e6:	d053      	beq.n	8000590 <__udivmoddi4+0x2a0>
 80004e8:	b15d      	cbz	r5, 8000502 <__udivmoddi4+0x212>
 80004ea:	ebb3 0208 	subs.w	r2, r3, r8
 80004ee:	eb61 010e 	sbc.w	r1, r1, lr
 80004f2:	fa01 f707 	lsl.w	r7, r1, r7
 80004f6:	fa22 f306 	lsr.w	r3, r2, r6
 80004fa:	40f1      	lsrs	r1, r6
 80004fc:	431f      	orrs	r7, r3
 80004fe:	e9c5 7100 	strd	r7, r1, [r5]
 8000502:	2600      	movs	r6, #0
 8000504:	4631      	mov	r1, r6
 8000506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800050a:	f1c2 0320 	rsb	r3, r2, #32
 800050e:	40d8      	lsrs	r0, r3
 8000510:	fa0c fc02 	lsl.w	ip, ip, r2
 8000514:	fa21 f303 	lsr.w	r3, r1, r3
 8000518:	4091      	lsls	r1, r2
 800051a:	4301      	orrs	r1, r0
 800051c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000520:	fa1f fe8c 	uxth.w	lr, ip
 8000524:	fbb3 f0f7 	udiv	r0, r3, r7
 8000528:	fb07 3610 	mls	r6, r7, r0, r3
 800052c:	0c0b      	lsrs	r3, r1, #16
 800052e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000532:	fb00 f60e 	mul.w	r6, r0, lr
 8000536:	429e      	cmp	r6, r3
 8000538:	fa04 f402 	lsl.w	r4, r4, r2
 800053c:	d908      	bls.n	8000550 <__udivmoddi4+0x260>
 800053e:	eb1c 0303 	adds.w	r3, ip, r3
 8000542:	f100 38ff 	add.w	r8, r0, #4294967295
 8000546:	d22f      	bcs.n	80005a8 <__udivmoddi4+0x2b8>
 8000548:	429e      	cmp	r6, r3
 800054a:	d92d      	bls.n	80005a8 <__udivmoddi4+0x2b8>
 800054c:	3802      	subs	r0, #2
 800054e:	4463      	add	r3, ip
 8000550:	1b9b      	subs	r3, r3, r6
 8000552:	b289      	uxth	r1, r1
 8000554:	fbb3 f6f7 	udiv	r6, r3, r7
 8000558:	fb07 3316 	mls	r3, r7, r6, r3
 800055c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000560:	fb06 f30e 	mul.w	r3, r6, lr
 8000564:	428b      	cmp	r3, r1
 8000566:	d908      	bls.n	800057a <__udivmoddi4+0x28a>
 8000568:	eb1c 0101 	adds.w	r1, ip, r1
 800056c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000570:	d216      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000572:	428b      	cmp	r3, r1
 8000574:	d914      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000576:	3e02      	subs	r6, #2
 8000578:	4461      	add	r1, ip
 800057a:	1ac9      	subs	r1, r1, r3
 800057c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000580:	e738      	b.n	80003f4 <__udivmoddi4+0x104>
 8000582:	462e      	mov	r6, r5
 8000584:	4628      	mov	r0, r5
 8000586:	e705      	b.n	8000394 <__udivmoddi4+0xa4>
 8000588:	4606      	mov	r6, r0
 800058a:	e6e3      	b.n	8000354 <__udivmoddi4+0x64>
 800058c:	4618      	mov	r0, r3
 800058e:	e6f8      	b.n	8000382 <__udivmoddi4+0x92>
 8000590:	454b      	cmp	r3, r9
 8000592:	d2a9      	bcs.n	80004e8 <__udivmoddi4+0x1f8>
 8000594:	ebb9 0802 	subs.w	r8, r9, r2
 8000598:	eb64 0e0c 	sbc.w	lr, r4, ip
 800059c:	3801      	subs	r0, #1
 800059e:	e7a3      	b.n	80004e8 <__udivmoddi4+0x1f8>
 80005a0:	4646      	mov	r6, r8
 80005a2:	e7ea      	b.n	800057a <__udivmoddi4+0x28a>
 80005a4:	4620      	mov	r0, r4
 80005a6:	e794      	b.n	80004d2 <__udivmoddi4+0x1e2>
 80005a8:	4640      	mov	r0, r8
 80005aa:	e7d1      	b.n	8000550 <__udivmoddi4+0x260>
 80005ac:	46d0      	mov	r8, sl
 80005ae:	e77b      	b.n	80004a8 <__udivmoddi4+0x1b8>
 80005b0:	3b02      	subs	r3, #2
 80005b2:	4461      	add	r1, ip
 80005b4:	e732      	b.n	800041c <__udivmoddi4+0x12c>
 80005b6:	4630      	mov	r0, r6
 80005b8:	e709      	b.n	80003ce <__udivmoddi4+0xde>
 80005ba:	4464      	add	r4, ip
 80005bc:	3802      	subs	r0, #2
 80005be:	e742      	b.n	8000446 <__udivmoddi4+0x156>

080005c0 <__aeabi_idiv0>:
 80005c0:	4770      	bx	lr
 80005c2:	bf00      	nop

080005c4 <__led_gpio_write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: GPIO pin state (0/1)
  * @retval None
  */
void __led_gpio_write(const LED_GPIO_Handle_TypeDef* hled, _Bool state)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hled->Port, hled->Pin, (GPIO_PinState)state);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	6818      	ldr	r0, [r3, #0]
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	889b      	ldrh	r3, [r3, #4]
 80005d8:	78fa      	ldrb	r2, [r7, #3]
 80005da:	4619      	mov	r1, r3
 80005dc:	f001 fc9e 	bl	8001f1c <HAL_GPIO_WritePin>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <LED_GPIO_Write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: LED state (LED_OFF or LED_ON)
  * @retval None
  */
void LED_GPIO_Write(const LED_GPIO_Handle_TypeDef* hled, LED_GPIO_State_TypeDef state)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b082      	sub	sp, #8
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
 80005f0:	460b      	mov	r3, r1
 80005f2:	70fb      	strb	r3, [r7, #3]
	__led_gpio_write(hled, hled->ActiveState == LED_ON_HIGH ? state : !state);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	799b      	ldrb	r3, [r3, #6]
 80005f8:	2b01      	cmp	r3, #1
 80005fa:	d106      	bne.n	800060a <LED_GPIO_Write+0x22>
 80005fc:	78fb      	ldrb	r3, [r7, #3]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	bf14      	ite	ne
 8000602:	2301      	movne	r3, #1
 8000604:	2300      	moveq	r3, #0
 8000606:	b2db      	uxtb	r3, r3
 8000608:	e005      	b.n	8000616 <LED_GPIO_Write+0x2e>
 800060a:	78fb      	ldrb	r3, [r7, #3]
 800060c:	2b00      	cmp	r3, #0
 800060e:	bf0c      	ite	eq
 8000610:	2301      	moveq	r3, #1
 8000612:	2300      	movne	r3, #0
 8000614:	b2db      	uxtb	r3, r3
 8000616:	4619      	mov	r1, r3
 8000618:	6878      	ldr	r0, [r7, #4]
 800061a:	f7ff ffd3 	bl	80005c4 <__led_gpio_write>
}
 800061e:	bf00      	nop
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <jsmn_alloc_token>:
#ifndef JSMN_HEADER
/**
 * Allocates a fresh unused token from the token pool.
 */
static jsmntok_t *jsmn_alloc_token(jsmn_parser *parser, jsmntok_t *tokens,
                                   const size_t num_tokens) {
 8000626:	b480      	push	{r7}
 8000628:	b087      	sub	sp, #28
 800062a:	af00      	add	r7, sp, #0
 800062c:	60f8      	str	r0, [r7, #12]
 800062e:	60b9      	str	r1, [r7, #8]
 8000630:	607a      	str	r2, [r7, #4]
  jsmntok_t *tok;
  if (parser->toknext >= num_tokens) {
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	685b      	ldr	r3, [r3, #4]
 8000636:	687a      	ldr	r2, [r7, #4]
 8000638:	429a      	cmp	r2, r3
 800063a:	d801      	bhi.n	8000640 <jsmn_alloc_token+0x1a>
    return NULL;
 800063c:	2300      	movs	r3, #0
 800063e:	e014      	b.n	800066a <jsmn_alloc_token+0x44>
  }
  tok = &tokens[parser->toknext++];
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	685b      	ldr	r3, [r3, #4]
 8000644:	1c59      	adds	r1, r3, #1
 8000646:	68fa      	ldr	r2, [r7, #12]
 8000648:	6051      	str	r1, [r2, #4]
 800064a:	011b      	lsls	r3, r3, #4
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	4413      	add	r3, r2
 8000650:	617b      	str	r3, [r7, #20]
  tok->start = tok->end = -1;
 8000652:	697b      	ldr	r3, [r7, #20]
 8000654:	f04f 32ff 	mov.w	r2, #4294967295
 8000658:	609a      	str	r2, [r3, #8]
 800065a:	697b      	ldr	r3, [r7, #20]
 800065c:	689a      	ldr	r2, [r3, #8]
 800065e:	697b      	ldr	r3, [r7, #20]
 8000660:	605a      	str	r2, [r3, #4]
  tok->size = 0;
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	2200      	movs	r2, #0
 8000666:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
  tok->parent = -1;
#endif
  return tok;
 8000668:	697b      	ldr	r3, [r7, #20]
}
 800066a:	4618      	mov	r0, r3
 800066c:	371c      	adds	r7, #28
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr

08000676 <jsmn_fill_token>:

/**
 * Fills token type and boundaries.
 */
static void jsmn_fill_token(jsmntok_t *token, const jsmntype_t type,
                            const int start, const int end) {
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	460b      	mov	r3, r1
 8000684:	72fb      	strb	r3, [r7, #11]
  token->type = type;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	7afa      	ldrb	r2, [r7, #11]
 800068a:	701a      	strb	r2, [r3, #0]
  token->start = start;
 800068c:	68fb      	ldr	r3, [r7, #12]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	605a      	str	r2, [r3, #4]
  token->end = end;
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	683a      	ldr	r2, [r7, #0]
 8000696:	609a      	str	r2, [r3, #8]
  token->size = 0;
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
}
 800069e:	bf00      	nop
 80006a0:	3714      	adds	r7, #20
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
	...

080006ac <jsmn_parse_primitive>:
/**
 * Fills next available token with JSON primitive.
 */
static int jsmn_parse_primitive(jsmn_parser *parser, const char *js,
                                const size_t len, jsmntok_t *tokens,
                                const size_t num_tokens) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b086      	sub	sp, #24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
 80006b8:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;
  int start;

  start = parser->pos;
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	617b      	str	r3, [r7, #20]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80006c0:	e07c      	b.n	80007bc <jsmn_parse_primitive+0x110>
    switch (js[parser->pos]) {
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	68ba      	ldr	r2, [r7, #8]
 80006c8:	4413      	add	r3, r2
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	2b7d      	cmp	r3, #125	; 0x7d
 80006ce:	f000 8083 	beq.w	80007d8 <jsmn_parse_primitive+0x12c>
 80006d2:	2b7d      	cmp	r3, #125	; 0x7d
 80006d4:	dc58      	bgt.n	8000788 <jsmn_parse_primitive+0xdc>
 80006d6:	2b5d      	cmp	r3, #93	; 0x5d
 80006d8:	d07e      	beq.n	80007d8 <jsmn_parse_primitive+0x12c>
 80006da:	2b5d      	cmp	r3, #93	; 0x5d
 80006dc:	dc54      	bgt.n	8000788 <jsmn_parse_primitive+0xdc>
 80006de:	2b2c      	cmp	r3, #44	; 0x2c
 80006e0:	dc50      	bgt.n	8000784 <jsmn_parse_primitive+0xd8>
 80006e2:	2b09      	cmp	r3, #9
 80006e4:	db50      	blt.n	8000788 <jsmn_parse_primitive+0xdc>
 80006e6:	3b09      	subs	r3, #9
 80006e8:	2b23      	cmp	r3, #35	; 0x23
 80006ea:	d84d      	bhi.n	8000788 <jsmn_parse_primitive+0xdc>
 80006ec:	a201      	add	r2, pc, #4	; (adr r2, 80006f4 <jsmn_parse_primitive+0x48>)
 80006ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006f2:	bf00      	nop
 80006f4:	080007d9 	.word	0x080007d9
 80006f8:	080007d9 	.word	0x080007d9
 80006fc:	08000789 	.word	0x08000789
 8000700:	08000789 	.word	0x08000789
 8000704:	080007d9 	.word	0x080007d9
 8000708:	08000789 	.word	0x08000789
 800070c:	08000789 	.word	0x08000789
 8000710:	08000789 	.word	0x08000789
 8000714:	08000789 	.word	0x08000789
 8000718:	08000789 	.word	0x08000789
 800071c:	08000789 	.word	0x08000789
 8000720:	08000789 	.word	0x08000789
 8000724:	08000789 	.word	0x08000789
 8000728:	08000789 	.word	0x08000789
 800072c:	08000789 	.word	0x08000789
 8000730:	08000789 	.word	0x08000789
 8000734:	08000789 	.word	0x08000789
 8000738:	08000789 	.word	0x08000789
 800073c:	08000789 	.word	0x08000789
 8000740:	08000789 	.word	0x08000789
 8000744:	08000789 	.word	0x08000789
 8000748:	08000789 	.word	0x08000789
 800074c:	08000789 	.word	0x08000789
 8000750:	080007d9 	.word	0x080007d9
 8000754:	08000789 	.word	0x08000789
 8000758:	08000789 	.word	0x08000789
 800075c:	08000789 	.word	0x08000789
 8000760:	08000789 	.word	0x08000789
 8000764:	08000789 	.word	0x08000789
 8000768:	08000789 	.word	0x08000789
 800076c:	08000789 	.word	0x08000789
 8000770:	08000789 	.word	0x08000789
 8000774:	08000789 	.word	0x08000789
 8000778:	08000789 	.word	0x08000789
 800077c:	08000789 	.word	0x08000789
 8000780:	080007d9 	.word	0x080007d9
 8000784:	2b3a      	cmp	r3, #58	; 0x3a
 8000786:	d027      	beq.n	80007d8 <jsmn_parse_primitive+0x12c>
    case ']':
    case '}':
      goto found;
    default:
                   /* to quiet a warning from gcc*/
      break;
 8000788:	bf00      	nop
    }
    if (js[parser->pos] < 32 || js[parser->pos] >= 127) {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68ba      	ldr	r2, [r7, #8]
 8000790:	4413      	add	r3, r2
 8000792:	781b      	ldrb	r3, [r3, #0]
 8000794:	2b1f      	cmp	r3, #31
 8000796:	d906      	bls.n	80007a6 <jsmn_parse_primitive+0xfa>
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	4413      	add	r3, r2
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b7e      	cmp	r3, #126	; 0x7e
 80007a4:	d905      	bls.n	80007b2 <jsmn_parse_primitive+0x106>
      parser->pos = start;
 80007a6:	697a      	ldr	r2, [r7, #20]
 80007a8:	68fb      	ldr	r3, [r7, #12]
 80007aa:	601a      	str	r2, [r3, #0]
      return JSMN_ERROR_INVAL;
 80007ac:	f06f 0301 	mvn.w	r3, #1
 80007b0:	e03b      	b.n	800082a <jsmn_parse_primitive+0x17e>
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	687a      	ldr	r2, [r7, #4]
 80007c2:	429a      	cmp	r2, r3
 80007c4:	d90a      	bls.n	80007dc <jsmn_parse_primitive+0x130>
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	4413      	add	r3, r2
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	f47f af76 	bne.w	80006c2 <jsmn_parse_primitive+0x16>
  /* In strict mode primitive must be followed by a comma/object/array */
  parser->pos = start;
  return JSMN_ERROR_PART;
#endif

found:
 80007d6:	e001      	b.n	80007dc <jsmn_parse_primitive+0x130>
      goto found;
 80007d8:	bf00      	nop
 80007da:	e000      	b.n	80007de <jsmn_parse_primitive+0x132>
found:
 80007dc:	bf00      	nop
  if (tokens == NULL) {
 80007de:	683b      	ldr	r3, [r7, #0]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d106      	bne.n	80007f2 <jsmn_parse_primitive+0x146>
    parser->pos--;
 80007e4:	68fb      	ldr	r3, [r7, #12]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	1e5a      	subs	r2, r3, #1
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	601a      	str	r2, [r3, #0]
    return 0;
 80007ee:	2300      	movs	r3, #0
 80007f0:	e01b      	b.n	800082a <jsmn_parse_primitive+0x17e>
  }
  token = jsmn_alloc_token(parser, tokens, num_tokens);
 80007f2:	6a3a      	ldr	r2, [r7, #32]
 80007f4:	6839      	ldr	r1, [r7, #0]
 80007f6:	68f8      	ldr	r0, [r7, #12]
 80007f8:	f7ff ff15 	bl	8000626 <jsmn_alloc_token>
 80007fc:	6138      	str	r0, [r7, #16]
  if (token == NULL) {
 80007fe:	693b      	ldr	r3, [r7, #16]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d105      	bne.n	8000810 <jsmn_parse_primitive+0x164>
    parser->pos = start;
 8000804:	697a      	ldr	r2, [r7, #20]
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	601a      	str	r2, [r3, #0]
    return JSMN_ERROR_NOMEM;
 800080a:	f04f 33ff 	mov.w	r3, #4294967295
 800080e:	e00c      	b.n	800082a <jsmn_parse_primitive+0x17e>
  }
  jsmn_fill_token(token, JSMN_PRIMITIVE, start, parser->pos);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	681b      	ldr	r3, [r3, #0]
 8000814:	697a      	ldr	r2, [r7, #20]
 8000816:	2108      	movs	r1, #8
 8000818:	6938      	ldr	r0, [r7, #16]
 800081a:	f7ff ff2c 	bl	8000676 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
  token->parent = parser->toksuper;
#endif
  parser->pos--;
 800081e:	68fb      	ldr	r3, [r7, #12]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	1e5a      	subs	r2, r3, #1
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	601a      	str	r2, [r3, #0]
  return 0;
 8000828:	2300      	movs	r3, #0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop

08000834 <jsmn_parse_string>:
/**
 * Fills next token with JSON string.
 */
static int jsmn_parse_string(jsmn_parser *parser, const char *js,
                             const size_t len, jsmntok_t *tokens,
                             const size_t num_tokens) {
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
 8000840:	603b      	str	r3, [r7, #0]
  jsmntok_t *token;

  int start = parser->pos;
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	61bb      	str	r3, [r7, #24]
  
  /* Skip starting quote */
  parser->pos++;
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	1c5a      	adds	r2, r3, #1
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	601a      	str	r2, [r3, #0]
  
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000852:	e0e6      	b.n	8000a22 <jsmn_parse_string+0x1ee>
    char c = js[parser->pos];
 8000854:	68fb      	ldr	r3, [r7, #12]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	68ba      	ldr	r2, [r7, #8]
 800085a:	4413      	add	r3, r2
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	75fb      	strb	r3, [r7, #23]

    /* Quote: end of string */
    if (c == '\"') {
 8000860:	7dfb      	ldrb	r3, [r7, #23]
 8000862:	2b22      	cmp	r3, #34	; 0x22
 8000864:	d11d      	bne.n	80008a2 <jsmn_parse_string+0x6e>
      if (tokens == NULL) {
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <jsmn_parse_string+0x3c>
        return 0;
 800086c:	2300      	movs	r3, #0
 800086e:	e0ea      	b.n	8000a46 <jsmn_parse_string+0x212>
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000870:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000872:	6839      	ldr	r1, [r7, #0]
 8000874:	68f8      	ldr	r0, [r7, #12]
 8000876:	f7ff fed6 	bl	8000626 <jsmn_alloc_token>
 800087a:	6138      	str	r0, [r7, #16]
      if (token == NULL) {
 800087c:	693b      	ldr	r3, [r7, #16]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d105      	bne.n	800088e <jsmn_parse_string+0x5a>
        parser->pos = start;
 8000882:	69ba      	ldr	r2, [r7, #24]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_NOMEM;
 8000888:	f04f 33ff 	mov.w	r3, #4294967295
 800088c:	e0db      	b.n	8000a46 <jsmn_parse_string+0x212>
      }
      jsmn_fill_token(token, JSMN_STRING, start + 1, parser->pos);
 800088e:	69bb      	ldr	r3, [r7, #24]
 8000890:	1c5a      	adds	r2, r3, #1
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	2104      	movs	r1, #4
 8000898:	6938      	ldr	r0, [r7, #16]
 800089a:	f7ff feec 	bl	8000676 <jsmn_fill_token>
#ifdef JSMN_PARENT_LINKS
      token->parent = parser->toksuper;
#endif
      return 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	e0d1      	b.n	8000a46 <jsmn_parse_string+0x212>
    }

    /* Backslash: Quoted symbol expected */
    if (c == '\\' && parser->pos + 1 < len) {
 80008a2:	7dfb      	ldrb	r3, [r7, #23]
 80008a4:	2b5c      	cmp	r3, #92	; 0x5c
 80008a6:	f040 80b4 	bne.w	8000a12 <jsmn_parse_string+0x1de>
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	681b      	ldr	r3, [r3, #0]
 80008ae:	3301      	adds	r3, #1
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	429a      	cmp	r2, r3
 80008b4:	f240 80ad 	bls.w	8000a12 <jsmn_parse_string+0x1de>
      int i;
      parser->pos++;
 80008b8:	68fb      	ldr	r3, [r7, #12]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	1c5a      	adds	r2, r3, #1
 80008be:	68fb      	ldr	r3, [r7, #12]
 80008c0:	601a      	str	r2, [r3, #0]
      switch (js[parser->pos]) {
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	68ba      	ldr	r2, [r7, #8]
 80008c8:	4413      	add	r3, r2
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b75      	cmp	r3, #117	; 0x75
 80008ce:	f300 809a 	bgt.w	8000a06 <jsmn_parse_string+0x1d2>
 80008d2:	2b5c      	cmp	r3, #92	; 0x5c
 80008d4:	da06      	bge.n	80008e4 <jsmn_parse_string+0xb0>
 80008d6:	2b22      	cmp	r3, #34	; 0x22
 80008d8:	f000 809d 	beq.w	8000a16 <jsmn_parse_string+0x1e2>
 80008dc:	2b2f      	cmp	r3, #47	; 0x2f
 80008de:	f000 809a 	beq.w	8000a16 <jsmn_parse_string+0x1e2>
 80008e2:	e090      	b.n	8000a06 <jsmn_parse_string+0x1d2>
 80008e4:	3b5c      	subs	r3, #92	; 0x5c
 80008e6:	2b19      	cmp	r3, #25
 80008e8:	f200 808d 	bhi.w	8000a06 <jsmn_parse_string+0x1d2>
 80008ec:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <jsmn_parse_string+0xc0>)
 80008ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f2:	bf00      	nop
 80008f4:	08000a17 	.word	0x08000a17
 80008f8:	08000a07 	.word	0x08000a07
 80008fc:	08000a07 	.word	0x08000a07
 8000900:	08000a07 	.word	0x08000a07
 8000904:	08000a07 	.word	0x08000a07
 8000908:	08000a07 	.word	0x08000a07
 800090c:	08000a17 	.word	0x08000a17
 8000910:	08000a07 	.word	0x08000a07
 8000914:	08000a07 	.word	0x08000a07
 8000918:	08000a07 	.word	0x08000a07
 800091c:	08000a17 	.word	0x08000a17
 8000920:	08000a07 	.word	0x08000a07
 8000924:	08000a07 	.word	0x08000a07
 8000928:	08000a07 	.word	0x08000a07
 800092c:	08000a07 	.word	0x08000a07
 8000930:	08000a07 	.word	0x08000a07
 8000934:	08000a07 	.word	0x08000a07
 8000938:	08000a07 	.word	0x08000a07
 800093c:	08000a17 	.word	0x08000a17
 8000940:	08000a07 	.word	0x08000a07
 8000944:	08000a07 	.word	0x08000a07
 8000948:	08000a07 	.word	0x08000a07
 800094c:	08000a17 	.word	0x08000a17
 8000950:	08000a07 	.word	0x08000a07
 8000954:	08000a17 	.word	0x08000a17
 8000958:	0800095d 	.word	0x0800095d
      case 'n':
      case 't':
        break;
      /* Allows escaped symbol \uXXXX */
      case 'u':
        parser->pos++;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	1c5a      	adds	r2, r3, #1
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	601a      	str	r2, [r3, #0]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]
 800096a:	e037      	b.n	80009dc <jsmn_parse_string+0x1a8>
             i++) {
          /* If it isn't a hex character we have an error */
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	68ba      	ldr	r2, [r7, #8]
 8000972:	4413      	add	r3, r2
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b2f      	cmp	r3, #47	; 0x2f
 8000978:	d906      	bls.n	8000988 <jsmn_parse_string+0x154>
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	68ba      	ldr	r2, [r7, #8]
 8000980:	4413      	add	r3, r2
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	2b39      	cmp	r3, #57	; 0x39
 8000986:	d921      	bls.n	80009cc <jsmn_parse_string+0x198>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000988:	68fb      	ldr	r3, [r7, #12]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	4413      	add	r3, r2
 8000990:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 8000992:	2b40      	cmp	r3, #64	; 0x40
 8000994:	d906      	bls.n	80009a4 <jsmn_parse_string+0x170>
                (js[parser->pos] >= 65 && js[parser->pos] <= 70) ||   /* A-F */
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	68ba      	ldr	r2, [r7, #8]
 800099c:	4413      	add	r3, r2
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	2b46      	cmp	r3, #70	; 0x46
 80009a2:	d913      	bls.n	80009cc <jsmn_parse_string+0x198>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68ba      	ldr	r2, [r7, #8]
 80009aa:	4413      	add	r3, r2
 80009ac:	781b      	ldrb	r3, [r3, #0]
          if (!((js[parser->pos] >= 48 && js[parser->pos] <= 57) ||   /* 0-9 */
 80009ae:	2b60      	cmp	r3, #96	; 0x60
 80009b0:	d906      	bls.n	80009c0 <jsmn_parse_string+0x18c>
                (js[parser->pos] >= 97 && js[parser->pos] <= 102))) { /* a-f */
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	4413      	add	r3, r2
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	2b66      	cmp	r3, #102	; 0x66
 80009be:	d905      	bls.n	80009cc <jsmn_parse_string+0x198>
            parser->pos = start;
 80009c0:	69ba      	ldr	r2, [r7, #24]
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	601a      	str	r2, [r3, #0]
            return JSMN_ERROR_INVAL;
 80009c6:	f06f 0301 	mvn.w	r3, #1
 80009ca:	e03c      	b.n	8000a46 <jsmn_parse_string+0x212>
          }
          parser->pos++;
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	1c5a      	adds	r2, r3, #1
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	601a      	str	r2, [r3, #0]
             i++) {
 80009d6:	69fb      	ldr	r3, [r7, #28]
 80009d8:	3301      	adds	r3, #1
 80009da:	61fb      	str	r3, [r7, #28]
        for (i = 0; i < 4 && parser->pos < len && js[parser->pos] != '\0';
 80009dc:	69fb      	ldr	r3, [r7, #28]
 80009de:	2b03      	cmp	r3, #3
 80009e0:	dc0b      	bgt.n	80009fa <jsmn_parse_string+0x1c6>
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	687a      	ldr	r2, [r7, #4]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d906      	bls.n	80009fa <jsmn_parse_string+0x1c6>
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	68ba      	ldr	r2, [r7, #8]
 80009f2:	4413      	add	r3, r2
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1b8      	bne.n	800096c <jsmn_parse_string+0x138>
        }
        parser->pos--;
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	1e5a      	subs	r2, r3, #1
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	601a      	str	r2, [r3, #0]
        break;
 8000a04:	e008      	b.n	8000a18 <jsmn_parse_string+0x1e4>
      /* Unexpected symbol */
      default:
        parser->pos = start;
 8000a06:	69ba      	ldr	r2, [r7, #24]
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	601a      	str	r2, [r3, #0]
        return JSMN_ERROR_INVAL;
 8000a0c:	f06f 0301 	mvn.w	r3, #1
 8000a10:	e019      	b.n	8000a46 <jsmn_parse_string+0x212>
      }
    }
 8000a12:	bf00      	nop
 8000a14:	e000      	b.n	8000a18 <jsmn_parse_string+0x1e4>
        break;
 8000a16:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	1c5a      	adds	r2, r3, #1
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	601a      	str	r2, [r3, #0]
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	687a      	ldr	r2, [r7, #4]
 8000a28:	429a      	cmp	r2, r3
 8000a2a:	d907      	bls.n	8000a3c <jsmn_parse_string+0x208>
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	68ba      	ldr	r2, [r7, #8]
 8000a32:	4413      	add	r3, r2
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	f47f af0c 	bne.w	8000854 <jsmn_parse_string+0x20>
  }
  parser->pos = start;
 8000a3c:	69ba      	ldr	r2, [r7, #24]
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	601a      	str	r2, [r3, #0]
  return JSMN_ERROR_PART;
 8000a42:	f06f 0302 	mvn.w	r3, #2
}
 8000a46:	4618      	mov	r0, r3
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop

08000a50 <jsmn_parse>:

/**
 * Parse JSON string and fill tokens.
 */
JSMN_API int jsmn_parse(jsmn_parser *parser, const char *js, const size_t len,
                        jsmntok_t *tokens, const unsigned int num_tokens) {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08c      	sub	sp, #48	; 0x30
 8000a54:	af02      	add	r7, sp, #8
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
 8000a5c:	603b      	str	r3, [r7, #0]
  int r;
  int i;
  jsmntok_t *token;
  int count = parser->toknext;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	685b      	ldr	r3, [r3, #4]
 8000a62:	623b      	str	r3, [r7, #32]

  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000a64:	e1bf      	b.n	8000de6 <jsmn_parse+0x396>
    char c;
    jsmntype_t type;

    c = js[parser->pos];
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	68ba      	ldr	r2, [r7, #8]
 8000a6c:	4413      	add	r3, r2
 8000a6e:	781b      	ldrb	r3, [r3, #0]
 8000a70:	77fb      	strb	r3, [r7, #31]
    switch (c) {
 8000a72:	7ffb      	ldrb	r3, [r7, #31]
 8000a74:	2b7d      	cmp	r3, #125	; 0x7d
 8000a76:	f000 80b9 	beq.w	8000bec <jsmn_parse+0x19c>
 8000a7a:	2b7d      	cmp	r3, #125	; 0x7d
 8000a7c:	f300 8181 	bgt.w	8000d82 <jsmn_parse+0x332>
 8000a80:	2b7b      	cmp	r3, #123	; 0x7b
 8000a82:	d07c      	beq.n	8000b7e <jsmn_parse+0x12e>
 8000a84:	2b7b      	cmp	r3, #123	; 0x7b
 8000a86:	f300 817c 	bgt.w	8000d82 <jsmn_parse+0x332>
 8000a8a:	2b5d      	cmp	r3, #93	; 0x5d
 8000a8c:	f000 80ae 	beq.w	8000bec <jsmn_parse+0x19c>
 8000a90:	2b5d      	cmp	r3, #93	; 0x5d
 8000a92:	f300 8176 	bgt.w	8000d82 <jsmn_parse+0x332>
 8000a96:	2b3a      	cmp	r3, #58	; 0x3a
 8000a98:	dc6e      	bgt.n	8000b78 <jsmn_parse+0x128>
 8000a9a:	2b09      	cmp	r3, #9
 8000a9c:	f2c0 8171 	blt.w	8000d82 <jsmn_parse+0x332>
 8000aa0:	3b09      	subs	r3, #9
 8000aa2:	2b31      	cmp	r3, #49	; 0x31
 8000aa4:	f200 816d 	bhi.w	8000d82 <jsmn_parse+0x332>
 8000aa8:	a201      	add	r2, pc, #4	; (adr r2, 8000ab0 <jsmn_parse+0x60>)
 8000aaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000aae:	bf00      	nop
 8000ab0:	08000dc7 	.word	0x08000dc7
 8000ab4:	08000dc7 	.word	0x08000dc7
 8000ab8:	08000d83 	.word	0x08000d83
 8000abc:	08000d83 	.word	0x08000d83
 8000ac0:	08000dc7 	.word	0x08000dc7
 8000ac4:	08000d83 	.word	0x08000d83
 8000ac8:	08000d83 	.word	0x08000d83
 8000acc:	08000d83 	.word	0x08000d83
 8000ad0:	08000d83 	.word	0x08000d83
 8000ad4:	08000d83 	.word	0x08000d83
 8000ad8:	08000d83 	.word	0x08000d83
 8000adc:	08000d83 	.word	0x08000d83
 8000ae0:	08000d83 	.word	0x08000d83
 8000ae4:	08000d83 	.word	0x08000d83
 8000ae8:	08000d83 	.word	0x08000d83
 8000aec:	08000d83 	.word	0x08000d83
 8000af0:	08000d83 	.word	0x08000d83
 8000af4:	08000d83 	.word	0x08000d83
 8000af8:	08000d83 	.word	0x08000d83
 8000afc:	08000d83 	.word	0x08000d83
 8000b00:	08000d83 	.word	0x08000d83
 8000b04:	08000d83 	.word	0x08000d83
 8000b08:	08000d83 	.word	0x08000d83
 8000b0c:	08000dc7 	.word	0x08000dc7
 8000b10:	08000d83 	.word	0x08000d83
 8000b14:	08000ca1 	.word	0x08000ca1
 8000b18:	08000d83 	.word	0x08000d83
 8000b1c:	08000d83 	.word	0x08000d83
 8000b20:	08000d83 	.word	0x08000d83
 8000b24:	08000d83 	.word	0x08000d83
 8000b28:	08000d83 	.word	0x08000d83
 8000b2c:	08000d83 	.word	0x08000d83
 8000b30:	08000d83 	.word	0x08000d83
 8000b34:	08000d83 	.word	0x08000d83
 8000b38:	08000d83 	.word	0x08000d83
 8000b3c:	08000cf5 	.word	0x08000cf5
 8000b40:	08000d83 	.word	0x08000d83
 8000b44:	08000d83 	.word	0x08000d83
 8000b48:	08000d83 	.word	0x08000d83
 8000b4c:	08000d83 	.word	0x08000d83
 8000b50:	08000d83 	.word	0x08000d83
 8000b54:	08000d83 	.word	0x08000d83
 8000b58:	08000d83 	.word	0x08000d83
 8000b5c:	08000d83 	.word	0x08000d83
 8000b60:	08000d83 	.word	0x08000d83
 8000b64:	08000d83 	.word	0x08000d83
 8000b68:	08000d83 	.word	0x08000d83
 8000b6c:	08000d83 	.word	0x08000d83
 8000b70:	08000d83 	.word	0x08000d83
 8000b74:	08000ce7 	.word	0x08000ce7
 8000b78:	2b5b      	cmp	r3, #91	; 0x5b
 8000b7a:	f040 8102 	bne.w	8000d82 <jsmn_parse+0x332>
    case '{':
    case '[':
      count++;
 8000b7e:	6a3b      	ldr	r3, [r7, #32]
 8000b80:	3301      	adds	r3, #1
 8000b82:	623b      	str	r3, [r7, #32]
      if (tokens == NULL) {
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	f000 811f 	beq.w	8000dca <jsmn_parse+0x37a>
        break;
      }
      token = jsmn_alloc_token(parser, tokens, num_tokens);
 8000b8c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000b8e:	6839      	ldr	r1, [r7, #0]
 8000b90:	68f8      	ldr	r0, [r7, #12]
 8000b92:	f7ff fd48 	bl	8000626 <jsmn_alloc_token>
 8000b96:	61b8      	str	r0, [r7, #24]
      if (token == NULL) {
 8000b98:	69bb      	ldr	r3, [r7, #24]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <jsmn_parse+0x154>
        return JSMN_ERROR_NOMEM;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e14f      	b.n	8000e44 <jsmn_parse+0x3f4>
      }
      if (parser->toksuper != -1) {
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	689b      	ldr	r3, [r3, #8]
 8000ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bac:	d00a      	beq.n	8000bc4 <jsmn_parse+0x174>
        jsmntok_t *t = &tokens[parser->toksuper];
 8000bae:	68fb      	ldr	r3, [r7, #12]
 8000bb0:	689b      	ldr	r3, [r3, #8]
 8000bb2:	011b      	lsls	r3, r3, #4
 8000bb4:	683a      	ldr	r2, [r7, #0]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	617b      	str	r3, [r7, #20]
        /* In strict mode an object or array can't become a key */
        if (t->type == JSMN_OBJECT) {
          return JSMN_ERROR_INVAL;
        }
#endif
        t->size++;
 8000bba:	697b      	ldr	r3, [r7, #20]
 8000bbc:	68db      	ldr	r3, [r3, #12]
 8000bbe:	1c5a      	adds	r2, r3, #1
 8000bc0:	697b      	ldr	r3, [r7, #20]
 8000bc2:	60da      	str	r2, [r3, #12]
#ifdef JSMN_PARENT_LINKS
        token->parent = parser->toksuper;
#endif
      }
      token->type = (c == '{' ? JSMN_OBJECT : JSMN_ARRAY);
 8000bc4:	7ffb      	ldrb	r3, [r7, #31]
 8000bc6:	2b7b      	cmp	r3, #123	; 0x7b
 8000bc8:	d101      	bne.n	8000bce <jsmn_parse+0x17e>
 8000bca:	2201      	movs	r2, #1
 8000bcc:	e000      	b.n	8000bd0 <jsmn_parse+0x180>
 8000bce:	2202      	movs	r2, #2
 8000bd0:	69bb      	ldr	r3, [r7, #24]
 8000bd2:	701a      	strb	r2, [r3, #0]
      token->start = parser->pos;
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	69bb      	ldr	r3, [r7, #24]
 8000bdc:	605a      	str	r2, [r3, #4]
      parser->toksuper = parser->toknext - 1;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	685b      	ldr	r3, [r3, #4]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	461a      	mov	r2, r3
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	609a      	str	r2, [r3, #8]
      break;
 8000bea:	e0f7      	b.n	8000ddc <jsmn_parse+0x38c>
    case '}':
    case ']':
      if (tokens == NULL) {
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	f000 80ed 	beq.w	8000dce <jsmn_parse+0x37e>
        break;
      }
      type = (c == '}' ? JSMN_OBJECT : JSMN_ARRAY);
 8000bf4:	7ffb      	ldrb	r3, [r7, #31]
 8000bf6:	2b7d      	cmp	r3, #125	; 0x7d
 8000bf8:	d101      	bne.n	8000bfe <jsmn_parse+0x1ae>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	e000      	b.n	8000c00 <jsmn_parse+0x1b0>
 8000bfe:	2302      	movs	r3, #2
 8000c00:	77bb      	strb	r3, [r7, #30]
          break;
        }
        token = &tokens[token->parent];
      }
#else
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	3b01      	subs	r3, #1
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
 8000c0a:	e024      	b.n	8000c56 <jsmn_parse+0x206>
        token = &tokens[i];
 8000c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c0e:	011b      	lsls	r3, r3, #4
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c1e:	d017      	beq.n	8000c50 <jsmn_parse+0x200>
 8000c20:	69bb      	ldr	r3, [r7, #24]
 8000c22:	689b      	ldr	r3, [r3, #8]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d112      	bne.n	8000c50 <jsmn_parse+0x200>
          if (token->type != type) {
 8000c2a:	69bb      	ldr	r3, [r7, #24]
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	7fba      	ldrb	r2, [r7, #30]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	d002      	beq.n	8000c3a <jsmn_parse+0x1ea>
            return JSMN_ERROR_INVAL;
 8000c34:	f06f 0301 	mvn.w	r3, #1
 8000c38:	e104      	b.n	8000e44 <jsmn_parse+0x3f4>
          }
          parser->toksuper = -1;
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	f04f 32ff 	mov.w	r2, #4294967295
 8000c40:	609a      	str	r2, [r3, #8]
          token->end = parser->pos + 1;
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	3301      	adds	r3, #1
 8000c48:	461a      	mov	r2, r3
 8000c4a:	69bb      	ldr	r3, [r7, #24]
 8000c4c:	609a      	str	r2, [r3, #8]
          break;
 8000c4e:	e005      	b.n	8000c5c <jsmn_parse+0x20c>
      for (i = parser->toknext - 1; i >= 0; i--) {
 8000c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c52:	3b01      	subs	r3, #1
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	dad7      	bge.n	8000c0c <jsmn_parse+0x1bc>
        }
      }
      /* Error if unmatched closing bracket */
      if (i == -1) {
 8000c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c62:	d119      	bne.n	8000c98 <jsmn_parse+0x248>
        return JSMN_ERROR_INVAL;
 8000c64:	f06f 0301 	mvn.w	r3, #1
 8000c68:	e0ec      	b.n	8000e44 <jsmn_parse+0x3f4>
      }
      for (; i >= 0; i--) {
        token = &tokens[i];
 8000c6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6c:	011b      	lsls	r3, r3, #4
 8000c6e:	683a      	ldr	r2, [r7, #0]
 8000c70:	4413      	add	r3, r2
 8000c72:	61bb      	str	r3, [r7, #24]
        if (token->start != -1 && token->end == -1) {
 8000c74:	69bb      	ldr	r3, [r7, #24]
 8000c76:	685b      	ldr	r3, [r3, #4]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d009      	beq.n	8000c92 <jsmn_parse+0x242>
 8000c7e:	69bb      	ldr	r3, [r7, #24]
 8000c80:	689b      	ldr	r3, [r3, #8]
 8000c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c86:	d104      	bne.n	8000c92 <jsmn_parse+0x242>
          parser->toksuper = i;
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c8c:	609a      	str	r2, [r3, #8]
          break;
 8000c8e:	bf00      	nop
        }
      }
#endif
      break;
 8000c90:	e0a4      	b.n	8000ddc <jsmn_parse+0x38c>
      for (; i >= 0; i--) {
 8000c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c94:	3b01      	subs	r3, #1
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
 8000c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dae5      	bge.n	8000c6a <jsmn_parse+0x21a>
      break;
 8000c9e:	e09d      	b.n	8000ddc <jsmn_parse+0x38c>
    case '\"':
      r = jsmn_parse_string(parser, js, len, tokens, num_tokens);
 8000ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ca2:	9300      	str	r3, [sp, #0]
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	68b9      	ldr	r1, [r7, #8]
 8000caa:	68f8      	ldr	r0, [r7, #12]
 8000cac:	f7ff fdc2 	bl	8000834 <jsmn_parse_string>
 8000cb0:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8000cb2:	693b      	ldr	r3, [r7, #16]
 8000cb4:	2b00      	cmp	r3, #0
 8000cb6:	da01      	bge.n	8000cbc <jsmn_parse+0x26c>
        return r;
 8000cb8:	693b      	ldr	r3, [r7, #16]
 8000cba:	e0c3      	b.n	8000e44 <jsmn_parse+0x3f4>
      }
      count++;
 8000cbc:	6a3b      	ldr	r3, [r7, #32]
 8000cbe:	3301      	adds	r3, #1
 8000cc0:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cca:	f000 8082 	beq.w	8000dd2 <jsmn_parse+0x382>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d07e      	beq.n	8000dd2 <jsmn_parse+0x382>
        tokens[parser->toksuper].size++;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	689b      	ldr	r3, [r3, #8]
 8000cd8:	011b      	lsls	r3, r3, #4
 8000cda:	683a      	ldr	r2, [r7, #0]
 8000cdc:	4413      	add	r3, r2
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	3201      	adds	r2, #1
 8000ce2:	60da      	str	r2, [r3, #12]
      }
      break;
 8000ce4:	e075      	b.n	8000dd2 <jsmn_parse+0x382>
    case '\r':
    case '\n':
    case ' ':
      break;
    case ':':
      parser->toksuper = parser->toknext - 1;
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	461a      	mov	r2, r3
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	609a      	str	r2, [r3, #8]
      break;
 8000cf2:	e073      	b.n	8000ddc <jsmn_parse+0x38c>
    case ',':
      if (tokens != NULL && parser->toksuper != -1 &&
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d06d      	beq.n	8000dd6 <jsmn_parse+0x386>
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	689b      	ldr	r3, [r3, #8]
 8000cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d02:	d068      	beq.n	8000dd6 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	689b      	ldr	r3, [r3, #8]
 8000d08:	011b      	lsls	r3, r3, #4
 8000d0a:	683a      	ldr	r2, [r7, #0]
 8000d0c:	4413      	add	r3, r2
 8000d0e:	781b      	ldrb	r3, [r3, #0]
      if (tokens != NULL && parser->toksuper != -1 &&
 8000d10:	2b02      	cmp	r3, #2
 8000d12:	d060      	beq.n	8000dd6 <jsmn_parse+0x386>
          tokens[parser->toksuper].type != JSMN_OBJECT) {
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	689b      	ldr	r3, [r3, #8]
 8000d18:	011b      	lsls	r3, r3, #4
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	4413      	add	r3, r2
 8000d1e:	781b      	ldrb	r3, [r3, #0]
          tokens[parser->toksuper].type != JSMN_ARRAY &&
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d058      	beq.n	8000dd6 <jsmn_parse+0x386>
#ifdef JSMN_PARENT_LINKS
        parser->toksuper = tokens[parser->toksuper].parent;
#else
        for (i = parser->toknext - 1; i >= 0; i--) {
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	685b      	ldr	r3, [r3, #4]
 8000d28:	3b01      	subs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
 8000d2c:	e025      	b.n	8000d7a <jsmn_parse+0x32a>
          if (tokens[i].type == JSMN_ARRAY || tokens[i].type == JSMN_OBJECT) {
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	011b      	lsls	r3, r3, #4
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b02      	cmp	r3, #2
 8000d3a:	d006      	beq.n	8000d4a <jsmn_parse+0x2fa>
 8000d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3e:	011b      	lsls	r3, r3, #4
 8000d40:	683a      	ldr	r2, [r7, #0]
 8000d42:	4413      	add	r3, r2
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d114      	bne.n	8000d74 <jsmn_parse+0x324>
            if (tokens[i].start != -1 && tokens[i].end == -1) {
 8000d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d4c:	011b      	lsls	r3, r3, #4
 8000d4e:	683a      	ldr	r2, [r7, #0]
 8000d50:	4413      	add	r3, r2
 8000d52:	685b      	ldr	r3, [r3, #4]
 8000d54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d58:	d00c      	beq.n	8000d74 <jsmn_parse+0x324>
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	683a      	ldr	r2, [r7, #0]
 8000d60:	4413      	add	r3, r2
 8000d62:	689b      	ldr	r3, [r3, #8]
 8000d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d68:	d104      	bne.n	8000d74 <jsmn_parse+0x324>
              parser->toksuper = i;
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d6e:	609a      	str	r2, [r3, #8]
              break;
 8000d70:	bf00      	nop
            }
          }
        }
#endif
      }
      break;
 8000d72:	e030      	b.n	8000dd6 <jsmn_parse+0x386>
        for (i = parser->toknext - 1; i >= 0; i--) {
 8000d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d76:	3b01      	subs	r3, #1
 8000d78:	627b      	str	r3, [r7, #36]	; 0x24
 8000d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	dad6      	bge.n	8000d2e <jsmn_parse+0x2de>
      break;
 8000d80:	e029      	b.n	8000dd6 <jsmn_parse+0x386>
      }
#else
    /* In non-strict mode every unquoted value is a primitive */
    default:
#endif
      r = jsmn_parse_primitive(parser, js, len, tokens, num_tokens);
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	687a      	ldr	r2, [r7, #4]
 8000d8a:	68b9      	ldr	r1, [r7, #8]
 8000d8c:	68f8      	ldr	r0, [r7, #12]
 8000d8e:	f7ff fc8d 	bl	80006ac <jsmn_parse_primitive>
 8000d92:	6138      	str	r0, [r7, #16]
      if (r < 0) {
 8000d94:	693b      	ldr	r3, [r7, #16]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	da01      	bge.n	8000d9e <jsmn_parse+0x34e>
        return r;
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	e052      	b.n	8000e44 <jsmn_parse+0x3f4>
      }
      count++;
 8000d9e:	6a3b      	ldr	r3, [r7, #32]
 8000da0:	3301      	adds	r3, #1
 8000da2:	623b      	str	r3, [r7, #32]
      if (parser->toksuper != -1 && tokens != NULL) {
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000dac:	d015      	beq.n	8000dda <jsmn_parse+0x38a>
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d012      	beq.n	8000dda <jsmn_parse+0x38a>
        tokens[parser->toksuper].size++;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	011b      	lsls	r3, r3, #4
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	68da      	ldr	r2, [r3, #12]
 8000dc0:	3201      	adds	r2, #1
 8000dc2:	60da      	str	r2, [r3, #12]
      }
      break;
 8000dc4:	e009      	b.n	8000dda <jsmn_parse+0x38a>
      break;
 8000dc6:	bf00      	nop
 8000dc8:	e008      	b.n	8000ddc <jsmn_parse+0x38c>
        break;
 8000dca:	bf00      	nop
 8000dcc:	e006      	b.n	8000ddc <jsmn_parse+0x38c>
        break;
 8000dce:	bf00      	nop
 8000dd0:	e004      	b.n	8000ddc <jsmn_parse+0x38c>
      break;
 8000dd2:	bf00      	nop
 8000dd4:	e002      	b.n	8000ddc <jsmn_parse+0x38c>
      break;
 8000dd6:	bf00      	nop
 8000dd8:	e000      	b.n	8000ddc <jsmn_parse+0x38c>
      break;
 8000dda:	bf00      	nop
  for (; parser->pos < len && js[parser->pos] != '\0'; parser->pos++) {
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	1c5a      	adds	r2, r3, #1
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d907      	bls.n	8000e00 <jsmn_parse+0x3b0>
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	68ba      	ldr	r2, [r7, #8]
 8000df6:	4413      	add	r3, r2
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	f47f ae33 	bne.w	8000a66 <jsmn_parse+0x16>
      return JSMN_ERROR_INVAL;
#endif
    }
  }

  if (tokens != NULL) {
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d01d      	beq.n	8000e42 <jsmn_parse+0x3f2>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	3b01      	subs	r3, #1
 8000e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8000e0e:	e015      	b.n	8000e3c <jsmn_parse+0x3ec>
      /* Unmatched opened object or array */
      if (tokens[i].start != -1 && tokens[i].end == -1) {
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	011b      	lsls	r3, r3, #4
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	4413      	add	r3, r2
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e1e:	d00a      	beq.n	8000e36 <jsmn_parse+0x3e6>
 8000e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e22:	011b      	lsls	r3, r3, #4
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	4413      	add	r3, r2
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e2e:	d102      	bne.n	8000e36 <jsmn_parse+0x3e6>
        return JSMN_ERROR_PART;
 8000e30:	f06f 0302 	mvn.w	r3, #2
 8000e34:	e006      	b.n	8000e44 <jsmn_parse+0x3f4>
    for (i = parser->toknext - 1; i >= 0; i--) {
 8000e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	627b      	str	r3, [r7, #36]	; 0x24
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	dae6      	bge.n	8000e10 <jsmn_parse+0x3c0>
      }
    }
  }

  return count;
 8000e42:	6a3b      	ldr	r3, [r7, #32]
}
 8000e44:	4618      	mov	r0, r3
 8000e46:	3728      	adds	r7, #40	; 0x28
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <jsmn_init>:

/**
 * Creates a new parser based over a given buffer with an array of tokens
 * available.
 */
JSMN_API void jsmn_init(jsmn_parser *parser) {
 8000e4c:	b480      	push	{r7}
 8000e4e:	b083      	sub	sp, #12
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  parser->pos = 0;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
  parser->toknext = 0;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
  parser->toksuper = -1;
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f04f 32ff 	mov.w	r2, #4294967295
 8000e66:	609a      	str	r2, [r3, #8]
}
 8000e68:	bf00      	nop
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr

08000e74 <__jsmn_tok_str_cmp>:
 * @param[in] tok  : JSMN token for comparison
 * @param[in] str  : C-string for comparison
 * @retval 1 if token content is the same as string, 0 otherwise
 */
_Bool __jsmn_tok_str_cmp(const char *json, jsmntok_t *tok, const char *str)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b086      	sub	sp, #24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
	_Bool is_string = (tok->type == JSMN_STRING);
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b04      	cmp	r3, #4
 8000e86:	bf0c      	ite	eq
 8000e88:	2301      	moveq	r3, #1
 8000e8a:	2300      	movne	r3, #0
 8000e8c:	75fb      	strb	r3, [r7, #23]
	_Bool is_len_eq = ((int)strlen(str) == tok->end - tok->start);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f7ff f9be 	bl	8000210 <strlen>
 8000e94:	4603      	mov	r3, r0
 8000e96:	4619      	mov	r1, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	689a      	ldr	r2, [r3, #8]
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	1ad3      	subs	r3, r2, r3
 8000ea2:	4299      	cmp	r1, r3
 8000ea4:	bf0c      	ite	eq
 8000ea6:	2301      	moveq	r3, #1
 8000ea8:	2300      	movne	r3, #0
 8000eaa:	75bb      	strb	r3, [r7, #22]
	_Bool is_str_eq = (strncmp(json + tok->start, str, tok->end - tok->start) == 0);
 8000eac:	68bb      	ldr	r3, [r7, #8]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	1898      	adds	r0, r3, r2
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	689a      	ldr	r2, [r3, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	461a      	mov	r2, r3
 8000ec2:	6879      	ldr	r1, [r7, #4]
 8000ec4:	f002 ffdc 	bl	8003e80 <strncmp>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf0c      	ite	eq
 8000ece:	2301      	moveq	r3, #1
 8000ed0:	2300      	movne	r3, #0
 8000ed2:	757b      	strb	r3, [r7, #21]
	return is_string && is_len_eq && is_str_eq;
 8000ed4:	7dfb      	ldrb	r3, [r7, #23]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <__jsmn_tok_str_cmp+0x76>
 8000eda:	7dbb      	ldrb	r3, [r7, #22]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d004      	beq.n	8000eea <__jsmn_tok_str_cmp+0x76>
 8000ee0:	7d7b      	ldrb	r3, [r7, #21]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d001      	beq.n	8000eea <__jsmn_tok_str_cmp+0x76>
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	e000      	b.n	8000eec <__jsmn_tok_str_cmp+0x78>
 8000eea:	2300      	movs	r3, #0
 8000eec:	f003 0301 	and.w	r3, r3, #1
 8000ef0:	b2db      	uxtb	r3, r3
}
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	3718      	adds	r7, #24
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}

08000efa <__jsmn_tok_keyvalue_cmp>:
 * @param[in] str  : C-string for key comparison
 * @param[in] type : JSMN token type for value type comparison
 * @retval 1 if token is contains given key and next tokens have given JSMN type, <0 otherwise
 */
_Bool __jsmn_tok_keyvalue_cmp(const char *json, jsmntok_t *tok, const char *str, jsmntype_t type)
{
 8000efa:	b580      	push	{r7, lr}
 8000efc:	b086      	sub	sp, #24
 8000efe:	af00      	add	r7, sp, #0
 8000f00:	60f8      	str	r0, [r7, #12]
 8000f02:	60b9      	str	r1, [r7, #8]
 8000f04:	607a      	str	r2, [r7, #4]
 8000f06:	70fb      	strb	r3, [r7, #3]
	_Bool is_key_eq = __jsmn_tok_str_cmp(json, tok, str);
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	68f8      	ldr	r0, [r7, #12]
 8000f0e:	f7ff ffb1 	bl	8000e74 <__jsmn_tok_str_cmp>
 8000f12:	4603      	mov	r3, r0
 8000f14:	75fb      	strb	r3, [r7, #23]
	_Bool is_value_type_eq = ((tok+1)->type == type);
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	3310      	adds	r3, #16
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	78fa      	ldrb	r2, [r7, #3]
 8000f1e:	429a      	cmp	r2, r3
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	75bb      	strb	r3, [r7, #22]
	return is_key_eq && is_value_type_eq;
 8000f28:	7dfb      	ldrb	r3, [r7, #23]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d004      	beq.n	8000f38 <__jsmn_tok_keyvalue_cmp+0x3e>
 8000f2e:	7dbb      	ldrb	r3, [r7, #22]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <__jsmn_tok_keyvalue_cmp+0x3e>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e000      	b.n	8000f3a <__jsmn_tok_keyvalue_cmp+0x40>
 8000f38:	2300      	movs	r3, #0
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2db      	uxtb	r3, r3
}
 8000f40:	4618      	mov	r0, r3
 8000f42:	3718      	adds	r7, #24
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <SERIAL_API_LED_ReadMsg>:
 * @param[in/out] leds		: Serial API LED control structure array
 * @param[in] 	  leds_len	: Serial API LED control structure array's length
 * @retval Parsing status: 0 if successful, <0 otherwise
 */
int SERIAL_API_LED_ReadMsg(const char* msg, SERIAL_API_LED_TypeDef* leds, int leds_len)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b08e      	sub	sp, #56	; 0x38
 8000f4c:	af02      	add	r7, sp, #8
 8000f4e:	60f8      	str	r0, [r7, #12]
 8000f50:	60b9      	str	r1, [r7, #8]
 8000f52:	607a      	str	r2, [r7, #4]
	jsmn_init(&JSMN_PARSER);
 8000f54:	486d      	ldr	r0, [pc, #436]	; (800110c <SERIAL_API_LED_ReadMsg+0x1c4>)
 8000f56:	f7ff ff79 	bl	8000e4c <jsmn_init>
	int r = jsmn_parse(&JSMN_PARSER, msg, strlen(msg), JSMN_TOK, sizeof(JSMN_TOK) / sizeof(JSMN_TOK[0]));
 8000f5a:	68f8      	ldr	r0, [r7, #12]
 8000f5c:	f7ff f958 	bl	8000210 <strlen>
 8000f60:	4602      	mov	r2, r0
 8000f62:	2340      	movs	r3, #64	; 0x40
 8000f64:	9300      	str	r3, [sp, #0]
 8000f66:	4b6a      	ldr	r3, [pc, #424]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000f68:	68f9      	ldr	r1, [r7, #12]
 8000f6a:	4868      	ldr	r0, [pc, #416]	; (800110c <SERIAL_API_LED_ReadMsg+0x1c4>)
 8000f6c:	f7ff fd70 	bl	8000a50 <jsmn_parse>
 8000f70:	61b8      	str	r0, [r7, #24]

	if(r < 6)
 8000f72:	69bb      	ldr	r3, [r7, #24]
 8000f74:	2b05      	cmp	r3, #5
 8000f76:	dc05      	bgt.n	8000f84 <SERIAL_API_LED_ReadMsg+0x3c>
	{
		puts("Incorrect message syntax [1: Too few JSON tokens].\r\n");
 8000f78:	4866      	ldr	r0, [pc, #408]	; (8001114 <SERIAL_API_LED_ReadMsg+0x1cc>)
 8000f7a:	f002 ff61 	bl	8003e40 <puts>
		return -1;
 8000f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f82:	e0bf      	b.n	8001104 <SERIAL_API_LED_ReadMsg+0x1bc>
	}

	if(JSMN_TOK[0].type != JSMN_ARRAY)
 8000f84:	4b62      	ldr	r3, [pc, #392]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000f86:	781b      	ldrb	r3, [r3, #0]
 8000f88:	2b02      	cmp	r3, #2
 8000f8a:	d005      	beq.n	8000f98 <SERIAL_API_LED_ReadMsg+0x50>
	{
		puts("Incorrect message syntax [2: An array was expected].\r\n");
 8000f8c:	4862      	ldr	r0, [pc, #392]	; (8001118 <SERIAL_API_LED_ReadMsg+0x1d0>)
 8000f8e:	f002 ff57 	bl	8003e40 <puts>
		return -2;
 8000f92:	f06f 0301 	mvn.w	r3, #1
 8000f96:	e0b5      	b.n	8001104 <SERIAL_API_LED_ReadMsg+0x1bc>
	}
	const int len = JSMN_TOK[0].size;
 8000f98:	4b5d      	ldr	r3, [pc, #372]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000f9a:	68db      	ldr	r3, [r3, #12]
 8000f9c:	617b      	str	r3, [r7, #20]
	int i = 1;
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int n = 0; n < len; n++)
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	62bb      	str	r3, [r7, #40]	; 0x28
 8000fa6:	e0a7      	b.n	80010f8 <SERIAL_API_LED_ReadMsg+0x1b0>
	{
		// { "key" : "value" } pairs plus 'object' token overhead
		int size = JSMN_TOK[i].size * 2 + 1;
 8000fa8:	4a59      	ldr	r2, [pc, #356]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fac:	011b      	lsls	r3, r3, #4
 8000fae:	4413      	add	r3, r2
 8000fb0:	330c      	adds	r3, #12
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	613b      	str	r3, [r7, #16]
		if(JSMN_TOK[i].type != JSMN_OBJECT)
 8000fba:	4a55      	ldr	r2, [pc, #340]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	4413      	add	r3, r2
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b01      	cmp	r3, #1
 8000fc6:	d005      	beq.n	8000fd4 <SERIAL_API_LED_ReadMsg+0x8c>
		{
			puts("Incorrect message syntax [3: An array of objects was expected].\r\n");
 8000fc8:	4854      	ldr	r0, [pc, #336]	; (800111c <SERIAL_API_LED_ReadMsg+0x1d4>)
 8000fca:	f002 ff39 	bl	8003e40 <puts>
			return -3;
 8000fce:	f06f 0302 	mvn.w	r3, #2
 8000fd2:	e097      	b.n	8001104 <SERIAL_API_LED_ReadMsg+0x1bc>
		}
		else if(JSMN_TOK[i].size != LED_CTRL_OBJ_SIZE)
 8000fd4:	4a4e      	ldr	r2, [pc, #312]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8000fd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000fd8:	011b      	lsls	r3, r3, #4
 8000fda:	4413      	add	r3, r2
 8000fdc:	330c      	adds	r3, #12
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d005      	beq.n	8000ff0 <SERIAL_API_LED_ReadMsg+0xa8>
		{
			puts("Incorrect message syntax [4: Incorrect object size].\r\n");
 8000fe4:	484e      	ldr	r0, [pc, #312]	; (8001120 <SERIAL_API_LED_ReadMsg+0x1d8>)
 8000fe6:	f002 ff2b 	bl	8003e40 <puts>
			return -4;
 8000fea:	f06f 0303 	mvn.w	r3, #3
 8000fee:	e089      	b.n	8001104 <SERIAL_API_LED_ReadMsg+0x1bc>
		}

		int id_idx = -1, st_idx = -1;
 8000ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff4:	627b      	str	r3, [r7, #36]	; 0x24
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffa:	623b      	str	r3, [r7, #32]

		if(__jsmn_tok_keyvalue_cmp(msg, &JSMN_TOK[i+1], "id", JSMN_STRING)
 8000ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ffe:	3301      	adds	r3, #1
 8001000:	011b      	lsls	r3, r3, #4
 8001002:	4a43      	ldr	r2, [pc, #268]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8001004:	1899      	adds	r1, r3, r2
 8001006:	2304      	movs	r3, #4
 8001008:	4a46      	ldr	r2, [pc, #280]	; (8001124 <SERIAL_API_LED_ReadMsg+0x1dc>)
 800100a:	68f8      	ldr	r0, [r7, #12]
 800100c:	f7ff ff75 	bl	8000efa <__jsmn_tok_keyvalue_cmp>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d013      	beq.n	800103e <SERIAL_API_LED_ReadMsg+0xf6>
		  && __jsmn_tok_keyvalue_cmp(msg, &JSMN_TOK[i+3], "state", JSMN_PRIMITIVE))
 8001016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001018:	3303      	adds	r3, #3
 800101a:	011b      	lsls	r3, r3, #4
 800101c:	4a3c      	ldr	r2, [pc, #240]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 800101e:	1899      	adds	r1, r3, r2
 8001020:	2308      	movs	r3, #8
 8001022:	4a41      	ldr	r2, [pc, #260]	; (8001128 <SERIAL_API_LED_ReadMsg+0x1e0>)
 8001024:	68f8      	ldr	r0, [r7, #12]
 8001026:	f7ff ff68 	bl	8000efa <__jsmn_tok_keyvalue_cmp>
 800102a:	4603      	mov	r3, r0
 800102c:	2b00      	cmp	r3, #0
 800102e:	d006      	beq.n	800103e <SERIAL_API_LED_ReadMsg+0xf6>
		{
			id_idx = i+2;
 8001030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001032:	3302      	adds	r3, #2
 8001034:	627b      	str	r3, [r7, #36]	; 0x24
			st_idx = i+4;
 8001036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001038:	3304      	adds	r3, #4
 800103a:	623b      	str	r3, [r7, #32]
 800103c:	e026      	b.n	800108c <SERIAL_API_LED_ReadMsg+0x144>
		}
		else if(__jsmn_tok_keyvalue_cmp(msg, &JSMN_TOK[i+3], "id", JSMN_STRING)
 800103e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001040:	3303      	adds	r3, #3
 8001042:	011b      	lsls	r3, r3, #4
 8001044:	4a32      	ldr	r2, [pc, #200]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8001046:	1899      	adds	r1, r3, r2
 8001048:	2304      	movs	r3, #4
 800104a:	4a36      	ldr	r2, [pc, #216]	; (8001124 <SERIAL_API_LED_ReadMsg+0x1dc>)
 800104c:	68f8      	ldr	r0, [r7, #12]
 800104e:	f7ff ff54 	bl	8000efa <__jsmn_tok_keyvalue_cmp>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d013      	beq.n	8001080 <SERIAL_API_LED_ReadMsg+0x138>
		  && __jsmn_tok_keyvalue_cmp(msg, &JSMN_TOK[i+1], "state", JSMN_PRIMITIVE))
 8001058:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800105a:	3301      	adds	r3, #1
 800105c:	011b      	lsls	r3, r3, #4
 800105e:	4a2c      	ldr	r2, [pc, #176]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8001060:	1899      	adds	r1, r3, r2
 8001062:	2308      	movs	r3, #8
 8001064:	4a30      	ldr	r2, [pc, #192]	; (8001128 <SERIAL_API_LED_ReadMsg+0x1e0>)
 8001066:	68f8      	ldr	r0, [r7, #12]
 8001068:	f7ff ff47 	bl	8000efa <__jsmn_tok_keyvalue_cmp>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d006      	beq.n	8001080 <SERIAL_API_LED_ReadMsg+0x138>
		{
			id_idx = i+4;
 8001072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001074:	3304      	adds	r3, #4
 8001076:	627b      	str	r3, [r7, #36]	; 0x24
			st_idx = i+2;
 8001078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800107a:	3302      	adds	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
 800107e:	e005      	b.n	800108c <SERIAL_API_LED_ReadMsg+0x144>
		}
		else
		{
			puts("Incorrect message syntax [5: Can't find \"id\" or \"state\" keys].\r\n");
 8001080:	482a      	ldr	r0, [pc, #168]	; (800112c <SERIAL_API_LED_ReadMsg+0x1e4>)
 8001082:	f002 fedd 	bl	8003e40 <puts>
			return -5;
 8001086:	f06f 0304 	mvn.w	r3, #4
 800108a:	e03b      	b.n	8001104 <SERIAL_API_LED_ReadMsg+0x1bc>
		}
		for(int k = 0; k < leds_len; k++)
 800108c:	2300      	movs	r3, #0
 800108e:	61fb      	str	r3, [r7, #28]
 8001090:	e027      	b.n	80010e2 <SERIAL_API_LED_ReadMsg+0x19a>
		{
			if(__jsmn_tok_str_cmp(msg, &JSMN_TOK[id_idx], leds[k].Id))
 8001092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001094:	011b      	lsls	r3, r3, #4
 8001096:	4a1e      	ldr	r2, [pc, #120]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 8001098:	1899      	adds	r1, r3, r2
 800109a:	69fb      	ldr	r3, [r7, #28]
 800109c:	011b      	lsls	r3, r3, #4
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	4413      	add	r3, r2
 80010a2:	3304      	adds	r3, #4
 80010a4:	461a      	mov	r2, r3
 80010a6:	68f8      	ldr	r0, [r7, #12]
 80010a8:	f7ff fee4 	bl	8000e74 <__jsmn_tok_str_cmp>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d014      	beq.n	80010dc <SERIAL_API_LED_ReadMsg+0x194>
				leds[k].State = strtol(msg+JSMN_TOK[st_idx].start, NULL, 10);
 80010b2:	4a17      	ldr	r2, [pc, #92]	; (8001110 <SERIAL_API_LED_ReadMsg+0x1c8>)
 80010b4:	6a3b      	ldr	r3, [r7, #32]
 80010b6:	011b      	lsls	r3, r3, #4
 80010b8:	4413      	add	r3, r2
 80010ba:	3304      	adds	r3, #4
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	220a      	movs	r2, #10
 80010c6:	2100      	movs	r1, #0
 80010c8:	4618      	mov	r0, r3
 80010ca:	f002 ff71 	bl	8003fb0 <strtol>
 80010ce:	4601      	mov	r1, r0
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	011b      	lsls	r3, r3, #4
 80010d4:	68ba      	ldr	r2, [r7, #8]
 80010d6:	4413      	add	r3, r2
 80010d8:	b2ca      	uxtb	r2, r1
 80010da:	731a      	strb	r2, [r3, #12]
		for(int k = 0; k < leds_len; k++)
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	3301      	adds	r3, #1
 80010e0:	61fb      	str	r3, [r7, #28]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	429a      	cmp	r2, r3
 80010e8:	dbd3      	blt.n	8001092 <SERIAL_API_LED_ReadMsg+0x14a>
		}
		i = i + size;
 80010ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4413      	add	r3, r2
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	for(int n = 0; n < len; n++)
 80010f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80010f4:	3301      	adds	r3, #1
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80010f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010fa:	697b      	ldr	r3, [r7, #20]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	f6ff af53 	blt.w	8000fa8 <SERIAL_API_LED_ReadMsg+0x60>
	}

	return 0;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3730      	adds	r7, #48	; 0x30
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	200000ec 	.word	0x200000ec
 8001110:	200000f8 	.word	0x200000f8
 8001114:	08005438 	.word	0x08005438
 8001118:	08005470 	.word	0x08005470
 800111c:	080054a8 	.word	0x080054a8
 8001120:	080054ec 	.word	0x080054ec
 8001124:	08005524 	.word	0x08005524
 8001128:	08005528 	.word	0x08005528
 800112c:	08005530 	.word	0x08005530

08001130 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08c      	sub	sp, #48	; 0x30
 8001134:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001136:	f107 031c 	add.w	r3, r7, #28
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	605a      	str	r2, [r3, #4]
 8001140:	609a      	str	r2, [r3, #8]
 8001142:	60da      	str	r2, [r3, #12]
 8001144:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001146:	4b99      	ldr	r3, [pc, #612]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114a:	4a98      	ldr	r2, [pc, #608]	; (80013ac <MX_GPIO_Init+0x27c>)
 800114c:	f043 0304 	orr.w	r3, r3, #4
 8001150:	6313      	str	r3, [r2, #48]	; 0x30
 8001152:	4b96      	ldr	r3, [pc, #600]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001156:	f003 0304 	and.w	r3, r3, #4
 800115a:	61bb      	str	r3, [r7, #24]
 800115c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800115e:	4b93      	ldr	r3, [pc, #588]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a92      	ldr	r2, [pc, #584]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001164:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b90      	ldr	r3, [pc, #576]	; (80013ac <MX_GPIO_Init+0x27c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	4b8d      	ldr	r3, [pc, #564]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117a:	4a8c      	ldr	r2, [pc, #560]	; (80013ac <MX_GPIO_Init+0x27c>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	; 0x30
 8001182:	4b8a      	ldr	r3, [pc, #552]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	613b      	str	r3, [r7, #16]
 800118c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	4b87      	ldr	r3, [pc, #540]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a86      	ldr	r2, [pc, #536]	; (80013ac <MX_GPIO_Init+0x27c>)
 8001194:	f043 0302 	orr.w	r3, r3, #2
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b84      	ldr	r3, [pc, #528]	; (80013ac <MX_GPIO_Init+0x27c>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0302 	and.w	r3, r3, #2
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011a6:	4b81      	ldr	r3, [pc, #516]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011aa:	4a80      	ldr	r2, [pc, #512]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011ac:	f043 0308 	orr.w	r3, r3, #8
 80011b0:	6313      	str	r3, [r2, #48]	; 0x30
 80011b2:	4b7e      	ldr	r3, [pc, #504]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b6:	f003 0308 	and.w	r3, r3, #8
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80011be:	4b7b      	ldr	r3, [pc, #492]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011c2:	4a7a      	ldr	r2, [pc, #488]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80011c8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ca:	4b78      	ldr	r3, [pc, #480]	; (80013ac <MX_GPIO_Init+0x27c>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2108      	movs	r1, #8
 80011da:	4875      	ldr	r0, [pc, #468]	; (80013b0 <MX_GPIO_Init+0x280>)
 80011dc:	f000 fe9e 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011e0:	2200      	movs	r2, #0
 80011e2:	f244 0181 	movw	r1, #16513	; 0x4081
 80011e6:	4873      	ldr	r0, [pc, #460]	; (80013b4 <MX_GPIO_Init+0x284>)
 80011e8:	f000 fe98 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2140      	movs	r1, #64	; 0x40
 80011f0:	4871      	ldr	r0, [pc, #452]	; (80013b8 <MX_GPIO_Init+0x288>)
 80011f2:	f000 fe93 	bl	8001f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011fc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001200:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001206:	f107 031c 	add.w	r3, r7, #28
 800120a:	4619      	mov	r1, r3
 800120c:	486b      	ldr	r0, [pc, #428]	; (80013bc <MX_GPIO_Init+0x28c>)
 800120e:	f000 fcd9 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 8001212:	2301      	movs	r3, #1
 8001214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001216:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800121a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800121c:	2301      	movs	r3, #1
 800121e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 8001220:	f107 031c 	add.w	r3, r7, #28
 8001224:	4619      	mov	r1, r3
 8001226:	4865      	ldr	r0, [pc, #404]	; (80013bc <MX_GPIO_Init+0x28c>)
 8001228:	f000 fccc 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800122c:	2332      	movs	r3, #50	; 0x32
 800122e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001238:	2303      	movs	r3, #3
 800123a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800123c:	230b      	movs	r3, #11
 800123e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001240:	f107 031c 	add.w	r3, r7, #28
 8001244:	4619      	mov	r1, r3
 8001246:	485d      	ldr	r0, [pc, #372]	; (80013bc <MX_GPIO_Init+0x28c>)
 8001248:	f000 fcbc 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 800124c:	2308      	movs	r3, #8
 800124e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001250:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001256:	2302      	movs	r3, #2
 8001258:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 800125a:	f107 031c 	add.w	r3, r7, #28
 800125e:	4619      	mov	r1, r3
 8001260:	4856      	ldr	r0, [pc, #344]	; (80013bc <MX_GPIO_Init+0x28c>)
 8001262:	f000 fcaf 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001266:	2386      	movs	r3, #134	; 0x86
 8001268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001272:	2303      	movs	r3, #3
 8001274:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001276:	230b      	movs	r3, #11
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 031c 	add.w	r3, r7, #28
 800127e:	4619      	mov	r1, r3
 8001280:	484b      	ldr	r0, [pc, #300]	; (80013b0 <MX_GPIO_Init+0x280>)
 8001282:	f000 fc9f 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001286:	2308      	movs	r3, #8
 8001288:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128a:	2301      	movs	r3, #1
 800128c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001296:	f107 031c 	add.w	r3, r7, #28
 800129a:	4619      	mov	r1, r3
 800129c:	4844      	ldr	r0, [pc, #272]	; (80013b0 <MX_GPIO_Init+0x280>)
 800129e:	f000 fc91 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80012a2:	f244 0381 	movw	r3, #16513	; 0x4081
 80012a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b4:	f107 031c 	add.w	r3, r7, #28
 80012b8:	4619      	mov	r1, r3
 80012ba:	483e      	ldr	r0, [pc, #248]	; (80013b4 <MX_GPIO_Init+0x284>)
 80012bc:	f000 fc82 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ca:	2300      	movs	r3, #0
 80012cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ce:	2303      	movs	r3, #3
 80012d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012d2:	230b      	movs	r3, #11
 80012d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012d6:	f107 031c 	add.w	r3, r7, #28
 80012da:	4619      	mov	r1, r3
 80012dc:	4835      	ldr	r0, [pc, #212]	; (80013b4 <MX_GPIO_Init+0x284>)
 80012de:	f000 fc71 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012e2:	2340      	movs	r3, #64	; 0x40
 80012e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e6:	2301      	movs	r3, #1
 80012e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ea:	2300      	movs	r3, #0
 80012ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ee:	2300      	movs	r3, #0
 80012f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012f2:	f107 031c 	add.w	r3, r7, #28
 80012f6:	4619      	mov	r1, r3
 80012f8:	482f      	ldr	r0, [pc, #188]	; (80013b8 <MX_GPIO_Init+0x288>)
 80012fa:	f000 fc63 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012fe:	2380      	movs	r3, #128	; 0x80
 8001300:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001302:	2300      	movs	r3, #0
 8001304:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800130a:	f107 031c 	add.w	r3, r7, #28
 800130e:	4619      	mov	r1, r3
 8001310:	4829      	ldr	r0, [pc, #164]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001312:	f000 fc57 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001316:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800131a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131c:	2302      	movs	r3, #2
 800131e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001320:	2300      	movs	r3, #0
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001324:	2303      	movs	r3, #3
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001328:	230a      	movs	r3, #10
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800132c:	f107 031c 	add.w	r3, r7, #28
 8001330:	4619      	mov	r1, r3
 8001332:	481f      	ldr	r0, [pc, #124]	; (80013b0 <MX_GPIO_Init+0x280>)
 8001334:	f000 fc46 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001338:	f44f 7300 	mov.w	r3, #512	; 0x200
 800133c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133e:	2300      	movs	r3, #0
 8001340:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001342:	2300      	movs	r3, #0
 8001344:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001346:	f107 031c 	add.w	r3, r7, #28
 800134a:	4619      	mov	r1, r3
 800134c:	4818      	ldr	r0, [pc, #96]	; (80013b0 <MX_GPIO_Init+0x280>)
 800134e:	f000 fc39 	bl	8001bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001352:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001364:	230b      	movs	r3, #11
 8001366:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001368:	f107 031c 	add.w	r3, r7, #28
 800136c:	4619      	mov	r1, r3
 800136e:	4812      	ldr	r0, [pc, #72]	; (80013b8 <MX_GPIO_Init+0x288>)
 8001370:	f000 fc28 	bl	8001bc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2006      	movs	r0, #6
 800137a:	f000 fbec 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800137e:	2006      	movs	r0, #6
 8001380:	f000 fc05 	bl	8001b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8001384:	2200      	movs	r2, #0
 8001386:	2100      	movs	r1, #0
 8001388:	2009      	movs	r0, #9
 800138a:	f000 fbe4 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800138e:	2009      	movs	r0, #9
 8001390:	f000 fbfd 	bl	8001b8e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001394:	2200      	movs	r2, #0
 8001396:	2100      	movs	r1, #0
 8001398:	2028      	movs	r0, #40	; 0x28
 800139a:	f000 fbdc 	bl	8001b56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800139e:	2028      	movs	r0, #40	; 0x28
 80013a0:	f000 fbf5 	bl	8001b8e <HAL_NVIC_EnableIRQ>

}
 80013a4:	bf00      	nop
 80013a6:	3730      	adds	r7, #48	; 0x30
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	40023800 	.word	0x40023800
 80013b0:	40020000 	.word	0x40020000
 80013b4:	40020400 	.word	0x40020400
 80013b8:	40021800 	.word	0x40021800
 80013bc:	40020800 	.word	0x40020800

080013c0 <_write>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, 0xFFFF);
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	b29a      	uxth	r2, r3
 80013d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013d4:	68b9      	ldr	r1, [r7, #8]
 80013d6:	4804      	ldr	r0, [pc, #16]	; (80013e8 <_write+0x28>)
 80013d8:	f001 ff46 	bl	8003268 <HAL_UART_Transmit>
  return len;
 80013dc:	687b      	ldr	r3, [r7, #4]
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3710      	adds	r7, #16
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}
 80013e6:	bf00      	nop
 80013e8:	2000057c 	.word	0x2000057c

080013ec <_read>:

int _read(int file, char *ptr, int len)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	60f8      	str	r0, [r7, #12]
 80013f4:	60b9      	str	r1, [r7, #8]
 80013f6:	607a      	str	r2, [r7, #4]
  int msg_len = 0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	617b      	str	r3, [r7, #20]
  while(msg_len <= len)
 80013fc:	e010      	b.n	8001420 <_read+0x34>
  {
    HAL_UART_Receive(&huart3, (uint8_t*)ptr, 1, 0xFFFF);
 80013fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001402:	2201      	movs	r2, #1
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	480c      	ldr	r0, [pc, #48]	; (8001438 <_read+0x4c>)
 8001408:	f001 ffb1 	bl	800336e <HAL_UART_Receive>
    msg_len++;
 800140c:	697b      	ldr	r3, [r7, #20]
 800140e:	3301      	adds	r3, #1
 8001410:	617b      	str	r3, [r7, #20]
    if(*ptr == '\r')
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	2b0d      	cmp	r3, #13
 8001418:	d007      	beq.n	800142a <_read+0x3e>
      break;
    ptr++;
 800141a:	68bb      	ldr	r3, [r7, #8]
 800141c:	3301      	adds	r3, #1
 800141e:	60bb      	str	r3, [r7, #8]
  while(msg_len <= len)
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	ddea      	ble.n	80013fe <_read+0x12>
 8001428:	e000      	b.n	800142c <_read+0x40>
      break;
 800142a:	bf00      	nop
  }
  return msg_len;
 800142c:	697b      	ldr	r3, [r7, #20]
}
 800142e:	4618      	mov	r0, r3
 8001430:	3718      	adds	r7, #24
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000057c 	.word	0x2000057c

0800143c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001442:	f000 fa50 	bl	80018e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001446:	f000 f841 	bl	80014cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800144a:	f7ff fe71 	bl	8001130 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800144e:	f000 f991 	bl	8001774 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    memset(msg, '\0', SERIAL_API_LED_MSG_LEN);
 8001452:	227c      	movs	r2, #124	; 0x7c
 8001454:	2100      	movs	r1, #0
 8001456:	4819      	ldr	r0, [pc, #100]	; (80014bc <main+0x80>)
 8001458:	f002 fc7c 	bl	8003d54 <memset>
    scanf("%s", msg);
 800145c:	4917      	ldr	r1, [pc, #92]	; (80014bc <main+0x80>)
 800145e:	4818      	ldr	r0, [pc, #96]	; (80014c0 <main+0x84>)
 8001460:	f002 fcf6 	bl	8003e50 <iscanf>

    int hleds_len = sizeof(hleds) / sizeof(hleds[0]);
 8001464:	2304      	movs	r3, #4
 8001466:	60bb      	str	r3, [r7, #8]
    int status = SERIAL_API_LED_ReadMsg(msg, hleds, hleds_len);
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	4916      	ldr	r1, [pc, #88]	; (80014c4 <main+0x88>)
 800146c:	4813      	ldr	r0, [pc, #76]	; (80014bc <main+0x80>)
 800146e:	f7ff fd6b 	bl	8000f48 <SERIAL_API_LED_ReadMsg>
 8001472:	6078      	str	r0, [r7, #4]

    if(status == 0)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d118      	bne.n	80014ac <main+0x70>
    {
      for(int i = 0; i < hleds_len; i++)
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	e011      	b.n	80014a4 <main+0x68>
        LED_GPIO_Write(hleds[i].Led, hleds[i].State);
 8001480:	4a10      	ldr	r2, [pc, #64]	; (80014c4 <main+0x88>)
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	011b      	lsls	r3, r3, #4
 8001486:	4413      	add	r3, r2
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	490e      	ldr	r1, [pc, #56]	; (80014c4 <main+0x88>)
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	011b      	lsls	r3, r3, #4
 8001490:	440b      	add	r3, r1
 8001492:	330c      	adds	r3, #12
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff f8a5 	bl	80005e8 <LED_GPIO_Write>
      for(int i = 0; i < hleds_len; i++)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3301      	adds	r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fa      	ldr	r2, [r7, #12]
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	dbe9      	blt.n	8001480 <main+0x44>
    }

    puts(msg);
 80014ac:	4803      	ldr	r0, [pc, #12]	; (80014bc <main+0x80>)
 80014ae:	f002 fcc7 	bl	8003e40 <puts>
    puts("\r\n");
 80014b2:	4805      	ldr	r0, [pc, #20]	; (80014c8 <main+0x8c>)
 80014b4:	f002 fcc4 	bl	8003e40 <puts>
  {
 80014b8:	e7cb      	b.n	8001452 <main+0x16>
 80014ba:	bf00      	nop
 80014bc:	200004f8 	.word	0x200004f8
 80014c0:	08005574 	.word	0x08005574
 80014c4:	20000020 	.word	0x20000020
 80014c8:	08005578 	.word	0x08005578

080014cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b094      	sub	sp, #80	; 0x50
 80014d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014d2:	f107 0320 	add.w	r3, r7, #32
 80014d6:	2230      	movs	r2, #48	; 0x30
 80014d8:	2100      	movs	r1, #0
 80014da:	4618      	mov	r0, r3
 80014dc:	f002 fc3a 	bl	8003d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80014f0:	f000 fd52 	bl	8001f98 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80014f4:	4b2a      	ldr	r3, [pc, #168]	; (80015a0 <SystemClock_Config+0xd4>)
 80014f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f8:	4a29      	ldr	r2, [pc, #164]	; (80015a0 <SystemClock_Config+0xd4>)
 80014fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014fe:	6413      	str	r3, [r2, #64]	; 0x40
 8001500:	4b27      	ldr	r3, [pc, #156]	; (80015a0 <SystemClock_Config+0xd4>)
 8001502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800150c:	4b25      	ldr	r3, [pc, #148]	; (80015a4 <SystemClock_Config+0xd8>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a24      	ldr	r2, [pc, #144]	; (80015a4 <SystemClock_Config+0xd8>)
 8001512:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	4b22      	ldr	r3, [pc, #136]	; (80015a4 <SystemClock_Config+0xd8>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001520:	607b      	str	r3, [r7, #4]
 8001522:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001524:	2301      	movs	r3, #1
 8001526:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001528:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800152c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800152e:	2302      	movs	r3, #2
 8001530:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001532:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001536:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001538:	2304      	movs	r3, #4
 800153a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 800153c:	23d8      	movs	r3, #216	; 0xd8
 800153e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001540:	2302      	movs	r3, #2
 8001542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001544:	2303      	movs	r3, #3
 8001546:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd83 	bl	8002058 <HAL_RCC_OscConfig>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001558:	f000 f826 	bl	80015a8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800155c:	f000 fd2c 	bl	8001fb8 <HAL_PWREx_EnableOverDrive>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001566:	f000 f81f 	bl	80015a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800156a:	230f      	movs	r3, #15
 800156c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800156e:	2302      	movs	r3, #2
 8001570:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001576:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800157a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 800157c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001580:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001582:	f107 030c 	add.w	r3, r7, #12
 8001586:	2107      	movs	r1, #7
 8001588:	4618      	mov	r0, r3
 800158a:	f001 f809 	bl	80025a0 <HAL_RCC_ClockConfig>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8001594:	f000 f808 	bl	80015a8 <Error_Handler>
  }
}
 8001598:	bf00      	nop
 800159a:	3750      	adds	r7, #80	; 0x50
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40007000 	.word	0x40007000

080015a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a8:	b480      	push	{r7}
 80015aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015ac:	b672      	cpsid	i
}
 80015ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015b0:	e7fe      	b.n	80015b0 <Error_Handler+0x8>
	...

080015b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015ba:	4b0f      	ldr	r3, [pc, #60]	; (80015f8 <HAL_MspInit+0x44>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a0e      	ldr	r2, [pc, #56]	; (80015f8 <HAL_MspInit+0x44>)
 80015c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b0c      	ldr	r3, [pc, #48]	; (80015f8 <HAL_MspInit+0x44>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d2:	4b09      	ldr	r3, [pc, #36]	; (80015f8 <HAL_MspInit+0x44>)
 80015d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015d6:	4a08      	ldr	r2, [pc, #32]	; (80015f8 <HAL_MspInit+0x44>)
 80015d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015dc:	6453      	str	r3, [r2, #68]	; 0x44
 80015de:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <HAL_MspInit+0x44>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	370c      	adds	r7, #12
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	40023800 	.word	0x40023800

080015fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001600:	e7fe      	b.n	8001600 <NMI_Handler+0x4>

08001602 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001606:	e7fe      	b.n	8001606 <HardFault_Handler+0x4>

08001608 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800160c:	e7fe      	b.n	800160c <MemManage_Handler+0x4>

0800160e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800160e:	b480      	push	{r7}
 8001610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001612:	e7fe      	b.n	8001612 <BusFault_Handler+0x4>

08001614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001618:	e7fe      	b.n	8001618 <UsageFault_Handler+0x4>

0800161a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800161a:	b480      	push	{r7}
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800161e:	bf00      	nop
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001648:	f000 f98a 	bl	8001960 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}

08001650 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8001654:	2001      	movs	r0, #1
 8001656:	f000 fc7b 	bl	8001f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}

0800165e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 8001662:	2008      	movs	r0, #8
 8001664:	f000 fc74 	bl	8001f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001668:	bf00      	nop
 800166a:	bd80      	pop	{r7, pc}

0800166c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001670:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001674:	f000 fc6c 	bl	8001f50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <_close>:
	}
	return len;
}

int _close(int file)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
	return -1;
 8001684:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001688:	4618      	mov	r0, r3
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a4:	605a      	str	r2, [r3, #4]
	return 0;
 80016a6:	2300      	movs	r3, #0
}
 80016a8:	4618      	mov	r0, r3
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <_isatty>:

int _isatty(int file)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
	return 1;
 80016bc:	2301      	movs	r3, #1
}
 80016be:	4618      	mov	r0, r3
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b085      	sub	sp, #20
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	60f8      	str	r0, [r7, #12]
 80016d2:	60b9      	str	r1, [r7, #8]
 80016d4:	607a      	str	r2, [r7, #4]
	return 0;
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	3714      	adds	r7, #20
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b086      	sub	sp, #24
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016ec:	4a14      	ldr	r2, [pc, #80]	; (8001740 <_sbrk+0x5c>)
 80016ee:	4b15      	ldr	r3, [pc, #84]	; (8001744 <_sbrk+0x60>)
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <_sbrk+0x64>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d102      	bne.n	8001706 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001700:	4b11      	ldr	r3, [pc, #68]	; (8001748 <_sbrk+0x64>)
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <_sbrk+0x68>)
 8001704:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001706:	4b10      	ldr	r3, [pc, #64]	; (8001748 <_sbrk+0x64>)
 8001708:	681a      	ldr	r2, [r3, #0]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	429a      	cmp	r2, r3
 8001712:	d207      	bcs.n	8001724 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001714:	f002 faf4 	bl	8003d00 <__errno>
 8001718:	4603      	mov	r3, r0
 800171a:	220c      	movs	r2, #12
 800171c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800171e:	f04f 33ff 	mov.w	r3, #4294967295
 8001722:	e009      	b.n	8001738 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001724:	4b08      	ldr	r3, [pc, #32]	; (8001748 <_sbrk+0x64>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800172a:	4b07      	ldr	r3, [pc, #28]	; (8001748 <_sbrk+0x64>)
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4413      	add	r3, r2
 8001732:	4a05      	ldr	r2, [pc, #20]	; (8001748 <_sbrk+0x64>)
 8001734:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001736:	68fb      	ldr	r3, [r7, #12]
}
 8001738:	4618      	mov	r0, r3
 800173a:	3718      	adds	r7, #24
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}
 8001740:	20050000 	.word	0x20050000
 8001744:	00000400 	.word	0x00000400
 8001748:	20000578 	.word	0x20000578
 800174c:	20000618 	.word	0x20000618

08001750 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <SystemInit+0x20>)
 8001756:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800175a:	4a05      	ldr	r2, [pc, #20]	; (8001770 <SystemInit+0x20>)
 800175c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001760:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	e000ed00 	.word	0xe000ed00

08001774 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001778:	4b14      	ldr	r3, [pc, #80]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800177a:	4a15      	ldr	r2, [pc, #84]	; (80017d0 <MX_USART3_UART_Init+0x5c>)
 800177c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800177e:	4b13      	ldr	r3, [pc, #76]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001780:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001784:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001786:	4b11      	ldr	r3, [pc, #68]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800178c:	4b0f      	ldr	r3, [pc, #60]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800178e:	2200      	movs	r2, #0
 8001790:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001792:	4b0e      	ldr	r3, [pc, #56]	; (80017cc <MX_USART3_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001798:	4b0c      	ldr	r3, [pc, #48]	; (80017cc <MX_USART3_UART_Init+0x58>)
 800179a:	220c      	movs	r2, #12
 800179c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179e:	4b0b      	ldr	r3, [pc, #44]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a4:	4b09      	ldr	r3, [pc, #36]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017aa:	4b08      	ldr	r3, [pc, #32]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017b0:	4b06      	ldr	r3, [pc, #24]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80017b6:	4805      	ldr	r0, [pc, #20]	; (80017cc <MX_USART3_UART_Init+0x58>)
 80017b8:	f001 fd08 	bl	80031cc <HAL_UART_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80017c2:	f7ff fef1 	bl	80015a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017c6:	bf00      	nop
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	2000057c 	.word	0x2000057c
 80017d0:	40004800 	.word	0x40004800

080017d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b0aa      	sub	sp, #168	; 0xa8
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017dc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017ec:	f107 0310 	add.w	r3, r7, #16
 80017f0:	2284      	movs	r2, #132	; 0x84
 80017f2:	2100      	movs	r1, #0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 faad 	bl	8003d54 <memset>
  if(uartHandle->Instance==USART3)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_UART_MspInit+0xb4>)
 8001800:	4293      	cmp	r3, r2
 8001802:	d13c      	bne.n	800187e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001804:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001808:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 800180a:	2310      	movs	r3, #16
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4618      	mov	r0, r3
 8001814:	f001 f8ea 	bl	80029ec <HAL_RCCEx_PeriphCLKConfig>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800181e:	f7ff fec3 	bl	80015a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <HAL_UART_MspInit+0xb8>)
 8001824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001826:	4a19      	ldr	r2, [pc, #100]	; (800188c <HAL_UART_MspInit+0xb8>)
 8001828:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800182c:	6413      	str	r3, [r2, #64]	; 0x40
 800182e:	4b17      	ldr	r3, [pc, #92]	; (800188c <HAL_UART_MspInit+0xb8>)
 8001830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001832:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_UART_MspInit+0xb8>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	4a13      	ldr	r2, [pc, #76]	; (800188c <HAL_UART_MspInit+0xb8>)
 8001840:	f043 0308 	orr.w	r3, r3, #8
 8001844:	6313      	str	r3, [r2, #48]	; 0x30
 8001846:	4b11      	ldr	r3, [pc, #68]	; (800188c <HAL_UART_MspInit+0xb8>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184a:	f003 0308 	and.w	r3, r3, #8
 800184e:	60bb      	str	r3, [r7, #8]
 8001850:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001852:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001856:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185a:	2302      	movs	r3, #2
 800185c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001860:	2300      	movs	r3, #0
 8001862:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800186c:	2307      	movs	r3, #7
 800186e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001872:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001876:	4619      	mov	r1, r3
 8001878:	4805      	ldr	r0, [pc, #20]	; (8001890 <HAL_UART_MspInit+0xbc>)
 800187a:	f000 f9a3 	bl	8001bc4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800187e:	bf00      	nop
 8001880:	37a8      	adds	r7, #168	; 0xa8
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40004800 	.word	0x40004800
 800188c:	40023800 	.word	0x40023800
 8001890:	40020c00 	.word	0x40020c00

08001894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001894:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018cc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001898:	480d      	ldr	r0, [pc, #52]	; (80018d0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800189a:	490e      	ldr	r1, [pc, #56]	; (80018d4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800189c:	4a0e      	ldr	r2, [pc, #56]	; (80018d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800189e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018a0:	e002      	b.n	80018a8 <LoopCopyDataInit>

080018a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018a6:	3304      	adds	r3, #4

080018a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018ac:	d3f9      	bcc.n	80018a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ae:	4a0b      	ldr	r2, [pc, #44]	; (80018dc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80018b0:	4c0b      	ldr	r4, [pc, #44]	; (80018e0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80018b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018b4:	e001      	b.n	80018ba <LoopFillZerobss>

080018b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018b8:	3204      	adds	r2, #4

080018ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018bc:	d3fb      	bcc.n	80018b6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018be:	f7ff ff47 	bl	8001750 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018c2:	f002 fa23 	bl	8003d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018c6:	f7ff fdb9 	bl	800143c <main>
  bx  lr    
 80018ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80018cc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80018d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018d4:	200000d0 	.word	0x200000d0
  ldr r2, =_sidata
 80018d8:	08005738 	.word	0x08005738
  ldr r2, =_sbss
 80018dc:	200000d0 	.word	0x200000d0
  ldr r4, =_ebss
 80018e0:	20000618 	.word	0x20000618

080018e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018e4:	e7fe      	b.n	80018e4 <ADC_IRQHandler>

080018e6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018e6:	b580      	push	{r7, lr}
 80018e8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ea:	2003      	movs	r0, #3
 80018ec:	f000 f928 	bl	8001b40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018f0:	2000      	movs	r0, #0
 80018f2:	f000 f805 	bl	8001900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f6:	f7ff fe5d 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	bd80      	pop	{r7, pc}

08001900 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <HAL_InitTick+0x54>)
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x58>)
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	4619      	mov	r1, r3
 8001912:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001916:	fbb3 f3f1 	udiv	r3, r3, r1
 800191a:	fbb2 f3f3 	udiv	r3, r2, r3
 800191e:	4618      	mov	r0, r3
 8001920:	f000 f943 	bl	8001baa <HAL_SYSTICK_Config>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e00e      	b.n	800194c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2b0f      	cmp	r3, #15
 8001932:	d80a      	bhi.n	800194a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001934:	2200      	movs	r2, #0
 8001936:	6879      	ldr	r1, [r7, #4]
 8001938:	f04f 30ff 	mov.w	r0, #4294967295
 800193c:	f000 f90b 	bl	8001b56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001940:	4a06      	ldr	r2, [pc, #24]	; (800195c <HAL_InitTick+0x5c>)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001946:	2300      	movs	r3, #0
 8001948:	e000      	b.n	800194c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194a:	2301      	movs	r3, #1
}
 800194c:	4618      	mov	r0, r3
 800194e:	3708      	adds	r7, #8
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	20000060 	.word	0x20000060
 8001958:	20000068 	.word	0x20000068
 800195c:	20000064 	.word	0x20000064

08001960 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001964:	4b06      	ldr	r3, [pc, #24]	; (8001980 <HAL_IncTick+0x20>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	461a      	mov	r2, r3
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x24>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4413      	add	r3, r2
 8001970:	4a04      	ldr	r2, [pc, #16]	; (8001984 <HAL_IncTick+0x24>)
 8001972:	6013      	str	r3, [r2, #0]
}
 8001974:	bf00      	nop
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	20000068 	.word	0x20000068
 8001984:	20000604 	.word	0x20000604

08001988 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return uwTick;
 800198c:	4b03      	ldr	r3, [pc, #12]	; (800199c <HAL_GetTick+0x14>)
 800198e:	681b      	ldr	r3, [r3, #0]
}
 8001990:	4618      	mov	r0, r3
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	20000604 	.word	0x20000604

080019a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019a0:	b480      	push	{r7}
 80019a2:	b085      	sub	sp, #20
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	f003 0307 	and.w	r3, r3, #7
 80019ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <__NVIC_SetPriorityGrouping+0x40>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019b6:	68ba      	ldr	r2, [r7, #8]
 80019b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019bc:	4013      	ands	r3, r2
 80019be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019c8:	4b06      	ldr	r3, [pc, #24]	; (80019e4 <__NVIC_SetPriorityGrouping+0x44>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019ce:	4a04      	ldr	r2, [pc, #16]	; (80019e0 <__NVIC_SetPriorityGrouping+0x40>)
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	60d3      	str	r3, [r2, #12]
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	e000ed00 	.word	0xe000ed00
 80019e4:	05fa0000 	.word	0x05fa0000

080019e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019ec:	4b04      	ldr	r3, [pc, #16]	; (8001a00 <__NVIC_GetPriorityGrouping+0x18>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	0a1b      	lsrs	r3, r3, #8
 80019f2:	f003 0307 	and.w	r3, r3, #7
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000ed00 	.word	0xe000ed00

08001a04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	db0b      	blt.n	8001a2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	f003 021f 	and.w	r2, r3, #31
 8001a1c:	4907      	ldr	r1, [pc, #28]	; (8001a3c <__NVIC_EnableIRQ+0x38>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	095b      	lsrs	r3, r3, #5
 8001a24:	2001      	movs	r0, #1
 8001a26:	fa00 f202 	lsl.w	r2, r0, r2
 8001a2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a2e:	bf00      	nop
 8001a30:	370c      	adds	r7, #12
 8001a32:	46bd      	mov	sp, r7
 8001a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a38:	4770      	bx	lr
 8001a3a:	bf00      	nop
 8001a3c:	e000e100 	.word	0xe000e100

08001a40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	4603      	mov	r3, r0
 8001a48:	6039      	str	r1, [r7, #0]
 8001a4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	db0a      	blt.n	8001a6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2da      	uxtb	r2, r3
 8001a58:	490c      	ldr	r1, [pc, #48]	; (8001a8c <__NVIC_SetPriority+0x4c>)
 8001a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5e:	0112      	lsls	r2, r2, #4
 8001a60:	b2d2      	uxtb	r2, r2
 8001a62:	440b      	add	r3, r1
 8001a64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a68:	e00a      	b.n	8001a80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	b2da      	uxtb	r2, r3
 8001a6e:	4908      	ldr	r1, [pc, #32]	; (8001a90 <__NVIC_SetPriority+0x50>)
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	f003 030f 	and.w	r3, r3, #15
 8001a76:	3b04      	subs	r3, #4
 8001a78:	0112      	lsls	r2, r2, #4
 8001a7a:	b2d2      	uxtb	r2, r2
 8001a7c:	440b      	add	r3, r1
 8001a7e:	761a      	strb	r2, [r3, #24]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000e100 	.word	0xe000e100
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b089      	sub	sp, #36	; 0x24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60f8      	str	r0, [r7, #12]
 8001a9c:	60b9      	str	r1, [r7, #8]
 8001a9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f1c3 0307 	rsb	r3, r3, #7
 8001aae:	2b04      	cmp	r3, #4
 8001ab0:	bf28      	it	cs
 8001ab2:	2304      	movcs	r3, #4
 8001ab4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	3304      	adds	r3, #4
 8001aba:	2b06      	cmp	r3, #6
 8001abc:	d902      	bls.n	8001ac4 <NVIC_EncodePriority+0x30>
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	3b03      	subs	r3, #3
 8001ac2:	e000      	b.n	8001ac6 <NVIC_EncodePriority+0x32>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad2:	43da      	mvns	r2, r3
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	401a      	ands	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001adc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae6:	43d9      	mvns	r1, r3
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	4313      	orrs	r3, r2
         );
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3724      	adds	r7, #36	; 0x24
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
	...

08001afc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	3b01      	subs	r3, #1
 8001b08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b0c:	d301      	bcc.n	8001b12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e00f      	b.n	8001b32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b12:	4a0a      	ldr	r2, [pc, #40]	; (8001b3c <SysTick_Config+0x40>)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b1a:	210f      	movs	r1, #15
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	f7ff ff8e 	bl	8001a40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b24:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <SysTick_Config+0x40>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b2a:	4b04      	ldr	r3, [pc, #16]	; (8001b3c <SysTick_Config+0x40>)
 8001b2c:	2207      	movs	r2, #7
 8001b2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b30:	2300      	movs	r3, #0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	e000e010 	.word	0xe000e010

08001b40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	b082      	sub	sp, #8
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	f7ff ff29 	bl	80019a0 <__NVIC_SetPriorityGrouping>
}
 8001b4e:	bf00      	nop
 8001b50:	3708      	adds	r7, #8
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b086      	sub	sp, #24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	60b9      	str	r1, [r7, #8]
 8001b60:	607a      	str	r2, [r7, #4]
 8001b62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b64:	2300      	movs	r3, #0
 8001b66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b68:	f7ff ff3e 	bl	80019e8 <__NVIC_GetPriorityGrouping>
 8001b6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	68b9      	ldr	r1, [r7, #8]
 8001b72:	6978      	ldr	r0, [r7, #20]
 8001b74:	f7ff ff8e 	bl	8001a94 <NVIC_EncodePriority>
 8001b78:	4602      	mov	r2, r0
 8001b7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7e:	4611      	mov	r1, r2
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff ff5d 	bl	8001a40 <__NVIC_SetPriority>
}
 8001b86:	bf00      	nop
 8001b88:	3718      	adds	r7, #24
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b082      	sub	sp, #8
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	4603      	mov	r3, r0
 8001b96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	f7ff ff31 	bl	8001a04 <__NVIC_EnableIRQ>
}
 8001ba2:	bf00      	nop
 8001ba4:	3708      	adds	r7, #8
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	bd80      	pop	{r7, pc}

08001baa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001baa:	b580      	push	{r7, lr}
 8001bac:	b082      	sub	sp, #8
 8001bae:	af00      	add	r7, sp, #0
 8001bb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff ffa2 	bl	8001afc <SysTick_Config>
 8001bb8:	4603      	mov	r3, r0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
	...

08001bc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	b089      	sub	sp, #36	; 0x24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bde:	2300      	movs	r3, #0
 8001be0:	61fb      	str	r3, [r7, #28]
 8001be2:	e175      	b.n	8001ed0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001be4:	2201      	movs	r2, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf8:	693a      	ldr	r2, [r7, #16]
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	f040 8164 	bne.w	8001eca <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f003 0303 	and.w	r3, r3, #3
 8001c0a:	2b01      	cmp	r3, #1
 8001c0c:	d005      	beq.n	8001c1a <HAL_GPIO_Init+0x56>
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d130      	bne.n	8001c7c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	2203      	movs	r2, #3
 8001c26:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2a:	43db      	mvns	r3, r3
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	4013      	ands	r3, r2
 8001c30:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	69fb      	ldr	r3, [r7, #28]
 8001c38:	005b      	lsls	r3, r3, #1
 8001c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4313      	orrs	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c50:	2201      	movs	r2, #1
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	69ba      	ldr	r2, [r7, #24]
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	091b      	lsrs	r3, r3, #4
 8001c66:	f003 0201 	and.w	r2, r3, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b03      	cmp	r3, #3
 8001c86:	d017      	beq.n	8001cb8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689a      	ldr	r2, [r3, #8]
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	005b      	lsls	r3, r3, #1
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f003 0303 	and.w	r3, r3, #3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d123      	bne.n	8001d0c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	08da      	lsrs	r2, r3, #3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	3208      	adds	r2, #8
 8001ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cd0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	220f      	movs	r2, #15
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	691a      	ldr	r2, [r3, #16]
 8001cec:	69fb      	ldr	r3, [r7, #28]
 8001cee:	f003 0307 	and.w	r3, r3, #7
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	08da      	lsrs	r2, r3, #3
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	3208      	adds	r2, #8
 8001d06:	69b9      	ldr	r1, [r7, #24]
 8001d08:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	2203      	movs	r2, #3
 8001d18:	fa02 f303 	lsl.w	r3, r2, r3
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f003 0203 	and.w	r2, r3, #3
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	4313      	orrs	r3, r2
 8001d38:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	f000 80be 	beq.w	8001eca <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d4e:	4b66      	ldr	r3, [pc, #408]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d52:	4a65      	ldr	r2, [pc, #404]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001d54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d58:	6453      	str	r3, [r2, #68]	; 0x44
 8001d5a:	4b63      	ldr	r3, [pc, #396]	; (8001ee8 <HAL_GPIO_Init+0x324>)
 8001d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d66:	4a61      	ldr	r2, [pc, #388]	; (8001eec <HAL_GPIO_Init+0x328>)
 8001d68:	69fb      	ldr	r3, [r7, #28]
 8001d6a:	089b      	lsrs	r3, r3, #2
 8001d6c:	3302      	adds	r3, #2
 8001d6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f003 0303 	and.w	r3, r3, #3
 8001d7a:	009b      	lsls	r3, r3, #2
 8001d7c:	220f      	movs	r2, #15
 8001d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4a58      	ldr	r2, [pc, #352]	; (8001ef0 <HAL_GPIO_Init+0x32c>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d037      	beq.n	8001e02 <HAL_GPIO_Init+0x23e>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a57      	ldr	r2, [pc, #348]	; (8001ef4 <HAL_GPIO_Init+0x330>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d031      	beq.n	8001dfe <HAL_GPIO_Init+0x23a>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a56      	ldr	r2, [pc, #344]	; (8001ef8 <HAL_GPIO_Init+0x334>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d02b      	beq.n	8001dfa <HAL_GPIO_Init+0x236>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a55      	ldr	r2, [pc, #340]	; (8001efc <HAL_GPIO_Init+0x338>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d025      	beq.n	8001df6 <HAL_GPIO_Init+0x232>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a54      	ldr	r2, [pc, #336]	; (8001f00 <HAL_GPIO_Init+0x33c>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d01f      	beq.n	8001df2 <HAL_GPIO_Init+0x22e>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a53      	ldr	r2, [pc, #332]	; (8001f04 <HAL_GPIO_Init+0x340>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d019      	beq.n	8001dee <HAL_GPIO_Init+0x22a>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a52      	ldr	r2, [pc, #328]	; (8001f08 <HAL_GPIO_Init+0x344>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d013      	beq.n	8001dea <HAL_GPIO_Init+0x226>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a51      	ldr	r2, [pc, #324]	; (8001f0c <HAL_GPIO_Init+0x348>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d00d      	beq.n	8001de6 <HAL_GPIO_Init+0x222>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a50      	ldr	r2, [pc, #320]	; (8001f10 <HAL_GPIO_Init+0x34c>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d007      	beq.n	8001de2 <HAL_GPIO_Init+0x21e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a4f      	ldr	r2, [pc, #316]	; (8001f14 <HAL_GPIO_Init+0x350>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d101      	bne.n	8001dde <HAL_GPIO_Init+0x21a>
 8001dda:	2309      	movs	r3, #9
 8001ddc:	e012      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dde:	230a      	movs	r3, #10
 8001de0:	e010      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001de2:	2308      	movs	r3, #8
 8001de4:	e00e      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001de6:	2307      	movs	r3, #7
 8001de8:	e00c      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dea:	2306      	movs	r3, #6
 8001dec:	e00a      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dee:	2305      	movs	r3, #5
 8001df0:	e008      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001df2:	2304      	movs	r3, #4
 8001df4:	e006      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001df6:	2303      	movs	r3, #3
 8001df8:	e004      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	e002      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e000      	b.n	8001e04 <HAL_GPIO_Init+0x240>
 8001e02:	2300      	movs	r3, #0
 8001e04:	69fa      	ldr	r2, [r7, #28]
 8001e06:	f002 0203 	and.w	r2, r2, #3
 8001e0a:	0092      	lsls	r2, r2, #2
 8001e0c:	4093      	lsls	r3, r2
 8001e0e:	69ba      	ldr	r2, [r7, #24]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e14:	4935      	ldr	r1, [pc, #212]	; (8001eec <HAL_GPIO_Init+0x328>)
 8001e16:	69fb      	ldr	r3, [r7, #28]
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e22:	4b3d      	ldr	r3, [pc, #244]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d003      	beq.n	8001e46 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e3e:	69ba      	ldr	r2, [r7, #24]
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4313      	orrs	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e46:	4a34      	ldr	r2, [pc, #208]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e48:	69bb      	ldr	r3, [r7, #24]
 8001e4a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e4c:	4b32      	ldr	r3, [pc, #200]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e52:	693b      	ldr	r3, [r7, #16]
 8001e54:	43db      	mvns	r3, r3
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d003      	beq.n	8001e70 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e68:	69ba      	ldr	r2, [r7, #24]
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	4313      	orrs	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e70:	4a29      	ldr	r2, [pc, #164]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e72:	69bb      	ldr	r3, [r7, #24]
 8001e74:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e76:	4b28      	ldr	r3, [pc, #160]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	43db      	mvns	r3, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4013      	ands	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e92:	69ba      	ldr	r2, [r7, #24]
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	4313      	orrs	r3, r2
 8001e98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e9a:	4a1f      	ldr	r2, [pc, #124]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001e9c:	69bb      	ldr	r3, [r7, #24]
 8001e9e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ea0:	4b1d      	ldr	r3, [pc, #116]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	4013      	ands	r3, r2
 8001eae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ebc:	69ba      	ldr	r2, [r7, #24]
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec4:	4a14      	ldr	r2, [pc, #80]	; (8001f18 <HAL_GPIO_Init+0x354>)
 8001ec6:	69bb      	ldr	r3, [r7, #24]
 8001ec8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001eca:	69fb      	ldr	r3, [r7, #28]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	61fb      	str	r3, [r7, #28]
 8001ed0:	69fb      	ldr	r3, [r7, #28]
 8001ed2:	2b0f      	cmp	r3, #15
 8001ed4:	f67f ae86 	bls.w	8001be4 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ed8:	bf00      	nop
 8001eda:	bf00      	nop
 8001edc:	3724      	adds	r7, #36	; 0x24
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
 8001ee6:	bf00      	nop
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40013800 	.word	0x40013800
 8001ef0:	40020000 	.word	0x40020000
 8001ef4:	40020400 	.word	0x40020400
 8001ef8:	40020800 	.word	0x40020800
 8001efc:	40020c00 	.word	0x40020c00
 8001f00:	40021000 	.word	0x40021000
 8001f04:	40021400 	.word	0x40021400
 8001f08:	40021800 	.word	0x40021800
 8001f0c:	40021c00 	.word	0x40021c00
 8001f10:	40022000 	.word	0x40022000
 8001f14:	40022400 	.word	0x40022400
 8001f18:	40013c00 	.word	0x40013c00

08001f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b083      	sub	sp, #12
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	460b      	mov	r3, r1
 8001f26:	807b      	strh	r3, [r7, #2]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f2c:	787b      	ldrb	r3, [r7, #1]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d003      	beq.n	8001f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f32:	887a      	ldrh	r2, [r7, #2]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f38:	e003      	b.n	8001f42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f3a:	887b      	ldrh	r3, [r7, #2]
 8001f3c:	041a      	lsls	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	619a      	str	r2, [r3, #24]
}
 8001f42:	bf00      	nop
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
	...

08001f50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b082      	sub	sp, #8
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	4603      	mov	r3, r0
 8001f58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f5a:	4b08      	ldr	r3, [pc, #32]	; (8001f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f5c:	695a      	ldr	r2, [r3, #20]
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	4013      	ands	r3, r2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d006      	beq.n	8001f74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f66:	4a05      	ldr	r2, [pc, #20]	; (8001f7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f68:	88fb      	ldrh	r3, [r7, #6]
 8001f6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f6c:	88fb      	ldrh	r3, [r7, #6]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f000 f806 	bl	8001f80 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f74:	bf00      	nop
 8001f76:	3708      	adds	r7, #8
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40013c00 	.word	0x40013c00

08001f80 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b083      	sub	sp, #12
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f8a:	bf00      	nop
 8001f8c:	370c      	adds	r7, #12
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
	...

08001f98 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001fa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fa6:	6013      	str	r3, [r2, #0]
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
 8001fb2:	bf00      	nop
 8001fb4:	40007000 	.word	0x40007000

08001fb8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001fc2:	4b23      	ldr	r3, [pc, #140]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	4a22      	ldr	r2, [pc, #136]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fce:	4b20      	ldr	r3, [pc, #128]	; (8002050 <HAL_PWREx_EnableOverDrive+0x98>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	603b      	str	r3, [r7, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001fda:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	4a1d      	ldr	r2, [pc, #116]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fe4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001fe6:	f7ff fccf 	bl	8001988 <HAL_GetTick>
 8001fea:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001fec:	e009      	b.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001fee:	f7ff fccb 	bl	8001988 <HAL_GetTick>
 8001ff2:	4602      	mov	r2, r0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001ffc:	d901      	bls.n	8002002 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001ffe:	2303      	movs	r3, #3
 8002000:	e022      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002002:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800200a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800200e:	d1ee      	bne.n	8001fee <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002010:	4b10      	ldr	r3, [pc, #64]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0f      	ldr	r2, [pc, #60]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002016:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800201a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800201c:	f7ff fcb4 	bl	8001988 <HAL_GetTick>
 8002020:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002022:	e009      	b.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002024:	f7ff fcb0 	bl	8001988 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002032:	d901      	bls.n	8002038 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e007      	b.n	8002048 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002038:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_PWREx_EnableOverDrive+0x9c>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002040:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002044:	d1ee      	bne.n	8002024 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
}
 8002048:	4618      	mov	r0, r3
 800204a:	3708      	adds	r7, #8
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000

08002058 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b086      	sub	sp, #24
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002060:	2300      	movs	r3, #0
 8002062:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e291      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	f000 8087 	beq.w	800218a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800207c:	4b96      	ldr	r3, [pc, #600]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f003 030c 	and.w	r3, r3, #12
 8002084:	2b04      	cmp	r3, #4
 8002086:	d00c      	beq.n	80020a2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002088:	4b93      	ldr	r3, [pc, #588]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800208a:	689b      	ldr	r3, [r3, #8]
 800208c:	f003 030c 	and.w	r3, r3, #12
 8002090:	2b08      	cmp	r3, #8
 8002092:	d112      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
 8002094:	4b90      	ldr	r3, [pc, #576]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800209c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a0:	d10b      	bne.n	80020ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020a2:	4b8d      	ldr	r3, [pc, #564]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d06c      	beq.n	8002188 <HAL_RCC_OscConfig+0x130>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d168      	bne.n	8002188 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80020b6:	2301      	movs	r3, #1
 80020b8:	e26b      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCC_OscConfig+0x7a>
 80020c4:	4b84      	ldr	r3, [pc, #528]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a83      	ldr	r2, [pc, #524]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ce:	6013      	str	r3, [r2, #0]
 80020d0:	e02e      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10c      	bne.n	80020f4 <HAL_RCC_OscConfig+0x9c>
 80020da:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	4a7e      	ldr	r2, [pc, #504]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e4:	6013      	str	r3, [r2, #0]
 80020e6:	4b7c      	ldr	r3, [pc, #496]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a7b      	ldr	r2, [pc, #492]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f0:	6013      	str	r3, [r2, #0]
 80020f2:	e01d      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020fc:	d10c      	bne.n	8002118 <HAL_RCC_OscConfig+0xc0>
 80020fe:	4b76      	ldr	r3, [pc, #472]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	4a75      	ldr	r2, [pc, #468]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002104:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002108:	6013      	str	r3, [r2, #0]
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a72      	ldr	r2, [pc, #456]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	e00b      	b.n	8002130 <HAL_RCC_OscConfig+0xd8>
 8002118:	4b6f      	ldr	r3, [pc, #444]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a6e      	ldr	r2, [pc, #440]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800211e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002122:	6013      	str	r3, [r2, #0]
 8002124:	4b6c      	ldr	r3, [pc, #432]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a6b      	ldr	r2, [pc, #428]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800212a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d013      	beq.n	8002160 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff fc26 	bl	8001988 <HAL_GetTick>
 800213c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7ff fc22 	bl	8001988 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e21f      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002152:	4b61      	ldr	r3, [pc, #388]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215a:	2b00      	cmp	r3, #0
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xe8>
 800215e:	e014      	b.n	800218a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7ff fc12 	bl	8001988 <HAL_GetTick>
 8002164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002166:	e008      	b.n	800217a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002168:	f7ff fc0e 	bl	8001988 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	693b      	ldr	r3, [r7, #16]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b64      	cmp	r3, #100	; 0x64
 8002174:	d901      	bls.n	800217a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e20b      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1f0      	bne.n	8002168 <HAL_RCC_OscConfig+0x110>
 8002186:	e000      	b.n	800218a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002188:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0302 	and.w	r3, r3, #2
 8002192:	2b00      	cmp	r3, #0
 8002194:	d069      	beq.n	800226a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002196:	4b50      	ldr	r3, [pc, #320]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	f003 030c 	and.w	r3, r3, #12
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d00b      	beq.n	80021ba <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021a2:	4b4d      	ldr	r3, [pc, #308]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	f003 030c 	and.w	r3, r3, #12
 80021aa:	2b08      	cmp	r3, #8
 80021ac:	d11c      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
 80021ae:	4b4a      	ldr	r3, [pc, #296]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021b0:	685b      	ldr	r3, [r3, #4]
 80021b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d116      	bne.n	80021e8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021ba:	4b47      	ldr	r3, [pc, #284]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f003 0302 	and.w	r3, r3, #2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d005      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	68db      	ldr	r3, [r3, #12]
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d001      	beq.n	80021d2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e1df      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	493d      	ldr	r1, [pc, #244]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021e6:	e040      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d023      	beq.n	8002238 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021f0:	4b39      	ldr	r3, [pc, #228]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a38      	ldr	r2, [pc, #224]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80021f6:	f043 0301 	orr.w	r3, r3, #1
 80021fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021fc:	f7ff fbc4 	bl	8001988 <HAL_GetTick>
 8002200:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002204:	f7ff fbc0 	bl	8001988 <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b02      	cmp	r3, #2
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1bd      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002216:	4b30      	ldr	r3, [pc, #192]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f003 0302 	and.w	r3, r3, #2
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4929      	ldr	r1, [pc, #164]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
 8002236:	e018      	b.n	800226a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a26      	ldr	r2, [pc, #152]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 800223e:	f023 0301 	bic.w	r3, r3, #1
 8002242:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002244:	f7ff fba0 	bl	8001988 <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800224c:	f7ff fb9c 	bl	8001988 <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e199      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800225e:	4b1e      	ldr	r3, [pc, #120]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 0302 	and.w	r3, r3, #2
 8002266:	2b00      	cmp	r3, #0
 8002268:	d1f0      	bne.n	800224c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0308 	and.w	r3, r3, #8
 8002272:	2b00      	cmp	r3, #0
 8002274:	d038      	beq.n	80022e8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	695b      	ldr	r3, [r3, #20]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d019      	beq.n	80022b2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002282:	4a15      	ldr	r2, [pc, #84]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 8002284:	f043 0301 	orr.w	r3, r3, #1
 8002288:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228a:	f7ff fb7d 	bl	8001988 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002290:	e008      	b.n	80022a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002292:	f7ff fb79 	bl	8001988 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b02      	cmp	r3, #2
 800229e:	d901      	bls.n	80022a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80022a0:	2303      	movs	r3, #3
 80022a2:	e176      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022a4:	4b0c      	ldr	r3, [pc, #48]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d0f0      	beq.n	8002292 <HAL_RCC_OscConfig+0x23a>
 80022b0:	e01a      	b.n	80022e8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022b2:	4b09      	ldr	r3, [pc, #36]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022b6:	4a08      	ldr	r2, [pc, #32]	; (80022d8 <HAL_RCC_OscConfig+0x280>)
 80022b8:	f023 0301 	bic.w	r3, r3, #1
 80022bc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022be:	f7ff fb63 	bl	8001988 <HAL_GetTick>
 80022c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022c4:	e00a      	b.n	80022dc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022c6:	f7ff fb5f 	bl	8001988 <HAL_GetTick>
 80022ca:	4602      	mov	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d903      	bls.n	80022dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e15c      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
 80022d8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022dc:	4b91      	ldr	r3, [pc, #580]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80022de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e0:	f003 0302 	and.w	r3, r3, #2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1ee      	bne.n	80022c6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0304 	and.w	r3, r3, #4
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f000 80a4 	beq.w	800243e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022f6:	4b8b      	ldr	r3, [pc, #556]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d10d      	bne.n	800231e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002302:	4b88      	ldr	r3, [pc, #544]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a87      	ldr	r2, [pc, #540]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002308:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800231a:	2301      	movs	r3, #1
 800231c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800231e:	4b82      	ldr	r3, [pc, #520]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002326:	2b00      	cmp	r3, #0
 8002328:	d118      	bne.n	800235c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800232a:	4b7f      	ldr	r3, [pc, #508]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a7e      	ldr	r2, [pc, #504]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002330:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002334:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002336:	f7ff fb27 	bl	8001988 <HAL_GetTick>
 800233a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800233c:	e008      	b.n	8002350 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800233e:	f7ff fb23 	bl	8001988 <HAL_GetTick>
 8002342:	4602      	mov	r2, r0
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	1ad3      	subs	r3, r2, r3
 8002348:	2b64      	cmp	r3, #100	; 0x64
 800234a:	d901      	bls.n	8002350 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800234c:	2303      	movs	r3, #3
 800234e:	e120      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x4d0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d0f0      	beq.n	800233e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2b01      	cmp	r3, #1
 8002362:	d106      	bne.n	8002372 <HAL_RCC_OscConfig+0x31a>
 8002364:	4b6f      	ldr	r3, [pc, #444]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002368:	4a6e      	ldr	r2, [pc, #440]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6713      	str	r3, [r2, #112]	; 0x70
 8002370:	e02d      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d10c      	bne.n	8002394 <HAL_RCC_OscConfig+0x33c>
 800237a:	4b6a      	ldr	r3, [pc, #424]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800237c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800237e:	4a69      	ldr	r2, [pc, #420]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002380:	f023 0301 	bic.w	r3, r3, #1
 8002384:	6713      	str	r3, [r2, #112]	; 0x70
 8002386:	4b67      	ldr	r3, [pc, #412]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800238a:	4a66      	ldr	r2, [pc, #408]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800238c:	f023 0304 	bic.w	r3, r3, #4
 8002390:	6713      	str	r3, [r2, #112]	; 0x70
 8002392:	e01c      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	2b05      	cmp	r3, #5
 800239a:	d10c      	bne.n	80023b6 <HAL_RCC_OscConfig+0x35e>
 800239c:	4b61      	ldr	r3, [pc, #388]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800239e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023a0:	4a60      	ldr	r2, [pc, #384]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023a2:	f043 0304 	orr.w	r3, r3, #4
 80023a6:	6713      	str	r3, [r2, #112]	; 0x70
 80023a8:	4b5e      	ldr	r3, [pc, #376]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ac:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6713      	str	r3, [r2, #112]	; 0x70
 80023b4:	e00b      	b.n	80023ce <HAL_RCC_OscConfig+0x376>
 80023b6:	4b5b      	ldr	r3, [pc, #364]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ba:	4a5a      	ldr	r2, [pc, #360]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023bc:	f023 0301 	bic.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	; 0x70
 80023c2:	4b58      	ldr	r3, [pc, #352]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a57      	ldr	r2, [pc, #348]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023c8:	f023 0304 	bic.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d015      	beq.n	8002402 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7ff fad7 	bl	8001988 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023de:	f7ff fad3 	bl	8001988 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d901      	bls.n	80023f4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80023f0:	2303      	movs	r3, #3
 80023f2:	e0ce      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023f4:	4b4b      	ldr	r3, [pc, #300]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80023f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d0ee      	beq.n	80023de <HAL_RCC_OscConfig+0x386>
 8002400:	e014      	b.n	800242c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002402:	f7ff fac1 	bl	8001988 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002408:	e00a      	b.n	8002420 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240a:	f7ff fabd 	bl	8001988 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	f241 3288 	movw	r2, #5000	; 0x1388
 8002418:	4293      	cmp	r3, r2
 800241a:	d901      	bls.n	8002420 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e0b8      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002420:	4b40      	ldr	r3, [pc, #256]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	2b00      	cmp	r3, #0
 800242a:	d1ee      	bne.n	800240a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d105      	bne.n	800243e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002432:	4b3c      	ldr	r3, [pc, #240]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002436:	4a3b      	ldr	r2, [pc, #236]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002438:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800243c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	699b      	ldr	r3, [r3, #24]
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80a4 	beq.w	8002590 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002448:	4b36      	ldr	r3, [pc, #216]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b08      	cmp	r3, #8
 8002452:	d06b      	beq.n	800252c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	2b02      	cmp	r3, #2
 800245a:	d149      	bne.n	80024f0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b31      	ldr	r3, [pc, #196]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a30      	ldr	r2, [pc, #192]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fa8e 	bl	8001988 <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff fa8a 	bl	8001988 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e087      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002482:	4b28      	ldr	r3, [pc, #160]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	69da      	ldr	r2, [r3, #28]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6a1b      	ldr	r3, [r3, #32]
 8002496:	431a      	orrs	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249c:	019b      	lsls	r3, r3, #6
 800249e:	431a      	orrs	r2, r3
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024a4:	085b      	lsrs	r3, r3, #1
 80024a6:	3b01      	subs	r3, #1
 80024a8:	041b      	lsls	r3, r3, #16
 80024aa:	431a      	orrs	r2, r3
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024b0:	061b      	lsls	r3, r3, #24
 80024b2:	4313      	orrs	r3, r2
 80024b4:	4a1b      	ldr	r2, [pc, #108]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024b6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80024ba:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024bc:	4b19      	ldr	r3, [pc, #100]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a18      	ldr	r2, [pc, #96]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c8:	f7ff fa5e 	bl	8001988 <HAL_GetTick>
 80024cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ce:	e008      	b.n	80024e2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d0:	f7ff fa5a 	bl	8001988 <HAL_GetTick>
 80024d4:	4602      	mov	r2, r0
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	1ad3      	subs	r3, r2, r3
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d901      	bls.n	80024e2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80024de:	2303      	movs	r3, #3
 80024e0:	e057      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e2:	4b10      	ldr	r3, [pc, #64]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d0f0      	beq.n	80024d0 <HAL_RCC_OscConfig+0x478>
 80024ee:	e04f      	b.n	8002590 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024f0:	4b0c      	ldr	r3, [pc, #48]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a0b      	ldr	r2, [pc, #44]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 80024f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80024fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff fa44 	bl	8001988 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002504:	f7ff fa40 	bl	8001988 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b02      	cmp	r3, #2
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e03d      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002516:	4b03      	ldr	r3, [pc, #12]	; (8002524 <HAL_RCC_OscConfig+0x4cc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d1f0      	bne.n	8002504 <HAL_RCC_OscConfig+0x4ac>
 8002522:	e035      	b.n	8002590 <HAL_RCC_OscConfig+0x538>
 8002524:	40023800 	.word	0x40023800
 8002528:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800252c:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_OscConfig+0x544>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	699b      	ldr	r3, [r3, #24]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d028      	beq.n	800258c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d121      	bne.n	800258c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002552:	429a      	cmp	r2, r3
 8002554:	d11a      	bne.n	800258c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002556:	68fa      	ldr	r2, [r7, #12]
 8002558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800255c:	4013      	ands	r3, r2
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002562:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002564:	4293      	cmp	r3, r2
 8002566:	d111      	bne.n	800258c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002572:	085b      	lsrs	r3, r3, #1
 8002574:	3b01      	subs	r3, #1
 8002576:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002578:	429a      	cmp	r2, r3
 800257a:	d107      	bne.n	800258c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002586:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002590:	2300      	movs	r3, #0
}
 8002592:	4618      	mov	r0, r3
 8002594:	3718      	adds	r7, #24
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	40023800 	.word	0x40023800

080025a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80025aa:	2300      	movs	r3, #0
 80025ac:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d101      	bne.n	80025b8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80025b4:	2301      	movs	r3, #1
 80025b6:	e0d0      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025b8:	4b6a      	ldr	r3, [pc, #424]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f003 030f 	and.w	r3, r3, #15
 80025c0:	683a      	ldr	r2, [r7, #0]
 80025c2:	429a      	cmp	r2, r3
 80025c4:	d910      	bls.n	80025e8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025c6:	4b67      	ldr	r3, [pc, #412]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 020f 	bic.w	r2, r3, #15
 80025ce:	4965      	ldr	r1, [pc, #404]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025d0:	683b      	ldr	r3, [r7, #0]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025d6:	4b63      	ldr	r3, [pc, #396]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	429a      	cmp	r2, r3
 80025e2:	d001      	beq.n	80025e8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80025e4:	2301      	movs	r3, #1
 80025e6:	e0b8      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d020      	beq.n	8002636 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0304 	and.w	r3, r3, #4
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002600:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002606:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800260a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b00      	cmp	r3, #0
 8002616:	d005      	beq.n	8002624 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002618:	4b53      	ldr	r3, [pc, #332]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	4a52      	ldr	r2, [pc, #328]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800261e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002622:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002624:	4b50      	ldr	r3, [pc, #320]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	494d      	ldr	r1, [pc, #308]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002632:	4313      	orrs	r3, r2
 8002634:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0301 	and.w	r3, r3, #1
 800263e:	2b00      	cmp	r3, #0
 8002640:	d040      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	2b01      	cmp	r3, #1
 8002648:	d107      	bne.n	800265a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800264a:	4b47      	ldr	r3, [pc, #284]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d115      	bne.n	8002682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	e07f      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b02      	cmp	r3, #2
 8002660:	d107      	bne.n	8002672 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d109      	bne.n	8002682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e073      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f003 0302 	and.w	r3, r3, #2
 800267a:	2b00      	cmp	r3, #0
 800267c:	d101      	bne.n	8002682 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e06b      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002682:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	f023 0203 	bic.w	r2, r3, #3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002690:	4313      	orrs	r3, r2
 8002692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002694:	f7ff f978 	bl	8001988 <HAL_GetTick>
 8002698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800269a:	e00a      	b.n	80026b2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800269c:	f7ff f974 	bl	8001988 <HAL_GetTick>
 80026a0:	4602      	mov	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d901      	bls.n	80026b2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80026ae:	2303      	movs	r3, #3
 80026b0:	e053      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026b2:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 80026b4:	689b      	ldr	r3, [r3, #8]
 80026b6:	f003 020c 	and.w	r2, r3, #12
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d1eb      	bne.n	800269c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026c4:	4b27      	ldr	r3, [pc, #156]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d210      	bcs.n	80026f4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b24      	ldr	r3, [pc, #144]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 020f 	bic.w	r2, r3, #15
 80026da:	4922      	ldr	r1, [pc, #136]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x1c4>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e032      	b.n	800275a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4916      	ldr	r1, [pc, #88]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800270e:	4313      	orrs	r3, r2
 8002710:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0308 	and.w	r3, r3, #8
 800271a:	2b00      	cmp	r3, #0
 800271c:	d009      	beq.n	8002732 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800271e:	4b12      	ldr	r3, [pc, #72]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 8002720:	689b      	ldr	r3, [r3, #8]
 8002722:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	00db      	lsls	r3, r3, #3
 800272c:	490e      	ldr	r1, [pc, #56]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	4313      	orrs	r3, r2
 8002730:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002732:	f000 f821 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8002736:	4602      	mov	r2, r0
 8002738:	4b0b      	ldr	r3, [pc, #44]	; (8002768 <HAL_RCC_ClockConfig+0x1c8>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	091b      	lsrs	r3, r3, #4
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	490a      	ldr	r1, [pc, #40]	; (800276c <HAL_RCC_ClockConfig+0x1cc>)
 8002744:	5ccb      	ldrb	r3, [r1, r3]
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a09      	ldr	r2, [pc, #36]	; (8002770 <HAL_RCC_ClockConfig+0x1d0>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_RCC_ClockConfig+0x1d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f8d4 	bl	8001900 <HAL_InitTick>

  return HAL_OK;
 8002758:	2300      	movs	r3, #0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3710      	adds	r7, #16
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40023c00 	.word	0x40023c00
 8002768:	40023800 	.word	0x40023800
 800276c:	08005588 	.word	0x08005588
 8002770:	20000060 	.word	0x20000060
 8002774:	20000064 	.word	0x20000064

08002778 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002778:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800277c:	b094      	sub	sp, #80	; 0x50
 800277e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	647b      	str	r3, [r7, #68]	; 0x44
 8002784:	2300      	movs	r3, #0
 8002786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002788:	2300      	movs	r3, #0
 800278a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800278c:	2300      	movs	r3, #0
 800278e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002790:	4b79      	ldr	r3, [pc, #484]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f003 030c 	and.w	r3, r3, #12
 8002798:	2b08      	cmp	r3, #8
 800279a:	d00d      	beq.n	80027b8 <HAL_RCC_GetSysClockFreq+0x40>
 800279c:	2b08      	cmp	r3, #8
 800279e:	f200 80e1 	bhi.w	8002964 <HAL_RCC_GetSysClockFreq+0x1ec>
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d002      	beq.n	80027ac <HAL_RCC_GetSysClockFreq+0x34>
 80027a6:	2b04      	cmp	r3, #4
 80027a8:	d003      	beq.n	80027b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80027aa:	e0db      	b.n	8002964 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80027ac:	4b73      	ldr	r3, [pc, #460]	; (800297c <HAL_RCC_GetSysClockFreq+0x204>)
 80027ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b0:	e0db      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80027b2:	4b73      	ldr	r3, [pc, #460]	; (8002980 <HAL_RCC_GetSysClockFreq+0x208>)
 80027b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027b6:	e0d8      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80027b8:	4b6f      	ldr	r3, [pc, #444]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80027c0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80027c2:	4b6d      	ldr	r3, [pc, #436]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d063      	beq.n	8002896 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ce:	4b6a      	ldr	r3, [pc, #424]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	099b      	lsrs	r3, r3, #6
 80027d4:	2200      	movs	r2, #0
 80027d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80027d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80027da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
 80027e2:	2300      	movs	r3, #0
 80027e4:	637b      	str	r3, [r7, #52]	; 0x34
 80027e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027ea:	4622      	mov	r2, r4
 80027ec:	462b      	mov	r3, r5
 80027ee:	f04f 0000 	mov.w	r0, #0
 80027f2:	f04f 0100 	mov.w	r1, #0
 80027f6:	0159      	lsls	r1, r3, #5
 80027f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027fc:	0150      	lsls	r0, r2, #5
 80027fe:	4602      	mov	r2, r0
 8002800:	460b      	mov	r3, r1
 8002802:	4621      	mov	r1, r4
 8002804:	1a51      	subs	r1, r2, r1
 8002806:	6139      	str	r1, [r7, #16]
 8002808:	4629      	mov	r1, r5
 800280a:	eb63 0301 	sbc.w	r3, r3, r1
 800280e:	617b      	str	r3, [r7, #20]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800281c:	4659      	mov	r1, fp
 800281e:	018b      	lsls	r3, r1, #6
 8002820:	4651      	mov	r1, sl
 8002822:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002826:	4651      	mov	r1, sl
 8002828:	018a      	lsls	r2, r1, #6
 800282a:	4651      	mov	r1, sl
 800282c:	ebb2 0801 	subs.w	r8, r2, r1
 8002830:	4659      	mov	r1, fp
 8002832:	eb63 0901 	sbc.w	r9, r3, r1
 8002836:	f04f 0200 	mov.w	r2, #0
 800283a:	f04f 0300 	mov.w	r3, #0
 800283e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002842:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002846:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800284a:	4690      	mov	r8, r2
 800284c:	4699      	mov	r9, r3
 800284e:	4623      	mov	r3, r4
 8002850:	eb18 0303 	adds.w	r3, r8, r3
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	462b      	mov	r3, r5
 8002858:	eb49 0303 	adc.w	r3, r9, r3
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	f04f 0200 	mov.w	r2, #0
 8002862:	f04f 0300 	mov.w	r3, #0
 8002866:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800286a:	4629      	mov	r1, r5
 800286c:	024b      	lsls	r3, r1, #9
 800286e:	4621      	mov	r1, r4
 8002870:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002874:	4621      	mov	r1, r4
 8002876:	024a      	lsls	r2, r1, #9
 8002878:	4610      	mov	r0, r2
 800287a:	4619      	mov	r1, r3
 800287c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800287e:	2200      	movs	r2, #0
 8002880:	62bb      	str	r3, [r7, #40]	; 0x28
 8002882:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002884:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002888:	f7fd fd1a 	bl	80002c0 <__aeabi_uldivmod>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4613      	mov	r3, r2
 8002892:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002894:	e058      	b.n	8002948 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002896:	4b38      	ldr	r3, [pc, #224]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	099b      	lsrs	r3, r3, #6
 800289c:	2200      	movs	r2, #0
 800289e:	4618      	mov	r0, r3
 80028a0:	4611      	mov	r1, r2
 80028a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80028a6:	623b      	str	r3, [r7, #32]
 80028a8:	2300      	movs	r3, #0
 80028aa:	627b      	str	r3, [r7, #36]	; 0x24
 80028ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028b0:	4642      	mov	r2, r8
 80028b2:	464b      	mov	r3, r9
 80028b4:	f04f 0000 	mov.w	r0, #0
 80028b8:	f04f 0100 	mov.w	r1, #0
 80028bc:	0159      	lsls	r1, r3, #5
 80028be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80028c2:	0150      	lsls	r0, r2, #5
 80028c4:	4602      	mov	r2, r0
 80028c6:	460b      	mov	r3, r1
 80028c8:	4641      	mov	r1, r8
 80028ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80028ce:	4649      	mov	r1, r9
 80028d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80028d4:	f04f 0200 	mov.w	r2, #0
 80028d8:	f04f 0300 	mov.w	r3, #0
 80028dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80028e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80028e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80028e8:	ebb2 040a 	subs.w	r4, r2, sl
 80028ec:	eb63 050b 	sbc.w	r5, r3, fp
 80028f0:	f04f 0200 	mov.w	r2, #0
 80028f4:	f04f 0300 	mov.w	r3, #0
 80028f8:	00eb      	lsls	r3, r5, #3
 80028fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80028fe:	00e2      	lsls	r2, r4, #3
 8002900:	4614      	mov	r4, r2
 8002902:	461d      	mov	r5, r3
 8002904:	4643      	mov	r3, r8
 8002906:	18e3      	adds	r3, r4, r3
 8002908:	603b      	str	r3, [r7, #0]
 800290a:	464b      	mov	r3, r9
 800290c:	eb45 0303 	adc.w	r3, r5, r3
 8002910:	607b      	str	r3, [r7, #4]
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800291e:	4629      	mov	r1, r5
 8002920:	028b      	lsls	r3, r1, #10
 8002922:	4621      	mov	r1, r4
 8002924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002928:	4621      	mov	r1, r4
 800292a:	028a      	lsls	r2, r1, #10
 800292c:	4610      	mov	r0, r2
 800292e:	4619      	mov	r1, r3
 8002930:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002932:	2200      	movs	r2, #0
 8002934:	61bb      	str	r3, [r7, #24]
 8002936:	61fa      	str	r2, [r7, #28]
 8002938:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293c:	f7fd fcc0 	bl	80002c0 <__aeabi_uldivmod>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4613      	mov	r3, r2
 8002946:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002948:	4b0b      	ldr	r3, [pc, #44]	; (8002978 <HAL_RCC_GetSysClockFreq+0x200>)
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	0c1b      	lsrs	r3, r3, #16
 800294e:	f003 0303 	and.w	r3, r3, #3
 8002952:	3301      	adds	r3, #1
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002958:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800295a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800295c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002960:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002962:	e002      	b.n	800296a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002964:	4b05      	ldr	r3, [pc, #20]	; (800297c <HAL_RCC_GetSysClockFreq+0x204>)
 8002966:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800296a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800296c:	4618      	mov	r0, r3
 800296e:	3750      	adds	r7, #80	; 0x50
 8002970:	46bd      	mov	sp, r7
 8002972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002976:	bf00      	nop
 8002978:	40023800 	.word	0x40023800
 800297c:	00f42400 	.word	0x00f42400
 8002980:	007a1200 	.word	0x007a1200

08002984 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002984:	b480      	push	{r7}
 8002986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002988:	4b03      	ldr	r3, [pc, #12]	; (8002998 <HAL_RCC_GetHCLKFreq+0x14>)
 800298a:	681b      	ldr	r3, [r3, #0]
}
 800298c:	4618      	mov	r0, r3
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	20000060 	.word	0x20000060

0800299c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80029a0:	f7ff fff0 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029a4:	4602      	mov	r2, r0
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80029a8:	689b      	ldr	r3, [r3, #8]
 80029aa:	0a9b      	lsrs	r3, r3, #10
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	4903      	ldr	r1, [pc, #12]	; (80029c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80029b2:	5ccb      	ldrb	r3, [r1, r3]
 80029b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029b8:	4618      	mov	r0, r3
 80029ba:	bd80      	pop	{r7, pc}
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08005598 	.word	0x08005598

080029c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80029c8:	f7ff ffdc 	bl	8002984 <HAL_RCC_GetHCLKFreq>
 80029cc:	4602      	mov	r2, r0
 80029ce:	4b05      	ldr	r3, [pc, #20]	; (80029e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	0b5b      	lsrs	r3, r3, #13
 80029d4:	f003 0307 	and.w	r3, r3, #7
 80029d8:	4903      	ldr	r1, [pc, #12]	; (80029e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80029da:	5ccb      	ldrb	r3, [r1, r3]
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80029e0:	4618      	mov	r0, r3
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	40023800 	.word	0x40023800
 80029e8:	08005598 	.word	0x08005598

080029ec <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b088      	sub	sp, #32
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80029fc:	2300      	movs	r3, #0
 80029fe:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 0301 	and.w	r3, r3, #1
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d012      	beq.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a14:	4b69      	ldr	r3, [pc, #420]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	4a68      	ldr	r2, [pc, #416]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a1a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	4b66      	ldr	r3, [pc, #408]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a28:	4964      	ldr	r1, [pc, #400]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d101      	bne.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002a36:	2301      	movs	r3, #1
 8002a38:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d017      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a46:	4b5d      	ldr	r3, [pc, #372]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	4959      	ldr	r1, [pc, #356]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a56:	4313      	orrs	r3, r2
 8002a58:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a64:	d101      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d101      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002a72:	2301      	movs	r3, #1
 8002a74:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d017      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002a82:	4b4e      	ldr	r3, [pc, #312]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a88:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a90:	494a      	ldr	r1, [pc, #296]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002a92:	4313      	orrs	r3, r2
 8002a94:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002aa0:	d101      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d001      	beq.n	8002ac2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f003 0320 	and.w	r3, r3, #32
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	f000 808b 	beq.w	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad0:	4b3a      	ldr	r3, [pc, #232]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	4a39      	ldr	r2, [pc, #228]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ada:	6413      	str	r3, [r2, #64]	; 0x40
 8002adc:	4b37      	ldr	r3, [pc, #220]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ae8:	4b35      	ldr	r3, [pc, #212]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002aee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002af2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af4:	f7fe ff48 	bl	8001988 <HAL_GetTick>
 8002af8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002afa:	e008      	b.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002afc:	f7fe ff44 	bl	8001988 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b64      	cmp	r3, #100	; 0x64
 8002b08:	d901      	bls.n	8002b0e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e357      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002b0e:	4b2c      	ldr	r3, [pc, #176]	; (8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002b1a:	4b28      	ldr	r3, [pc, #160]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b22:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d035      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d02e      	beq.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002b38:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b40:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002b42:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b46:	4a1d      	ldr	r2, [pc, #116]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b4c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002b4e:	4b1b      	ldr	r3, [pc, #108]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	4a1a      	ldr	r2, [pc, #104]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002b58:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002b5a:	4a18      	ldr	r2, [pc, #96]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002b60:	4b16      	ldr	r3, [pc, #88]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d114      	bne.n	8002b96 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b6c:	f7fe ff0c 	bl	8001988 <HAL_GetTick>
 8002b70:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7fe ff08 	bl	8001988 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e319      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d0ee      	beq.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ba2:	d111      	bne.n	8002bc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ba4:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002bb0:	4b04      	ldr	r3, [pc, #16]	; (8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002bb2:	400b      	ands	r3, r1
 8002bb4:	4901      	ldr	r1, [pc, #4]	; (8002bbc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
 8002bba:	e00b      	b.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002bbc:	40023800 	.word	0x40023800
 8002bc0:	40007000 	.word	0x40007000
 8002bc4:	0ffffcff 	.word	0x0ffffcff
 8002bc8:	4baa      	ldr	r3, [pc, #680]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4aa9      	ldr	r2, [pc, #676]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bce:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002bd2:	6093      	str	r3, [r2, #8]
 8002bd4:	4ba7      	ldr	r3, [pc, #668]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bd6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002be0:	49a4      	ldr	r1, [pc, #656]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d010      	beq.n	8002c14 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002bf2:	4ba0      	ldr	r3, [pc, #640]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bf8:	4a9e      	ldr	r2, [pc, #632]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002bfa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bfe:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002c02:	4b9c      	ldr	r3, [pc, #624]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c04:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c0c:	4999      	ldr	r1, [pc, #612]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00a      	beq.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c20:	4b94      	ldr	r3, [pc, #592]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c26:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c2e:	4991      	ldr	r1, [pc, #580]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c30:	4313      	orrs	r3, r2
 8002c32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d00a      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c42:	4b8c      	ldr	r3, [pc, #560]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c50:	4988      	ldr	r1, [pc, #544]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d00a      	beq.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c64:	4b83      	ldr	r3, [pc, #524]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	4980      	ldr	r1, [pc, #512]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c74:	4313      	orrs	r3, r2
 8002c76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d00a      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002c86:	4b7b      	ldr	r3, [pc, #492]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c8c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c94:	4977      	ldr	r1, [pc, #476]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d00a      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ca8:	4b72      	ldr	r3, [pc, #456]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002caa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cae:	f023 0203 	bic.w	r2, r3, #3
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cb6:	496f      	ldr	r1, [pc, #444]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d00a      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cca:	4b6a      	ldr	r3, [pc, #424]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ccc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd0:	f023 020c 	bic.w	r2, r3, #12
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cd8:	4966      	ldr	r1, [pc, #408]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d00a      	beq.n	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cec:	4b61      	ldr	r3, [pc, #388]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cfa:	495e      	ldr	r1, [pc, #376]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002d0e:	4b59      	ldr	r3, [pc, #356]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d14:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d1c:	4955      	ldr	r1, [pc, #340]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d00a      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d30:	4b50      	ldr	r3, [pc, #320]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d3e:	494d      	ldr	r1, [pc, #308]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d40:	4313      	orrs	r3, r2
 8002d42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00a      	beq.n	8002d68 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002d52:	4b48      	ldr	r3, [pc, #288]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d58:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d60:	4944      	ldr	r1, [pc, #272]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002d74:	4b3f      	ldr	r3, [pc, #252]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d82:	493c      	ldr	r1, [pc, #240]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d84:	4313      	orrs	r3, r2
 8002d86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00a      	beq.n	8002dac <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002d96:	4b37      	ldr	r3, [pc, #220]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002d98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002da4:	4933      	ldr	r1, [pc, #204]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002da6:	4313      	orrs	r3, r2
 8002da8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00a      	beq.n	8002dce <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002db8:	4b2e      	ldr	r3, [pc, #184]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dbe:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc6:	492b      	ldr	r1, [pc, #172]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d011      	beq.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002dda:	4b26      	ldr	r3, [pc, #152]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002de8:	4922      	ldr	r1, [pc, #136]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002df8:	d101      	bne.n	8002dfe <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0308 	and.w	r3, r3, #8
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d001      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e1a:	4b16      	ldr	r3, [pc, #88]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e20:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e28:	4912      	ldr	r1, [pc, #72]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d00b      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e3c:	4b0d      	ldr	r3, [pc, #52]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e42:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e4c:	4909      	ldr	r1, [pc, #36]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d006      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	f000 80d9 	beq.w	800301a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002e68:	4b02      	ldr	r3, [pc, #8]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a01      	ldr	r2, [pc, #4]	; (8002e74 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e72:	e001      	b.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002e74:	40023800 	.word	0x40023800
 8002e78:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e7a:	f7fe fd85 	bl	8001988 <HAL_GetTick>
 8002e7e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e80:	e008      	b.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002e82:	f7fe fd81 	bl	8001988 <HAL_GetTick>
 8002e86:	4602      	mov	r2, r0
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	1ad3      	subs	r3, r2, r3
 8002e8c:	2b64      	cmp	r3, #100	; 0x64
 8002e8e:	d901      	bls.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e90:	2303      	movs	r3, #3
 8002e92:	e194      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002e94:	4b6c      	ldr	r3, [pc, #432]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1f0      	bne.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0301 	and.w	r3, r3, #1
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d021      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d11d      	bne.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002eb4:	4b64      	ldr	r3, [pc, #400]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eba:	0c1b      	lsrs	r3, r3, #16
 8002ebc:	f003 0303 	and.w	r3, r3, #3
 8002ec0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002ec2:	4b61      	ldr	r3, [pc, #388]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ec8:	0e1b      	lsrs	r3, r3, #24
 8002eca:	f003 030f 	and.w	r3, r3, #15
 8002ece:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	019a      	lsls	r2, r3, #6
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	041b      	lsls	r3, r3, #16
 8002eda:	431a      	orrs	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	061b      	lsls	r3, r3, #24
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	071b      	lsls	r3, r3, #28
 8002ee8:	4957      	ldr	r1, [pc, #348]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d004      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f04:	d00a      	beq.n	8002f1c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d02e      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f16:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f1a:	d129      	bne.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002f1c:	4b4a      	ldr	r3, [pc, #296]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f22:	0c1b      	lsrs	r3, r3, #16
 8002f24:	f003 0303 	and.w	r3, r3, #3
 8002f28:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f2a:	4b47      	ldr	r3, [pc, #284]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f30:	0f1b      	lsrs	r3, r3, #28
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	019a      	lsls	r2, r3, #6
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	041b      	lsls	r3, r3, #16
 8002f42:	431a      	orrs	r2, r3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	061b      	lsls	r3, r3, #24
 8002f4a:	431a      	orrs	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	071b      	lsls	r3, r3, #28
 8002f50:	493d      	ldr	r1, [pc, #244]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f52:	4313      	orrs	r3, r2
 8002f54:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002f58:	4b3b      	ldr	r3, [pc, #236]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f5a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f5e:	f023 021f 	bic.w	r2, r3, #31
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f66:	3b01      	subs	r3, #1
 8002f68:	4937      	ldr	r1, [pc, #220]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d01d      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002f7c:	4b32      	ldr	r3, [pc, #200]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f7e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f82:	0e1b      	lsrs	r3, r3, #24
 8002f84:	f003 030f 	and.w	r3, r3, #15
 8002f88:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002f8a:	4b2f      	ldr	r3, [pc, #188]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002f8c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f90:	0f1b      	lsrs	r3, r3, #28
 8002f92:	f003 0307 	and.w	r3, r3, #7
 8002f96:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	019a      	lsls	r2, r3, #6
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	693b      	ldr	r3, [r7, #16]
 8002fa8:	061b      	lsls	r3, r3, #24
 8002faa:	431a      	orrs	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	071b      	lsls	r3, r3, #28
 8002fb0:	4925      	ldr	r1, [pc, #148]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d011      	beq.n	8002fe8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	019a      	lsls	r2, r3, #6
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	041b      	lsls	r3, r3, #16
 8002fd0:	431a      	orrs	r2, r3
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	061b      	lsls	r3, r3, #24
 8002fd8:	431a      	orrs	r2, r3
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	071b      	lsls	r3, r3, #28
 8002fe0:	4919      	ldr	r1, [pc, #100]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002fe8:	4b17      	ldr	r3, [pc, #92]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a16      	ldr	r2, [pc, #88]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ff2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ff4:	f7fe fcc8 	bl	8001988 <HAL_GetTick>
 8002ff8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002ffa:	e008      	b.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002ffc:	f7fe fcc4 	bl	8001988 <HAL_GetTick>
 8003000:	4602      	mov	r2, r0
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	2b64      	cmp	r3, #100	; 0x64
 8003008:	d901      	bls.n	800300e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800300a:	2303      	movs	r3, #3
 800300c:	e0d7      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800300e:	4b0e      	ldr	r3, [pc, #56]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0f0      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	2b01      	cmp	r3, #1
 800301e:	f040 80cd 	bne.w	80031bc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003022:	4b09      	ldr	r3, [pc, #36]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a08      	ldr	r2, [pc, #32]	; (8003048 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800302c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800302e:	f7fe fcab 	bl	8001988 <HAL_GetTick>
 8003032:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003034:	e00a      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003036:	f7fe fca7 	bl	8001988 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b64      	cmp	r3, #100	; 0x64
 8003042:	d903      	bls.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e0ba      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003048:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800304c:	4b5e      	ldr	r3, [pc, #376]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003054:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003058:	d0ed      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d003      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306a:	2b00      	cmp	r3, #0
 800306c:	d009      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003076:	2b00      	cmp	r3, #0
 8003078:	d02e      	beq.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d12a      	bne.n	80030d8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003082:	4b51      	ldr	r3, [pc, #324]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003084:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003088:	0c1b      	lsrs	r3, r3, #16
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003090:	4b4d      	ldr	r3, [pc, #308]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003092:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003096:	0f1b      	lsrs	r3, r3, #28
 8003098:	f003 0307 	and.w	r3, r3, #7
 800309c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	019a      	lsls	r2, r3, #6
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	041b      	lsls	r3, r3, #16
 80030a8:	431a      	orrs	r2, r3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	061b      	lsls	r3, r3, #24
 80030b0:	431a      	orrs	r2, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	071b      	lsls	r3, r3, #28
 80030b6:	4944      	ldr	r1, [pc, #272]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80030be:	4b42      	ldr	r3, [pc, #264]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030cc:	3b01      	subs	r3, #1
 80030ce:	021b      	lsls	r3, r3, #8
 80030d0:	493d      	ldr	r1, [pc, #244]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030d2:	4313      	orrs	r3, r2
 80030d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d022      	beq.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80030e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030ec:	d11d      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80030ee:	4b36      	ldr	r3, [pc, #216]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f4:	0e1b      	lsrs	r3, r3, #24
 80030f6:	f003 030f 	and.w	r3, r3, #15
 80030fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80030fc:	4b32      	ldr	r3, [pc, #200]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80030fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003102:	0f1b      	lsrs	r3, r3, #28
 8003104:	f003 0307 	and.w	r3, r3, #7
 8003108:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	695b      	ldr	r3, [r3, #20]
 800310e:	019a      	lsls	r2, r3, #6
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a1b      	ldr	r3, [r3, #32]
 8003114:	041b      	lsls	r3, r3, #16
 8003116:	431a      	orrs	r2, r3
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	061b      	lsls	r3, r3, #24
 800311c:	431a      	orrs	r2, r3
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	071b      	lsls	r3, r3, #28
 8003122:	4929      	ldr	r1, [pc, #164]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003124:	4313      	orrs	r3, r2
 8003126:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d028      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003136:	4b24      	ldr	r3, [pc, #144]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003138:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800313c:	0e1b      	lsrs	r3, r3, #24
 800313e:	f003 030f 	and.w	r3, r3, #15
 8003142:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003144:	4b20      	ldr	r3, [pc, #128]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800314a:	0c1b      	lsrs	r3, r3, #16
 800314c:	f003 0303 	and.w	r3, r3, #3
 8003150:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	695b      	ldr	r3, [r3, #20]
 8003156:	019a      	lsls	r2, r3, #6
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	041b      	lsls	r3, r3, #16
 800315c:	431a      	orrs	r2, r3
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	061b      	lsls	r3, r3, #24
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
 8003168:	071b      	lsls	r3, r3, #28
 800316a:	4917      	ldr	r1, [pc, #92]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316c:	4313      	orrs	r3, r2
 800316e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003172:	4b15      	ldr	r3, [pc, #84]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003180:	4911      	ldr	r1, [pc, #68]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003182:	4313      	orrs	r3, r2
 8003184:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003188:	4b0f      	ldr	r3, [pc, #60]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a0e      	ldr	r2, [pc, #56]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800318e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003194:	f7fe fbf8 	bl	8001988 <HAL_GetTick>
 8003198:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800319c:	f7fe fbf4 	bl	8001988 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b64      	cmp	r3, #100	; 0x64
 80031a8:	d901      	bls.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e007      	b.n	80031be <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80031ae:	4b06      	ldr	r3, [pc, #24]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80031ba:	d1ef      	bne.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	4618      	mov	r0, r3
 80031c0:	3720      	adds	r7, #32
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bd80      	pop	{r7, pc}
 80031c6:	bf00      	nop
 80031c8:	40023800 	.word	0x40023800

080031cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e040      	b.n	8003260 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d106      	bne.n	80031f4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031ee:	6878      	ldr	r0, [r7, #4]
 80031f0:	f7fe faf0 	bl	80017d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2224      	movs	r2, #36	; 0x24
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0201 	bic.w	r2, r2, #1
 8003208:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800320a:	6878      	ldr	r0, [r7, #4]
 800320c:	f000 f974 	bl	80034f8 <UART_SetConfig>
 8003210:	4603      	mov	r3, r0
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e022      	b.n	8003260 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321e:	2b00      	cmp	r3, #0
 8003220:	d002      	beq.n	8003228 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f000 fbcc 	bl	80039c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	685a      	ldr	r2, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003236:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689a      	ldr	r2, [r3, #8]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003246:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f042 0201 	orr.w	r2, r2, #1
 8003256:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 fc53 	bl	8003b04 <UART_CheckIdleState>
 800325e:	4603      	mov	r3, r0
}
 8003260:	4618      	mov	r0, r3
 8003262:	3708      	adds	r7, #8
 8003264:	46bd      	mov	sp, r7
 8003266:	bd80      	pop	{r7, pc}

08003268 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08a      	sub	sp, #40	; 0x28
 800326c:	af02      	add	r7, sp, #8
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	603b      	str	r3, [r7, #0]
 8003274:	4613      	mov	r3, r2
 8003276:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800327c:	2b20      	cmp	r3, #32
 800327e:	d171      	bne.n	8003364 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003280:	68bb      	ldr	r3, [r7, #8]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d002      	beq.n	800328c <HAL_UART_Transmit+0x24>
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d101      	bne.n	8003290 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e06a      	b.n	8003366 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	2200      	movs	r2, #0
 8003294:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2221      	movs	r2, #33	; 0x21
 800329c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800329e:	f7fe fb73 	bl	8001988 <HAL_GetTick>
 80032a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	88fa      	ldrh	r2, [r7, #6]
 80032a8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	88fa      	ldrh	r2, [r7, #6]
 80032b0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	689b      	ldr	r3, [r3, #8]
 80032b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80032bc:	d108      	bne.n	80032d0 <HAL_UART_Transmit+0x68>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	691b      	ldr	r3, [r3, #16]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d104      	bne.n	80032d0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80032c6:	2300      	movs	r3, #0
 80032c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	61bb      	str	r3, [r7, #24]
 80032ce:	e003      	b.n	80032d8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80032d8:	e02c      	b.n	8003334 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	2200      	movs	r2, #0
 80032e2:	2180      	movs	r1, #128	; 0x80
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	f000 fc44 	bl	8003b72 <UART_WaitOnFlagUntilTimeout>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d001      	beq.n	80032f4 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e038      	b.n	8003366 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d10b      	bne.n	8003312 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80032fa:	69bb      	ldr	r3, [r7, #24]
 80032fc:	881b      	ldrh	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003308:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	3302      	adds	r3, #2
 800330e:	61bb      	str	r3, [r7, #24]
 8003310:	e007      	b.n	8003322 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003312:	69fb      	ldr	r3, [r7, #28]
 8003314:	781a      	ldrb	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800331c:	69fb      	ldr	r3, [r7, #28]
 800331e:	3301      	adds	r3, #1
 8003320:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003328:	b29b      	uxth	r3, r3
 800332a:	3b01      	subs	r3, #1
 800332c:	b29a      	uxth	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d1cc      	bne.n	80032da <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	9300      	str	r3, [sp, #0]
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fc11 	bl	8003b72 <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e005      	b.n	8003366 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2220      	movs	r2, #32
 800335e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003360:	2300      	movs	r3, #0
 8003362:	e000      	b.n	8003366 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003364:	2302      	movs	r3, #2
  }
}
 8003366:	4618      	mov	r0, r3
 8003368:	3720      	adds	r7, #32
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}

0800336e <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800336e:	b580      	push	{r7, lr}
 8003370:	b08a      	sub	sp, #40	; 0x28
 8003372:	af02      	add	r7, sp, #8
 8003374:	60f8      	str	r0, [r7, #12]
 8003376:	60b9      	str	r1, [r7, #8]
 8003378:	603b      	str	r3, [r7, #0]
 800337a:	4613      	mov	r3, r2
 800337c:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003384:	2b20      	cmp	r3, #32
 8003386:	f040 80b1 	bne.w	80034ec <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d002      	beq.n	8003396 <HAL_UART_Receive+0x28>
 8003390:	88fb      	ldrh	r3, [r7, #6]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d101      	bne.n	800339a <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e0a9      	b.n	80034ee <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2200      	movs	r2, #0
 800339e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2222      	movs	r2, #34	; 0x22
 80033a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033b0:	f7fe faea 	bl	8001988 <HAL_GetTick>
 80033b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	88fa      	ldrh	r2, [r7, #6]
 80033c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d10e      	bne.n	80033ee <HAL_UART_Receive+0x80>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	691b      	ldr	r3, [r3, #16]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d105      	bne.n	80033e4 <HAL_UART_Receive+0x76>
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80033de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033e2:	e02d      	b.n	8003440 <HAL_UART_Receive+0xd2>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	22ff      	movs	r2, #255	; 0xff
 80033e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033ec:	e028      	b.n	8003440 <HAL_UART_Receive+0xd2>
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d10d      	bne.n	8003412 <HAL_UART_Receive+0xa4>
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d104      	bne.n	8003408 <HAL_UART_Receive+0x9a>
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	22ff      	movs	r2, #255	; 0xff
 8003402:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003406:	e01b      	b.n	8003440 <HAL_UART_Receive+0xd2>
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	227f      	movs	r2, #127	; 0x7f
 800340c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003410:	e016      	b.n	8003440 <HAL_UART_Receive+0xd2>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800341a:	d10d      	bne.n	8003438 <HAL_UART_Receive+0xca>
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d104      	bne.n	800342e <HAL_UART_Receive+0xc0>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	227f      	movs	r2, #127	; 0x7f
 8003428:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800342c:	e008      	b.n	8003440 <HAL_UART_Receive+0xd2>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	223f      	movs	r2, #63	; 0x3f
 8003432:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003436:	e003      	b.n	8003440 <HAL_UART_Receive+0xd2>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003446:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003450:	d108      	bne.n	8003464 <HAL_UART_Receive+0xf6>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800346c:	e032      	b.n	80034d4 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	2120      	movs	r1, #32
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 fb7a 	bl	8003b72 <UART_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d001      	beq.n	8003488 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003484:	2303      	movs	r3, #3
 8003486:	e032      	b.n	80034ee <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d10c      	bne.n	80034a8 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003494:	b29a      	uxth	r2, r3
 8003496:	8a7b      	ldrh	r3, [r7, #18]
 8003498:	4013      	ands	r3, r2
 800349a:	b29a      	uxth	r2, r3
 800349c:	69bb      	ldr	r3, [r7, #24]
 800349e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80034a0:	69bb      	ldr	r3, [r7, #24]
 80034a2:	3302      	adds	r3, #2
 80034a4:	61bb      	str	r3, [r7, #24]
 80034a6:	e00c      	b.n	80034c2 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	8a7b      	ldrh	r3, [r7, #18]
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	4013      	ands	r3, r2
 80034b6:	b2da      	uxtb	r2, r3
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80034bc:	69fb      	ldr	r3, [r7, #28]
 80034be:	3301      	adds	r3, #1
 80034c0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034c8:	b29b      	uxth	r3, r3
 80034ca:	3b01      	subs	r3, #1
 80034cc:	b29a      	uxth	r2, r3
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034da:	b29b      	uxth	r3, r3
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d1c6      	bne.n	800346e <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2220      	movs	r2, #32
 80034e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 80034e8:	2300      	movs	r3, #0
 80034ea:	e000      	b.n	80034ee <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 80034ec:	2302      	movs	r3, #2
  }
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
	...

080034f8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b088      	sub	sp, #32
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003500:	2300      	movs	r3, #0
 8003502:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	695b      	ldr	r3, [r3, #20]
 8003512:	431a      	orrs	r2, r3
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	69db      	ldr	r3, [r3, #28]
 8003518:	4313      	orrs	r3, r2
 800351a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	4ba6      	ldr	r3, [pc, #664]	; (80037bc <UART_SetConfig+0x2c4>)
 8003524:	4013      	ands	r3, r2
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	6812      	ldr	r2, [r2, #0]
 800352a:	6979      	ldr	r1, [r7, #20]
 800352c:	430b      	orrs	r3, r1
 800352e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	430a      	orrs	r2, r1
 8003544:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	699b      	ldr	r3, [r3, #24]
 800354a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	697a      	ldr	r2, [r7, #20]
 8003552:	4313      	orrs	r3, r2
 8003554:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	430a      	orrs	r2, r1
 8003568:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a94      	ldr	r2, [pc, #592]	; (80037c0 <UART_SetConfig+0x2c8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d120      	bne.n	80035b6 <UART_SetConfig+0xbe>
 8003574:	4b93      	ldr	r3, [pc, #588]	; (80037c4 <UART_SetConfig+0x2cc>)
 8003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800357a:	f003 0303 	and.w	r3, r3, #3
 800357e:	2b03      	cmp	r3, #3
 8003580:	d816      	bhi.n	80035b0 <UART_SetConfig+0xb8>
 8003582:	a201      	add	r2, pc, #4	; (adr r2, 8003588 <UART_SetConfig+0x90>)
 8003584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003588:	08003599 	.word	0x08003599
 800358c:	080035a5 	.word	0x080035a5
 8003590:	0800359f 	.word	0x0800359f
 8003594:	080035ab 	.word	0x080035ab
 8003598:	2301      	movs	r3, #1
 800359a:	77fb      	strb	r3, [r7, #31]
 800359c:	e150      	b.n	8003840 <UART_SetConfig+0x348>
 800359e:	2302      	movs	r3, #2
 80035a0:	77fb      	strb	r3, [r7, #31]
 80035a2:	e14d      	b.n	8003840 <UART_SetConfig+0x348>
 80035a4:	2304      	movs	r3, #4
 80035a6:	77fb      	strb	r3, [r7, #31]
 80035a8:	e14a      	b.n	8003840 <UART_SetConfig+0x348>
 80035aa:	2308      	movs	r3, #8
 80035ac:	77fb      	strb	r3, [r7, #31]
 80035ae:	e147      	b.n	8003840 <UART_SetConfig+0x348>
 80035b0:	2310      	movs	r3, #16
 80035b2:	77fb      	strb	r3, [r7, #31]
 80035b4:	e144      	b.n	8003840 <UART_SetConfig+0x348>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a83      	ldr	r2, [pc, #524]	; (80037c8 <UART_SetConfig+0x2d0>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d132      	bne.n	8003626 <UART_SetConfig+0x12e>
 80035c0:	4b80      	ldr	r3, [pc, #512]	; (80037c4 <UART_SetConfig+0x2cc>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f003 030c 	and.w	r3, r3, #12
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d828      	bhi.n	8003620 <UART_SetConfig+0x128>
 80035ce:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <UART_SetConfig+0xdc>)
 80035d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d4:	08003609 	.word	0x08003609
 80035d8:	08003621 	.word	0x08003621
 80035dc:	08003621 	.word	0x08003621
 80035e0:	08003621 	.word	0x08003621
 80035e4:	08003615 	.word	0x08003615
 80035e8:	08003621 	.word	0x08003621
 80035ec:	08003621 	.word	0x08003621
 80035f0:	08003621 	.word	0x08003621
 80035f4:	0800360f 	.word	0x0800360f
 80035f8:	08003621 	.word	0x08003621
 80035fc:	08003621 	.word	0x08003621
 8003600:	08003621 	.word	0x08003621
 8003604:	0800361b 	.word	0x0800361b
 8003608:	2300      	movs	r3, #0
 800360a:	77fb      	strb	r3, [r7, #31]
 800360c:	e118      	b.n	8003840 <UART_SetConfig+0x348>
 800360e:	2302      	movs	r3, #2
 8003610:	77fb      	strb	r3, [r7, #31]
 8003612:	e115      	b.n	8003840 <UART_SetConfig+0x348>
 8003614:	2304      	movs	r3, #4
 8003616:	77fb      	strb	r3, [r7, #31]
 8003618:	e112      	b.n	8003840 <UART_SetConfig+0x348>
 800361a:	2308      	movs	r3, #8
 800361c:	77fb      	strb	r3, [r7, #31]
 800361e:	e10f      	b.n	8003840 <UART_SetConfig+0x348>
 8003620:	2310      	movs	r3, #16
 8003622:	77fb      	strb	r3, [r7, #31]
 8003624:	e10c      	b.n	8003840 <UART_SetConfig+0x348>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a68      	ldr	r2, [pc, #416]	; (80037cc <UART_SetConfig+0x2d4>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d120      	bne.n	8003672 <UART_SetConfig+0x17a>
 8003630:	4b64      	ldr	r3, [pc, #400]	; (80037c4 <UART_SetConfig+0x2cc>)
 8003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003636:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800363a:	2b30      	cmp	r3, #48	; 0x30
 800363c:	d013      	beq.n	8003666 <UART_SetConfig+0x16e>
 800363e:	2b30      	cmp	r3, #48	; 0x30
 8003640:	d814      	bhi.n	800366c <UART_SetConfig+0x174>
 8003642:	2b20      	cmp	r3, #32
 8003644:	d009      	beq.n	800365a <UART_SetConfig+0x162>
 8003646:	2b20      	cmp	r3, #32
 8003648:	d810      	bhi.n	800366c <UART_SetConfig+0x174>
 800364a:	2b00      	cmp	r3, #0
 800364c:	d002      	beq.n	8003654 <UART_SetConfig+0x15c>
 800364e:	2b10      	cmp	r3, #16
 8003650:	d006      	beq.n	8003660 <UART_SetConfig+0x168>
 8003652:	e00b      	b.n	800366c <UART_SetConfig+0x174>
 8003654:	2300      	movs	r3, #0
 8003656:	77fb      	strb	r3, [r7, #31]
 8003658:	e0f2      	b.n	8003840 <UART_SetConfig+0x348>
 800365a:	2302      	movs	r3, #2
 800365c:	77fb      	strb	r3, [r7, #31]
 800365e:	e0ef      	b.n	8003840 <UART_SetConfig+0x348>
 8003660:	2304      	movs	r3, #4
 8003662:	77fb      	strb	r3, [r7, #31]
 8003664:	e0ec      	b.n	8003840 <UART_SetConfig+0x348>
 8003666:	2308      	movs	r3, #8
 8003668:	77fb      	strb	r3, [r7, #31]
 800366a:	e0e9      	b.n	8003840 <UART_SetConfig+0x348>
 800366c:	2310      	movs	r3, #16
 800366e:	77fb      	strb	r3, [r7, #31]
 8003670:	e0e6      	b.n	8003840 <UART_SetConfig+0x348>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a56      	ldr	r2, [pc, #344]	; (80037d0 <UART_SetConfig+0x2d8>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d120      	bne.n	80036be <UART_SetConfig+0x1c6>
 800367c:	4b51      	ldr	r3, [pc, #324]	; (80037c4 <UART_SetConfig+0x2cc>)
 800367e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003682:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003686:	2bc0      	cmp	r3, #192	; 0xc0
 8003688:	d013      	beq.n	80036b2 <UART_SetConfig+0x1ba>
 800368a:	2bc0      	cmp	r3, #192	; 0xc0
 800368c:	d814      	bhi.n	80036b8 <UART_SetConfig+0x1c0>
 800368e:	2b80      	cmp	r3, #128	; 0x80
 8003690:	d009      	beq.n	80036a6 <UART_SetConfig+0x1ae>
 8003692:	2b80      	cmp	r3, #128	; 0x80
 8003694:	d810      	bhi.n	80036b8 <UART_SetConfig+0x1c0>
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <UART_SetConfig+0x1a8>
 800369a:	2b40      	cmp	r3, #64	; 0x40
 800369c:	d006      	beq.n	80036ac <UART_SetConfig+0x1b4>
 800369e:	e00b      	b.n	80036b8 <UART_SetConfig+0x1c0>
 80036a0:	2300      	movs	r3, #0
 80036a2:	77fb      	strb	r3, [r7, #31]
 80036a4:	e0cc      	b.n	8003840 <UART_SetConfig+0x348>
 80036a6:	2302      	movs	r3, #2
 80036a8:	77fb      	strb	r3, [r7, #31]
 80036aa:	e0c9      	b.n	8003840 <UART_SetConfig+0x348>
 80036ac:	2304      	movs	r3, #4
 80036ae:	77fb      	strb	r3, [r7, #31]
 80036b0:	e0c6      	b.n	8003840 <UART_SetConfig+0x348>
 80036b2:	2308      	movs	r3, #8
 80036b4:	77fb      	strb	r3, [r7, #31]
 80036b6:	e0c3      	b.n	8003840 <UART_SetConfig+0x348>
 80036b8:	2310      	movs	r3, #16
 80036ba:	77fb      	strb	r3, [r7, #31]
 80036bc:	e0c0      	b.n	8003840 <UART_SetConfig+0x348>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a44      	ldr	r2, [pc, #272]	; (80037d4 <UART_SetConfig+0x2dc>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d125      	bne.n	8003714 <UART_SetConfig+0x21c>
 80036c8:	4b3e      	ldr	r3, [pc, #248]	; (80037c4 <UART_SetConfig+0x2cc>)
 80036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036d6:	d017      	beq.n	8003708 <UART_SetConfig+0x210>
 80036d8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80036dc:	d817      	bhi.n	800370e <UART_SetConfig+0x216>
 80036de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e2:	d00b      	beq.n	80036fc <UART_SetConfig+0x204>
 80036e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036e8:	d811      	bhi.n	800370e <UART_SetConfig+0x216>
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <UART_SetConfig+0x1fe>
 80036ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036f2:	d006      	beq.n	8003702 <UART_SetConfig+0x20a>
 80036f4:	e00b      	b.n	800370e <UART_SetConfig+0x216>
 80036f6:	2300      	movs	r3, #0
 80036f8:	77fb      	strb	r3, [r7, #31]
 80036fa:	e0a1      	b.n	8003840 <UART_SetConfig+0x348>
 80036fc:	2302      	movs	r3, #2
 80036fe:	77fb      	strb	r3, [r7, #31]
 8003700:	e09e      	b.n	8003840 <UART_SetConfig+0x348>
 8003702:	2304      	movs	r3, #4
 8003704:	77fb      	strb	r3, [r7, #31]
 8003706:	e09b      	b.n	8003840 <UART_SetConfig+0x348>
 8003708:	2308      	movs	r3, #8
 800370a:	77fb      	strb	r3, [r7, #31]
 800370c:	e098      	b.n	8003840 <UART_SetConfig+0x348>
 800370e:	2310      	movs	r3, #16
 8003710:	77fb      	strb	r3, [r7, #31]
 8003712:	e095      	b.n	8003840 <UART_SetConfig+0x348>
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2f      	ldr	r2, [pc, #188]	; (80037d8 <UART_SetConfig+0x2e0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d125      	bne.n	800376a <UART_SetConfig+0x272>
 800371e:	4b29      	ldr	r3, [pc, #164]	; (80037c4 <UART_SetConfig+0x2cc>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003728:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800372c:	d017      	beq.n	800375e <UART_SetConfig+0x266>
 800372e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003732:	d817      	bhi.n	8003764 <UART_SetConfig+0x26c>
 8003734:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003738:	d00b      	beq.n	8003752 <UART_SetConfig+0x25a>
 800373a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800373e:	d811      	bhi.n	8003764 <UART_SetConfig+0x26c>
 8003740:	2b00      	cmp	r3, #0
 8003742:	d003      	beq.n	800374c <UART_SetConfig+0x254>
 8003744:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003748:	d006      	beq.n	8003758 <UART_SetConfig+0x260>
 800374a:	e00b      	b.n	8003764 <UART_SetConfig+0x26c>
 800374c:	2301      	movs	r3, #1
 800374e:	77fb      	strb	r3, [r7, #31]
 8003750:	e076      	b.n	8003840 <UART_SetConfig+0x348>
 8003752:	2302      	movs	r3, #2
 8003754:	77fb      	strb	r3, [r7, #31]
 8003756:	e073      	b.n	8003840 <UART_SetConfig+0x348>
 8003758:	2304      	movs	r3, #4
 800375a:	77fb      	strb	r3, [r7, #31]
 800375c:	e070      	b.n	8003840 <UART_SetConfig+0x348>
 800375e:	2308      	movs	r3, #8
 8003760:	77fb      	strb	r3, [r7, #31]
 8003762:	e06d      	b.n	8003840 <UART_SetConfig+0x348>
 8003764:	2310      	movs	r3, #16
 8003766:	77fb      	strb	r3, [r7, #31]
 8003768:	e06a      	b.n	8003840 <UART_SetConfig+0x348>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1b      	ldr	r2, [pc, #108]	; (80037dc <UART_SetConfig+0x2e4>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d138      	bne.n	80037e6 <UART_SetConfig+0x2ee>
 8003774:	4b13      	ldr	r3, [pc, #76]	; (80037c4 <UART_SetConfig+0x2cc>)
 8003776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800377a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800377e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003782:	d017      	beq.n	80037b4 <UART_SetConfig+0x2bc>
 8003784:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003788:	d82a      	bhi.n	80037e0 <UART_SetConfig+0x2e8>
 800378a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800378e:	d00b      	beq.n	80037a8 <UART_SetConfig+0x2b0>
 8003790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003794:	d824      	bhi.n	80037e0 <UART_SetConfig+0x2e8>
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <UART_SetConfig+0x2aa>
 800379a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800379e:	d006      	beq.n	80037ae <UART_SetConfig+0x2b6>
 80037a0:	e01e      	b.n	80037e0 <UART_SetConfig+0x2e8>
 80037a2:	2300      	movs	r3, #0
 80037a4:	77fb      	strb	r3, [r7, #31]
 80037a6:	e04b      	b.n	8003840 <UART_SetConfig+0x348>
 80037a8:	2302      	movs	r3, #2
 80037aa:	77fb      	strb	r3, [r7, #31]
 80037ac:	e048      	b.n	8003840 <UART_SetConfig+0x348>
 80037ae:	2304      	movs	r3, #4
 80037b0:	77fb      	strb	r3, [r7, #31]
 80037b2:	e045      	b.n	8003840 <UART_SetConfig+0x348>
 80037b4:	2308      	movs	r3, #8
 80037b6:	77fb      	strb	r3, [r7, #31]
 80037b8:	e042      	b.n	8003840 <UART_SetConfig+0x348>
 80037ba:	bf00      	nop
 80037bc:	efff69f3 	.word	0xefff69f3
 80037c0:	40011000 	.word	0x40011000
 80037c4:	40023800 	.word	0x40023800
 80037c8:	40004400 	.word	0x40004400
 80037cc:	40004800 	.word	0x40004800
 80037d0:	40004c00 	.word	0x40004c00
 80037d4:	40005000 	.word	0x40005000
 80037d8:	40011400 	.word	0x40011400
 80037dc:	40007800 	.word	0x40007800
 80037e0:	2310      	movs	r3, #16
 80037e2:	77fb      	strb	r3, [r7, #31]
 80037e4:	e02c      	b.n	8003840 <UART_SetConfig+0x348>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a72      	ldr	r2, [pc, #456]	; (80039b4 <UART_SetConfig+0x4bc>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d125      	bne.n	800383c <UART_SetConfig+0x344>
 80037f0:	4b71      	ldr	r3, [pc, #452]	; (80039b8 <UART_SetConfig+0x4c0>)
 80037f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80037f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80037fa:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80037fe:	d017      	beq.n	8003830 <UART_SetConfig+0x338>
 8003800:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003804:	d817      	bhi.n	8003836 <UART_SetConfig+0x33e>
 8003806:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800380a:	d00b      	beq.n	8003824 <UART_SetConfig+0x32c>
 800380c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003810:	d811      	bhi.n	8003836 <UART_SetConfig+0x33e>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <UART_SetConfig+0x326>
 8003816:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800381a:	d006      	beq.n	800382a <UART_SetConfig+0x332>
 800381c:	e00b      	b.n	8003836 <UART_SetConfig+0x33e>
 800381e:	2300      	movs	r3, #0
 8003820:	77fb      	strb	r3, [r7, #31]
 8003822:	e00d      	b.n	8003840 <UART_SetConfig+0x348>
 8003824:	2302      	movs	r3, #2
 8003826:	77fb      	strb	r3, [r7, #31]
 8003828:	e00a      	b.n	8003840 <UART_SetConfig+0x348>
 800382a:	2304      	movs	r3, #4
 800382c:	77fb      	strb	r3, [r7, #31]
 800382e:	e007      	b.n	8003840 <UART_SetConfig+0x348>
 8003830:	2308      	movs	r3, #8
 8003832:	77fb      	strb	r3, [r7, #31]
 8003834:	e004      	b.n	8003840 <UART_SetConfig+0x348>
 8003836:	2310      	movs	r3, #16
 8003838:	77fb      	strb	r3, [r7, #31]
 800383a:	e001      	b.n	8003840 <UART_SetConfig+0x348>
 800383c:	2310      	movs	r3, #16
 800383e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	69db      	ldr	r3, [r3, #28]
 8003844:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003848:	d15b      	bne.n	8003902 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800384a:	7ffb      	ldrb	r3, [r7, #31]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d828      	bhi.n	80038a2 <UART_SetConfig+0x3aa>
 8003850:	a201      	add	r2, pc, #4	; (adr r2, 8003858 <UART_SetConfig+0x360>)
 8003852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003856:	bf00      	nop
 8003858:	0800387d 	.word	0x0800387d
 800385c:	08003885 	.word	0x08003885
 8003860:	0800388d 	.word	0x0800388d
 8003864:	080038a3 	.word	0x080038a3
 8003868:	08003893 	.word	0x08003893
 800386c:	080038a3 	.word	0x080038a3
 8003870:	080038a3 	.word	0x080038a3
 8003874:	080038a3 	.word	0x080038a3
 8003878:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800387c:	f7ff f88e 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003880:	61b8      	str	r0, [r7, #24]
        break;
 8003882:	e013      	b.n	80038ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003884:	f7ff f89e 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003888:	61b8      	str	r0, [r7, #24]
        break;
 800388a:	e00f      	b.n	80038ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b4b      	ldr	r3, [pc, #300]	; (80039bc <UART_SetConfig+0x4c4>)
 800388e:	61bb      	str	r3, [r7, #24]
        break;
 8003890:	e00c      	b.n	80038ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe ff71 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 8003896:	61b8      	str	r0, [r7, #24]
        break;
 8003898:	e008      	b.n	80038ac <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	61bb      	str	r3, [r7, #24]
        break;
 80038a0:	e004      	b.n	80038ac <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	77bb      	strb	r3, [r7, #30]
        break;
 80038aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ac:	69bb      	ldr	r3, [r7, #24]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d074      	beq.n	800399c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b2:	69bb      	ldr	r3, [r7, #24]
 80038b4:	005a      	lsls	r2, r3, #1
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	441a      	add	r2, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	2b0f      	cmp	r3, #15
 80038cc:	d916      	bls.n	80038fc <UART_SetConfig+0x404>
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d4:	d212      	bcs.n	80038fc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	b29b      	uxth	r3, r3
 80038da:	f023 030f 	bic.w	r3, r3, #15
 80038de:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	085b      	lsrs	r3, r3, #1
 80038e4:	b29b      	uxth	r3, r3
 80038e6:	f003 0307 	and.w	r3, r3, #7
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	89fb      	ldrh	r3, [r7, #14]
 80038ee:	4313      	orrs	r3, r2
 80038f0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	89fa      	ldrh	r2, [r7, #14]
 80038f8:	60da      	str	r2, [r3, #12]
 80038fa:	e04f      	b.n	800399c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	77bb      	strb	r3, [r7, #30]
 8003900:	e04c      	b.n	800399c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003902:	7ffb      	ldrb	r3, [r7, #31]
 8003904:	2b08      	cmp	r3, #8
 8003906:	d828      	bhi.n	800395a <UART_SetConfig+0x462>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <UART_SetConfig+0x418>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003935 	.word	0x08003935
 8003914:	0800393d 	.word	0x0800393d
 8003918:	08003945 	.word	0x08003945
 800391c:	0800395b 	.word	0x0800395b
 8003920:	0800394b 	.word	0x0800394b
 8003924:	0800395b 	.word	0x0800395b
 8003928:	0800395b 	.word	0x0800395b
 800392c:	0800395b 	.word	0x0800395b
 8003930:	08003953 	.word	0x08003953
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003934:	f7ff f832 	bl	800299c <HAL_RCC_GetPCLK1Freq>
 8003938:	61b8      	str	r0, [r7, #24]
        break;
 800393a:	e013      	b.n	8003964 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800393c:	f7ff f842 	bl	80029c4 <HAL_RCC_GetPCLK2Freq>
 8003940:	61b8      	str	r0, [r7, #24]
        break;
 8003942:	e00f      	b.n	8003964 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b1d      	ldr	r3, [pc, #116]	; (80039bc <UART_SetConfig+0x4c4>)
 8003946:	61bb      	str	r3, [r7, #24]
        break;
 8003948:	e00c      	b.n	8003964 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe ff15 	bl	8002778 <HAL_RCC_GetSysClockFreq>
 800394e:	61b8      	str	r0, [r7, #24]
        break;
 8003950:	e008      	b.n	8003964 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003952:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003956:	61bb      	str	r3, [r7, #24]
        break;
 8003958:	e004      	b.n	8003964 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	77bb      	strb	r3, [r7, #30]
        break;
 8003962:	bf00      	nop
    }

    if (pclk != 0U)
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d018      	beq.n	800399c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	085a      	lsrs	r2, r3, #1
 8003970:	69bb      	ldr	r3, [r7, #24]
 8003972:	441a      	add	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	fbb2 f3f3 	udiv	r3, r2, r3
 800397c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	2b0f      	cmp	r3, #15
 8003982:	d909      	bls.n	8003998 <UART_SetConfig+0x4a0>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800398a:	d205      	bcs.n	8003998 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	b29a      	uxth	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	60da      	str	r2, [r3, #12]
 8003996:	e001      	b.n	800399c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2200      	movs	r2, #0
 80039a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039a8:	7fbb      	ldrb	r3, [r7, #30]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3720      	adds	r7, #32
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	40007c00 	.word	0x40007c00
 80039b8:	40023800 	.word	0x40023800
 80039bc:	00f42400 	.word	0x00f42400

080039c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	430a      	orrs	r2, r1
 80039e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ee:	f003 0302 	and.w	r3, r3, #2
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00a      	beq.n	8003a2e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a32:	f003 0308 	and.w	r3, r3, #8
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00a      	beq.n	8003a50 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	f003 0310 	and.w	r3, r3, #16
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00a      	beq.n	8003a72 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d00a      	beq.n	8003a94 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	430a      	orrs	r2, r1
 8003a92:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d01a      	beq.n	8003ad6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	430a      	orrs	r2, r1
 8003ab4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003abe:	d10a      	bne.n	8003ad6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	685b      	ldr	r3, [r3, #4]
 8003ac6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	430a      	orrs	r2, r1
 8003ad4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00a      	beq.n	8003af8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	430a      	orrs	r2, r1
 8003af6:	605a      	str	r2, [r3, #4]
  }
}
 8003af8:	bf00      	nop
 8003afa:	370c      	adds	r7, #12
 8003afc:	46bd      	mov	sp, r7
 8003afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b02:	4770      	bx	lr

08003b04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b086      	sub	sp, #24
 8003b08:	af02      	add	r7, sp, #8
 8003b0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b14:	f7fd ff38 	bl	8001988 <HAL_GetTick>
 8003b18:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f003 0308 	and.w	r3, r3, #8
 8003b24:	2b08      	cmp	r3, #8
 8003b26:	d10e      	bne.n	8003b46 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2200      	movs	r2, #0
 8003b32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f81b 	bl	8003b72 <UART_WaitOnFlagUntilTimeout>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d001      	beq.n	8003b46 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b42:	2303      	movs	r3, #3
 8003b44:	e011      	b.n	8003b6a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2220      	movs	r2, #32
 8003b4a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b68:	2300      	movs	r3, #0
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3710      	adds	r7, #16
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}

08003b72 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b72:	b580      	push	{r7, lr}
 8003b74:	b09c      	sub	sp, #112	; 0x70
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	60f8      	str	r0, [r7, #12]
 8003b7a:	60b9      	str	r1, [r7, #8]
 8003b7c:	603b      	str	r3, [r7, #0]
 8003b7e:	4613      	mov	r3, r2
 8003b80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b82:	e0a7      	b.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	f000 80a3 	beq.w	8003cd4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b8e:	f7fd fefb 	bl	8001988 <HAL_GetTick>
 8003b92:	4602      	mov	r2, r0
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1ad3      	subs	r3, r2, r3
 8003b98:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b9e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d13f      	bne.n	8003c24 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bb4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003bb8:	667b      	str	r3, [r7, #100]	; 0x64
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bc2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bc4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bc8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	663b      	str	r3, [r7, #96]	; 0x60
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bf6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bf8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bfc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c04:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e5      	bne.n	8003bd6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	2220      	movs	r2, #32
 8003c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e068      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0304 	and.w	r3, r3, #4
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d050      	beq.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c40:	d148      	bne.n	8003cd4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c4a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c54:	e853 3f00 	ldrex	r3, [r3]
 8003c58:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c60:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c6c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c6e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c72:	e841 2300 	strex	r3, r2, [r1]
 8003c76:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d1e6      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	3308      	adds	r3, #8
 8003c84:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	e853 3f00 	ldrex	r3, [r3]
 8003c8c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	f023 0301 	bic.w	r3, r3, #1
 8003c94:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	3308      	adds	r3, #8
 8003c9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c9e:	623a      	str	r2, [r7, #32]
 8003ca0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ca2:	69f9      	ldr	r1, [r7, #28]
 8003ca4:	6a3a      	ldr	r2, [r7, #32]
 8003ca6:	e841 2300 	strex	r3, r2, [r1]
 8003caa:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cac:	69bb      	ldr	r3, [r7, #24]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d1e5      	bne.n	8003c7e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2220      	movs	r2, #32
 8003cc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003cd0:	2303      	movs	r3, #3
 8003cd2:	e010      	b.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	69da      	ldr	r2, [r3, #28]
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	68ba      	ldr	r2, [r7, #8]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	bf0c      	ite	eq
 8003ce4:	2301      	moveq	r3, #1
 8003ce6:	2300      	movne	r3, #0
 8003ce8:	b2db      	uxtb	r3, r3
 8003cea:	461a      	mov	r2, r3
 8003cec:	79fb      	ldrb	r3, [r7, #7]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	f43f af48 	beq.w	8003b84 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cf4:	2300      	movs	r3, #0
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3770      	adds	r7, #112	; 0x70
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <__errno>:
 8003d00:	4b01      	ldr	r3, [pc, #4]	; (8003d08 <__errno+0x8>)
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	4770      	bx	lr
 8003d06:	bf00      	nop
 8003d08:	2000006c 	.word	0x2000006c

08003d0c <__libc_init_array>:
 8003d0c:	b570      	push	{r4, r5, r6, lr}
 8003d0e:	4d0d      	ldr	r5, [pc, #52]	; (8003d44 <__libc_init_array+0x38>)
 8003d10:	4c0d      	ldr	r4, [pc, #52]	; (8003d48 <__libc_init_array+0x3c>)
 8003d12:	1b64      	subs	r4, r4, r5
 8003d14:	10a4      	asrs	r4, r4, #2
 8003d16:	2600      	movs	r6, #0
 8003d18:	42a6      	cmp	r6, r4
 8003d1a:	d109      	bne.n	8003d30 <__libc_init_array+0x24>
 8003d1c:	4d0b      	ldr	r5, [pc, #44]	; (8003d4c <__libc_init_array+0x40>)
 8003d1e:	4c0c      	ldr	r4, [pc, #48]	; (8003d50 <__libc_init_array+0x44>)
 8003d20:	f001 fb7e 	bl	8005420 <_init>
 8003d24:	1b64      	subs	r4, r4, r5
 8003d26:	10a4      	asrs	r4, r4, #2
 8003d28:	2600      	movs	r6, #0
 8003d2a:	42a6      	cmp	r6, r4
 8003d2c:	d105      	bne.n	8003d3a <__libc_init_array+0x2e>
 8003d2e:	bd70      	pop	{r4, r5, r6, pc}
 8003d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d34:	4798      	blx	r3
 8003d36:	3601      	adds	r6, #1
 8003d38:	e7ee      	b.n	8003d18 <__libc_init_array+0xc>
 8003d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3e:	4798      	blx	r3
 8003d40:	3601      	adds	r6, #1
 8003d42:	e7f2      	b.n	8003d2a <__libc_init_array+0x1e>
 8003d44:	08005730 	.word	0x08005730
 8003d48:	08005730 	.word	0x08005730
 8003d4c:	08005730 	.word	0x08005730
 8003d50:	08005734 	.word	0x08005734

08003d54 <memset>:
 8003d54:	4402      	add	r2, r0
 8003d56:	4603      	mov	r3, r0
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d100      	bne.n	8003d5e <memset+0xa>
 8003d5c:	4770      	bx	lr
 8003d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d62:	e7f9      	b.n	8003d58 <memset+0x4>

08003d64 <_puts_r>:
 8003d64:	b570      	push	{r4, r5, r6, lr}
 8003d66:	460e      	mov	r6, r1
 8003d68:	4605      	mov	r5, r0
 8003d6a:	b118      	cbz	r0, 8003d74 <_puts_r+0x10>
 8003d6c:	6983      	ldr	r3, [r0, #24]
 8003d6e:	b90b      	cbnz	r3, 8003d74 <_puts_r+0x10>
 8003d70:	f000 fb14 	bl	800439c <__sinit>
 8003d74:	69ab      	ldr	r3, [r5, #24]
 8003d76:	68ac      	ldr	r4, [r5, #8]
 8003d78:	b913      	cbnz	r3, 8003d80 <_puts_r+0x1c>
 8003d7a:	4628      	mov	r0, r5
 8003d7c:	f000 fb0e 	bl	800439c <__sinit>
 8003d80:	4b2c      	ldr	r3, [pc, #176]	; (8003e34 <_puts_r+0xd0>)
 8003d82:	429c      	cmp	r4, r3
 8003d84:	d120      	bne.n	8003dc8 <_puts_r+0x64>
 8003d86:	686c      	ldr	r4, [r5, #4]
 8003d88:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003d8a:	07db      	lsls	r3, r3, #31
 8003d8c:	d405      	bmi.n	8003d9a <_puts_r+0x36>
 8003d8e:	89a3      	ldrh	r3, [r4, #12]
 8003d90:	0598      	lsls	r0, r3, #22
 8003d92:	d402      	bmi.n	8003d9a <_puts_r+0x36>
 8003d94:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003d96:	f000 fbbc 	bl	8004512 <__retarget_lock_acquire_recursive>
 8003d9a:	89a3      	ldrh	r3, [r4, #12]
 8003d9c:	0719      	lsls	r1, r3, #28
 8003d9e:	d51d      	bpl.n	8003ddc <_puts_r+0x78>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	b1db      	cbz	r3, 8003ddc <_puts_r+0x78>
 8003da4:	3e01      	subs	r6, #1
 8003da6:	68a3      	ldr	r3, [r4, #8]
 8003da8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dac:	3b01      	subs	r3, #1
 8003dae:	60a3      	str	r3, [r4, #8]
 8003db0:	bb39      	cbnz	r1, 8003e02 <_puts_r+0x9e>
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	da38      	bge.n	8003e28 <_puts_r+0xc4>
 8003db6:	4622      	mov	r2, r4
 8003db8:	210a      	movs	r1, #10
 8003dba:	4628      	mov	r0, r5
 8003dbc:	f000 f902 	bl	8003fc4 <__swbuf_r>
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d011      	beq.n	8003de8 <_puts_r+0x84>
 8003dc4:	250a      	movs	r5, #10
 8003dc6:	e011      	b.n	8003dec <_puts_r+0x88>
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <_puts_r+0xd4>)
 8003dca:	429c      	cmp	r4, r3
 8003dcc:	d101      	bne.n	8003dd2 <_puts_r+0x6e>
 8003dce:	68ac      	ldr	r4, [r5, #8]
 8003dd0:	e7da      	b.n	8003d88 <_puts_r+0x24>
 8003dd2:	4b1a      	ldr	r3, [pc, #104]	; (8003e3c <_puts_r+0xd8>)
 8003dd4:	429c      	cmp	r4, r3
 8003dd6:	bf08      	it	eq
 8003dd8:	68ec      	ldreq	r4, [r5, #12]
 8003dda:	e7d5      	b.n	8003d88 <_puts_r+0x24>
 8003ddc:	4621      	mov	r1, r4
 8003dde:	4628      	mov	r0, r5
 8003de0:	f000 f942 	bl	8004068 <__swsetup_r>
 8003de4:	2800      	cmp	r0, #0
 8003de6:	d0dd      	beq.n	8003da4 <_puts_r+0x40>
 8003de8:	f04f 35ff 	mov.w	r5, #4294967295
 8003dec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8003dee:	07da      	lsls	r2, r3, #31
 8003df0:	d405      	bmi.n	8003dfe <_puts_r+0x9a>
 8003df2:	89a3      	ldrh	r3, [r4, #12]
 8003df4:	059b      	lsls	r3, r3, #22
 8003df6:	d402      	bmi.n	8003dfe <_puts_r+0x9a>
 8003df8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8003dfa:	f000 fb8b 	bl	8004514 <__retarget_lock_release_recursive>
 8003dfe:	4628      	mov	r0, r5
 8003e00:	bd70      	pop	{r4, r5, r6, pc}
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	da04      	bge.n	8003e10 <_puts_r+0xac>
 8003e06:	69a2      	ldr	r2, [r4, #24]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dc06      	bgt.n	8003e1a <_puts_r+0xb6>
 8003e0c:	290a      	cmp	r1, #10
 8003e0e:	d004      	beq.n	8003e1a <_puts_r+0xb6>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	6022      	str	r2, [r4, #0]
 8003e16:	7019      	strb	r1, [r3, #0]
 8003e18:	e7c5      	b.n	8003da6 <_puts_r+0x42>
 8003e1a:	4622      	mov	r2, r4
 8003e1c:	4628      	mov	r0, r5
 8003e1e:	f000 f8d1 	bl	8003fc4 <__swbuf_r>
 8003e22:	3001      	adds	r0, #1
 8003e24:	d1bf      	bne.n	8003da6 <_puts_r+0x42>
 8003e26:	e7df      	b.n	8003de8 <_puts_r+0x84>
 8003e28:	6823      	ldr	r3, [r4, #0]
 8003e2a:	250a      	movs	r5, #10
 8003e2c:	1c5a      	adds	r2, r3, #1
 8003e2e:	6022      	str	r2, [r4, #0]
 8003e30:	701d      	strb	r5, [r3, #0]
 8003e32:	e7db      	b.n	8003dec <_puts_r+0x88>
 8003e34:	080056c8 	.word	0x080056c8
 8003e38:	080056e8 	.word	0x080056e8
 8003e3c:	080056a8 	.word	0x080056a8

08003e40 <puts>:
 8003e40:	4b02      	ldr	r3, [pc, #8]	; (8003e4c <puts+0xc>)
 8003e42:	4601      	mov	r1, r0
 8003e44:	6818      	ldr	r0, [r3, #0]
 8003e46:	f7ff bf8d 	b.w	8003d64 <_puts_r>
 8003e4a:	bf00      	nop
 8003e4c:	2000006c 	.word	0x2000006c

08003e50 <iscanf>:
 8003e50:	b40f      	push	{r0, r1, r2, r3}
 8003e52:	4b0a      	ldr	r3, [pc, #40]	; (8003e7c <iscanf+0x2c>)
 8003e54:	b513      	push	{r0, r1, r4, lr}
 8003e56:	681c      	ldr	r4, [r3, #0]
 8003e58:	b124      	cbz	r4, 8003e64 <iscanf+0x14>
 8003e5a:	69a3      	ldr	r3, [r4, #24]
 8003e5c:	b913      	cbnz	r3, 8003e64 <iscanf+0x14>
 8003e5e:	4620      	mov	r0, r4
 8003e60:	f000 fa9c 	bl	800439c <__sinit>
 8003e64:	ab05      	add	r3, sp, #20
 8003e66:	9a04      	ldr	r2, [sp, #16]
 8003e68:	6861      	ldr	r1, [r4, #4]
 8003e6a:	9301      	str	r3, [sp, #4]
 8003e6c:	4620      	mov	r0, r4
 8003e6e:	f000 fe3d 	bl	8004aec <_vfiscanf_r>
 8003e72:	b002      	add	sp, #8
 8003e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e78:	b004      	add	sp, #16
 8003e7a:	4770      	bx	lr
 8003e7c:	2000006c 	.word	0x2000006c

08003e80 <strncmp>:
 8003e80:	b510      	push	{r4, lr}
 8003e82:	b17a      	cbz	r2, 8003ea4 <strncmp+0x24>
 8003e84:	4603      	mov	r3, r0
 8003e86:	3901      	subs	r1, #1
 8003e88:	1884      	adds	r4, r0, r2
 8003e8a:	f813 0b01 	ldrb.w	r0, [r3], #1
 8003e8e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003e92:	4290      	cmp	r0, r2
 8003e94:	d101      	bne.n	8003e9a <strncmp+0x1a>
 8003e96:	42a3      	cmp	r3, r4
 8003e98:	d101      	bne.n	8003e9e <strncmp+0x1e>
 8003e9a:	1a80      	subs	r0, r0, r2
 8003e9c:	bd10      	pop	{r4, pc}
 8003e9e:	2800      	cmp	r0, #0
 8003ea0:	d1f3      	bne.n	8003e8a <strncmp+0xa>
 8003ea2:	e7fa      	b.n	8003e9a <strncmp+0x1a>
 8003ea4:	4610      	mov	r0, r2
 8003ea6:	e7f9      	b.n	8003e9c <strncmp+0x1c>

08003ea8 <_strtol_l.constprop.0>:
 8003ea8:	2b01      	cmp	r3, #1
 8003eaa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003eae:	d001      	beq.n	8003eb4 <_strtol_l.constprop.0+0xc>
 8003eb0:	2b24      	cmp	r3, #36	; 0x24
 8003eb2:	d906      	bls.n	8003ec2 <_strtol_l.constprop.0+0x1a>
 8003eb4:	f7ff ff24 	bl	8003d00 <__errno>
 8003eb8:	2316      	movs	r3, #22
 8003eba:	6003      	str	r3, [r0, #0]
 8003ebc:	2000      	movs	r0, #0
 8003ebe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ec2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003fa8 <_strtol_l.constprop.0+0x100>
 8003ec6:	460d      	mov	r5, r1
 8003ec8:	462e      	mov	r6, r5
 8003eca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003ece:	f814 700c 	ldrb.w	r7, [r4, ip]
 8003ed2:	f017 0708 	ands.w	r7, r7, #8
 8003ed6:	d1f7      	bne.n	8003ec8 <_strtol_l.constprop.0+0x20>
 8003ed8:	2c2d      	cmp	r4, #45	; 0x2d
 8003eda:	d132      	bne.n	8003f42 <_strtol_l.constprop.0+0x9a>
 8003edc:	782c      	ldrb	r4, [r5, #0]
 8003ede:	2701      	movs	r7, #1
 8003ee0:	1cb5      	adds	r5, r6, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d05b      	beq.n	8003f9e <_strtol_l.constprop.0+0xf6>
 8003ee6:	2b10      	cmp	r3, #16
 8003ee8:	d109      	bne.n	8003efe <_strtol_l.constprop.0+0x56>
 8003eea:	2c30      	cmp	r4, #48	; 0x30
 8003eec:	d107      	bne.n	8003efe <_strtol_l.constprop.0+0x56>
 8003eee:	782c      	ldrb	r4, [r5, #0]
 8003ef0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8003ef4:	2c58      	cmp	r4, #88	; 0x58
 8003ef6:	d14d      	bne.n	8003f94 <_strtol_l.constprop.0+0xec>
 8003ef8:	786c      	ldrb	r4, [r5, #1]
 8003efa:	2310      	movs	r3, #16
 8003efc:	3502      	adds	r5, #2
 8003efe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8003f02:	f108 38ff 	add.w	r8, r8, #4294967295
 8003f06:	f04f 0c00 	mov.w	ip, #0
 8003f0a:	fbb8 f9f3 	udiv	r9, r8, r3
 8003f0e:	4666      	mov	r6, ip
 8003f10:	fb03 8a19 	mls	sl, r3, r9, r8
 8003f14:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8003f18:	f1be 0f09 	cmp.w	lr, #9
 8003f1c:	d816      	bhi.n	8003f4c <_strtol_l.constprop.0+0xa4>
 8003f1e:	4674      	mov	r4, lr
 8003f20:	42a3      	cmp	r3, r4
 8003f22:	dd24      	ble.n	8003f6e <_strtol_l.constprop.0+0xc6>
 8003f24:	f1bc 0f00 	cmp.w	ip, #0
 8003f28:	db1e      	blt.n	8003f68 <_strtol_l.constprop.0+0xc0>
 8003f2a:	45b1      	cmp	r9, r6
 8003f2c:	d31c      	bcc.n	8003f68 <_strtol_l.constprop.0+0xc0>
 8003f2e:	d101      	bne.n	8003f34 <_strtol_l.constprop.0+0x8c>
 8003f30:	45a2      	cmp	sl, r4
 8003f32:	db19      	blt.n	8003f68 <_strtol_l.constprop.0+0xc0>
 8003f34:	fb06 4603 	mla	r6, r6, r3, r4
 8003f38:	f04f 0c01 	mov.w	ip, #1
 8003f3c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003f40:	e7e8      	b.n	8003f14 <_strtol_l.constprop.0+0x6c>
 8003f42:	2c2b      	cmp	r4, #43	; 0x2b
 8003f44:	bf04      	itt	eq
 8003f46:	782c      	ldrbeq	r4, [r5, #0]
 8003f48:	1cb5      	addeq	r5, r6, #2
 8003f4a:	e7ca      	b.n	8003ee2 <_strtol_l.constprop.0+0x3a>
 8003f4c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8003f50:	f1be 0f19 	cmp.w	lr, #25
 8003f54:	d801      	bhi.n	8003f5a <_strtol_l.constprop.0+0xb2>
 8003f56:	3c37      	subs	r4, #55	; 0x37
 8003f58:	e7e2      	b.n	8003f20 <_strtol_l.constprop.0+0x78>
 8003f5a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8003f5e:	f1be 0f19 	cmp.w	lr, #25
 8003f62:	d804      	bhi.n	8003f6e <_strtol_l.constprop.0+0xc6>
 8003f64:	3c57      	subs	r4, #87	; 0x57
 8003f66:	e7db      	b.n	8003f20 <_strtol_l.constprop.0+0x78>
 8003f68:	f04f 3cff 	mov.w	ip, #4294967295
 8003f6c:	e7e6      	b.n	8003f3c <_strtol_l.constprop.0+0x94>
 8003f6e:	f1bc 0f00 	cmp.w	ip, #0
 8003f72:	da05      	bge.n	8003f80 <_strtol_l.constprop.0+0xd8>
 8003f74:	2322      	movs	r3, #34	; 0x22
 8003f76:	6003      	str	r3, [r0, #0]
 8003f78:	4646      	mov	r6, r8
 8003f7a:	b942      	cbnz	r2, 8003f8e <_strtol_l.constprop.0+0xe6>
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	e79e      	b.n	8003ebe <_strtol_l.constprop.0+0x16>
 8003f80:	b107      	cbz	r7, 8003f84 <_strtol_l.constprop.0+0xdc>
 8003f82:	4276      	negs	r6, r6
 8003f84:	2a00      	cmp	r2, #0
 8003f86:	d0f9      	beq.n	8003f7c <_strtol_l.constprop.0+0xd4>
 8003f88:	f1bc 0f00 	cmp.w	ip, #0
 8003f8c:	d000      	beq.n	8003f90 <_strtol_l.constprop.0+0xe8>
 8003f8e:	1e69      	subs	r1, r5, #1
 8003f90:	6011      	str	r1, [r2, #0]
 8003f92:	e7f3      	b.n	8003f7c <_strtol_l.constprop.0+0xd4>
 8003f94:	2430      	movs	r4, #48	; 0x30
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1b1      	bne.n	8003efe <_strtol_l.constprop.0+0x56>
 8003f9a:	2308      	movs	r3, #8
 8003f9c:	e7af      	b.n	8003efe <_strtol_l.constprop.0+0x56>
 8003f9e:	2c30      	cmp	r4, #48	; 0x30
 8003fa0:	d0a5      	beq.n	8003eee <_strtol_l.constprop.0+0x46>
 8003fa2:	230a      	movs	r3, #10
 8003fa4:	e7ab      	b.n	8003efe <_strtol_l.constprop.0+0x56>
 8003fa6:	bf00      	nop
 8003fa8:	080055a5 	.word	0x080055a5

08003fac <_strtol_r>:
 8003fac:	f7ff bf7c 	b.w	8003ea8 <_strtol_l.constprop.0>

08003fb0 <strtol>:
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	460a      	mov	r2, r1
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <strtol+0x10>)
 8003fb8:	6800      	ldr	r0, [r0, #0]
 8003fba:	f7ff bf75 	b.w	8003ea8 <_strtol_l.constprop.0>
 8003fbe:	bf00      	nop
 8003fc0:	2000006c 	.word	0x2000006c

08003fc4 <__swbuf_r>:
 8003fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fc6:	460e      	mov	r6, r1
 8003fc8:	4614      	mov	r4, r2
 8003fca:	4605      	mov	r5, r0
 8003fcc:	b118      	cbz	r0, 8003fd6 <__swbuf_r+0x12>
 8003fce:	6983      	ldr	r3, [r0, #24]
 8003fd0:	b90b      	cbnz	r3, 8003fd6 <__swbuf_r+0x12>
 8003fd2:	f000 f9e3 	bl	800439c <__sinit>
 8003fd6:	4b21      	ldr	r3, [pc, #132]	; (800405c <__swbuf_r+0x98>)
 8003fd8:	429c      	cmp	r4, r3
 8003fda:	d12b      	bne.n	8004034 <__swbuf_r+0x70>
 8003fdc:	686c      	ldr	r4, [r5, #4]
 8003fde:	69a3      	ldr	r3, [r4, #24]
 8003fe0:	60a3      	str	r3, [r4, #8]
 8003fe2:	89a3      	ldrh	r3, [r4, #12]
 8003fe4:	071a      	lsls	r2, r3, #28
 8003fe6:	d52f      	bpl.n	8004048 <__swbuf_r+0x84>
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	b36b      	cbz	r3, 8004048 <__swbuf_r+0x84>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	6820      	ldr	r0, [r4, #0]
 8003ff0:	1ac0      	subs	r0, r0, r3
 8003ff2:	6963      	ldr	r3, [r4, #20]
 8003ff4:	b2f6      	uxtb	r6, r6
 8003ff6:	4283      	cmp	r3, r0
 8003ff8:	4637      	mov	r7, r6
 8003ffa:	dc04      	bgt.n	8004006 <__swbuf_r+0x42>
 8003ffc:	4621      	mov	r1, r4
 8003ffe:	4628      	mov	r0, r5
 8004000:	f000 f926 	bl	8004250 <_fflush_r>
 8004004:	bb30      	cbnz	r0, 8004054 <__swbuf_r+0x90>
 8004006:	68a3      	ldr	r3, [r4, #8]
 8004008:	3b01      	subs	r3, #1
 800400a:	60a3      	str	r3, [r4, #8]
 800400c:	6823      	ldr	r3, [r4, #0]
 800400e:	1c5a      	adds	r2, r3, #1
 8004010:	6022      	str	r2, [r4, #0]
 8004012:	701e      	strb	r6, [r3, #0]
 8004014:	6963      	ldr	r3, [r4, #20]
 8004016:	3001      	adds	r0, #1
 8004018:	4283      	cmp	r3, r0
 800401a:	d004      	beq.n	8004026 <__swbuf_r+0x62>
 800401c:	89a3      	ldrh	r3, [r4, #12]
 800401e:	07db      	lsls	r3, r3, #31
 8004020:	d506      	bpl.n	8004030 <__swbuf_r+0x6c>
 8004022:	2e0a      	cmp	r6, #10
 8004024:	d104      	bne.n	8004030 <__swbuf_r+0x6c>
 8004026:	4621      	mov	r1, r4
 8004028:	4628      	mov	r0, r5
 800402a:	f000 f911 	bl	8004250 <_fflush_r>
 800402e:	b988      	cbnz	r0, 8004054 <__swbuf_r+0x90>
 8004030:	4638      	mov	r0, r7
 8004032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004034:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <__swbuf_r+0x9c>)
 8004036:	429c      	cmp	r4, r3
 8004038:	d101      	bne.n	800403e <__swbuf_r+0x7a>
 800403a:	68ac      	ldr	r4, [r5, #8]
 800403c:	e7cf      	b.n	8003fde <__swbuf_r+0x1a>
 800403e:	4b09      	ldr	r3, [pc, #36]	; (8004064 <__swbuf_r+0xa0>)
 8004040:	429c      	cmp	r4, r3
 8004042:	bf08      	it	eq
 8004044:	68ec      	ldreq	r4, [r5, #12]
 8004046:	e7ca      	b.n	8003fde <__swbuf_r+0x1a>
 8004048:	4621      	mov	r1, r4
 800404a:	4628      	mov	r0, r5
 800404c:	f000 f80c 	bl	8004068 <__swsetup_r>
 8004050:	2800      	cmp	r0, #0
 8004052:	d0cb      	beq.n	8003fec <__swbuf_r+0x28>
 8004054:	f04f 37ff 	mov.w	r7, #4294967295
 8004058:	e7ea      	b.n	8004030 <__swbuf_r+0x6c>
 800405a:	bf00      	nop
 800405c:	080056c8 	.word	0x080056c8
 8004060:	080056e8 	.word	0x080056e8
 8004064:	080056a8 	.word	0x080056a8

08004068 <__swsetup_r>:
 8004068:	4b32      	ldr	r3, [pc, #200]	; (8004134 <__swsetup_r+0xcc>)
 800406a:	b570      	push	{r4, r5, r6, lr}
 800406c:	681d      	ldr	r5, [r3, #0]
 800406e:	4606      	mov	r6, r0
 8004070:	460c      	mov	r4, r1
 8004072:	b125      	cbz	r5, 800407e <__swsetup_r+0x16>
 8004074:	69ab      	ldr	r3, [r5, #24]
 8004076:	b913      	cbnz	r3, 800407e <__swsetup_r+0x16>
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f98f 	bl	800439c <__sinit>
 800407e:	4b2e      	ldr	r3, [pc, #184]	; (8004138 <__swsetup_r+0xd0>)
 8004080:	429c      	cmp	r4, r3
 8004082:	d10f      	bne.n	80040a4 <__swsetup_r+0x3c>
 8004084:	686c      	ldr	r4, [r5, #4]
 8004086:	89a3      	ldrh	r3, [r4, #12]
 8004088:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800408c:	0719      	lsls	r1, r3, #28
 800408e:	d42c      	bmi.n	80040ea <__swsetup_r+0x82>
 8004090:	06dd      	lsls	r5, r3, #27
 8004092:	d411      	bmi.n	80040b8 <__swsetup_r+0x50>
 8004094:	2309      	movs	r3, #9
 8004096:	6033      	str	r3, [r6, #0]
 8004098:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800409c:	81a3      	strh	r3, [r4, #12]
 800409e:	f04f 30ff 	mov.w	r0, #4294967295
 80040a2:	e03e      	b.n	8004122 <__swsetup_r+0xba>
 80040a4:	4b25      	ldr	r3, [pc, #148]	; (800413c <__swsetup_r+0xd4>)
 80040a6:	429c      	cmp	r4, r3
 80040a8:	d101      	bne.n	80040ae <__swsetup_r+0x46>
 80040aa:	68ac      	ldr	r4, [r5, #8]
 80040ac:	e7eb      	b.n	8004086 <__swsetup_r+0x1e>
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <__swsetup_r+0xd8>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	bf08      	it	eq
 80040b4:	68ec      	ldreq	r4, [r5, #12]
 80040b6:	e7e6      	b.n	8004086 <__swsetup_r+0x1e>
 80040b8:	0758      	lsls	r0, r3, #29
 80040ba:	d512      	bpl.n	80040e2 <__swsetup_r+0x7a>
 80040bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040be:	b141      	cbz	r1, 80040d2 <__swsetup_r+0x6a>
 80040c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c4:	4299      	cmp	r1, r3
 80040c6:	d002      	beq.n	80040ce <__swsetup_r+0x66>
 80040c8:	4630      	mov	r0, r6
 80040ca:	f000 fa89 	bl	80045e0 <_free_r>
 80040ce:	2300      	movs	r3, #0
 80040d0:	6363      	str	r3, [r4, #52]	; 0x34
 80040d2:	89a3      	ldrh	r3, [r4, #12]
 80040d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d8:	81a3      	strh	r3, [r4, #12]
 80040da:	2300      	movs	r3, #0
 80040dc:	6063      	str	r3, [r4, #4]
 80040de:	6923      	ldr	r3, [r4, #16]
 80040e0:	6023      	str	r3, [r4, #0]
 80040e2:	89a3      	ldrh	r3, [r4, #12]
 80040e4:	f043 0308 	orr.w	r3, r3, #8
 80040e8:	81a3      	strh	r3, [r4, #12]
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	b94b      	cbnz	r3, 8004102 <__swsetup_r+0x9a>
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f8:	d003      	beq.n	8004102 <__swsetup_r+0x9a>
 80040fa:	4621      	mov	r1, r4
 80040fc:	4630      	mov	r0, r6
 80040fe:	f000 fa2f 	bl	8004560 <__smakebuf_r>
 8004102:	89a0      	ldrh	r0, [r4, #12]
 8004104:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004108:	f010 0301 	ands.w	r3, r0, #1
 800410c:	d00a      	beq.n	8004124 <__swsetup_r+0xbc>
 800410e:	2300      	movs	r3, #0
 8004110:	60a3      	str	r3, [r4, #8]
 8004112:	6963      	ldr	r3, [r4, #20]
 8004114:	425b      	negs	r3, r3
 8004116:	61a3      	str	r3, [r4, #24]
 8004118:	6923      	ldr	r3, [r4, #16]
 800411a:	b943      	cbnz	r3, 800412e <__swsetup_r+0xc6>
 800411c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004120:	d1ba      	bne.n	8004098 <__swsetup_r+0x30>
 8004122:	bd70      	pop	{r4, r5, r6, pc}
 8004124:	0781      	lsls	r1, r0, #30
 8004126:	bf58      	it	pl
 8004128:	6963      	ldrpl	r3, [r4, #20]
 800412a:	60a3      	str	r3, [r4, #8]
 800412c:	e7f4      	b.n	8004118 <__swsetup_r+0xb0>
 800412e:	2000      	movs	r0, #0
 8004130:	e7f7      	b.n	8004122 <__swsetup_r+0xba>
 8004132:	bf00      	nop
 8004134:	2000006c 	.word	0x2000006c
 8004138:	080056c8 	.word	0x080056c8
 800413c:	080056e8 	.word	0x080056e8
 8004140:	080056a8 	.word	0x080056a8

08004144 <__sflush_r>:
 8004144:	898a      	ldrh	r2, [r1, #12]
 8004146:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800414a:	4605      	mov	r5, r0
 800414c:	0710      	lsls	r0, r2, #28
 800414e:	460c      	mov	r4, r1
 8004150:	d458      	bmi.n	8004204 <__sflush_r+0xc0>
 8004152:	684b      	ldr	r3, [r1, #4]
 8004154:	2b00      	cmp	r3, #0
 8004156:	dc05      	bgt.n	8004164 <__sflush_r+0x20>
 8004158:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	dc02      	bgt.n	8004164 <__sflush_r+0x20>
 800415e:	2000      	movs	r0, #0
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004166:	2e00      	cmp	r6, #0
 8004168:	d0f9      	beq.n	800415e <__sflush_r+0x1a>
 800416a:	2300      	movs	r3, #0
 800416c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004170:	682f      	ldr	r7, [r5, #0]
 8004172:	602b      	str	r3, [r5, #0]
 8004174:	d032      	beq.n	80041dc <__sflush_r+0x98>
 8004176:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004178:	89a3      	ldrh	r3, [r4, #12]
 800417a:	075a      	lsls	r2, r3, #29
 800417c:	d505      	bpl.n	800418a <__sflush_r+0x46>
 800417e:	6863      	ldr	r3, [r4, #4]
 8004180:	1ac0      	subs	r0, r0, r3
 8004182:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004184:	b10b      	cbz	r3, 800418a <__sflush_r+0x46>
 8004186:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004188:	1ac0      	subs	r0, r0, r3
 800418a:	2300      	movs	r3, #0
 800418c:	4602      	mov	r2, r0
 800418e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004190:	6a21      	ldr	r1, [r4, #32]
 8004192:	4628      	mov	r0, r5
 8004194:	47b0      	blx	r6
 8004196:	1c43      	adds	r3, r0, #1
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	d106      	bne.n	80041aa <__sflush_r+0x66>
 800419c:	6829      	ldr	r1, [r5, #0]
 800419e:	291d      	cmp	r1, #29
 80041a0:	d82c      	bhi.n	80041fc <__sflush_r+0xb8>
 80041a2:	4a2a      	ldr	r2, [pc, #168]	; (800424c <__sflush_r+0x108>)
 80041a4:	40ca      	lsrs	r2, r1
 80041a6:	07d6      	lsls	r6, r2, #31
 80041a8:	d528      	bpl.n	80041fc <__sflush_r+0xb8>
 80041aa:	2200      	movs	r2, #0
 80041ac:	6062      	str	r2, [r4, #4]
 80041ae:	04d9      	lsls	r1, r3, #19
 80041b0:	6922      	ldr	r2, [r4, #16]
 80041b2:	6022      	str	r2, [r4, #0]
 80041b4:	d504      	bpl.n	80041c0 <__sflush_r+0x7c>
 80041b6:	1c42      	adds	r2, r0, #1
 80041b8:	d101      	bne.n	80041be <__sflush_r+0x7a>
 80041ba:	682b      	ldr	r3, [r5, #0]
 80041bc:	b903      	cbnz	r3, 80041c0 <__sflush_r+0x7c>
 80041be:	6560      	str	r0, [r4, #84]	; 0x54
 80041c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041c2:	602f      	str	r7, [r5, #0]
 80041c4:	2900      	cmp	r1, #0
 80041c6:	d0ca      	beq.n	800415e <__sflush_r+0x1a>
 80041c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041cc:	4299      	cmp	r1, r3
 80041ce:	d002      	beq.n	80041d6 <__sflush_r+0x92>
 80041d0:	4628      	mov	r0, r5
 80041d2:	f000 fa05 	bl	80045e0 <_free_r>
 80041d6:	2000      	movs	r0, #0
 80041d8:	6360      	str	r0, [r4, #52]	; 0x34
 80041da:	e7c1      	b.n	8004160 <__sflush_r+0x1c>
 80041dc:	6a21      	ldr	r1, [r4, #32]
 80041de:	2301      	movs	r3, #1
 80041e0:	4628      	mov	r0, r5
 80041e2:	47b0      	blx	r6
 80041e4:	1c41      	adds	r1, r0, #1
 80041e6:	d1c7      	bne.n	8004178 <__sflush_r+0x34>
 80041e8:	682b      	ldr	r3, [r5, #0]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0c4      	beq.n	8004178 <__sflush_r+0x34>
 80041ee:	2b1d      	cmp	r3, #29
 80041f0:	d001      	beq.n	80041f6 <__sflush_r+0xb2>
 80041f2:	2b16      	cmp	r3, #22
 80041f4:	d101      	bne.n	80041fa <__sflush_r+0xb6>
 80041f6:	602f      	str	r7, [r5, #0]
 80041f8:	e7b1      	b.n	800415e <__sflush_r+0x1a>
 80041fa:	89a3      	ldrh	r3, [r4, #12]
 80041fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004200:	81a3      	strh	r3, [r4, #12]
 8004202:	e7ad      	b.n	8004160 <__sflush_r+0x1c>
 8004204:	690f      	ldr	r7, [r1, #16]
 8004206:	2f00      	cmp	r7, #0
 8004208:	d0a9      	beq.n	800415e <__sflush_r+0x1a>
 800420a:	0793      	lsls	r3, r2, #30
 800420c:	680e      	ldr	r6, [r1, #0]
 800420e:	bf08      	it	eq
 8004210:	694b      	ldreq	r3, [r1, #20]
 8004212:	600f      	str	r7, [r1, #0]
 8004214:	bf18      	it	ne
 8004216:	2300      	movne	r3, #0
 8004218:	eba6 0807 	sub.w	r8, r6, r7
 800421c:	608b      	str	r3, [r1, #8]
 800421e:	f1b8 0f00 	cmp.w	r8, #0
 8004222:	dd9c      	ble.n	800415e <__sflush_r+0x1a>
 8004224:	6a21      	ldr	r1, [r4, #32]
 8004226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004228:	4643      	mov	r3, r8
 800422a:	463a      	mov	r2, r7
 800422c:	4628      	mov	r0, r5
 800422e:	47b0      	blx	r6
 8004230:	2800      	cmp	r0, #0
 8004232:	dc06      	bgt.n	8004242 <__sflush_r+0xfe>
 8004234:	89a3      	ldrh	r3, [r4, #12]
 8004236:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800423a:	81a3      	strh	r3, [r4, #12]
 800423c:	f04f 30ff 	mov.w	r0, #4294967295
 8004240:	e78e      	b.n	8004160 <__sflush_r+0x1c>
 8004242:	4407      	add	r7, r0
 8004244:	eba8 0800 	sub.w	r8, r8, r0
 8004248:	e7e9      	b.n	800421e <__sflush_r+0xda>
 800424a:	bf00      	nop
 800424c:	20400001 	.word	0x20400001

08004250 <_fflush_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	690b      	ldr	r3, [r1, #16]
 8004254:	4605      	mov	r5, r0
 8004256:	460c      	mov	r4, r1
 8004258:	b913      	cbnz	r3, 8004260 <_fflush_r+0x10>
 800425a:	2500      	movs	r5, #0
 800425c:	4628      	mov	r0, r5
 800425e:	bd38      	pop	{r3, r4, r5, pc}
 8004260:	b118      	cbz	r0, 800426a <_fflush_r+0x1a>
 8004262:	6983      	ldr	r3, [r0, #24]
 8004264:	b90b      	cbnz	r3, 800426a <_fflush_r+0x1a>
 8004266:	f000 f899 	bl	800439c <__sinit>
 800426a:	4b14      	ldr	r3, [pc, #80]	; (80042bc <_fflush_r+0x6c>)
 800426c:	429c      	cmp	r4, r3
 800426e:	d11b      	bne.n	80042a8 <_fflush_r+0x58>
 8004270:	686c      	ldr	r4, [r5, #4]
 8004272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d0ef      	beq.n	800425a <_fflush_r+0xa>
 800427a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800427c:	07d0      	lsls	r0, r2, #31
 800427e:	d404      	bmi.n	800428a <_fflush_r+0x3a>
 8004280:	0599      	lsls	r1, r3, #22
 8004282:	d402      	bmi.n	800428a <_fflush_r+0x3a>
 8004284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004286:	f000 f944 	bl	8004512 <__retarget_lock_acquire_recursive>
 800428a:	4628      	mov	r0, r5
 800428c:	4621      	mov	r1, r4
 800428e:	f7ff ff59 	bl	8004144 <__sflush_r>
 8004292:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004294:	07da      	lsls	r2, r3, #31
 8004296:	4605      	mov	r5, r0
 8004298:	d4e0      	bmi.n	800425c <_fflush_r+0xc>
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	059b      	lsls	r3, r3, #22
 800429e:	d4dd      	bmi.n	800425c <_fflush_r+0xc>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f000 f937 	bl	8004514 <__retarget_lock_release_recursive>
 80042a6:	e7d9      	b.n	800425c <_fflush_r+0xc>
 80042a8:	4b05      	ldr	r3, [pc, #20]	; (80042c0 <_fflush_r+0x70>)
 80042aa:	429c      	cmp	r4, r3
 80042ac:	d101      	bne.n	80042b2 <_fflush_r+0x62>
 80042ae:	68ac      	ldr	r4, [r5, #8]
 80042b0:	e7df      	b.n	8004272 <_fflush_r+0x22>
 80042b2:	4b04      	ldr	r3, [pc, #16]	; (80042c4 <_fflush_r+0x74>)
 80042b4:	429c      	cmp	r4, r3
 80042b6:	bf08      	it	eq
 80042b8:	68ec      	ldreq	r4, [r5, #12]
 80042ba:	e7da      	b.n	8004272 <_fflush_r+0x22>
 80042bc:	080056c8 	.word	0x080056c8
 80042c0:	080056e8 	.word	0x080056e8
 80042c4:	080056a8 	.word	0x080056a8

080042c8 <fflush>:
 80042c8:	4601      	mov	r1, r0
 80042ca:	b920      	cbnz	r0, 80042d6 <fflush+0xe>
 80042cc:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <fflush+0x18>)
 80042ce:	4905      	ldr	r1, [pc, #20]	; (80042e4 <fflush+0x1c>)
 80042d0:	6818      	ldr	r0, [r3, #0]
 80042d2:	f000 b8fe 	b.w	80044d2 <_fwalk_reent>
 80042d6:	4b04      	ldr	r3, [pc, #16]	; (80042e8 <fflush+0x20>)
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	f7ff bfb9 	b.w	8004250 <_fflush_r>
 80042de:	bf00      	nop
 80042e0:	080055a0 	.word	0x080055a0
 80042e4:	08004251 	.word	0x08004251
 80042e8:	2000006c 	.word	0x2000006c

080042ec <std>:
 80042ec:	2300      	movs	r3, #0
 80042ee:	b510      	push	{r4, lr}
 80042f0:	4604      	mov	r4, r0
 80042f2:	e9c0 3300 	strd	r3, r3, [r0]
 80042f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042fa:	6083      	str	r3, [r0, #8]
 80042fc:	8181      	strh	r1, [r0, #12]
 80042fe:	6643      	str	r3, [r0, #100]	; 0x64
 8004300:	81c2      	strh	r2, [r0, #14]
 8004302:	6183      	str	r3, [r0, #24]
 8004304:	4619      	mov	r1, r3
 8004306:	2208      	movs	r2, #8
 8004308:	305c      	adds	r0, #92	; 0x5c
 800430a:	f7ff fd23 	bl	8003d54 <memset>
 800430e:	4b05      	ldr	r3, [pc, #20]	; (8004324 <std+0x38>)
 8004310:	6263      	str	r3, [r4, #36]	; 0x24
 8004312:	4b05      	ldr	r3, [pc, #20]	; (8004328 <std+0x3c>)
 8004314:	62a3      	str	r3, [r4, #40]	; 0x28
 8004316:	4b05      	ldr	r3, [pc, #20]	; (800432c <std+0x40>)
 8004318:	62e3      	str	r3, [r4, #44]	; 0x2c
 800431a:	4b05      	ldr	r3, [pc, #20]	; (8004330 <std+0x44>)
 800431c:	6224      	str	r4, [r4, #32]
 800431e:	6323      	str	r3, [r4, #48]	; 0x30
 8004320:	bd10      	pop	{r4, pc}
 8004322:	bf00      	nop
 8004324:	08004f99 	.word	0x08004f99
 8004328:	08004fbb 	.word	0x08004fbb
 800432c:	08004ff3 	.word	0x08004ff3
 8004330:	08005017 	.word	0x08005017

08004334 <_cleanup_r>:
 8004334:	4901      	ldr	r1, [pc, #4]	; (800433c <_cleanup_r+0x8>)
 8004336:	f000 b8cc 	b.w	80044d2 <_fwalk_reent>
 800433a:	bf00      	nop
 800433c:	08004251 	.word	0x08004251

08004340 <__sfmoreglue>:
 8004340:	b570      	push	{r4, r5, r6, lr}
 8004342:	2268      	movs	r2, #104	; 0x68
 8004344:	1e4d      	subs	r5, r1, #1
 8004346:	4355      	muls	r5, r2
 8004348:	460e      	mov	r6, r1
 800434a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800434e:	f000 f9b3 	bl	80046b8 <_malloc_r>
 8004352:	4604      	mov	r4, r0
 8004354:	b140      	cbz	r0, 8004368 <__sfmoreglue+0x28>
 8004356:	2100      	movs	r1, #0
 8004358:	e9c0 1600 	strd	r1, r6, [r0]
 800435c:	300c      	adds	r0, #12
 800435e:	60a0      	str	r0, [r4, #8]
 8004360:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004364:	f7ff fcf6 	bl	8003d54 <memset>
 8004368:	4620      	mov	r0, r4
 800436a:	bd70      	pop	{r4, r5, r6, pc}

0800436c <__sfp_lock_acquire>:
 800436c:	4801      	ldr	r0, [pc, #4]	; (8004374 <__sfp_lock_acquire+0x8>)
 800436e:	f000 b8d0 	b.w	8004512 <__retarget_lock_acquire_recursive>
 8004372:	bf00      	nop
 8004374:	20000609 	.word	0x20000609

08004378 <__sfp_lock_release>:
 8004378:	4801      	ldr	r0, [pc, #4]	; (8004380 <__sfp_lock_release+0x8>)
 800437a:	f000 b8cb 	b.w	8004514 <__retarget_lock_release_recursive>
 800437e:	bf00      	nop
 8004380:	20000609 	.word	0x20000609

08004384 <__sinit_lock_acquire>:
 8004384:	4801      	ldr	r0, [pc, #4]	; (800438c <__sinit_lock_acquire+0x8>)
 8004386:	f000 b8c4 	b.w	8004512 <__retarget_lock_acquire_recursive>
 800438a:	bf00      	nop
 800438c:	2000060a 	.word	0x2000060a

08004390 <__sinit_lock_release>:
 8004390:	4801      	ldr	r0, [pc, #4]	; (8004398 <__sinit_lock_release+0x8>)
 8004392:	f000 b8bf 	b.w	8004514 <__retarget_lock_release_recursive>
 8004396:	bf00      	nop
 8004398:	2000060a 	.word	0x2000060a

0800439c <__sinit>:
 800439c:	b510      	push	{r4, lr}
 800439e:	4604      	mov	r4, r0
 80043a0:	f7ff fff0 	bl	8004384 <__sinit_lock_acquire>
 80043a4:	69a3      	ldr	r3, [r4, #24]
 80043a6:	b11b      	cbz	r3, 80043b0 <__sinit+0x14>
 80043a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043ac:	f7ff bff0 	b.w	8004390 <__sinit_lock_release>
 80043b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80043b4:	6523      	str	r3, [r4, #80]	; 0x50
 80043b6:	4b13      	ldr	r3, [pc, #76]	; (8004404 <__sinit+0x68>)
 80043b8:	4a13      	ldr	r2, [pc, #76]	; (8004408 <__sinit+0x6c>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80043be:	42a3      	cmp	r3, r4
 80043c0:	bf04      	itt	eq
 80043c2:	2301      	moveq	r3, #1
 80043c4:	61a3      	streq	r3, [r4, #24]
 80043c6:	4620      	mov	r0, r4
 80043c8:	f000 f820 	bl	800440c <__sfp>
 80043cc:	6060      	str	r0, [r4, #4]
 80043ce:	4620      	mov	r0, r4
 80043d0:	f000 f81c 	bl	800440c <__sfp>
 80043d4:	60a0      	str	r0, [r4, #8]
 80043d6:	4620      	mov	r0, r4
 80043d8:	f000 f818 	bl	800440c <__sfp>
 80043dc:	2200      	movs	r2, #0
 80043de:	60e0      	str	r0, [r4, #12]
 80043e0:	2104      	movs	r1, #4
 80043e2:	6860      	ldr	r0, [r4, #4]
 80043e4:	f7ff ff82 	bl	80042ec <std>
 80043e8:	68a0      	ldr	r0, [r4, #8]
 80043ea:	2201      	movs	r2, #1
 80043ec:	2109      	movs	r1, #9
 80043ee:	f7ff ff7d 	bl	80042ec <std>
 80043f2:	68e0      	ldr	r0, [r4, #12]
 80043f4:	2202      	movs	r2, #2
 80043f6:	2112      	movs	r1, #18
 80043f8:	f7ff ff78 	bl	80042ec <std>
 80043fc:	2301      	movs	r3, #1
 80043fe:	61a3      	str	r3, [r4, #24]
 8004400:	e7d2      	b.n	80043a8 <__sinit+0xc>
 8004402:	bf00      	nop
 8004404:	080055a0 	.word	0x080055a0
 8004408:	08004335 	.word	0x08004335

0800440c <__sfp>:
 800440c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800440e:	4607      	mov	r7, r0
 8004410:	f7ff ffac 	bl	800436c <__sfp_lock_acquire>
 8004414:	4b1e      	ldr	r3, [pc, #120]	; (8004490 <__sfp+0x84>)
 8004416:	681e      	ldr	r6, [r3, #0]
 8004418:	69b3      	ldr	r3, [r6, #24]
 800441a:	b913      	cbnz	r3, 8004422 <__sfp+0x16>
 800441c:	4630      	mov	r0, r6
 800441e:	f7ff ffbd 	bl	800439c <__sinit>
 8004422:	3648      	adds	r6, #72	; 0x48
 8004424:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004428:	3b01      	subs	r3, #1
 800442a:	d503      	bpl.n	8004434 <__sfp+0x28>
 800442c:	6833      	ldr	r3, [r6, #0]
 800442e:	b30b      	cbz	r3, 8004474 <__sfp+0x68>
 8004430:	6836      	ldr	r6, [r6, #0]
 8004432:	e7f7      	b.n	8004424 <__sfp+0x18>
 8004434:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004438:	b9d5      	cbnz	r5, 8004470 <__sfp+0x64>
 800443a:	4b16      	ldr	r3, [pc, #88]	; (8004494 <__sfp+0x88>)
 800443c:	60e3      	str	r3, [r4, #12]
 800443e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8004442:	6665      	str	r5, [r4, #100]	; 0x64
 8004444:	f000 f864 	bl	8004510 <__retarget_lock_init_recursive>
 8004448:	f7ff ff96 	bl	8004378 <__sfp_lock_release>
 800444c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8004450:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8004454:	6025      	str	r5, [r4, #0]
 8004456:	61a5      	str	r5, [r4, #24]
 8004458:	2208      	movs	r2, #8
 800445a:	4629      	mov	r1, r5
 800445c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004460:	f7ff fc78 	bl	8003d54 <memset>
 8004464:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004468:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800446c:	4620      	mov	r0, r4
 800446e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004470:	3468      	adds	r4, #104	; 0x68
 8004472:	e7d9      	b.n	8004428 <__sfp+0x1c>
 8004474:	2104      	movs	r1, #4
 8004476:	4638      	mov	r0, r7
 8004478:	f7ff ff62 	bl	8004340 <__sfmoreglue>
 800447c:	4604      	mov	r4, r0
 800447e:	6030      	str	r0, [r6, #0]
 8004480:	2800      	cmp	r0, #0
 8004482:	d1d5      	bne.n	8004430 <__sfp+0x24>
 8004484:	f7ff ff78 	bl	8004378 <__sfp_lock_release>
 8004488:	230c      	movs	r3, #12
 800448a:	603b      	str	r3, [r7, #0]
 800448c:	e7ee      	b.n	800446c <__sfp+0x60>
 800448e:	bf00      	nop
 8004490:	080055a0 	.word	0x080055a0
 8004494:	ffff0001 	.word	0xffff0001

08004498 <_fwalk>:
 8004498:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800449c:	460f      	mov	r7, r1
 800449e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044a2:	2600      	movs	r6, #0
 80044a4:	e9d4 8501 	ldrd	r8, r5, [r4, #4]
 80044a8:	f1b8 0801 	subs.w	r8, r8, #1
 80044ac:	d505      	bpl.n	80044ba <_fwalk+0x22>
 80044ae:	6824      	ldr	r4, [r4, #0]
 80044b0:	2c00      	cmp	r4, #0
 80044b2:	d1f7      	bne.n	80044a4 <_fwalk+0xc>
 80044b4:	4630      	mov	r0, r6
 80044b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80044ba:	89ab      	ldrh	r3, [r5, #12]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d906      	bls.n	80044ce <_fwalk+0x36>
 80044c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044c4:	3301      	adds	r3, #1
 80044c6:	d002      	beq.n	80044ce <_fwalk+0x36>
 80044c8:	4628      	mov	r0, r5
 80044ca:	47b8      	blx	r7
 80044cc:	4306      	orrs	r6, r0
 80044ce:	3568      	adds	r5, #104	; 0x68
 80044d0:	e7ea      	b.n	80044a8 <_fwalk+0x10>

080044d2 <_fwalk_reent>:
 80044d2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80044d6:	4606      	mov	r6, r0
 80044d8:	4688      	mov	r8, r1
 80044da:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80044de:	2700      	movs	r7, #0
 80044e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80044e4:	f1b9 0901 	subs.w	r9, r9, #1
 80044e8:	d505      	bpl.n	80044f6 <_fwalk_reent+0x24>
 80044ea:	6824      	ldr	r4, [r4, #0]
 80044ec:	2c00      	cmp	r4, #0
 80044ee:	d1f7      	bne.n	80044e0 <_fwalk_reent+0xe>
 80044f0:	4638      	mov	r0, r7
 80044f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80044f6:	89ab      	ldrh	r3, [r5, #12]
 80044f8:	2b01      	cmp	r3, #1
 80044fa:	d907      	bls.n	800450c <_fwalk_reent+0x3a>
 80044fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004500:	3301      	adds	r3, #1
 8004502:	d003      	beq.n	800450c <_fwalk_reent+0x3a>
 8004504:	4629      	mov	r1, r5
 8004506:	4630      	mov	r0, r6
 8004508:	47c0      	blx	r8
 800450a:	4307      	orrs	r7, r0
 800450c:	3568      	adds	r5, #104	; 0x68
 800450e:	e7e9      	b.n	80044e4 <_fwalk_reent+0x12>

08004510 <__retarget_lock_init_recursive>:
 8004510:	4770      	bx	lr

08004512 <__retarget_lock_acquire_recursive>:
 8004512:	4770      	bx	lr

08004514 <__retarget_lock_release_recursive>:
 8004514:	4770      	bx	lr

08004516 <__swhatbuf_r>:
 8004516:	b570      	push	{r4, r5, r6, lr}
 8004518:	460e      	mov	r6, r1
 800451a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800451e:	2900      	cmp	r1, #0
 8004520:	b096      	sub	sp, #88	; 0x58
 8004522:	4614      	mov	r4, r2
 8004524:	461d      	mov	r5, r3
 8004526:	da08      	bge.n	800453a <__swhatbuf_r+0x24>
 8004528:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	602a      	str	r2, [r5, #0]
 8004530:	061a      	lsls	r2, r3, #24
 8004532:	d410      	bmi.n	8004556 <__swhatbuf_r+0x40>
 8004534:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004538:	e00e      	b.n	8004558 <__swhatbuf_r+0x42>
 800453a:	466a      	mov	r2, sp
 800453c:	f000 fed8 	bl	80052f0 <_fstat_r>
 8004540:	2800      	cmp	r0, #0
 8004542:	dbf1      	blt.n	8004528 <__swhatbuf_r+0x12>
 8004544:	9a01      	ldr	r2, [sp, #4]
 8004546:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800454a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800454e:	425a      	negs	r2, r3
 8004550:	415a      	adcs	r2, r3
 8004552:	602a      	str	r2, [r5, #0]
 8004554:	e7ee      	b.n	8004534 <__swhatbuf_r+0x1e>
 8004556:	2340      	movs	r3, #64	; 0x40
 8004558:	2000      	movs	r0, #0
 800455a:	6023      	str	r3, [r4, #0]
 800455c:	b016      	add	sp, #88	; 0x58
 800455e:	bd70      	pop	{r4, r5, r6, pc}

08004560 <__smakebuf_r>:
 8004560:	898b      	ldrh	r3, [r1, #12]
 8004562:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004564:	079d      	lsls	r5, r3, #30
 8004566:	4606      	mov	r6, r0
 8004568:	460c      	mov	r4, r1
 800456a:	d507      	bpl.n	800457c <__smakebuf_r+0x1c>
 800456c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004570:	6023      	str	r3, [r4, #0]
 8004572:	6123      	str	r3, [r4, #16]
 8004574:	2301      	movs	r3, #1
 8004576:	6163      	str	r3, [r4, #20]
 8004578:	b002      	add	sp, #8
 800457a:	bd70      	pop	{r4, r5, r6, pc}
 800457c:	ab01      	add	r3, sp, #4
 800457e:	466a      	mov	r2, sp
 8004580:	f7ff ffc9 	bl	8004516 <__swhatbuf_r>
 8004584:	9900      	ldr	r1, [sp, #0]
 8004586:	4605      	mov	r5, r0
 8004588:	4630      	mov	r0, r6
 800458a:	f000 f895 	bl	80046b8 <_malloc_r>
 800458e:	b948      	cbnz	r0, 80045a4 <__smakebuf_r+0x44>
 8004590:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004594:	059a      	lsls	r2, r3, #22
 8004596:	d4ef      	bmi.n	8004578 <__smakebuf_r+0x18>
 8004598:	f023 0303 	bic.w	r3, r3, #3
 800459c:	f043 0302 	orr.w	r3, r3, #2
 80045a0:	81a3      	strh	r3, [r4, #12]
 80045a2:	e7e3      	b.n	800456c <__smakebuf_r+0xc>
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <__smakebuf_r+0x7c>)
 80045a6:	62b3      	str	r3, [r6, #40]	; 0x28
 80045a8:	89a3      	ldrh	r3, [r4, #12]
 80045aa:	6020      	str	r0, [r4, #0]
 80045ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80045b0:	81a3      	strh	r3, [r4, #12]
 80045b2:	9b00      	ldr	r3, [sp, #0]
 80045b4:	6163      	str	r3, [r4, #20]
 80045b6:	9b01      	ldr	r3, [sp, #4]
 80045b8:	6120      	str	r0, [r4, #16]
 80045ba:	b15b      	cbz	r3, 80045d4 <__smakebuf_r+0x74>
 80045bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045c0:	4630      	mov	r0, r6
 80045c2:	f000 fea7 	bl	8005314 <_isatty_r>
 80045c6:	b128      	cbz	r0, 80045d4 <__smakebuf_r+0x74>
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	f023 0303 	bic.w	r3, r3, #3
 80045ce:	f043 0301 	orr.w	r3, r3, #1
 80045d2:	81a3      	strh	r3, [r4, #12]
 80045d4:	89a0      	ldrh	r0, [r4, #12]
 80045d6:	4305      	orrs	r5, r0
 80045d8:	81a5      	strh	r5, [r4, #12]
 80045da:	e7cd      	b.n	8004578 <__smakebuf_r+0x18>
 80045dc:	08004335 	.word	0x08004335

080045e0 <_free_r>:
 80045e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045e2:	2900      	cmp	r1, #0
 80045e4:	d044      	beq.n	8004670 <_free_r+0x90>
 80045e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045ea:	9001      	str	r0, [sp, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	f1a1 0404 	sub.w	r4, r1, #4
 80045f2:	bfb8      	it	lt
 80045f4:	18e4      	addlt	r4, r4, r3
 80045f6:	f000 febd 	bl	8005374 <__malloc_lock>
 80045fa:	4a1e      	ldr	r2, [pc, #120]	; (8004674 <_free_r+0x94>)
 80045fc:	9801      	ldr	r0, [sp, #4]
 80045fe:	6813      	ldr	r3, [r2, #0]
 8004600:	b933      	cbnz	r3, 8004610 <_free_r+0x30>
 8004602:	6063      	str	r3, [r4, #4]
 8004604:	6014      	str	r4, [r2, #0]
 8004606:	b003      	add	sp, #12
 8004608:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800460c:	f000 beb8 	b.w	8005380 <__malloc_unlock>
 8004610:	42a3      	cmp	r3, r4
 8004612:	d908      	bls.n	8004626 <_free_r+0x46>
 8004614:	6825      	ldr	r5, [r4, #0]
 8004616:	1961      	adds	r1, r4, r5
 8004618:	428b      	cmp	r3, r1
 800461a:	bf01      	itttt	eq
 800461c:	6819      	ldreq	r1, [r3, #0]
 800461e:	685b      	ldreq	r3, [r3, #4]
 8004620:	1949      	addeq	r1, r1, r5
 8004622:	6021      	streq	r1, [r4, #0]
 8004624:	e7ed      	b.n	8004602 <_free_r+0x22>
 8004626:	461a      	mov	r2, r3
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	b10b      	cbz	r3, 8004630 <_free_r+0x50>
 800462c:	42a3      	cmp	r3, r4
 800462e:	d9fa      	bls.n	8004626 <_free_r+0x46>
 8004630:	6811      	ldr	r1, [r2, #0]
 8004632:	1855      	adds	r5, r2, r1
 8004634:	42a5      	cmp	r5, r4
 8004636:	d10b      	bne.n	8004650 <_free_r+0x70>
 8004638:	6824      	ldr	r4, [r4, #0]
 800463a:	4421      	add	r1, r4
 800463c:	1854      	adds	r4, r2, r1
 800463e:	42a3      	cmp	r3, r4
 8004640:	6011      	str	r1, [r2, #0]
 8004642:	d1e0      	bne.n	8004606 <_free_r+0x26>
 8004644:	681c      	ldr	r4, [r3, #0]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	6053      	str	r3, [r2, #4]
 800464a:	4421      	add	r1, r4
 800464c:	6011      	str	r1, [r2, #0]
 800464e:	e7da      	b.n	8004606 <_free_r+0x26>
 8004650:	d902      	bls.n	8004658 <_free_r+0x78>
 8004652:	230c      	movs	r3, #12
 8004654:	6003      	str	r3, [r0, #0]
 8004656:	e7d6      	b.n	8004606 <_free_r+0x26>
 8004658:	6825      	ldr	r5, [r4, #0]
 800465a:	1961      	adds	r1, r4, r5
 800465c:	428b      	cmp	r3, r1
 800465e:	bf04      	itt	eq
 8004660:	6819      	ldreq	r1, [r3, #0]
 8004662:	685b      	ldreq	r3, [r3, #4]
 8004664:	6063      	str	r3, [r4, #4]
 8004666:	bf04      	itt	eq
 8004668:	1949      	addeq	r1, r1, r5
 800466a:	6021      	streq	r1, [r4, #0]
 800466c:	6054      	str	r4, [r2, #4]
 800466e:	e7ca      	b.n	8004606 <_free_r+0x26>
 8004670:	b003      	add	sp, #12
 8004672:	bd30      	pop	{r4, r5, pc}
 8004674:	2000060c 	.word	0x2000060c

08004678 <sbrk_aligned>:
 8004678:	b570      	push	{r4, r5, r6, lr}
 800467a:	4e0e      	ldr	r6, [pc, #56]	; (80046b4 <sbrk_aligned+0x3c>)
 800467c:	460c      	mov	r4, r1
 800467e:	6831      	ldr	r1, [r6, #0]
 8004680:	4605      	mov	r5, r0
 8004682:	b911      	cbnz	r1, 800468a <sbrk_aligned+0x12>
 8004684:	f000 fc40 	bl	8004f08 <_sbrk_r>
 8004688:	6030      	str	r0, [r6, #0]
 800468a:	4621      	mov	r1, r4
 800468c:	4628      	mov	r0, r5
 800468e:	f000 fc3b 	bl	8004f08 <_sbrk_r>
 8004692:	1c43      	adds	r3, r0, #1
 8004694:	d00a      	beq.n	80046ac <sbrk_aligned+0x34>
 8004696:	1cc4      	adds	r4, r0, #3
 8004698:	f024 0403 	bic.w	r4, r4, #3
 800469c:	42a0      	cmp	r0, r4
 800469e:	d007      	beq.n	80046b0 <sbrk_aligned+0x38>
 80046a0:	1a21      	subs	r1, r4, r0
 80046a2:	4628      	mov	r0, r5
 80046a4:	f000 fc30 	bl	8004f08 <_sbrk_r>
 80046a8:	3001      	adds	r0, #1
 80046aa:	d101      	bne.n	80046b0 <sbrk_aligned+0x38>
 80046ac:	f04f 34ff 	mov.w	r4, #4294967295
 80046b0:	4620      	mov	r0, r4
 80046b2:	bd70      	pop	{r4, r5, r6, pc}
 80046b4:	20000610 	.word	0x20000610

080046b8 <_malloc_r>:
 80046b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046bc:	1ccd      	adds	r5, r1, #3
 80046be:	f025 0503 	bic.w	r5, r5, #3
 80046c2:	3508      	adds	r5, #8
 80046c4:	2d0c      	cmp	r5, #12
 80046c6:	bf38      	it	cc
 80046c8:	250c      	movcc	r5, #12
 80046ca:	2d00      	cmp	r5, #0
 80046cc:	4607      	mov	r7, r0
 80046ce:	db01      	blt.n	80046d4 <_malloc_r+0x1c>
 80046d0:	42a9      	cmp	r1, r5
 80046d2:	d905      	bls.n	80046e0 <_malloc_r+0x28>
 80046d4:	230c      	movs	r3, #12
 80046d6:	603b      	str	r3, [r7, #0]
 80046d8:	2600      	movs	r6, #0
 80046da:	4630      	mov	r0, r6
 80046dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80046e0:	4e2e      	ldr	r6, [pc, #184]	; (800479c <_malloc_r+0xe4>)
 80046e2:	f000 fe47 	bl	8005374 <__malloc_lock>
 80046e6:	6833      	ldr	r3, [r6, #0]
 80046e8:	461c      	mov	r4, r3
 80046ea:	bb34      	cbnz	r4, 800473a <_malloc_r+0x82>
 80046ec:	4629      	mov	r1, r5
 80046ee:	4638      	mov	r0, r7
 80046f0:	f7ff ffc2 	bl	8004678 <sbrk_aligned>
 80046f4:	1c43      	adds	r3, r0, #1
 80046f6:	4604      	mov	r4, r0
 80046f8:	d14d      	bne.n	8004796 <_malloc_r+0xde>
 80046fa:	6834      	ldr	r4, [r6, #0]
 80046fc:	4626      	mov	r6, r4
 80046fe:	2e00      	cmp	r6, #0
 8004700:	d140      	bne.n	8004784 <_malloc_r+0xcc>
 8004702:	6823      	ldr	r3, [r4, #0]
 8004704:	4631      	mov	r1, r6
 8004706:	4638      	mov	r0, r7
 8004708:	eb04 0803 	add.w	r8, r4, r3
 800470c:	f000 fbfc 	bl	8004f08 <_sbrk_r>
 8004710:	4580      	cmp	r8, r0
 8004712:	d13a      	bne.n	800478a <_malloc_r+0xd2>
 8004714:	6821      	ldr	r1, [r4, #0]
 8004716:	3503      	adds	r5, #3
 8004718:	1a6d      	subs	r5, r5, r1
 800471a:	f025 0503 	bic.w	r5, r5, #3
 800471e:	3508      	adds	r5, #8
 8004720:	2d0c      	cmp	r5, #12
 8004722:	bf38      	it	cc
 8004724:	250c      	movcc	r5, #12
 8004726:	4629      	mov	r1, r5
 8004728:	4638      	mov	r0, r7
 800472a:	f7ff ffa5 	bl	8004678 <sbrk_aligned>
 800472e:	3001      	adds	r0, #1
 8004730:	d02b      	beq.n	800478a <_malloc_r+0xd2>
 8004732:	6823      	ldr	r3, [r4, #0]
 8004734:	442b      	add	r3, r5
 8004736:	6023      	str	r3, [r4, #0]
 8004738:	e00e      	b.n	8004758 <_malloc_r+0xa0>
 800473a:	6822      	ldr	r2, [r4, #0]
 800473c:	1b52      	subs	r2, r2, r5
 800473e:	d41e      	bmi.n	800477e <_malloc_r+0xc6>
 8004740:	2a0b      	cmp	r2, #11
 8004742:	d916      	bls.n	8004772 <_malloc_r+0xba>
 8004744:	1961      	adds	r1, r4, r5
 8004746:	42a3      	cmp	r3, r4
 8004748:	6025      	str	r5, [r4, #0]
 800474a:	bf18      	it	ne
 800474c:	6059      	strne	r1, [r3, #4]
 800474e:	6863      	ldr	r3, [r4, #4]
 8004750:	bf08      	it	eq
 8004752:	6031      	streq	r1, [r6, #0]
 8004754:	5162      	str	r2, [r4, r5]
 8004756:	604b      	str	r3, [r1, #4]
 8004758:	4638      	mov	r0, r7
 800475a:	f104 060b 	add.w	r6, r4, #11
 800475e:	f000 fe0f 	bl	8005380 <__malloc_unlock>
 8004762:	f026 0607 	bic.w	r6, r6, #7
 8004766:	1d23      	adds	r3, r4, #4
 8004768:	1af2      	subs	r2, r6, r3
 800476a:	d0b6      	beq.n	80046da <_malloc_r+0x22>
 800476c:	1b9b      	subs	r3, r3, r6
 800476e:	50a3      	str	r3, [r4, r2]
 8004770:	e7b3      	b.n	80046da <_malloc_r+0x22>
 8004772:	6862      	ldr	r2, [r4, #4]
 8004774:	42a3      	cmp	r3, r4
 8004776:	bf0c      	ite	eq
 8004778:	6032      	streq	r2, [r6, #0]
 800477a:	605a      	strne	r2, [r3, #4]
 800477c:	e7ec      	b.n	8004758 <_malloc_r+0xa0>
 800477e:	4623      	mov	r3, r4
 8004780:	6864      	ldr	r4, [r4, #4]
 8004782:	e7b2      	b.n	80046ea <_malloc_r+0x32>
 8004784:	4634      	mov	r4, r6
 8004786:	6876      	ldr	r6, [r6, #4]
 8004788:	e7b9      	b.n	80046fe <_malloc_r+0x46>
 800478a:	230c      	movs	r3, #12
 800478c:	603b      	str	r3, [r7, #0]
 800478e:	4638      	mov	r0, r7
 8004790:	f000 fdf6 	bl	8005380 <__malloc_unlock>
 8004794:	e7a1      	b.n	80046da <_malloc_r+0x22>
 8004796:	6025      	str	r5, [r4, #0]
 8004798:	e7de      	b.n	8004758 <_malloc_r+0xa0>
 800479a:	bf00      	nop
 800479c:	2000060c 	.word	0x2000060c

080047a0 <__svfiscanf_r>:
 80047a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a4:	461d      	mov	r5, r3
 80047a6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80047a8:	07df      	lsls	r7, r3, #31
 80047aa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80047ae:	4606      	mov	r6, r0
 80047b0:	460c      	mov	r4, r1
 80047b2:	4692      	mov	sl, r2
 80047b4:	d405      	bmi.n	80047c2 <__svfiscanf_r+0x22>
 80047b6:	898b      	ldrh	r3, [r1, #12]
 80047b8:	0598      	lsls	r0, r3, #22
 80047ba:	d402      	bmi.n	80047c2 <__svfiscanf_r+0x22>
 80047bc:	6d88      	ldr	r0, [r1, #88]	; 0x58
 80047be:	f7ff fea8 	bl	8004512 <__retarget_lock_acquire_recursive>
 80047c2:	2300      	movs	r3, #0
 80047c4:	e9cd 3344 	strd	r3, r3, [sp, #272]	; 0x110
 80047c8:	4ba6      	ldr	r3, [pc, #664]	; (8004a64 <__svfiscanf_r+0x2c4>)
 80047ca:	93a0      	str	r3, [sp, #640]	; 0x280
 80047cc:	f10d 0804 	add.w	r8, sp, #4
 80047d0:	4ba5      	ldr	r3, [pc, #660]	; (8004a68 <__svfiscanf_r+0x2c8>)
 80047d2:	4fa6      	ldr	r7, [pc, #664]	; (8004a6c <__svfiscanf_r+0x2cc>)
 80047d4:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8004a70 <__svfiscanf_r+0x2d0>
 80047d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80047dc:	93a1      	str	r3, [sp, #644]	; 0x284
 80047de:	9500      	str	r5, [sp, #0]
 80047e0:	f89a 3000 	ldrb.w	r3, [sl]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	f000 8173 	beq.w	8004ad0 <__svfiscanf_r+0x330>
 80047ea:	5dd9      	ldrb	r1, [r3, r7]
 80047ec:	f011 0108 	ands.w	r1, r1, #8
 80047f0:	f10a 0501 	add.w	r5, sl, #1
 80047f4:	d019      	beq.n	800482a <__svfiscanf_r+0x8a>
 80047f6:	6863      	ldr	r3, [r4, #4]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	dd0f      	ble.n	800481c <__svfiscanf_r+0x7c>
 80047fc:	6823      	ldr	r3, [r4, #0]
 80047fe:	781a      	ldrb	r2, [r3, #0]
 8004800:	5cba      	ldrb	r2, [r7, r2]
 8004802:	0711      	lsls	r1, r2, #28
 8004804:	d401      	bmi.n	800480a <__svfiscanf_r+0x6a>
 8004806:	46aa      	mov	sl, r5
 8004808:	e7ea      	b.n	80047e0 <__svfiscanf_r+0x40>
 800480a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800480c:	3201      	adds	r2, #1
 800480e:	9245      	str	r2, [sp, #276]	; 0x114
 8004810:	6862      	ldr	r2, [r4, #4]
 8004812:	3301      	adds	r3, #1
 8004814:	3a01      	subs	r2, #1
 8004816:	6062      	str	r2, [r4, #4]
 8004818:	6023      	str	r3, [r4, #0]
 800481a:	e7ec      	b.n	80047f6 <__svfiscanf_r+0x56>
 800481c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800481e:	4621      	mov	r1, r4
 8004820:	4630      	mov	r0, r6
 8004822:	4798      	blx	r3
 8004824:	2800      	cmp	r0, #0
 8004826:	d0e9      	beq.n	80047fc <__svfiscanf_r+0x5c>
 8004828:	e7ed      	b.n	8004806 <__svfiscanf_r+0x66>
 800482a:	2b25      	cmp	r3, #37	; 0x25
 800482c:	d012      	beq.n	8004854 <__svfiscanf_r+0xb4>
 800482e:	469a      	mov	sl, r3
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	f340 8095 	ble.w	8004962 <__svfiscanf_r+0x1c2>
 8004838:	6822      	ldr	r2, [r4, #0]
 800483a:	7813      	ldrb	r3, [r2, #0]
 800483c:	4553      	cmp	r3, sl
 800483e:	f040 8147 	bne.w	8004ad0 <__svfiscanf_r+0x330>
 8004842:	6863      	ldr	r3, [r4, #4]
 8004844:	3b01      	subs	r3, #1
 8004846:	6063      	str	r3, [r4, #4]
 8004848:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800484a:	3201      	adds	r2, #1
 800484c:	3301      	adds	r3, #1
 800484e:	6022      	str	r2, [r4, #0]
 8004850:	9345      	str	r3, [sp, #276]	; 0x114
 8004852:	e7d8      	b.n	8004806 <__svfiscanf_r+0x66>
 8004854:	9141      	str	r1, [sp, #260]	; 0x104
 8004856:	9143      	str	r1, [sp, #268]	; 0x10c
 8004858:	f89a 3001 	ldrb.w	r3, [sl, #1]
 800485c:	2b2a      	cmp	r3, #42	; 0x2a
 800485e:	bf02      	ittt	eq
 8004860:	2310      	moveq	r3, #16
 8004862:	9341      	streq	r3, [sp, #260]	; 0x104
 8004864:	f10a 0502 	addeq.w	r5, sl, #2
 8004868:	220a      	movs	r2, #10
 800486a:	46aa      	mov	sl, r5
 800486c:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8004870:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8004874:	2b09      	cmp	r3, #9
 8004876:	d91e      	bls.n	80048b6 <__svfiscanf_r+0x116>
 8004878:	487d      	ldr	r0, [pc, #500]	; (8004a70 <__svfiscanf_r+0x2d0>)
 800487a:	2203      	movs	r2, #3
 800487c:	f7fb fcd0 	bl	8000220 <memchr>
 8004880:	b140      	cbz	r0, 8004894 <__svfiscanf_r+0xf4>
 8004882:	2301      	movs	r3, #1
 8004884:	eba0 0009 	sub.w	r0, r0, r9
 8004888:	fa03 f000 	lsl.w	r0, r3, r0
 800488c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800488e:	4318      	orrs	r0, r3
 8004890:	9041      	str	r0, [sp, #260]	; 0x104
 8004892:	4655      	mov	r5, sl
 8004894:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004898:	2b78      	cmp	r3, #120	; 0x78
 800489a:	d807      	bhi.n	80048ac <__svfiscanf_r+0x10c>
 800489c:	2b57      	cmp	r3, #87	; 0x57
 800489e:	d811      	bhi.n	80048c4 <__svfiscanf_r+0x124>
 80048a0:	2b25      	cmp	r3, #37	; 0x25
 80048a2:	d0c4      	beq.n	800482e <__svfiscanf_r+0x8e>
 80048a4:	d858      	bhi.n	8004958 <__svfiscanf_r+0x1b8>
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 80c8 	beq.w	8004a3c <__svfiscanf_r+0x29c>
 80048ac:	2303      	movs	r3, #3
 80048ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80048b0:	230a      	movs	r3, #10
 80048b2:	9342      	str	r3, [sp, #264]	; 0x108
 80048b4:	e07c      	b.n	80049b0 <__svfiscanf_r+0x210>
 80048b6:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80048b8:	fb02 1103 	mla	r1, r2, r3, r1
 80048bc:	3930      	subs	r1, #48	; 0x30
 80048be:	9143      	str	r1, [sp, #268]	; 0x10c
 80048c0:	4655      	mov	r5, sl
 80048c2:	e7d2      	b.n	800486a <__svfiscanf_r+0xca>
 80048c4:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80048c8:	2a20      	cmp	r2, #32
 80048ca:	d8ef      	bhi.n	80048ac <__svfiscanf_r+0x10c>
 80048cc:	a101      	add	r1, pc, #4	; (adr r1, 80048d4 <__svfiscanf_r+0x134>)
 80048ce:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80048d2:	bf00      	nop
 80048d4:	0800499b 	.word	0x0800499b
 80048d8:	080048ad 	.word	0x080048ad
 80048dc:	080048ad 	.word	0x080048ad
 80048e0:	080049f9 	.word	0x080049f9
 80048e4:	080048ad 	.word	0x080048ad
 80048e8:	080048ad 	.word	0x080048ad
 80048ec:	080048ad 	.word	0x080048ad
 80048f0:	080048ad 	.word	0x080048ad
 80048f4:	080048ad 	.word	0x080048ad
 80048f8:	080048ad 	.word	0x080048ad
 80048fc:	080048ad 	.word	0x080048ad
 8004900:	08004a0f 	.word	0x08004a0f
 8004904:	080049e5 	.word	0x080049e5
 8004908:	0800495f 	.word	0x0800495f
 800490c:	0800495f 	.word	0x0800495f
 8004910:	0800495f 	.word	0x0800495f
 8004914:	080048ad 	.word	0x080048ad
 8004918:	080049e9 	.word	0x080049e9
 800491c:	080048ad 	.word	0x080048ad
 8004920:	080048ad 	.word	0x080048ad
 8004924:	080048ad 	.word	0x080048ad
 8004928:	080048ad 	.word	0x080048ad
 800492c:	08004a1f 	.word	0x08004a1f
 8004930:	080049f1 	.word	0x080049f1
 8004934:	08004993 	.word	0x08004993
 8004938:	080048ad 	.word	0x080048ad
 800493c:	080048ad 	.word	0x080048ad
 8004940:	08004a1b 	.word	0x08004a1b
 8004944:	080048ad 	.word	0x080048ad
 8004948:	080049e5 	.word	0x080049e5
 800494c:	080048ad 	.word	0x080048ad
 8004950:	080048ad 	.word	0x080048ad
 8004954:	0800499b 	.word	0x0800499b
 8004958:	3b45      	subs	r3, #69	; 0x45
 800495a:	2b02      	cmp	r3, #2
 800495c:	d8a6      	bhi.n	80048ac <__svfiscanf_r+0x10c>
 800495e:	2305      	movs	r3, #5
 8004960:	e025      	b.n	80049ae <__svfiscanf_r+0x20e>
 8004962:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004964:	4621      	mov	r1, r4
 8004966:	4630      	mov	r0, r6
 8004968:	4798      	blx	r3
 800496a:	2800      	cmp	r0, #0
 800496c:	f43f af64 	beq.w	8004838 <__svfiscanf_r+0x98>
 8004970:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004972:	07da      	lsls	r2, r3, #31
 8004974:	f140 80a4 	bpl.w	8004ac0 <__svfiscanf_r+0x320>
 8004978:	9844      	ldr	r0, [sp, #272]	; 0x110
 800497a:	2800      	cmp	r0, #0
 800497c:	d067      	beq.n	8004a4e <__svfiscanf_r+0x2ae>
 800497e:	89a3      	ldrh	r3, [r4, #12]
 8004980:	f013 0f40 	tst.w	r3, #64	; 0x40
 8004984:	bf18      	it	ne
 8004986:	f04f 30ff 	movne.w	r0, #4294967295
 800498a:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800498e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004992:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8004994:	f042 0220 	orr.w	r2, r2, #32
 8004998:	9241      	str	r2, [sp, #260]	; 0x104
 800499a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800499c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049a0:	9241      	str	r2, [sp, #260]	; 0x104
 80049a2:	2210      	movs	r2, #16
 80049a4:	2b6f      	cmp	r3, #111	; 0x6f
 80049a6:	9242      	str	r2, [sp, #264]	; 0x108
 80049a8:	bf34      	ite	cc
 80049aa:	2303      	movcc	r3, #3
 80049ac:	2304      	movcs	r3, #4
 80049ae:	9347      	str	r3, [sp, #284]	; 0x11c
 80049b0:	6863      	ldr	r3, [r4, #4]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	dd4e      	ble.n	8004a54 <__svfiscanf_r+0x2b4>
 80049b6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80049b8:	065b      	lsls	r3, r3, #25
 80049ba:	d404      	bmi.n	80049c6 <__svfiscanf_r+0x226>
 80049bc:	6823      	ldr	r3, [r4, #0]
 80049be:	781a      	ldrb	r2, [r3, #0]
 80049c0:	5cba      	ldrb	r2, [r7, r2]
 80049c2:	0710      	lsls	r0, r2, #28
 80049c4:	d456      	bmi.n	8004a74 <__svfiscanf_r+0x2d4>
 80049c6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	dc65      	bgt.n	8004a98 <__svfiscanf_r+0x2f8>
 80049cc:	466b      	mov	r3, sp
 80049ce:	4622      	mov	r2, r4
 80049d0:	a941      	add	r1, sp, #260	; 0x104
 80049d2:	4630      	mov	r0, r6
 80049d4:	f000 f8b2 	bl	8004b3c <_scanf_chars>
 80049d8:	2801      	cmp	r0, #1
 80049da:	d079      	beq.n	8004ad0 <__svfiscanf_r+0x330>
 80049dc:	2802      	cmp	r0, #2
 80049de:	f47f af12 	bne.w	8004806 <__svfiscanf_r+0x66>
 80049e2:	e7c5      	b.n	8004970 <__svfiscanf_r+0x1d0>
 80049e4:	220a      	movs	r2, #10
 80049e6:	e7dd      	b.n	80049a4 <__svfiscanf_r+0x204>
 80049e8:	2300      	movs	r3, #0
 80049ea:	9342      	str	r3, [sp, #264]	; 0x108
 80049ec:	2303      	movs	r3, #3
 80049ee:	e7de      	b.n	80049ae <__svfiscanf_r+0x20e>
 80049f0:	2308      	movs	r3, #8
 80049f2:	9342      	str	r3, [sp, #264]	; 0x108
 80049f4:	2304      	movs	r3, #4
 80049f6:	e7da      	b.n	80049ae <__svfiscanf_r+0x20e>
 80049f8:	4629      	mov	r1, r5
 80049fa:	4640      	mov	r0, r8
 80049fc:	f000 fa94 	bl	8004f28 <__sccl>
 8004a00:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a02:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a06:	9341      	str	r3, [sp, #260]	; 0x104
 8004a08:	4605      	mov	r5, r0
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e7cf      	b.n	80049ae <__svfiscanf_r+0x20e>
 8004a0e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8004a10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004a14:	9341      	str	r3, [sp, #260]	; 0x104
 8004a16:	2300      	movs	r3, #0
 8004a18:	e7c9      	b.n	80049ae <__svfiscanf_r+0x20e>
 8004a1a:	2302      	movs	r3, #2
 8004a1c:	e7c7      	b.n	80049ae <__svfiscanf_r+0x20e>
 8004a1e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8004a20:	06c3      	lsls	r3, r0, #27
 8004a22:	f53f aef0 	bmi.w	8004806 <__svfiscanf_r+0x66>
 8004a26:	9b00      	ldr	r3, [sp, #0]
 8004a28:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a2a:	1d19      	adds	r1, r3, #4
 8004a2c:	9100      	str	r1, [sp, #0]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f010 0f01 	tst.w	r0, #1
 8004a34:	bf14      	ite	ne
 8004a36:	801a      	strhne	r2, [r3, #0]
 8004a38:	601a      	streq	r2, [r3, #0]
 8004a3a:	e6e4      	b.n	8004806 <__svfiscanf_r+0x66>
 8004a3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004a3e:	07d8      	lsls	r0, r3, #31
 8004a40:	d405      	bmi.n	8004a4e <__svfiscanf_r+0x2ae>
 8004a42:	89a3      	ldrh	r3, [r4, #12]
 8004a44:	0599      	lsls	r1, r3, #22
 8004a46:	d402      	bmi.n	8004a4e <__svfiscanf_r+0x2ae>
 8004a48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004a4a:	f7ff fd63 	bl	8004514 <__retarget_lock_release_recursive>
 8004a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8004a52:	e79a      	b.n	800498a <__svfiscanf_r+0x1ea>
 8004a54:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a56:	4621      	mov	r1, r4
 8004a58:	4630      	mov	r0, r6
 8004a5a:	4798      	blx	r3
 8004a5c:	2800      	cmp	r0, #0
 8004a5e:	d0aa      	beq.n	80049b6 <__svfiscanf_r+0x216>
 8004a60:	e786      	b.n	8004970 <__svfiscanf_r+0x1d0>
 8004a62:	bf00      	nop
 8004a64:	0800517d 	.word	0x0800517d
 8004a68:	08004df5 	.word	0x08004df5
 8004a6c:	080055a5 	.word	0x080055a5
 8004a70:	08005708 	.word	0x08005708
 8004a74:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8004a76:	3201      	adds	r2, #1
 8004a78:	9245      	str	r2, [sp, #276]	; 0x114
 8004a7a:	6862      	ldr	r2, [r4, #4]
 8004a7c:	3a01      	subs	r2, #1
 8004a7e:	2a00      	cmp	r2, #0
 8004a80:	6062      	str	r2, [r4, #4]
 8004a82:	dd02      	ble.n	8004a8a <__svfiscanf_r+0x2ea>
 8004a84:	3301      	adds	r3, #1
 8004a86:	6023      	str	r3, [r4, #0]
 8004a88:	e798      	b.n	80049bc <__svfiscanf_r+0x21c>
 8004a8a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8004a8c:	4621      	mov	r1, r4
 8004a8e:	4630      	mov	r0, r6
 8004a90:	4798      	blx	r3
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d092      	beq.n	80049bc <__svfiscanf_r+0x21c>
 8004a96:	e76b      	b.n	8004970 <__svfiscanf_r+0x1d0>
 8004a98:	2b04      	cmp	r3, #4
 8004a9a:	dc06      	bgt.n	8004aaa <__svfiscanf_r+0x30a>
 8004a9c:	466b      	mov	r3, sp
 8004a9e:	4622      	mov	r2, r4
 8004aa0:	a941      	add	r1, sp, #260	; 0x104
 8004aa2:	4630      	mov	r0, r6
 8004aa4:	f000 f8a4 	bl	8004bf0 <_scanf_i>
 8004aa8:	e796      	b.n	80049d8 <__svfiscanf_r+0x238>
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <__svfiscanf_r+0x348>)
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f43f aeaa 	beq.w	8004806 <__svfiscanf_r+0x66>
 8004ab2:	466b      	mov	r3, sp
 8004ab4:	4622      	mov	r2, r4
 8004ab6:	a941      	add	r1, sp, #260	; 0x104
 8004ab8:	4630      	mov	r0, r6
 8004aba:	f3af 8000 	nop.w
 8004abe:	e78b      	b.n	80049d8 <__svfiscanf_r+0x238>
 8004ac0:	89a3      	ldrh	r3, [r4, #12]
 8004ac2:	0599      	lsls	r1, r3, #22
 8004ac4:	f53f af58 	bmi.w	8004978 <__svfiscanf_r+0x1d8>
 8004ac8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004aca:	f7ff fd23 	bl	8004514 <__retarget_lock_release_recursive>
 8004ace:	e753      	b.n	8004978 <__svfiscanf_r+0x1d8>
 8004ad0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004ad2:	07da      	lsls	r2, r3, #31
 8004ad4:	d405      	bmi.n	8004ae2 <__svfiscanf_r+0x342>
 8004ad6:	89a3      	ldrh	r3, [r4, #12]
 8004ad8:	059b      	lsls	r3, r3, #22
 8004ada:	d402      	bmi.n	8004ae2 <__svfiscanf_r+0x342>
 8004adc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004ade:	f7ff fd19 	bl	8004514 <__retarget_lock_release_recursive>
 8004ae2:	9844      	ldr	r0, [sp, #272]	; 0x110
 8004ae4:	e751      	b.n	800498a <__svfiscanf_r+0x1ea>
 8004ae6:	bf00      	nop
 8004ae8:	00000000 	.word	0x00000000

08004aec <_vfiscanf_r>:
 8004aec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004aee:	460c      	mov	r4, r1
 8004af0:	4605      	mov	r5, r0
 8004af2:	b138      	cbz	r0, 8004b04 <_vfiscanf_r+0x18>
 8004af4:	6981      	ldr	r1, [r0, #24]
 8004af6:	b929      	cbnz	r1, 8004b04 <_vfiscanf_r+0x18>
 8004af8:	e9cd 2300 	strd	r2, r3, [sp]
 8004afc:	f7ff fc4e 	bl	800439c <__sinit>
 8004b00:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b04:	490a      	ldr	r1, [pc, #40]	; (8004b30 <_vfiscanf_r+0x44>)
 8004b06:	428c      	cmp	r4, r1
 8004b08:	d107      	bne.n	8004b1a <_vfiscanf_r+0x2e>
 8004b0a:	686c      	ldr	r4, [r5, #4]
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	4628      	mov	r0, r5
 8004b10:	b003      	add	sp, #12
 8004b12:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b16:	f7ff be43 	b.w	80047a0 <__svfiscanf_r>
 8004b1a:	4906      	ldr	r1, [pc, #24]	; (8004b34 <_vfiscanf_r+0x48>)
 8004b1c:	428c      	cmp	r4, r1
 8004b1e:	d101      	bne.n	8004b24 <_vfiscanf_r+0x38>
 8004b20:	68ac      	ldr	r4, [r5, #8]
 8004b22:	e7f3      	b.n	8004b0c <_vfiscanf_r+0x20>
 8004b24:	4904      	ldr	r1, [pc, #16]	; (8004b38 <_vfiscanf_r+0x4c>)
 8004b26:	428c      	cmp	r4, r1
 8004b28:	bf08      	it	eq
 8004b2a:	68ec      	ldreq	r4, [r5, #12]
 8004b2c:	e7ee      	b.n	8004b0c <_vfiscanf_r+0x20>
 8004b2e:	bf00      	nop
 8004b30:	080056c8 	.word	0x080056c8
 8004b34:	080056e8 	.word	0x080056e8
 8004b38:	080056a8 	.word	0x080056a8

08004b3c <_scanf_chars>:
 8004b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b40:	4615      	mov	r5, r2
 8004b42:	688a      	ldr	r2, [r1, #8]
 8004b44:	4680      	mov	r8, r0
 8004b46:	460c      	mov	r4, r1
 8004b48:	b932      	cbnz	r2, 8004b58 <_scanf_chars+0x1c>
 8004b4a:	698a      	ldr	r2, [r1, #24]
 8004b4c:	2a00      	cmp	r2, #0
 8004b4e:	bf0c      	ite	eq
 8004b50:	2201      	moveq	r2, #1
 8004b52:	f04f 32ff 	movne.w	r2, #4294967295
 8004b56:	608a      	str	r2, [r1, #8]
 8004b58:	6822      	ldr	r2, [r4, #0]
 8004b5a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8004bec <_scanf_chars+0xb0>
 8004b5e:	06d1      	lsls	r1, r2, #27
 8004b60:	bf5f      	itttt	pl
 8004b62:	681a      	ldrpl	r2, [r3, #0]
 8004b64:	1d11      	addpl	r1, r2, #4
 8004b66:	6019      	strpl	r1, [r3, #0]
 8004b68:	6816      	ldrpl	r6, [r2, #0]
 8004b6a:	2700      	movs	r7, #0
 8004b6c:	69a0      	ldr	r0, [r4, #24]
 8004b6e:	b188      	cbz	r0, 8004b94 <_scanf_chars+0x58>
 8004b70:	2801      	cmp	r0, #1
 8004b72:	d107      	bne.n	8004b84 <_scanf_chars+0x48>
 8004b74:	682a      	ldr	r2, [r5, #0]
 8004b76:	7811      	ldrb	r1, [r2, #0]
 8004b78:	6962      	ldr	r2, [r4, #20]
 8004b7a:	5c52      	ldrb	r2, [r2, r1]
 8004b7c:	b952      	cbnz	r2, 8004b94 <_scanf_chars+0x58>
 8004b7e:	2f00      	cmp	r7, #0
 8004b80:	d031      	beq.n	8004be6 <_scanf_chars+0xaa>
 8004b82:	e022      	b.n	8004bca <_scanf_chars+0x8e>
 8004b84:	2802      	cmp	r0, #2
 8004b86:	d120      	bne.n	8004bca <_scanf_chars+0x8e>
 8004b88:	682b      	ldr	r3, [r5, #0]
 8004b8a:	781b      	ldrb	r3, [r3, #0]
 8004b8c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8004b90:	071b      	lsls	r3, r3, #28
 8004b92:	d41a      	bmi.n	8004bca <_scanf_chars+0x8e>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	06da      	lsls	r2, r3, #27
 8004b98:	bf5e      	ittt	pl
 8004b9a:	682b      	ldrpl	r3, [r5, #0]
 8004b9c:	781b      	ldrbpl	r3, [r3, #0]
 8004b9e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8004ba2:	682a      	ldr	r2, [r5, #0]
 8004ba4:	686b      	ldr	r3, [r5, #4]
 8004ba6:	3201      	adds	r2, #1
 8004ba8:	602a      	str	r2, [r5, #0]
 8004baa:	68a2      	ldr	r2, [r4, #8]
 8004bac:	3b01      	subs	r3, #1
 8004bae:	3a01      	subs	r2, #1
 8004bb0:	606b      	str	r3, [r5, #4]
 8004bb2:	3701      	adds	r7, #1
 8004bb4:	60a2      	str	r2, [r4, #8]
 8004bb6:	b142      	cbz	r2, 8004bca <_scanf_chars+0x8e>
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	dcd7      	bgt.n	8004b6c <_scanf_chars+0x30>
 8004bbc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004bc0:	4629      	mov	r1, r5
 8004bc2:	4640      	mov	r0, r8
 8004bc4:	4798      	blx	r3
 8004bc6:	2800      	cmp	r0, #0
 8004bc8:	d0d0      	beq.n	8004b6c <_scanf_chars+0x30>
 8004bca:	6823      	ldr	r3, [r4, #0]
 8004bcc:	f013 0310 	ands.w	r3, r3, #16
 8004bd0:	d105      	bne.n	8004bde <_scanf_chars+0xa2>
 8004bd2:	68e2      	ldr	r2, [r4, #12]
 8004bd4:	3201      	adds	r2, #1
 8004bd6:	60e2      	str	r2, [r4, #12]
 8004bd8:	69a2      	ldr	r2, [r4, #24]
 8004bda:	b102      	cbz	r2, 8004bde <_scanf_chars+0xa2>
 8004bdc:	7033      	strb	r3, [r6, #0]
 8004bde:	6923      	ldr	r3, [r4, #16]
 8004be0:	443b      	add	r3, r7
 8004be2:	6123      	str	r3, [r4, #16]
 8004be4:	2000      	movs	r0, #0
 8004be6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004bea:	bf00      	nop
 8004bec:	080055a5 	.word	0x080055a5

08004bf0 <_scanf_i>:
 8004bf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bf4:	4698      	mov	r8, r3
 8004bf6:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <_scanf_i+0x1e0>)
 8004bf8:	460c      	mov	r4, r1
 8004bfa:	4682      	mov	sl, r0
 8004bfc:	4616      	mov	r6, r2
 8004bfe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004c02:	b087      	sub	sp, #28
 8004c04:	ab03      	add	r3, sp, #12
 8004c06:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c0a:	4b72      	ldr	r3, [pc, #456]	; (8004dd4 <_scanf_i+0x1e4>)
 8004c0c:	69a1      	ldr	r1, [r4, #24]
 8004c0e:	4a72      	ldr	r2, [pc, #456]	; (8004dd8 <_scanf_i+0x1e8>)
 8004c10:	2903      	cmp	r1, #3
 8004c12:	bf18      	it	ne
 8004c14:	461a      	movne	r2, r3
 8004c16:	68a3      	ldr	r3, [r4, #8]
 8004c18:	9201      	str	r2, [sp, #4]
 8004c1a:	1e5a      	subs	r2, r3, #1
 8004c1c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8004c20:	bf88      	it	hi
 8004c22:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8004c26:	4627      	mov	r7, r4
 8004c28:	bf82      	ittt	hi
 8004c2a:	eb03 0905 	addhi.w	r9, r3, r5
 8004c2e:	f240 135d 	movwhi	r3, #349	; 0x15d
 8004c32:	60a3      	strhi	r3, [r4, #8]
 8004c34:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004c38:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8004c3c:	bf98      	it	ls
 8004c3e:	f04f 0900 	movls.w	r9, #0
 8004c42:	6023      	str	r3, [r4, #0]
 8004c44:	463d      	mov	r5, r7
 8004c46:	f04f 0b00 	mov.w	fp, #0
 8004c4a:	6831      	ldr	r1, [r6, #0]
 8004c4c:	ab03      	add	r3, sp, #12
 8004c4e:	7809      	ldrb	r1, [r1, #0]
 8004c50:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8004c54:	2202      	movs	r2, #2
 8004c56:	f7fb fae3 	bl	8000220 <memchr>
 8004c5a:	b328      	cbz	r0, 8004ca8 <_scanf_i+0xb8>
 8004c5c:	f1bb 0f01 	cmp.w	fp, #1
 8004c60:	d159      	bne.n	8004d16 <_scanf_i+0x126>
 8004c62:	6862      	ldr	r2, [r4, #4]
 8004c64:	b92a      	cbnz	r2, 8004c72 <_scanf_i+0x82>
 8004c66:	6822      	ldr	r2, [r4, #0]
 8004c68:	2308      	movs	r3, #8
 8004c6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c6e:	6063      	str	r3, [r4, #4]
 8004c70:	6022      	str	r2, [r4, #0]
 8004c72:	6822      	ldr	r2, [r4, #0]
 8004c74:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8004c78:	6022      	str	r2, [r4, #0]
 8004c7a:	68a2      	ldr	r2, [r4, #8]
 8004c7c:	1e51      	subs	r1, r2, #1
 8004c7e:	60a1      	str	r1, [r4, #8]
 8004c80:	b192      	cbz	r2, 8004ca8 <_scanf_i+0xb8>
 8004c82:	6832      	ldr	r2, [r6, #0]
 8004c84:	1c51      	adds	r1, r2, #1
 8004c86:	6031      	str	r1, [r6, #0]
 8004c88:	7812      	ldrb	r2, [r2, #0]
 8004c8a:	f805 2b01 	strb.w	r2, [r5], #1
 8004c8e:	6872      	ldr	r2, [r6, #4]
 8004c90:	3a01      	subs	r2, #1
 8004c92:	2a00      	cmp	r2, #0
 8004c94:	6072      	str	r2, [r6, #4]
 8004c96:	dc07      	bgt.n	8004ca8 <_scanf_i+0xb8>
 8004c98:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8004c9c:	4631      	mov	r1, r6
 8004c9e:	4650      	mov	r0, sl
 8004ca0:	4790      	blx	r2
 8004ca2:	2800      	cmp	r0, #0
 8004ca4:	f040 8085 	bne.w	8004db2 <_scanf_i+0x1c2>
 8004ca8:	f10b 0b01 	add.w	fp, fp, #1
 8004cac:	f1bb 0f03 	cmp.w	fp, #3
 8004cb0:	d1cb      	bne.n	8004c4a <_scanf_i+0x5a>
 8004cb2:	6863      	ldr	r3, [r4, #4]
 8004cb4:	b90b      	cbnz	r3, 8004cba <_scanf_i+0xca>
 8004cb6:	230a      	movs	r3, #10
 8004cb8:	6063      	str	r3, [r4, #4]
 8004cba:	6863      	ldr	r3, [r4, #4]
 8004cbc:	4947      	ldr	r1, [pc, #284]	; (8004ddc <_scanf_i+0x1ec>)
 8004cbe:	6960      	ldr	r0, [r4, #20]
 8004cc0:	1ac9      	subs	r1, r1, r3
 8004cc2:	f000 f931 	bl	8004f28 <__sccl>
 8004cc6:	f04f 0b00 	mov.w	fp, #0
 8004cca:	68a3      	ldr	r3, [r4, #8]
 8004ccc:	6822      	ldr	r2, [r4, #0]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d03d      	beq.n	8004d4e <_scanf_i+0x15e>
 8004cd2:	6831      	ldr	r1, [r6, #0]
 8004cd4:	6960      	ldr	r0, [r4, #20]
 8004cd6:	f891 c000 	ldrb.w	ip, [r1]
 8004cda:	f810 000c 	ldrb.w	r0, [r0, ip]
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	d035      	beq.n	8004d4e <_scanf_i+0x15e>
 8004ce2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8004ce6:	d124      	bne.n	8004d32 <_scanf_i+0x142>
 8004ce8:	0510      	lsls	r0, r2, #20
 8004cea:	d522      	bpl.n	8004d32 <_scanf_i+0x142>
 8004cec:	f10b 0b01 	add.w	fp, fp, #1
 8004cf0:	f1b9 0f00 	cmp.w	r9, #0
 8004cf4:	d003      	beq.n	8004cfe <_scanf_i+0x10e>
 8004cf6:	3301      	adds	r3, #1
 8004cf8:	f109 39ff 	add.w	r9, r9, #4294967295
 8004cfc:	60a3      	str	r3, [r4, #8]
 8004cfe:	6873      	ldr	r3, [r6, #4]
 8004d00:	3b01      	subs	r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	6073      	str	r3, [r6, #4]
 8004d06:	dd1b      	ble.n	8004d40 <_scanf_i+0x150>
 8004d08:	6833      	ldr	r3, [r6, #0]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	6033      	str	r3, [r6, #0]
 8004d0e:	68a3      	ldr	r3, [r4, #8]
 8004d10:	3b01      	subs	r3, #1
 8004d12:	60a3      	str	r3, [r4, #8]
 8004d14:	e7d9      	b.n	8004cca <_scanf_i+0xda>
 8004d16:	f1bb 0f02 	cmp.w	fp, #2
 8004d1a:	d1ae      	bne.n	8004c7a <_scanf_i+0x8a>
 8004d1c:	6822      	ldr	r2, [r4, #0]
 8004d1e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8004d22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8004d26:	d1bf      	bne.n	8004ca8 <_scanf_i+0xb8>
 8004d28:	2310      	movs	r3, #16
 8004d2a:	6063      	str	r3, [r4, #4]
 8004d2c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d30:	e7a2      	b.n	8004c78 <_scanf_i+0x88>
 8004d32:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8004d36:	6022      	str	r2, [r4, #0]
 8004d38:	780b      	ldrb	r3, [r1, #0]
 8004d3a:	f805 3b01 	strb.w	r3, [r5], #1
 8004d3e:	e7de      	b.n	8004cfe <_scanf_i+0x10e>
 8004d40:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8004d44:	4631      	mov	r1, r6
 8004d46:	4650      	mov	r0, sl
 8004d48:	4798      	blx	r3
 8004d4a:	2800      	cmp	r0, #0
 8004d4c:	d0df      	beq.n	8004d0e <_scanf_i+0x11e>
 8004d4e:	6823      	ldr	r3, [r4, #0]
 8004d50:	05db      	lsls	r3, r3, #23
 8004d52:	d50d      	bpl.n	8004d70 <_scanf_i+0x180>
 8004d54:	42bd      	cmp	r5, r7
 8004d56:	d909      	bls.n	8004d6c <_scanf_i+0x17c>
 8004d58:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8004d5c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004d60:	4632      	mov	r2, r6
 8004d62:	4650      	mov	r0, sl
 8004d64:	4798      	blx	r3
 8004d66:	f105 39ff 	add.w	r9, r5, #4294967295
 8004d6a:	464d      	mov	r5, r9
 8004d6c:	42bd      	cmp	r5, r7
 8004d6e:	d02d      	beq.n	8004dcc <_scanf_i+0x1dc>
 8004d70:	6822      	ldr	r2, [r4, #0]
 8004d72:	f012 0210 	ands.w	r2, r2, #16
 8004d76:	d113      	bne.n	8004da0 <_scanf_i+0x1b0>
 8004d78:	702a      	strb	r2, [r5, #0]
 8004d7a:	6863      	ldr	r3, [r4, #4]
 8004d7c:	9e01      	ldr	r6, [sp, #4]
 8004d7e:	4639      	mov	r1, r7
 8004d80:	4650      	mov	r0, sl
 8004d82:	47b0      	blx	r6
 8004d84:	6821      	ldr	r1, [r4, #0]
 8004d86:	f8d8 3000 	ldr.w	r3, [r8]
 8004d8a:	f011 0f20 	tst.w	r1, #32
 8004d8e:	d013      	beq.n	8004db8 <_scanf_i+0x1c8>
 8004d90:	1d1a      	adds	r2, r3, #4
 8004d92:	f8c8 2000 	str.w	r2, [r8]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	6018      	str	r0, [r3, #0]
 8004d9a:	68e3      	ldr	r3, [r4, #12]
 8004d9c:	3301      	adds	r3, #1
 8004d9e:	60e3      	str	r3, [r4, #12]
 8004da0:	1bed      	subs	r5, r5, r7
 8004da2:	44ab      	add	fp, r5
 8004da4:	6925      	ldr	r5, [r4, #16]
 8004da6:	445d      	add	r5, fp
 8004da8:	6125      	str	r5, [r4, #16]
 8004daa:	2000      	movs	r0, #0
 8004dac:	b007      	add	sp, #28
 8004dae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db2:	f04f 0b00 	mov.w	fp, #0
 8004db6:	e7ca      	b.n	8004d4e <_scanf_i+0x15e>
 8004db8:	1d1a      	adds	r2, r3, #4
 8004dba:	f8c8 2000 	str.w	r2, [r8]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f011 0f01 	tst.w	r1, #1
 8004dc4:	bf14      	ite	ne
 8004dc6:	8018      	strhne	r0, [r3, #0]
 8004dc8:	6018      	streq	r0, [r3, #0]
 8004dca:	e7e6      	b.n	8004d9a <_scanf_i+0x1aa>
 8004dcc:	2001      	movs	r0, #1
 8004dce:	e7ed      	b.n	8004dac <_scanf_i+0x1bc>
 8004dd0:	0800557c 	.word	0x0800557c
 8004dd4:	08005105 	.word	0x08005105
 8004dd8:	08003fad 	.word	0x08003fad
 8004ddc:	08005725 	.word	0x08005725

08004de0 <lflush>:
 8004de0:	8983      	ldrh	r3, [r0, #12]
 8004de2:	f003 0309 	and.w	r3, r3, #9
 8004de6:	2b09      	cmp	r3, #9
 8004de8:	d101      	bne.n	8004dee <lflush+0xe>
 8004dea:	f7ff ba6d 	b.w	80042c8 <fflush>
 8004dee:	2000      	movs	r0, #0
 8004df0:	4770      	bx	lr
	...

08004df4 <__srefill_r>:
 8004df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004df6:	460c      	mov	r4, r1
 8004df8:	4605      	mov	r5, r0
 8004dfa:	b118      	cbz	r0, 8004e04 <__srefill_r+0x10>
 8004dfc:	6983      	ldr	r3, [r0, #24]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <__srefill_r+0x10>
 8004e00:	f7ff facc 	bl	800439c <__sinit>
 8004e04:	4b3b      	ldr	r3, [pc, #236]	; (8004ef4 <__srefill_r+0x100>)
 8004e06:	429c      	cmp	r4, r3
 8004e08:	d10a      	bne.n	8004e20 <__srefill_r+0x2c>
 8004e0a:	686c      	ldr	r4, [r5, #4]
 8004e0c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004e10:	2300      	movs	r3, #0
 8004e12:	6063      	str	r3, [r4, #4]
 8004e14:	89a3      	ldrh	r3, [r4, #12]
 8004e16:	069e      	lsls	r6, r3, #26
 8004e18:	d50c      	bpl.n	8004e34 <__srefill_r+0x40>
 8004e1a:	f04f 30ff 	mov.w	r0, #4294967295
 8004e1e:	e066      	b.n	8004eee <__srefill_r+0xfa>
 8004e20:	4b35      	ldr	r3, [pc, #212]	; (8004ef8 <__srefill_r+0x104>)
 8004e22:	429c      	cmp	r4, r3
 8004e24:	d101      	bne.n	8004e2a <__srefill_r+0x36>
 8004e26:	68ac      	ldr	r4, [r5, #8]
 8004e28:	e7f0      	b.n	8004e0c <__srefill_r+0x18>
 8004e2a:	4b34      	ldr	r3, [pc, #208]	; (8004efc <__srefill_r+0x108>)
 8004e2c:	429c      	cmp	r4, r3
 8004e2e:	bf08      	it	eq
 8004e30:	68ec      	ldreq	r4, [r5, #12]
 8004e32:	e7eb      	b.n	8004e0c <__srefill_r+0x18>
 8004e34:	0758      	lsls	r0, r3, #29
 8004e36:	d448      	bmi.n	8004eca <__srefill_r+0xd6>
 8004e38:	06d9      	lsls	r1, r3, #27
 8004e3a:	d405      	bmi.n	8004e48 <__srefill_r+0x54>
 8004e3c:	2309      	movs	r3, #9
 8004e3e:	602b      	str	r3, [r5, #0]
 8004e40:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004e44:	81a3      	strh	r3, [r4, #12]
 8004e46:	e7e8      	b.n	8004e1a <__srefill_r+0x26>
 8004e48:	071a      	lsls	r2, r3, #28
 8004e4a:	d50b      	bpl.n	8004e64 <__srefill_r+0x70>
 8004e4c:	4621      	mov	r1, r4
 8004e4e:	4628      	mov	r0, r5
 8004e50:	f7ff f9fe 	bl	8004250 <_fflush_r>
 8004e54:	2800      	cmp	r0, #0
 8004e56:	d1e0      	bne.n	8004e1a <__srefill_r+0x26>
 8004e58:	89a3      	ldrh	r3, [r4, #12]
 8004e5a:	60a0      	str	r0, [r4, #8]
 8004e5c:	f023 0308 	bic.w	r3, r3, #8
 8004e60:	81a3      	strh	r3, [r4, #12]
 8004e62:	61a0      	str	r0, [r4, #24]
 8004e64:	89a3      	ldrh	r3, [r4, #12]
 8004e66:	f043 0304 	orr.w	r3, r3, #4
 8004e6a:	81a3      	strh	r3, [r4, #12]
 8004e6c:	6923      	ldr	r3, [r4, #16]
 8004e6e:	b91b      	cbnz	r3, 8004e78 <__srefill_r+0x84>
 8004e70:	4621      	mov	r1, r4
 8004e72:	4628      	mov	r0, r5
 8004e74:	f7ff fb74 	bl	8004560 <__smakebuf_r>
 8004e78:	89a6      	ldrh	r6, [r4, #12]
 8004e7a:	f9b4 700c 	ldrsh.w	r7, [r4, #12]
 8004e7e:	07b3      	lsls	r3, r6, #30
 8004e80:	d00f      	beq.n	8004ea2 <__srefill_r+0xae>
 8004e82:	2301      	movs	r3, #1
 8004e84:	81a3      	strh	r3, [r4, #12]
 8004e86:	4b1e      	ldr	r3, [pc, #120]	; (8004f00 <__srefill_r+0x10c>)
 8004e88:	491e      	ldr	r1, [pc, #120]	; (8004f04 <__srefill_r+0x110>)
 8004e8a:	6818      	ldr	r0, [r3, #0]
 8004e8c:	f006 0609 	and.w	r6, r6, #9
 8004e90:	f7ff fb02 	bl	8004498 <_fwalk>
 8004e94:	2e09      	cmp	r6, #9
 8004e96:	81a7      	strh	r7, [r4, #12]
 8004e98:	d103      	bne.n	8004ea2 <__srefill_r+0xae>
 8004e9a:	4621      	mov	r1, r4
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f7ff f951 	bl	8004144 <__sflush_r>
 8004ea2:	6922      	ldr	r2, [r4, #16]
 8004ea4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004ea6:	6963      	ldr	r3, [r4, #20]
 8004ea8:	6a21      	ldr	r1, [r4, #32]
 8004eaa:	6022      	str	r2, [r4, #0]
 8004eac:	4628      	mov	r0, r5
 8004eae:	47b0      	blx	r6
 8004eb0:	2800      	cmp	r0, #0
 8004eb2:	6060      	str	r0, [r4, #4]
 8004eb4:	dc1c      	bgt.n	8004ef0 <__srefill_r+0xfc>
 8004eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004eba:	bf17      	itett	ne
 8004ebc:	2200      	movne	r2, #0
 8004ebe:	f043 0320 	orreq.w	r3, r3, #32
 8004ec2:	6062      	strne	r2, [r4, #4]
 8004ec4:	f043 0340 	orrne.w	r3, r3, #64	; 0x40
 8004ec8:	e7bc      	b.n	8004e44 <__srefill_r+0x50>
 8004eca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004ecc:	2900      	cmp	r1, #0
 8004ece:	d0cd      	beq.n	8004e6c <__srefill_r+0x78>
 8004ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004ed4:	4299      	cmp	r1, r3
 8004ed6:	d002      	beq.n	8004ede <__srefill_r+0xea>
 8004ed8:	4628      	mov	r0, r5
 8004eda:	f7ff fb81 	bl	80045e0 <_free_r>
 8004ede:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004ee0:	6063      	str	r3, [r4, #4]
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	6360      	str	r0, [r4, #52]	; 0x34
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d0c0      	beq.n	8004e6c <__srefill_r+0x78>
 8004eea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004eec:	6023      	str	r3, [r4, #0]
 8004eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef0:	2000      	movs	r0, #0
 8004ef2:	e7fc      	b.n	8004eee <__srefill_r+0xfa>
 8004ef4:	080056c8 	.word	0x080056c8
 8004ef8:	080056e8 	.word	0x080056e8
 8004efc:	080056a8 	.word	0x080056a8
 8004f00:	080055a0 	.word	0x080055a0
 8004f04:	08004de1 	.word	0x08004de1

08004f08 <_sbrk_r>:
 8004f08:	b538      	push	{r3, r4, r5, lr}
 8004f0a:	4d06      	ldr	r5, [pc, #24]	; (8004f24 <_sbrk_r+0x1c>)
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	4604      	mov	r4, r0
 8004f10:	4608      	mov	r0, r1
 8004f12:	602b      	str	r3, [r5, #0]
 8004f14:	f7fc fbe6 	bl	80016e4 <_sbrk>
 8004f18:	1c43      	adds	r3, r0, #1
 8004f1a:	d102      	bne.n	8004f22 <_sbrk_r+0x1a>
 8004f1c:	682b      	ldr	r3, [r5, #0]
 8004f1e:	b103      	cbz	r3, 8004f22 <_sbrk_r+0x1a>
 8004f20:	6023      	str	r3, [r4, #0]
 8004f22:	bd38      	pop	{r3, r4, r5, pc}
 8004f24:	20000614 	.word	0x20000614

08004f28 <__sccl>:
 8004f28:	b570      	push	{r4, r5, r6, lr}
 8004f2a:	780b      	ldrb	r3, [r1, #0]
 8004f2c:	4604      	mov	r4, r0
 8004f2e:	2b5e      	cmp	r3, #94	; 0x5e
 8004f30:	bf0b      	itete	eq
 8004f32:	784b      	ldrbeq	r3, [r1, #1]
 8004f34:	1c48      	addne	r0, r1, #1
 8004f36:	1c88      	addeq	r0, r1, #2
 8004f38:	2200      	movne	r2, #0
 8004f3a:	bf08      	it	eq
 8004f3c:	2201      	moveq	r2, #1
 8004f3e:	1e61      	subs	r1, r4, #1
 8004f40:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8004f44:	f801 2f01 	strb.w	r2, [r1, #1]!
 8004f48:	42a9      	cmp	r1, r5
 8004f4a:	d1fb      	bne.n	8004f44 <__sccl+0x1c>
 8004f4c:	b90b      	cbnz	r3, 8004f52 <__sccl+0x2a>
 8004f4e:	3801      	subs	r0, #1
 8004f50:	bd70      	pop	{r4, r5, r6, pc}
 8004f52:	f082 0201 	eor.w	r2, r2, #1
 8004f56:	54e2      	strb	r2, [r4, r3]
 8004f58:	4605      	mov	r5, r0
 8004f5a:	4628      	mov	r0, r5
 8004f5c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004f60:	292d      	cmp	r1, #45	; 0x2d
 8004f62:	d006      	beq.n	8004f72 <__sccl+0x4a>
 8004f64:	295d      	cmp	r1, #93	; 0x5d
 8004f66:	d0f3      	beq.n	8004f50 <__sccl+0x28>
 8004f68:	b909      	cbnz	r1, 8004f6e <__sccl+0x46>
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	e7f0      	b.n	8004f50 <__sccl+0x28>
 8004f6e:	460b      	mov	r3, r1
 8004f70:	e7f1      	b.n	8004f56 <__sccl+0x2e>
 8004f72:	786e      	ldrb	r6, [r5, #1]
 8004f74:	2e5d      	cmp	r6, #93	; 0x5d
 8004f76:	d0fa      	beq.n	8004f6e <__sccl+0x46>
 8004f78:	42b3      	cmp	r3, r6
 8004f7a:	dcf8      	bgt.n	8004f6e <__sccl+0x46>
 8004f7c:	3502      	adds	r5, #2
 8004f7e:	4619      	mov	r1, r3
 8004f80:	3101      	adds	r1, #1
 8004f82:	428e      	cmp	r6, r1
 8004f84:	5462      	strb	r2, [r4, r1]
 8004f86:	dcfb      	bgt.n	8004f80 <__sccl+0x58>
 8004f88:	1af1      	subs	r1, r6, r3
 8004f8a:	3901      	subs	r1, #1
 8004f8c:	1c58      	adds	r0, r3, #1
 8004f8e:	42b3      	cmp	r3, r6
 8004f90:	bfa8      	it	ge
 8004f92:	2100      	movge	r1, #0
 8004f94:	1843      	adds	r3, r0, r1
 8004f96:	e7e0      	b.n	8004f5a <__sccl+0x32>

08004f98 <__sread>:
 8004f98:	b510      	push	{r4, lr}
 8004f9a:	460c      	mov	r4, r1
 8004f9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fa0:	f000 fa24 	bl	80053ec <_read_r>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	bfab      	itete	ge
 8004fa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004faa:	89a3      	ldrhlt	r3, [r4, #12]
 8004fac:	181b      	addge	r3, r3, r0
 8004fae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fb2:	bfac      	ite	ge
 8004fb4:	6563      	strge	r3, [r4, #84]	; 0x54
 8004fb6:	81a3      	strhlt	r3, [r4, #12]
 8004fb8:	bd10      	pop	{r4, pc}

08004fba <__swrite>:
 8004fba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fbe:	461f      	mov	r7, r3
 8004fc0:	898b      	ldrh	r3, [r1, #12]
 8004fc2:	05db      	lsls	r3, r3, #23
 8004fc4:	4605      	mov	r5, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	4616      	mov	r6, r2
 8004fca:	d505      	bpl.n	8004fd8 <__swrite+0x1e>
 8004fcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	f000 f9ae 	bl	8005334 <_lseek_r>
 8004fd8:	89a3      	ldrh	r3, [r4, #12]
 8004fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fe2:	81a3      	strh	r3, [r4, #12]
 8004fe4:	4632      	mov	r2, r6
 8004fe6:	463b      	mov	r3, r7
 8004fe8:	4628      	mov	r0, r5
 8004fea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fee:	f000 b95d 	b.w	80052ac <_write_r>

08004ff2 <__sseek>:
 8004ff2:	b510      	push	{r4, lr}
 8004ff4:	460c      	mov	r4, r1
 8004ff6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ffa:	f000 f99b 	bl	8005334 <_lseek_r>
 8004ffe:	1c43      	adds	r3, r0, #1
 8005000:	89a3      	ldrh	r3, [r4, #12]
 8005002:	bf15      	itete	ne
 8005004:	6560      	strne	r0, [r4, #84]	; 0x54
 8005006:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800500a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800500e:	81a3      	strheq	r3, [r4, #12]
 8005010:	bf18      	it	ne
 8005012:	81a3      	strhne	r3, [r4, #12]
 8005014:	bd10      	pop	{r4, pc}

08005016 <__sclose>:
 8005016:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800501a:	f000 b959 	b.w	80052d0 <_close_r>
	...

08005020 <_strtoul_l.constprop.0>:
 8005020:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005024:	4f36      	ldr	r7, [pc, #216]	; (8005100 <_strtoul_l.constprop.0+0xe0>)
 8005026:	4686      	mov	lr, r0
 8005028:	460d      	mov	r5, r1
 800502a:	4628      	mov	r0, r5
 800502c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005030:	5de6      	ldrb	r6, [r4, r7]
 8005032:	f016 0608 	ands.w	r6, r6, #8
 8005036:	d1f8      	bne.n	800502a <_strtoul_l.constprop.0+0xa>
 8005038:	2c2d      	cmp	r4, #45	; 0x2d
 800503a:	d12f      	bne.n	800509c <_strtoul_l.constprop.0+0x7c>
 800503c:	782c      	ldrb	r4, [r5, #0]
 800503e:	2601      	movs	r6, #1
 8005040:	1c85      	adds	r5, r0, #2
 8005042:	2b00      	cmp	r3, #0
 8005044:	d057      	beq.n	80050f6 <_strtoul_l.constprop.0+0xd6>
 8005046:	2b10      	cmp	r3, #16
 8005048:	d109      	bne.n	800505e <_strtoul_l.constprop.0+0x3e>
 800504a:	2c30      	cmp	r4, #48	; 0x30
 800504c:	d107      	bne.n	800505e <_strtoul_l.constprop.0+0x3e>
 800504e:	7828      	ldrb	r0, [r5, #0]
 8005050:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005054:	2858      	cmp	r0, #88	; 0x58
 8005056:	d149      	bne.n	80050ec <_strtoul_l.constprop.0+0xcc>
 8005058:	786c      	ldrb	r4, [r5, #1]
 800505a:	2310      	movs	r3, #16
 800505c:	3502      	adds	r5, #2
 800505e:	f04f 38ff 	mov.w	r8, #4294967295
 8005062:	2700      	movs	r7, #0
 8005064:	fbb8 f8f3 	udiv	r8, r8, r3
 8005068:	fb03 f908 	mul.w	r9, r3, r8
 800506c:	ea6f 0909 	mvn.w	r9, r9
 8005070:	4638      	mov	r0, r7
 8005072:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005076:	f1bc 0f09 	cmp.w	ip, #9
 800507a:	d814      	bhi.n	80050a6 <_strtoul_l.constprop.0+0x86>
 800507c:	4664      	mov	r4, ip
 800507e:	42a3      	cmp	r3, r4
 8005080:	dd22      	ble.n	80050c8 <_strtoul_l.constprop.0+0xa8>
 8005082:	2f00      	cmp	r7, #0
 8005084:	db1d      	blt.n	80050c2 <_strtoul_l.constprop.0+0xa2>
 8005086:	4580      	cmp	r8, r0
 8005088:	d31b      	bcc.n	80050c2 <_strtoul_l.constprop.0+0xa2>
 800508a:	d101      	bne.n	8005090 <_strtoul_l.constprop.0+0x70>
 800508c:	45a1      	cmp	r9, r4
 800508e:	db18      	blt.n	80050c2 <_strtoul_l.constprop.0+0xa2>
 8005090:	fb00 4003 	mla	r0, r0, r3, r4
 8005094:	2701      	movs	r7, #1
 8005096:	f815 4b01 	ldrb.w	r4, [r5], #1
 800509a:	e7ea      	b.n	8005072 <_strtoul_l.constprop.0+0x52>
 800509c:	2c2b      	cmp	r4, #43	; 0x2b
 800509e:	bf04      	itt	eq
 80050a0:	782c      	ldrbeq	r4, [r5, #0]
 80050a2:	1c85      	addeq	r5, r0, #2
 80050a4:	e7cd      	b.n	8005042 <_strtoul_l.constprop.0+0x22>
 80050a6:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80050aa:	f1bc 0f19 	cmp.w	ip, #25
 80050ae:	d801      	bhi.n	80050b4 <_strtoul_l.constprop.0+0x94>
 80050b0:	3c37      	subs	r4, #55	; 0x37
 80050b2:	e7e4      	b.n	800507e <_strtoul_l.constprop.0+0x5e>
 80050b4:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80050b8:	f1bc 0f19 	cmp.w	ip, #25
 80050bc:	d804      	bhi.n	80050c8 <_strtoul_l.constprop.0+0xa8>
 80050be:	3c57      	subs	r4, #87	; 0x57
 80050c0:	e7dd      	b.n	800507e <_strtoul_l.constprop.0+0x5e>
 80050c2:	f04f 37ff 	mov.w	r7, #4294967295
 80050c6:	e7e6      	b.n	8005096 <_strtoul_l.constprop.0+0x76>
 80050c8:	2f00      	cmp	r7, #0
 80050ca:	da07      	bge.n	80050dc <_strtoul_l.constprop.0+0xbc>
 80050cc:	2322      	movs	r3, #34	; 0x22
 80050ce:	f8ce 3000 	str.w	r3, [lr]
 80050d2:	f04f 30ff 	mov.w	r0, #4294967295
 80050d6:	b932      	cbnz	r2, 80050e6 <_strtoul_l.constprop.0+0xc6>
 80050d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80050dc:	b106      	cbz	r6, 80050e0 <_strtoul_l.constprop.0+0xc0>
 80050de:	4240      	negs	r0, r0
 80050e0:	2a00      	cmp	r2, #0
 80050e2:	d0f9      	beq.n	80050d8 <_strtoul_l.constprop.0+0xb8>
 80050e4:	b107      	cbz	r7, 80050e8 <_strtoul_l.constprop.0+0xc8>
 80050e6:	1e69      	subs	r1, r5, #1
 80050e8:	6011      	str	r1, [r2, #0]
 80050ea:	e7f5      	b.n	80050d8 <_strtoul_l.constprop.0+0xb8>
 80050ec:	2430      	movs	r4, #48	; 0x30
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d1b5      	bne.n	800505e <_strtoul_l.constprop.0+0x3e>
 80050f2:	2308      	movs	r3, #8
 80050f4:	e7b3      	b.n	800505e <_strtoul_l.constprop.0+0x3e>
 80050f6:	2c30      	cmp	r4, #48	; 0x30
 80050f8:	d0a9      	beq.n	800504e <_strtoul_l.constprop.0+0x2e>
 80050fa:	230a      	movs	r3, #10
 80050fc:	e7af      	b.n	800505e <_strtoul_l.constprop.0+0x3e>
 80050fe:	bf00      	nop
 8005100:	080055a5 	.word	0x080055a5

08005104 <_strtoul_r>:
 8005104:	f7ff bf8c 	b.w	8005020 <_strtoul_l.constprop.0>

08005108 <__submore>:
 8005108:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800510c:	460c      	mov	r4, r1
 800510e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8005110:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005114:	4299      	cmp	r1, r3
 8005116:	d11d      	bne.n	8005154 <__submore+0x4c>
 8005118:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800511c:	f7ff facc 	bl	80046b8 <_malloc_r>
 8005120:	b918      	cbnz	r0, 800512a <__submore+0x22>
 8005122:	f04f 30ff 	mov.w	r0, #4294967295
 8005126:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800512a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800512e:	63a3      	str	r3, [r4, #56]	; 0x38
 8005130:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8005134:	6360      	str	r0, [r4, #52]	; 0x34
 8005136:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800513a:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800513e:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8005142:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8005146:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800514a:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800514e:	6020      	str	r0, [r4, #0]
 8005150:	2000      	movs	r0, #0
 8005152:	e7e8      	b.n	8005126 <__submore+0x1e>
 8005154:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8005156:	0077      	lsls	r7, r6, #1
 8005158:	463a      	mov	r2, r7
 800515a:	f000 f917 	bl	800538c <_realloc_r>
 800515e:	4605      	mov	r5, r0
 8005160:	2800      	cmp	r0, #0
 8005162:	d0de      	beq.n	8005122 <__submore+0x1a>
 8005164:	eb00 0806 	add.w	r8, r0, r6
 8005168:	4601      	mov	r1, r0
 800516a:	4632      	mov	r2, r6
 800516c:	4640      	mov	r0, r8
 800516e:	f000 f8f3 	bl	8005358 <memcpy>
 8005172:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8005176:	f8c4 8000 	str.w	r8, [r4]
 800517a:	e7e9      	b.n	8005150 <__submore+0x48>

0800517c <_ungetc_r>:
 800517c:	b570      	push	{r4, r5, r6, lr}
 800517e:	4614      	mov	r4, r2
 8005180:	1c4a      	adds	r2, r1, #1
 8005182:	4606      	mov	r6, r0
 8005184:	460d      	mov	r5, r1
 8005186:	d103      	bne.n	8005190 <_ungetc_r+0x14>
 8005188:	f04f 35ff 	mov.w	r5, #4294967295
 800518c:	4628      	mov	r0, r5
 800518e:	bd70      	pop	{r4, r5, r6, pc}
 8005190:	b118      	cbz	r0, 800519a <_ungetc_r+0x1e>
 8005192:	6983      	ldr	r3, [r0, #24]
 8005194:	b90b      	cbnz	r3, 800519a <_ungetc_r+0x1e>
 8005196:	f7ff f901 	bl	800439c <__sinit>
 800519a:	4b41      	ldr	r3, [pc, #260]	; (80052a0 <_ungetc_r+0x124>)
 800519c:	429c      	cmp	r4, r3
 800519e:	d11d      	bne.n	80051dc <_ungetc_r+0x60>
 80051a0:	6874      	ldr	r4, [r6, #4]
 80051a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051a4:	07db      	lsls	r3, r3, #31
 80051a6:	d405      	bmi.n	80051b4 <_ungetc_r+0x38>
 80051a8:	89a3      	ldrh	r3, [r4, #12]
 80051aa:	0598      	lsls	r0, r3, #22
 80051ac:	d402      	bmi.n	80051b4 <_ungetc_r+0x38>
 80051ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051b0:	f7ff f9af 	bl	8004512 <__retarget_lock_acquire_recursive>
 80051b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80051b8:	f023 0320 	bic.w	r3, r3, #32
 80051bc:	0759      	lsls	r1, r3, #29
 80051be:	81a3      	strh	r3, [r4, #12]
 80051c0:	b29a      	uxth	r2, r3
 80051c2:	d42d      	bmi.n	8005220 <_ungetc_r+0xa4>
 80051c4:	06d3      	lsls	r3, r2, #27
 80051c6:	d413      	bmi.n	80051f0 <_ungetc_r+0x74>
 80051c8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80051ca:	07dd      	lsls	r5, r3, #31
 80051cc:	d4dc      	bmi.n	8005188 <_ungetc_r+0xc>
 80051ce:	f412 7f00 	tst.w	r2, #512	; 0x200
 80051d2:	d1d9      	bne.n	8005188 <_ungetc_r+0xc>
 80051d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80051d6:	f7ff f99d 	bl	8004514 <__retarget_lock_release_recursive>
 80051da:	e7d5      	b.n	8005188 <_ungetc_r+0xc>
 80051dc:	4b31      	ldr	r3, [pc, #196]	; (80052a4 <_ungetc_r+0x128>)
 80051de:	429c      	cmp	r4, r3
 80051e0:	d101      	bne.n	80051e6 <_ungetc_r+0x6a>
 80051e2:	68b4      	ldr	r4, [r6, #8]
 80051e4:	e7dd      	b.n	80051a2 <_ungetc_r+0x26>
 80051e6:	4b30      	ldr	r3, [pc, #192]	; (80052a8 <_ungetc_r+0x12c>)
 80051e8:	429c      	cmp	r4, r3
 80051ea:	bf08      	it	eq
 80051ec:	68f4      	ldreq	r4, [r6, #12]
 80051ee:	e7d8      	b.n	80051a2 <_ungetc_r+0x26>
 80051f0:	0710      	lsls	r0, r2, #28
 80051f2:	d511      	bpl.n	8005218 <_ungetc_r+0x9c>
 80051f4:	4621      	mov	r1, r4
 80051f6:	4630      	mov	r0, r6
 80051f8:	f7ff f82a 	bl	8004250 <_fflush_r>
 80051fc:	b130      	cbz	r0, 800520c <_ungetc_r+0x90>
 80051fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005200:	07d9      	lsls	r1, r3, #31
 8005202:	d4c1      	bmi.n	8005188 <_ungetc_r+0xc>
 8005204:	89a3      	ldrh	r3, [r4, #12]
 8005206:	f413 7f00 	tst.w	r3, #512	; 0x200
 800520a:	e7e2      	b.n	80051d2 <_ungetc_r+0x56>
 800520c:	89a3      	ldrh	r3, [r4, #12]
 800520e:	60a0      	str	r0, [r4, #8]
 8005210:	f023 0308 	bic.w	r3, r3, #8
 8005214:	81a3      	strh	r3, [r4, #12]
 8005216:	61a0      	str	r0, [r4, #24]
 8005218:	89a3      	ldrh	r3, [r4, #12]
 800521a:	f043 0304 	orr.w	r3, r3, #4
 800521e:	81a3      	strh	r3, [r4, #12]
 8005220:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005222:	6862      	ldr	r2, [r4, #4]
 8005224:	b2ed      	uxtb	r5, r5
 8005226:	b1d3      	cbz	r3, 800525e <_ungetc_r+0xe2>
 8005228:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800522a:	4293      	cmp	r3, r2
 800522c:	dc05      	bgt.n	800523a <_ungetc_r+0xbe>
 800522e:	4621      	mov	r1, r4
 8005230:	4630      	mov	r0, r6
 8005232:	f7ff ff69 	bl	8005108 <__submore>
 8005236:	2800      	cmp	r0, #0
 8005238:	d1e1      	bne.n	80051fe <_ungetc_r+0x82>
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	1e5a      	subs	r2, r3, #1
 800523e:	6022      	str	r2, [r4, #0]
 8005240:	f803 5c01 	strb.w	r5, [r3, #-1]
 8005244:	6863      	ldr	r3, [r4, #4]
 8005246:	3301      	adds	r3, #1
 8005248:	6063      	str	r3, [r4, #4]
 800524a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800524c:	07da      	lsls	r2, r3, #31
 800524e:	d49d      	bmi.n	800518c <_ungetc_r+0x10>
 8005250:	89a3      	ldrh	r3, [r4, #12]
 8005252:	059b      	lsls	r3, r3, #22
 8005254:	d49a      	bmi.n	800518c <_ungetc_r+0x10>
 8005256:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005258:	f7ff f95c 	bl	8004514 <__retarget_lock_release_recursive>
 800525c:	e796      	b.n	800518c <_ungetc_r+0x10>
 800525e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8005260:	6920      	ldr	r0, [r4, #16]
 8005262:	6823      	ldr	r3, [r4, #0]
 8005264:	f001 0101 	and.w	r1, r1, #1
 8005268:	b160      	cbz	r0, 8005284 <_ungetc_r+0x108>
 800526a:	4298      	cmp	r0, r3
 800526c:	d20a      	bcs.n	8005284 <_ungetc_r+0x108>
 800526e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8005272:	42a8      	cmp	r0, r5
 8005274:	d106      	bne.n	8005284 <_ungetc_r+0x108>
 8005276:	3b01      	subs	r3, #1
 8005278:	3201      	adds	r2, #1
 800527a:	6023      	str	r3, [r4, #0]
 800527c:	6062      	str	r2, [r4, #4]
 800527e:	2900      	cmp	r1, #0
 8005280:	d184      	bne.n	800518c <_ungetc_r+0x10>
 8005282:	e7e5      	b.n	8005250 <_ungetc_r+0xd4>
 8005284:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8005288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800528c:	6363      	str	r3, [r4, #52]	; 0x34
 800528e:	2303      	movs	r3, #3
 8005290:	63a3      	str	r3, [r4, #56]	; 0x38
 8005292:	4623      	mov	r3, r4
 8005294:	f803 5f46 	strb.w	r5, [r3, #70]!
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	2301      	movs	r3, #1
 800529c:	6063      	str	r3, [r4, #4]
 800529e:	e7ee      	b.n	800527e <_ungetc_r+0x102>
 80052a0:	080056c8 	.word	0x080056c8
 80052a4:	080056e8 	.word	0x080056e8
 80052a8:	080056a8 	.word	0x080056a8

080052ac <_write_r>:
 80052ac:	b538      	push	{r3, r4, r5, lr}
 80052ae:	4d07      	ldr	r5, [pc, #28]	; (80052cc <_write_r+0x20>)
 80052b0:	4604      	mov	r4, r0
 80052b2:	4608      	mov	r0, r1
 80052b4:	4611      	mov	r1, r2
 80052b6:	2200      	movs	r2, #0
 80052b8:	602a      	str	r2, [r5, #0]
 80052ba:	461a      	mov	r2, r3
 80052bc:	f7fc f880 	bl	80013c0 <_write>
 80052c0:	1c43      	adds	r3, r0, #1
 80052c2:	d102      	bne.n	80052ca <_write_r+0x1e>
 80052c4:	682b      	ldr	r3, [r5, #0]
 80052c6:	b103      	cbz	r3, 80052ca <_write_r+0x1e>
 80052c8:	6023      	str	r3, [r4, #0]
 80052ca:	bd38      	pop	{r3, r4, r5, pc}
 80052cc:	20000614 	.word	0x20000614

080052d0 <_close_r>:
 80052d0:	b538      	push	{r3, r4, r5, lr}
 80052d2:	4d06      	ldr	r5, [pc, #24]	; (80052ec <_close_r+0x1c>)
 80052d4:	2300      	movs	r3, #0
 80052d6:	4604      	mov	r4, r0
 80052d8:	4608      	mov	r0, r1
 80052da:	602b      	str	r3, [r5, #0]
 80052dc:	f7fc f9ce 	bl	800167c <_close>
 80052e0:	1c43      	adds	r3, r0, #1
 80052e2:	d102      	bne.n	80052ea <_close_r+0x1a>
 80052e4:	682b      	ldr	r3, [r5, #0]
 80052e6:	b103      	cbz	r3, 80052ea <_close_r+0x1a>
 80052e8:	6023      	str	r3, [r4, #0]
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	20000614 	.word	0x20000614

080052f0 <_fstat_r>:
 80052f0:	b538      	push	{r3, r4, r5, lr}
 80052f2:	4d07      	ldr	r5, [pc, #28]	; (8005310 <_fstat_r+0x20>)
 80052f4:	2300      	movs	r3, #0
 80052f6:	4604      	mov	r4, r0
 80052f8:	4608      	mov	r0, r1
 80052fa:	4611      	mov	r1, r2
 80052fc:	602b      	str	r3, [r5, #0]
 80052fe:	f7fc f9c9 	bl	8001694 <_fstat>
 8005302:	1c43      	adds	r3, r0, #1
 8005304:	d102      	bne.n	800530c <_fstat_r+0x1c>
 8005306:	682b      	ldr	r3, [r5, #0]
 8005308:	b103      	cbz	r3, 800530c <_fstat_r+0x1c>
 800530a:	6023      	str	r3, [r4, #0]
 800530c:	bd38      	pop	{r3, r4, r5, pc}
 800530e:	bf00      	nop
 8005310:	20000614 	.word	0x20000614

08005314 <_isatty_r>:
 8005314:	b538      	push	{r3, r4, r5, lr}
 8005316:	4d06      	ldr	r5, [pc, #24]	; (8005330 <_isatty_r+0x1c>)
 8005318:	2300      	movs	r3, #0
 800531a:	4604      	mov	r4, r0
 800531c:	4608      	mov	r0, r1
 800531e:	602b      	str	r3, [r5, #0]
 8005320:	f7fc f9c8 	bl	80016b4 <_isatty>
 8005324:	1c43      	adds	r3, r0, #1
 8005326:	d102      	bne.n	800532e <_isatty_r+0x1a>
 8005328:	682b      	ldr	r3, [r5, #0]
 800532a:	b103      	cbz	r3, 800532e <_isatty_r+0x1a>
 800532c:	6023      	str	r3, [r4, #0]
 800532e:	bd38      	pop	{r3, r4, r5, pc}
 8005330:	20000614 	.word	0x20000614

08005334 <_lseek_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	4d07      	ldr	r5, [pc, #28]	; (8005354 <_lseek_r+0x20>)
 8005338:	4604      	mov	r4, r0
 800533a:	4608      	mov	r0, r1
 800533c:	4611      	mov	r1, r2
 800533e:	2200      	movs	r2, #0
 8005340:	602a      	str	r2, [r5, #0]
 8005342:	461a      	mov	r2, r3
 8005344:	f7fc f9c1 	bl	80016ca <_lseek>
 8005348:	1c43      	adds	r3, r0, #1
 800534a:	d102      	bne.n	8005352 <_lseek_r+0x1e>
 800534c:	682b      	ldr	r3, [r5, #0]
 800534e:	b103      	cbz	r3, 8005352 <_lseek_r+0x1e>
 8005350:	6023      	str	r3, [r4, #0]
 8005352:	bd38      	pop	{r3, r4, r5, pc}
 8005354:	20000614 	.word	0x20000614

08005358 <memcpy>:
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005360:	d100      	bne.n	8005364 <memcpy+0xc>
 8005362:	4770      	bx	lr
 8005364:	b510      	push	{r4, lr}
 8005366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536e:	4291      	cmp	r1, r2
 8005370:	d1f9      	bne.n	8005366 <memcpy+0xe>
 8005372:	bd10      	pop	{r4, pc}

08005374 <__malloc_lock>:
 8005374:	4801      	ldr	r0, [pc, #4]	; (800537c <__malloc_lock+0x8>)
 8005376:	f7ff b8cc 	b.w	8004512 <__retarget_lock_acquire_recursive>
 800537a:	bf00      	nop
 800537c:	20000608 	.word	0x20000608

08005380 <__malloc_unlock>:
 8005380:	4801      	ldr	r0, [pc, #4]	; (8005388 <__malloc_unlock+0x8>)
 8005382:	f7ff b8c7 	b.w	8004514 <__retarget_lock_release_recursive>
 8005386:	bf00      	nop
 8005388:	20000608 	.word	0x20000608

0800538c <_realloc_r>:
 800538c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005390:	4680      	mov	r8, r0
 8005392:	4614      	mov	r4, r2
 8005394:	460e      	mov	r6, r1
 8005396:	b921      	cbnz	r1, 80053a2 <_realloc_r+0x16>
 8005398:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800539c:	4611      	mov	r1, r2
 800539e:	f7ff b98b 	b.w	80046b8 <_malloc_r>
 80053a2:	b92a      	cbnz	r2, 80053b0 <_realloc_r+0x24>
 80053a4:	f7ff f91c 	bl	80045e0 <_free_r>
 80053a8:	4625      	mov	r5, r4
 80053aa:	4628      	mov	r0, r5
 80053ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80053b0:	f000 f82e 	bl	8005410 <_malloc_usable_size_r>
 80053b4:	4284      	cmp	r4, r0
 80053b6:	4607      	mov	r7, r0
 80053b8:	d802      	bhi.n	80053c0 <_realloc_r+0x34>
 80053ba:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80053be:	d812      	bhi.n	80053e6 <_realloc_r+0x5a>
 80053c0:	4621      	mov	r1, r4
 80053c2:	4640      	mov	r0, r8
 80053c4:	f7ff f978 	bl	80046b8 <_malloc_r>
 80053c8:	4605      	mov	r5, r0
 80053ca:	2800      	cmp	r0, #0
 80053cc:	d0ed      	beq.n	80053aa <_realloc_r+0x1e>
 80053ce:	42bc      	cmp	r4, r7
 80053d0:	4622      	mov	r2, r4
 80053d2:	4631      	mov	r1, r6
 80053d4:	bf28      	it	cs
 80053d6:	463a      	movcs	r2, r7
 80053d8:	f7ff ffbe 	bl	8005358 <memcpy>
 80053dc:	4631      	mov	r1, r6
 80053de:	4640      	mov	r0, r8
 80053e0:	f7ff f8fe 	bl	80045e0 <_free_r>
 80053e4:	e7e1      	b.n	80053aa <_realloc_r+0x1e>
 80053e6:	4635      	mov	r5, r6
 80053e8:	e7df      	b.n	80053aa <_realloc_r+0x1e>
	...

080053ec <_read_r>:
 80053ec:	b538      	push	{r3, r4, r5, lr}
 80053ee:	4d07      	ldr	r5, [pc, #28]	; (800540c <_read_r+0x20>)
 80053f0:	4604      	mov	r4, r0
 80053f2:	4608      	mov	r0, r1
 80053f4:	4611      	mov	r1, r2
 80053f6:	2200      	movs	r2, #0
 80053f8:	602a      	str	r2, [r5, #0]
 80053fa:	461a      	mov	r2, r3
 80053fc:	f7fb fff6 	bl	80013ec <_read>
 8005400:	1c43      	adds	r3, r0, #1
 8005402:	d102      	bne.n	800540a <_read_r+0x1e>
 8005404:	682b      	ldr	r3, [r5, #0]
 8005406:	b103      	cbz	r3, 800540a <_read_r+0x1e>
 8005408:	6023      	str	r3, [r4, #0]
 800540a:	bd38      	pop	{r3, r4, r5, pc}
 800540c:	20000614 	.word	0x20000614

08005410 <_malloc_usable_size_r>:
 8005410:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005414:	1f18      	subs	r0, r3, #4
 8005416:	2b00      	cmp	r3, #0
 8005418:	bfbc      	itt	lt
 800541a:	580b      	ldrlt	r3, [r1, r0]
 800541c:	18c0      	addlt	r0, r0, r3
 800541e:	4770      	bx	lr

08005420 <_init>:
 8005420:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005422:	bf00      	nop
 8005424:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005426:	bc08      	pop	{r3}
 8005428:	469e      	mov	lr, r3
 800542a:	4770      	bx	lr

0800542c <_fini>:
 800542c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800542e:	bf00      	nop
 8005430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005432:	bc08      	pop	{r3}
 8005434:	469e      	mov	lr, r3
 8005436:	4770      	bx	lr
