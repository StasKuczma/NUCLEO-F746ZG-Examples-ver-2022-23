
L02_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d34  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002efc  08002efc  00012efc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f14  08002f14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f1c  08002f1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f1c  08002f1c  00012f1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f20  08002f20  00012f20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002f24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a8  2000000c  08002f30  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000b4  08002f30  000200b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a55d  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d4  00000000  00000000  0002a599  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000778  00000000  00000000  0002bd70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006d0  00000000  00000000  0002c4e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001fe0  00000000  00000000  0002cbb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a48f  00000000  00000000  0002eb98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e648f  00000000  00000000  00039027  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0011f4b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c90  00000000  00000000  0011f508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08002ee4 	.word	0x08002ee4

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08002ee4 	.word	0x08002ee4

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b974 	b.w	8000508 <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468e      	mov	lr, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	d14d      	bne.n	80002e2 <__udivmoddi4+0xaa>
 8000246:	428a      	cmp	r2, r1
 8000248:	4694      	mov	ip, r2
 800024a:	d969      	bls.n	8000320 <__udivmoddi4+0xe8>
 800024c:	fab2 f282 	clz	r2, r2
 8000250:	b152      	cbz	r2, 8000268 <__udivmoddi4+0x30>
 8000252:	fa01 f302 	lsl.w	r3, r1, r2
 8000256:	f1c2 0120 	rsb	r1, r2, #32
 800025a:	fa20 f101 	lsr.w	r1, r0, r1
 800025e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000262:	ea41 0e03 	orr.w	lr, r1, r3
 8000266:	4094      	lsls	r4, r2
 8000268:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800026c:	0c21      	lsrs	r1, r4, #16
 800026e:	fbbe f6f8 	udiv	r6, lr, r8
 8000272:	fa1f f78c 	uxth.w	r7, ip
 8000276:	fb08 e316 	mls	r3, r8, r6, lr
 800027a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800027e:	fb06 f107 	mul.w	r1, r6, r7
 8000282:	4299      	cmp	r1, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x64>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f106 30ff 	add.w	r0, r6, #4294967295
 800028e:	f080 811f 	bcs.w	80004d0 <__udivmoddi4+0x298>
 8000292:	4299      	cmp	r1, r3
 8000294:	f240 811c 	bls.w	80004d0 <__udivmoddi4+0x298>
 8000298:	3e02      	subs	r6, #2
 800029a:	4463      	add	r3, ip
 800029c:	1a5b      	subs	r3, r3, r1
 800029e:	b2a4      	uxth	r4, r4
 80002a0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a4:	fb08 3310 	mls	r3, r8, r0, r3
 80002a8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ac:	fb00 f707 	mul.w	r7, r0, r7
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x92>
 80002b4:	eb1c 0404 	adds.w	r4, ip, r4
 80002b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002bc:	f080 810a 	bcs.w	80004d4 <__udivmoddi4+0x29c>
 80002c0:	42a7      	cmp	r7, r4
 80002c2:	f240 8107 	bls.w	80004d4 <__udivmoddi4+0x29c>
 80002c6:	4464      	add	r4, ip
 80002c8:	3802      	subs	r0, #2
 80002ca:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ce:	1be4      	subs	r4, r4, r7
 80002d0:	2600      	movs	r6, #0
 80002d2:	b11d      	cbz	r5, 80002dc <__udivmoddi4+0xa4>
 80002d4:	40d4      	lsrs	r4, r2
 80002d6:	2300      	movs	r3, #0
 80002d8:	e9c5 4300 	strd	r4, r3, [r5]
 80002dc:	4631      	mov	r1, r6
 80002de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d909      	bls.n	80002fa <__udivmoddi4+0xc2>
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	f000 80ef 	beq.w	80004ca <__udivmoddi4+0x292>
 80002ec:	2600      	movs	r6, #0
 80002ee:	e9c5 0100 	strd	r0, r1, [r5]
 80002f2:	4630      	mov	r0, r6
 80002f4:	4631      	mov	r1, r6
 80002f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fa:	fab3 f683 	clz	r6, r3
 80002fe:	2e00      	cmp	r6, #0
 8000300:	d14a      	bne.n	8000398 <__udivmoddi4+0x160>
 8000302:	428b      	cmp	r3, r1
 8000304:	d302      	bcc.n	800030c <__udivmoddi4+0xd4>
 8000306:	4282      	cmp	r2, r0
 8000308:	f200 80f9 	bhi.w	80004fe <__udivmoddi4+0x2c6>
 800030c:	1a84      	subs	r4, r0, r2
 800030e:	eb61 0303 	sbc.w	r3, r1, r3
 8000312:	2001      	movs	r0, #1
 8000314:	469e      	mov	lr, r3
 8000316:	2d00      	cmp	r5, #0
 8000318:	d0e0      	beq.n	80002dc <__udivmoddi4+0xa4>
 800031a:	e9c5 4e00 	strd	r4, lr, [r5]
 800031e:	e7dd      	b.n	80002dc <__udivmoddi4+0xa4>
 8000320:	b902      	cbnz	r2, 8000324 <__udivmoddi4+0xec>
 8000322:	deff      	udf	#255	; 0xff
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	2a00      	cmp	r2, #0
 800032a:	f040 8092 	bne.w	8000452 <__udivmoddi4+0x21a>
 800032e:	eba1 010c 	sub.w	r1, r1, ip
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2601      	movs	r6, #1
 800033c:	0c20      	lsrs	r0, r4, #16
 800033e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000342:	fb07 1113 	mls	r1, r7, r3, r1
 8000346:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800034a:	fb0e f003 	mul.w	r0, lr, r3
 800034e:	4288      	cmp	r0, r1
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x12c>
 8000352:	eb1c 0101 	adds.w	r1, ip, r1
 8000356:	f103 38ff 	add.w	r8, r3, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x12a>
 800035c:	4288      	cmp	r0, r1
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2c0>
 8000362:	4643      	mov	r3, r8
 8000364:	1a09      	subs	r1, r1, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb1 f0f7 	udiv	r0, r1, r7
 800036c:	fb07 1110 	mls	r1, r7, r0, r1
 8000370:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x156>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 31ff 	add.w	r1, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x154>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2ca>
 800038c:	4608      	mov	r0, r1
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000396:	e79c      	b.n	80002d2 <__udivmoddi4+0x9a>
 8000398:	f1c6 0720 	rsb	r7, r6, #32
 800039c:	40b3      	lsls	r3, r6
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa20 f407 	lsr.w	r4, r0, r7
 80003aa:	fa01 f306 	lsl.w	r3, r1, r6
 80003ae:	431c      	orrs	r4, r3
 80003b0:	40f9      	lsrs	r1, r7
 80003b2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b6:	fa00 f306 	lsl.w	r3, r0, r6
 80003ba:	fbb1 f8f9 	udiv	r8, r1, r9
 80003be:	0c20      	lsrs	r0, r4, #16
 80003c0:	fa1f fe8c 	uxth.w	lr, ip
 80003c4:	fb09 1118 	mls	r1, r9, r8, r1
 80003c8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003cc:	fb08 f00e 	mul.w	r0, r8, lr
 80003d0:	4288      	cmp	r0, r1
 80003d2:	fa02 f206 	lsl.w	r2, r2, r6
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b8>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2bc>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2bc>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4461      	add	r1, ip
 80003f0:	1a09      	subs	r1, r1, r0
 80003f2:	b2a4      	uxth	r4, r4
 80003f4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003f8:	fb09 1110 	mls	r1, r9, r0, r1
 80003fc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000400:	fb00 fe0e 	mul.w	lr, r0, lr
 8000404:	458e      	cmp	lr, r1
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1e2>
 8000408:	eb1c 0101 	adds.w	r1, ip, r1
 800040c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2b4>
 8000412:	458e      	cmp	lr, r1
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2b4>
 8000416:	3802      	subs	r0, #2
 8000418:	4461      	add	r1, ip
 800041a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800041e:	fba0 9402 	umull	r9, r4, r0, r2
 8000422:	eba1 010e 	sub.w	r1, r1, lr
 8000426:	42a1      	cmp	r1, r4
 8000428:	46c8      	mov	r8, r9
 800042a:	46a6      	mov	lr, r4
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x2a4>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x2a0>
 8000430:	b15d      	cbz	r5, 800044a <__udivmoddi4+0x212>
 8000432:	ebb3 0208 	subs.w	r2, r3, r8
 8000436:	eb61 010e 	sbc.w	r1, r1, lr
 800043a:	fa01 f707 	lsl.w	r7, r1, r7
 800043e:	fa22 f306 	lsr.w	r3, r2, r6
 8000442:	40f1      	lsrs	r1, r6
 8000444:	431f      	orrs	r7, r3
 8000446:	e9c5 7100 	strd	r7, r1, [r5]
 800044a:	2600      	movs	r6, #0
 800044c:	4631      	mov	r1, r6
 800044e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000452:	f1c2 0320 	rsb	r3, r2, #32
 8000456:	40d8      	lsrs	r0, r3
 8000458:	fa0c fc02 	lsl.w	ip, ip, r2
 800045c:	fa21 f303 	lsr.w	r3, r1, r3
 8000460:	4091      	lsls	r1, r2
 8000462:	4301      	orrs	r1, r0
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000470:	fb07 3610 	mls	r6, r7, r0, r3
 8000474:	0c0b      	lsrs	r3, r1, #16
 8000476:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800047a:	fb00 f60e 	mul.w	r6, r0, lr
 800047e:	429e      	cmp	r6, r3
 8000480:	fa04 f402 	lsl.w	r4, r4, r2
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x260>
 8000486:	eb1c 0303 	adds.w	r3, ip, r3
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b8>
 8000490:	429e      	cmp	r6, r3
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b8>
 8000494:	3802      	subs	r0, #2
 8000496:	4463      	add	r3, ip
 8000498:	1b9b      	subs	r3, r3, r6
 800049a:	b289      	uxth	r1, r1
 800049c:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a0:	fb07 3316 	mls	r3, r7, r6, r3
 80004a4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x28a>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2b0>
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2b0>
 80004be:	3e02      	subs	r6, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	1ac9      	subs	r1, r1, r3
 80004c4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0x104>
 80004ca:	462e      	mov	r6, r5
 80004cc:	4628      	mov	r0, r5
 80004ce:	e705      	b.n	80002dc <__udivmoddi4+0xa4>
 80004d0:	4606      	mov	r6, r0
 80004d2:	e6e3      	b.n	800029c <__udivmoddi4+0x64>
 80004d4:	4618      	mov	r0, r3
 80004d6:	e6f8      	b.n	80002ca <__udivmoddi4+0x92>
 80004d8:	454b      	cmp	r3, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f8>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004e4:	3801      	subs	r0, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f8>
 80004e8:	4646      	mov	r6, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x28a>
 80004ec:	4620      	mov	r0, r4
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1e2>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x260>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b8>
 80004f8:	3b02      	subs	r3, #2
 80004fa:	4461      	add	r1, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x12c>
 80004fe:	4630      	mov	r0, r6
 8000500:	e709      	b.n	8000316 <__udivmoddi4+0xde>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x156>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b08c      	sub	sp, #48	; 0x30
 8000510:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000512:	f107 031c 	add.w	r3, r7, #28
 8000516:	2200      	movs	r2, #0
 8000518:	601a      	str	r2, [r3, #0]
 800051a:	605a      	str	r2, [r3, #4]
 800051c:	609a      	str	r2, [r3, #8]
 800051e:	60da      	str	r2, [r3, #12]
 8000520:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000522:	4b99      	ldr	r3, [pc, #612]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000526:	4a98      	ldr	r2, [pc, #608]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000528:	f043 0304 	orr.w	r3, r3, #4
 800052c:	6313      	str	r3, [r2, #48]	; 0x30
 800052e:	4b96      	ldr	r3, [pc, #600]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	f003 0304 	and.w	r3, r3, #4
 8000536:	61bb      	str	r3, [r7, #24]
 8000538:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800053a:	4b93      	ldr	r3, [pc, #588]	; (8000788 <MX_GPIO_Init+0x27c>)
 800053c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053e:	4a92      	ldr	r2, [pc, #584]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000540:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000544:	6313      	str	r3, [r2, #48]	; 0x30
 8000546:	4b90      	ldr	r3, [pc, #576]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054e:	617b      	str	r3, [r7, #20]
 8000550:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000552:	4b8d      	ldr	r3, [pc, #564]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000556:	4a8c      	ldr	r2, [pc, #560]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6313      	str	r3, [r2, #48]	; 0x30
 800055e:	4b8a      	ldr	r3, [pc, #552]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	f003 0301 	and.w	r3, r3, #1
 8000566:	613b      	str	r3, [r7, #16]
 8000568:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800056a:	4b87      	ldr	r3, [pc, #540]	; (8000788 <MX_GPIO_Init+0x27c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	4a86      	ldr	r2, [pc, #536]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000570:	f043 0302 	orr.w	r3, r3, #2
 8000574:	6313      	str	r3, [r2, #48]	; 0x30
 8000576:	4b84      	ldr	r3, [pc, #528]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057a:	f003 0302 	and.w	r3, r3, #2
 800057e:	60fb      	str	r3, [r7, #12]
 8000580:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000582:	4b81      	ldr	r3, [pc, #516]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a80      	ldr	r2, [pc, #512]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000588:	f043 0308 	orr.w	r3, r3, #8
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b7e      	ldr	r3, [pc, #504]	; (8000788 <MX_GPIO_Init+0x27c>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0308 	and.w	r3, r3, #8
 8000596:	60bb      	str	r3, [r7, #8]
 8000598:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800059a:	4b7b      	ldr	r3, [pc, #492]	; (8000788 <MX_GPIO_Init+0x27c>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	4a7a      	ldr	r2, [pc, #488]	; (8000788 <MX_GPIO_Init+0x27c>)
 80005a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a4:	6313      	str	r3, [r2, #48]	; 0x30
 80005a6:	4b78      	ldr	r3, [pc, #480]	; (8000788 <MX_GPIO_Init+0x27c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	2108      	movs	r1, #8
 80005b6:	4875      	ldr	r0, [pc, #468]	; (800078c <MX_GPIO_Init+0x280>)
 80005b8:	f000 fdc6 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	f244 0181 	movw	r1, #16513	; 0x4081
 80005c2:	4873      	ldr	r0, [pc, #460]	; (8000790 <MX_GPIO_Init+0x284>)
 80005c4:	f000 fdc0 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	4871      	ldr	r0, [pc, #452]	; (8000794 <MX_GPIO_Init+0x288>)
 80005ce:	f000 fdbb 	bl	8001148 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80005d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80005d8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80005dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005de:	2300      	movs	r3, #0
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80005e2:	f107 031c 	add.w	r3, r7, #28
 80005e6:	4619      	mov	r1, r3
 80005e8:	486b      	ldr	r0, [pc, #428]	; (8000798 <MX_GPIO_Init+0x28c>)
 80005ea:	f000 fc01 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 80005ee:	2301      	movs	r3, #1
 80005f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005f2:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80005f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f8:	2301      	movs	r3, #1
 80005fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 80005fc:	f107 031c 	add.w	r3, r7, #28
 8000600:	4619      	mov	r1, r3
 8000602:	4865      	ldr	r0, [pc, #404]	; (8000798 <MX_GPIO_Init+0x28c>)
 8000604:	f000 fbf4 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000608:	2332      	movs	r3, #50	; 0x32
 800060a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800060c:	2302      	movs	r3, #2
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000614:	2303      	movs	r3, #3
 8000616:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000618:	230b      	movs	r3, #11
 800061a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800061c:	f107 031c 	add.w	r3, r7, #28
 8000620:	4619      	mov	r1, r3
 8000622:	485d      	ldr	r0, [pc, #372]	; (8000798 <MX_GPIO_Init+0x28c>)
 8000624:	f000 fbe4 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8000628:	2308      	movs	r3, #8
 800062a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800062c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000630:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000632:	2302      	movs	r3, #2
 8000634:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8000636:	f107 031c 	add.w	r3, r7, #28
 800063a:	4619      	mov	r1, r3
 800063c:	4856      	ldr	r0, [pc, #344]	; (8000798 <MX_GPIO_Init+0x28c>)
 800063e:	f000 fbd7 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000642:	2386      	movs	r3, #134	; 0x86
 8000644:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000646:	2302      	movs	r3, #2
 8000648:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800064a:	2300      	movs	r3, #0
 800064c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800064e:	2303      	movs	r3, #3
 8000650:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000652:	230b      	movs	r3, #11
 8000654:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000656:	f107 031c 	add.w	r3, r7, #28
 800065a:	4619      	mov	r1, r3
 800065c:	484b      	ldr	r0, [pc, #300]	; (800078c <MX_GPIO_Init+0x280>)
 800065e:	f000 fbc7 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8000662:	2308      	movs	r3, #8
 8000664:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000666:	2301      	movs	r3, #1
 8000668:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800066a:	2302      	movs	r3, #2
 800066c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066e:	2300      	movs	r3, #0
 8000670:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8000672:	f107 031c 	add.w	r3, r7, #28
 8000676:	4619      	mov	r1, r3
 8000678:	4844      	ldr	r0, [pc, #272]	; (800078c <MX_GPIO_Init+0x280>)
 800067a:	f000 fbb9 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800067e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000684:	2301      	movs	r3, #1
 8000686:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	2300      	movs	r3, #0
 800068a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800068c:	2300      	movs	r3, #0
 800068e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000690:	f107 031c 	add.w	r3, r7, #28
 8000694:	4619      	mov	r1, r3
 8000696:	483e      	ldr	r0, [pc, #248]	; (8000790 <MX_GPIO_Init+0x284>)
 8000698:	f000 fbaa 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800069c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006aa:	2303      	movs	r3, #3
 80006ac:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006ae:	230b      	movs	r3, #11
 80006b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	4835      	ldr	r0, [pc, #212]	; (8000790 <MX_GPIO_Init+0x284>)
 80006ba:	f000 fb99 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80006be:	2340      	movs	r3, #64	; 0x40
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c2:	2301      	movs	r3, #1
 80006c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c6:	2300      	movs	r3, #0
 80006c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ca:	2300      	movs	r3, #0
 80006cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80006ce:	f107 031c 	add.w	r3, r7, #28
 80006d2:	4619      	mov	r1, r3
 80006d4:	482f      	ldr	r0, [pc, #188]	; (8000794 <MX_GPIO_Init+0x288>)
 80006d6:	f000 fb8b 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80006da:	2380      	movs	r3, #128	; 0x80
 80006dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006de:	2300      	movs	r3, #0
 80006e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4619      	mov	r1, r3
 80006ec:	4829      	ldr	r0, [pc, #164]	; (8000794 <MX_GPIO_Init+0x288>)
 80006ee:	f000 fb7f 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80006f2:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000704:	230a      	movs	r3, #10
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	481f      	ldr	r0, [pc, #124]	; (800078c <MX_GPIO_Init+0x280>)
 8000710:	f000 fb6e 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000714:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000718:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
 800071c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4818      	ldr	r0, [pc, #96]	; (800078c <MX_GPIO_Init+0x280>)
 800072a:	f000 fb61 	bl	8000df0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800072e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000732:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000740:	230b      	movs	r3, #11
 8000742:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4812      	ldr	r0, [pc, #72]	; (8000794 <MX_GPIO_Init+0x288>)
 800074c:	f000 fb50 	bl	8000df0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000750:	2200      	movs	r2, #0
 8000752:	2100      	movs	r1, #0
 8000754:	2006      	movs	r0, #6
 8000756:	f000 fb14 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800075a:	2006      	movs	r0, #6
 800075c:	f000 fb2d 	bl	8000dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2009      	movs	r0, #9
 8000766:	f000 fb0c 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800076a:	2009      	movs	r0, #9
 800076c:	f000 fb25 	bl	8000dba <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000770:	2200      	movs	r2, #0
 8000772:	2100      	movs	r1, #0
 8000774:	2028      	movs	r0, #40	; 0x28
 8000776:	f000 fb04 	bl	8000d82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800077a:	2028      	movs	r0, #40	; 0x28
 800077c:	f000 fb1d 	bl	8000dba <HAL_NVIC_EnableIRQ>

}
 8000780:	bf00      	nop
 8000782:	3730      	adds	r7, #48	; 0x30
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	40023800 	.word	0x40023800
 800078c:	40020000 	.word	0x40020000
 8000790:	40020400 	.word	0x40020400
 8000794:	40021800 	.word	0x40021800
 8000798:	40020800 	.word	0x40020800

0800079c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007a2:	f000 f9b6 	bl	8000b12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007a6:	f000 f817 	bl	80007d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007aa:	f7ff feaf 	bl	800050c <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80007ae:	f000 f8f7 	bl	80009a0 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    if(HAL_UART_Receive(&huart3, (uint8_t*)&msg, 1, 0xffff) == HAL_OK)
 80007b2:	1df9      	adds	r1, r7, #7
 80007b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007b8:	2201      	movs	r2, #1
 80007ba:	4806      	ldr	r0, [pc, #24]	; (80007d4 <main+0x38>)
 80007bc:	f001 fe9d 	bl	80024fa <HAL_UART_Receive>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d1f5      	bne.n	80007b2 <main+0x16>
    	HAL_UART_Transmit(&huart3, (uint8_t*)&msg, 1, 10);
 80007c6:	1df9      	adds	r1, r7, #7
 80007c8:	230a      	movs	r3, #10
 80007ca:	2201      	movs	r2, #1
 80007cc:	4801      	ldr	r0, [pc, #4]	; (80007d4 <main+0x38>)
 80007ce:	f001 fe11 	bl	80023f4 <HAL_UART_Transmit>
    if(HAL_UART_Receive(&huart3, (uint8_t*)&msg, 1, 0xffff) == HAL_OK)
 80007d2:	e7ee      	b.n	80007b2 <main+0x16>
 80007d4:	20000028 	.word	0x20000028

080007d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b094      	sub	sp, #80	; 0x50
 80007dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007de:	f107 0320 	add.w	r3, r7, #32
 80007e2:	2230      	movs	r2, #48	; 0x30
 80007e4:	2100      	movs	r1, #0
 80007e6:	4618      	mov	r0, r3
 80007e8:	f002 fb74 	bl	8002ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
 80007fa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80007fc:	f000 fce2 	bl	80011c4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <SystemClock_Config+0xc8>)
 8000802:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000804:	4a26      	ldr	r2, [pc, #152]	; (80008a0 <SystemClock_Config+0xc8>)
 8000806:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800080a:	6413      	str	r3, [r2, #64]	; 0x40
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <SystemClock_Config+0xc8>)
 800080e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000810:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000814:	60bb      	str	r3, [r7, #8]
 8000816:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000818:	4b22      	ldr	r3, [pc, #136]	; (80008a4 <SystemClock_Config+0xcc>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000820:	4a20      	ldr	r2, [pc, #128]	; (80008a4 <SystemClock_Config+0xcc>)
 8000822:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000826:	6013      	str	r3, [r2, #0]
 8000828:	4b1e      	ldr	r3, [pc, #120]	; (80008a4 <SystemClock_Config+0xcc>)
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000830:	607b      	str	r3, [r7, #4]
 8000832:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000834:	2301      	movs	r3, #1
 8000836:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000838:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083e:	2302      	movs	r3, #2
 8000840:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000842:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000846:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000848:	2304      	movs	r3, #4
 800084a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800084c:	2348      	movs	r3, #72	; 0x48
 800084e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000854:	2303      	movs	r3, #3
 8000856:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0320 	add.w	r3, r7, #32
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fcc1 	bl	80011e4 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000868:	f000 f81e 	bl	80008a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2302      	movs	r3, #2
 8000872:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800087c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087e:	2300      	movs	r3, #0
 8000880:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000882:	f107 030c 	add.w	r3, r7, #12
 8000886:	2102      	movs	r1, #2
 8000888:	4618      	mov	r0, r3
 800088a:	f000 ff4f 	bl	800172c <HAL_RCC_ClockConfig>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000894:	f000 f808 	bl	80008a8 <Error_Handler>
  }
}
 8000898:	bf00      	nop
 800089a:	3750      	adds	r7, #80	; 0x50
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40023800 	.word	0x40023800
 80008a4:	40007000 	.word	0x40007000

080008a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008ac:	b672      	cpsid	i
}
 80008ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <Error_Handler+0x8>
	...

080008b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ba:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <HAL_MspInit+0x44>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	4a0e      	ldr	r2, [pc, #56]	; (80008f8 <HAL_MspInit+0x44>)
 80008c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008c4:	6413      	str	r3, [r2, #64]	; 0x40
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <HAL_MspInit+0x44>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <HAL_MspInit+0x44>)
 80008d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d6:	4a08      	ldr	r2, [pc, #32]	; (80008f8 <HAL_MspInit+0x44>)
 80008d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008dc:	6453      	str	r3, [r2, #68]	; 0x44
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <HAL_MspInit+0x44>)
 80008e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008e6:	603b      	str	r3, [r7, #0]
 80008e8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008ea:	bf00      	nop
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr
 80008f6:	bf00      	nop
 80008f8:	40023800 	.word	0x40023800

080008fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008fc:	b480      	push	{r7}
 80008fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000900:	e7fe      	b.n	8000900 <NMI_Handler+0x4>

08000902 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000906:	e7fe      	b.n	8000906 <HardFault_Handler+0x4>

08000908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800090c:	e7fe      	b.n	800090c <MemManage_Handler+0x4>

0800090e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <BusFault_Handler+0x4>

08000914 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <UsageFault_Handler+0x4>

0800091a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr

08000936 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000948:	f000 f920 	bl	8000b8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}

08000950 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT1_Btn_Pin);
 8000954:	2001      	movs	r0, #1
 8000956:	f000 fc11 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}

0800095e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800095e:	b580      	push	{r7, lr}
 8000960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(EXT2_Btn_Pin);
 8000962:	2008      	movs	r0, #8
 8000964:	f000 fc0a 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000970:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000974:	f000 fc02 	bl	800117c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000978:	bf00      	nop
 800097a:	bd80      	pop	{r7, pc}

0800097c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <SystemInit+0x20>)
 8000982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000986:	4a05      	ldr	r2, [pc, #20]	; (800099c <SystemInit+0x20>)
 8000988:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800098c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80009a4:	4b14      	ldr	r3, [pc, #80]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009a6:	4a15      	ldr	r2, [pc, #84]	; (80009fc <MX_USART3_UART_Init+0x5c>)
 80009a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80009aa:	4b13      	ldr	r3, [pc, #76]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009b4:	2200      	movs	r2, #0
 80009b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80009c4:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009c6:	220c      	movs	r2, #12
 80009c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009d0:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009de:	2200      	movs	r2, #0
 80009e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80009e2:	4805      	ldr	r0, [pc, #20]	; (80009f8 <MX_USART3_UART_Init+0x58>)
 80009e4:	f001 fcb8 	bl	8002358 <HAL_UART_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80009ee:	f7ff ff5b 	bl	80008a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009f2:	bf00      	nop
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	20000028 	.word	0x20000028
 80009fc:	40004800 	.word	0x40004800

08000a00 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b0aa      	sub	sp, #168	; 0xa8
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 0310 	add.w	r3, r7, #16
 8000a1c:	2284      	movs	r2, #132	; 0x84
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4618      	mov	r0, r3
 8000a22:	f002 fa57 	bl	8002ed4 <memset>
  if(uartHandle->Instance==USART3)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a22      	ldr	r2, [pc, #136]	; (8000ab4 <HAL_UART_MspInit+0xb4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d13c      	bne.n	8000aaa <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000a30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a34:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000a36:	2300      	movs	r3, #0
 8000a38:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3a:	f107 0310 	add.w	r3, r7, #16
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f001 f89a 	bl	8001b78 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d001      	beq.n	8000a4e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000a4a:	f7ff ff2d 	bl	80008a8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000a4e:	4b1a      	ldr	r3, [pc, #104]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a52:	4a19      	ldr	r2, [pc, #100]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a58:	6413      	str	r3, [r2, #64]	; 0x40
 8000a5a:	4b17      	ldr	r3, [pc, #92]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000a62:	60fb      	str	r3, [r7, #12]
 8000a64:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a66:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a6a:	4a13      	ldr	r2, [pc, #76]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a6c:	f043 0308 	orr.w	r3, r3, #8
 8000a70:	6313      	str	r3, [r2, #48]	; 0x30
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <HAL_UART_MspInit+0xb8>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	f003 0308 	and.w	r3, r3, #8
 8000a7a:	60bb      	str	r3, [r7, #8]
 8000a7c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a82:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a86:	2302      	movs	r3, #2
 8000a88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a92:	2303      	movs	r3, #3
 8000a94:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a98:	2307      	movs	r3, #7
 8000a9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	4805      	ldr	r0, [pc, #20]	; (8000abc <HAL_UART_MspInit+0xbc>)
 8000aa6:	f000 f9a3 	bl	8000df0 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000aaa:	bf00      	nop
 8000aac:	37a8      	adds	r7, #168	; 0xa8
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	40004800 	.word	0x40004800
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020c00 	.word	0x40020c00

08000ac0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ac0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ac4:	480d      	ldr	r0, [pc, #52]	; (8000afc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ac6:	490e      	ldr	r1, [pc, #56]	; (8000b00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ac8:	4a0e      	ldr	r2, [pc, #56]	; (8000b04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000aca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000acc:	e002      	b.n	8000ad4 <LoopCopyDataInit>

08000ace <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ace:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ad0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ad2:	3304      	adds	r3, #4

08000ad4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ad4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ad6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ad8:	d3f9      	bcc.n	8000ace <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ada:	4a0b      	ldr	r2, [pc, #44]	; (8000b08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000adc:	4c0b      	ldr	r4, [pc, #44]	; (8000b0c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ade:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ae0:	e001      	b.n	8000ae6 <LoopFillZerobss>

08000ae2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ae2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ae4:	3204      	adds	r2, #4

08000ae6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ae6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ae8:	d3fb      	bcc.n	8000ae2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000aea:	f7ff ff47 	bl	800097c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aee:	f002 f9cd 	bl	8002e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000af2:	f7ff fe53 	bl	800079c <main>
  bx  lr    
 8000af6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000af8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b00:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b04:	08002f24 	.word	0x08002f24
  ldr r2, =_sbss
 8000b08:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b0c:	200000b4 	.word	0x200000b4

08000b10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b10:	e7fe      	b.n	8000b10 <ADC_IRQHandler>

08000b12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b12:	b580      	push	{r7, lr}
 8000b14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b16:	2003      	movs	r0, #3
 8000b18:	f000 f928 	bl	8000d6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1c:	2000      	movs	r0, #0
 8000b1e:	f000 f805 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b22:	f7ff fec7 	bl	80008b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b26:	2300      	movs	r3, #0
}
 8000b28:	4618      	mov	r0, r3
 8000b2a:	bd80      	pop	{r7, pc}

08000b2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <HAL_InitTick+0x54>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x58>)
 8000b3a:	781b      	ldrb	r3, [r3, #0]
 8000b3c:	4619      	mov	r1, r3
 8000b3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f000 f943 	bl	8000dd6 <HAL_SYSTICK_Config>
 8000b50:	4603      	mov	r3, r0
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d001      	beq.n	8000b5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b56:	2301      	movs	r3, #1
 8000b58:	e00e      	b.n	8000b78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	2b0f      	cmp	r3, #15
 8000b5e:	d80a      	bhi.n	8000b76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b60:	2200      	movs	r2, #0
 8000b62:	6879      	ldr	r1, [r7, #4]
 8000b64:	f04f 30ff 	mov.w	r0, #4294967295
 8000b68:	f000 f90b 	bl	8000d82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b6c:	4a06      	ldr	r2, [pc, #24]	; (8000b88 <HAL_InitTick+0x5c>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b72:	2300      	movs	r3, #0
 8000b74:	e000      	b.n	8000b78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	3708      	adds	r7, #8
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	20000000 	.word	0x20000000
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004

08000b8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <HAL_IncTick+0x20>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	461a      	mov	r2, r3
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_IncTick+0x24>)
 8000b9e:	6013      	str	r3, [r2, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20000008 	.word	0x20000008
 8000bb0:	200000b0 	.word	0x200000b0

08000bb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb8:	4b03      	ldr	r3, [pc, #12]	; (8000bc8 <HAL_GetTick+0x14>)
 8000bba:	681b      	ldr	r3, [r3, #0]
}
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	200000b0 	.word	0x200000b0

08000bcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	f003 0307 	and.w	r3, r3, #7
 8000bda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bde:	68db      	ldr	r3, [r3, #12]
 8000be0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be2:	68ba      	ldr	r2, [r7, #8]
 8000be4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be8:	4013      	ands	r3, r2
 8000bea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf6:	4313      	orrs	r3, r2
 8000bf8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bfa:	4a04      	ldr	r2, [pc, #16]	; (8000c0c <__NVIC_SetPriorityGrouping+0x40>)
 8000bfc:	68bb      	ldr	r3, [r7, #8]
 8000bfe:	60d3      	str	r3, [r2, #12]
}
 8000c00:	bf00      	nop
 8000c02:	3714      	adds	r7, #20
 8000c04:	46bd      	mov	sp, r7
 8000c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0a:	4770      	bx	lr
 8000c0c:	e000ed00 	.word	0xe000ed00
 8000c10:	05fa0000 	.word	0x05fa0000

08000c14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c18:	4b04      	ldr	r3, [pc, #16]	; (8000c2c <__NVIC_GetPriorityGrouping+0x18>)
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	0a1b      	lsrs	r3, r3, #8
 8000c1e:	f003 0307 	and.w	r3, r3, #7
}
 8000c22:	4618      	mov	r0, r3
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b083      	sub	sp, #12
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	4603      	mov	r3, r0
 8000c38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	db0b      	blt.n	8000c5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c42:	79fb      	ldrb	r3, [r7, #7]
 8000c44:	f003 021f 	and.w	r2, r3, #31
 8000c48:	4907      	ldr	r1, [pc, #28]	; (8000c68 <__NVIC_EnableIRQ+0x38>)
 8000c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4e:	095b      	lsrs	r3, r3, #5
 8000c50:	2001      	movs	r0, #1
 8000c52:	fa00 f202 	lsl.w	r2, r0, r2
 8000c56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c5a:	bf00      	nop
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	e000e100 	.word	0xe000e100

08000c6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	b083      	sub	sp, #12
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	4603      	mov	r3, r0
 8000c74:	6039      	str	r1, [r7, #0]
 8000c76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	db0a      	blt.n	8000c96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	b2da      	uxtb	r2, r3
 8000c84:	490c      	ldr	r1, [pc, #48]	; (8000cb8 <__NVIC_SetPriority+0x4c>)
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c94:	e00a      	b.n	8000cac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	4908      	ldr	r1, [pc, #32]	; (8000cbc <__NVIC_SetPriority+0x50>)
 8000c9c:	79fb      	ldrb	r3, [r7, #7]
 8000c9e:	f003 030f 	and.w	r3, r3, #15
 8000ca2:	3b04      	subs	r3, #4
 8000ca4:	0112      	lsls	r2, r2, #4
 8000ca6:	b2d2      	uxtb	r2, r2
 8000ca8:	440b      	add	r3, r1
 8000caa:	761a      	strb	r2, [r3, #24]
}
 8000cac:	bf00      	nop
 8000cae:	370c      	adds	r7, #12
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000e100 	.word	0xe000e100
 8000cbc:	e000ed00 	.word	0xe000ed00

08000cc0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b089      	sub	sp, #36	; 0x24
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	60f8      	str	r0, [r7, #12]
 8000cc8:	60b9      	str	r1, [r7, #8]
 8000cca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f1c3 0307 	rsb	r3, r3, #7
 8000cda:	2b04      	cmp	r3, #4
 8000cdc:	bf28      	it	cs
 8000cde:	2304      	movcs	r3, #4
 8000ce0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3304      	adds	r3, #4
 8000ce6:	2b06      	cmp	r3, #6
 8000ce8:	d902      	bls.n	8000cf0 <NVIC_EncodePriority+0x30>
 8000cea:	69fb      	ldr	r3, [r7, #28]
 8000cec:	3b03      	subs	r3, #3
 8000cee:	e000      	b.n	8000cf2 <NVIC_EncodePriority+0x32>
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfe:	43da      	mvns	r2, r3
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	401a      	ands	r2, r3
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d08:	f04f 31ff 	mov.w	r1, #4294967295
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d12:	43d9      	mvns	r1, r3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	4313      	orrs	r3, r2
         );
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3724      	adds	r7, #36	; 0x24
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
	...

08000d28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3b01      	subs	r3, #1
 8000d34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d38:	d301      	bcc.n	8000d3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e00f      	b.n	8000d5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3e:	4a0a      	ldr	r2, [pc, #40]	; (8000d68 <SysTick_Config+0x40>)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	3b01      	subs	r3, #1
 8000d44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d46:	210f      	movs	r1, #15
 8000d48:	f04f 30ff 	mov.w	r0, #4294967295
 8000d4c:	f7ff ff8e 	bl	8000c6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d50:	4b05      	ldr	r3, [pc, #20]	; (8000d68 <SysTick_Config+0x40>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d56:	4b04      	ldr	r3, [pc, #16]	; (8000d68 <SysTick_Config+0x40>)
 8000d58:	2207      	movs	r2, #7
 8000d5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d5c:	2300      	movs	r3, #0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	e000e010 	.word	0xe000e010

08000d6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d74:	6878      	ldr	r0, [r7, #4]
 8000d76:	f7ff ff29 	bl	8000bcc <__NVIC_SetPriorityGrouping>
}
 8000d7a:	bf00      	nop
 8000d7c:	3708      	adds	r7, #8
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}

08000d82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d82:	b580      	push	{r7, lr}
 8000d84:	b086      	sub	sp, #24
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	4603      	mov	r3, r0
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
 8000d8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d94:	f7ff ff3e 	bl	8000c14 <__NVIC_GetPriorityGrouping>
 8000d98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	68b9      	ldr	r1, [r7, #8]
 8000d9e:	6978      	ldr	r0, [r7, #20]
 8000da0:	f7ff ff8e 	bl	8000cc0 <NVIC_EncodePriority>
 8000da4:	4602      	mov	r2, r0
 8000da6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000daa:	4611      	mov	r1, r2
 8000dac:	4618      	mov	r0, r3
 8000dae:	f7ff ff5d 	bl	8000c6c <__NVIC_SetPriority>
}
 8000db2:	bf00      	nop
 8000db4:	3718      	adds	r7, #24
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc8:	4618      	mov	r0, r3
 8000dca:	f7ff ff31 	bl	8000c30 <__NVIC_EnableIRQ>
}
 8000dce:	bf00      	nop
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}

08000dd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	b082      	sub	sp, #8
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dde:	6878      	ldr	r0, [r7, #4]
 8000de0:	f7ff ffa2 	bl	8000d28 <SysTick_Config>
 8000de4:	4603      	mov	r3, r0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
	...

08000df0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b089      	sub	sp, #36	; 0x24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
 8000df8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e02:	2300      	movs	r3, #0
 8000e04:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61fb      	str	r3, [r7, #28]
 8000e0e:	e175      	b.n	80010fc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e10:	2201      	movs	r2, #1
 8000e12:	69fb      	ldr	r3, [r7, #28]
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	4013      	ands	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	697b      	ldr	r3, [r7, #20]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	f040 8164 	bne.w	80010f6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	685b      	ldr	r3, [r3, #4]
 8000e32:	f003 0303 	and.w	r3, r3, #3
 8000e36:	2b01      	cmp	r3, #1
 8000e38:	d005      	beq.n	8000e46 <HAL_GPIO_Init+0x56>
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f003 0303 	and.w	r3, r3, #3
 8000e42:	2b02      	cmp	r3, #2
 8000e44:	d130      	bne.n	8000ea8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	689b      	ldr	r3, [r3, #8]
 8000e4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e4c:	69fb      	ldr	r3, [r7, #28]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	2203      	movs	r2, #3
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	43db      	mvns	r3, r3
 8000e58:	69ba      	ldr	r2, [r7, #24]
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e5e:	683b      	ldr	r3, [r7, #0]
 8000e60:	68da      	ldr	r2, [r3, #12]
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	005b      	lsls	r3, r3, #1
 8000e66:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	685b      	ldr	r3, [r3, #4]
 8000e7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	fa02 f303 	lsl.w	r3, r2, r3
 8000e84:	43db      	mvns	r3, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4013      	ands	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	091b      	lsrs	r3, r3, #4
 8000e92:	f003 0201 	and.w	r2, r3, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	69ba      	ldr	r2, [r7, #24]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	69ba      	ldr	r2, [r7, #24]
 8000ea6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f003 0303 	and.w	r3, r3, #3
 8000eb0:	2b03      	cmp	r3, #3
 8000eb2:	d017      	beq.n	8000ee4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	68db      	ldr	r3, [r3, #12]
 8000eb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	005b      	lsls	r3, r3, #1
 8000ebe:	2203      	movs	r2, #3
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	69ba      	ldr	r2, [r7, #24]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	69ba      	ldr	r2, [r7, #24]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	69ba      	ldr	r2, [r7, #24]
 8000ee2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f003 0303 	and.w	r3, r3, #3
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d123      	bne.n	8000f38 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	08da      	lsrs	r2, r3, #3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	3208      	adds	r2, #8
 8000ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000efc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000efe:	69fb      	ldr	r3, [r7, #28]
 8000f00:	f003 0307 	and.w	r3, r3, #7
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	220f      	movs	r2, #15
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	43db      	mvns	r3, r3
 8000f0e:	69ba      	ldr	r2, [r7, #24]
 8000f10:	4013      	ands	r3, r2
 8000f12:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	691a      	ldr	r2, [r3, #16]
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	69ba      	ldr	r2, [r7, #24]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f2a:	69fb      	ldr	r3, [r7, #28]
 8000f2c:	08da      	lsrs	r2, r3, #3
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3208      	adds	r2, #8
 8000f32:	69b9      	ldr	r1, [r7, #24]
 8000f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0203 	and.w	r2, r3, #3
 8000f58:	69fb      	ldr	r3, [r7, #28]
 8000f5a:	005b      	lsls	r3, r3, #1
 8000f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f60:	69ba      	ldr	r2, [r7, #24]
 8000f62:	4313      	orrs	r3, r2
 8000f64:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	69ba      	ldr	r2, [r7, #24]
 8000f6a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	f000 80be 	beq.w	80010f6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7a:	4b66      	ldr	r3, [pc, #408]	; (8001114 <HAL_GPIO_Init+0x324>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7e:	4a65      	ldr	r2, [pc, #404]	; (8001114 <HAL_GPIO_Init+0x324>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	; 0x44
 8000f86:	4b63      	ldr	r3, [pc, #396]	; (8001114 <HAL_GPIO_Init+0x324>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8e:	60fb      	str	r3, [r7, #12]
 8000f90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000f92:	4a61      	ldr	r2, [pc, #388]	; (8001118 <HAL_GPIO_Init+0x328>)
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	089b      	lsrs	r3, r3, #2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	f003 0303 	and.w	r3, r3, #3
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a58      	ldr	r2, [pc, #352]	; (800111c <HAL_GPIO_Init+0x32c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d037      	beq.n	800102e <HAL_GPIO_Init+0x23e>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a57      	ldr	r2, [pc, #348]	; (8001120 <HAL_GPIO_Init+0x330>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d031      	beq.n	800102a <HAL_GPIO_Init+0x23a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a56      	ldr	r2, [pc, #344]	; (8001124 <HAL_GPIO_Init+0x334>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d02b      	beq.n	8001026 <HAL_GPIO_Init+0x236>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a55      	ldr	r2, [pc, #340]	; (8001128 <HAL_GPIO_Init+0x338>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d025      	beq.n	8001022 <HAL_GPIO_Init+0x232>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a54      	ldr	r2, [pc, #336]	; (800112c <HAL_GPIO_Init+0x33c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d01f      	beq.n	800101e <HAL_GPIO_Init+0x22e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a53      	ldr	r2, [pc, #332]	; (8001130 <HAL_GPIO_Init+0x340>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d019      	beq.n	800101a <HAL_GPIO_Init+0x22a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a52      	ldr	r2, [pc, #328]	; (8001134 <HAL_GPIO_Init+0x344>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d013      	beq.n	8001016 <HAL_GPIO_Init+0x226>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a51      	ldr	r2, [pc, #324]	; (8001138 <HAL_GPIO_Init+0x348>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d00d      	beq.n	8001012 <HAL_GPIO_Init+0x222>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x34c>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d007      	beq.n	800100e <HAL_GPIO_Init+0x21e>
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4a4f      	ldr	r2, [pc, #316]	; (8001140 <HAL_GPIO_Init+0x350>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_GPIO_Init+0x21a>
 8001006:	2309      	movs	r3, #9
 8001008:	e012      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800100a:	230a      	movs	r3, #10
 800100c:	e010      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800100e:	2308      	movs	r3, #8
 8001010:	e00e      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001012:	2307      	movs	r3, #7
 8001014:	e00c      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001016:	2306      	movs	r3, #6
 8001018:	e00a      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800101a:	2305      	movs	r3, #5
 800101c:	e008      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800101e:	2304      	movs	r3, #4
 8001020:	e006      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001022:	2303      	movs	r3, #3
 8001024:	e004      	b.n	8001030 <HAL_GPIO_Init+0x240>
 8001026:	2302      	movs	r3, #2
 8001028:	e002      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800102a:	2301      	movs	r3, #1
 800102c:	e000      	b.n	8001030 <HAL_GPIO_Init+0x240>
 800102e:	2300      	movs	r3, #0
 8001030:	69fa      	ldr	r2, [r7, #28]
 8001032:	f002 0203 	and.w	r2, r2, #3
 8001036:	0092      	lsls	r2, r2, #2
 8001038:	4093      	lsls	r3, r2
 800103a:	69ba      	ldr	r2, [r7, #24]
 800103c:	4313      	orrs	r3, r2
 800103e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001040:	4935      	ldr	r1, [pc, #212]	; (8001118 <HAL_GPIO_Init+0x328>)
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	089b      	lsrs	r3, r3, #2
 8001046:	3302      	adds	r3, #2
 8001048:	69ba      	ldr	r2, [r7, #24]
 800104a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800104e:	4b3d      	ldr	r3, [pc, #244]	; (8001144 <HAL_GPIO_Init+0x354>)
 8001050:	689b      	ldr	r3, [r3, #8]
 8001052:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	43db      	mvns	r3, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4013      	ands	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	4313      	orrs	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001072:	4a34      	ldr	r2, [pc, #208]	; (8001144 <HAL_GPIO_Init+0x354>)
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001078:	4b32      	ldr	r3, [pc, #200]	; (8001144 <HAL_GPIO_Init+0x354>)
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	43db      	mvns	r3, r3
 8001082:	69ba      	ldr	r2, [r7, #24]
 8001084:	4013      	ands	r3, r2
 8001086:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	2b00      	cmp	r3, #0
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800109c:	4a29      	ldr	r2, [pc, #164]	; (8001144 <HAL_GPIO_Init+0x354>)
 800109e:	69bb      	ldr	r3, [r7, #24]
 80010a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_GPIO_Init+0x354>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010c6:	4a1f      	ldr	r2, [pc, #124]	; (8001144 <HAL_GPIO_Init+0x354>)
 80010c8:	69bb      	ldr	r3, [r7, #24]
 80010ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010cc:	4b1d      	ldr	r3, [pc, #116]	; (8001144 <HAL_GPIO_Init+0x354>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	43db      	mvns	r3, r3
 80010d6:	69ba      	ldr	r2, [r7, #24]
 80010d8:	4013      	ands	r3, r2
 80010da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d003      	beq.n	80010f0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	4313      	orrs	r3, r2
 80010ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f0:	4a14      	ldr	r2, [pc, #80]	; (8001144 <HAL_GPIO_Init+0x354>)
 80010f2:	69bb      	ldr	r3, [r7, #24]
 80010f4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	3301      	adds	r3, #1
 80010fa:	61fb      	str	r3, [r7, #28]
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	2b0f      	cmp	r3, #15
 8001100:	f67f ae86 	bls.w	8000e10 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001104:	bf00      	nop
 8001106:	bf00      	nop
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr
 8001112:	bf00      	nop
 8001114:	40023800 	.word	0x40023800
 8001118:	40013800 	.word	0x40013800
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400
 8001124:	40020800 	.word	0x40020800
 8001128:	40020c00 	.word	0x40020c00
 800112c:	40021000 	.word	0x40021000
 8001130:	40021400 	.word	0x40021400
 8001134:	40021800 	.word	0x40021800
 8001138:	40021c00 	.word	0x40021c00
 800113c:	40022000 	.word	0x40022000
 8001140:	40022400 	.word	0x40022400
 8001144:	40013c00 	.word	0x40013c00

08001148 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001148:	b480      	push	{r7}
 800114a:	b083      	sub	sp, #12
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	807b      	strh	r3, [r7, #2]
 8001154:	4613      	mov	r3, r2
 8001156:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001158:	787b      	ldrb	r3, [r7, #1]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001164:	e003      	b.n	800116e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001166:	887b      	ldrh	r3, [r7, #2]
 8001168:	041a      	lsls	r2, r3, #16
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	619a      	str	r2, [r3, #24]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
	...

0800117c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001186:	4b08      	ldr	r3, [pc, #32]	; (80011a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001188:	695a      	ldr	r2, [r3, #20]
 800118a:	88fb      	ldrh	r3, [r7, #6]
 800118c:	4013      	ands	r3, r2
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001192:	4a05      	ldr	r2, [pc, #20]	; (80011a8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001194:	88fb      	ldrh	r3, [r7, #6]
 8001196:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001198:	88fb      	ldrh	r3, [r7, #6]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f806 	bl	80011ac <HAL_GPIO_EXTI_Callback>
  }
}
 80011a0:	bf00      	nop
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40013c00 	.word	0x40013c00

080011ac <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	4603      	mov	r3, r0
 80011b4:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
	...

080011c4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011c8:	4b05      	ldr	r3, [pc, #20]	; (80011e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d2:	6013      	str	r3, [r2, #0]
}
 80011d4:	bf00      	nop
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
 80011de:	bf00      	nop
 80011e0:	40007000 	.word	0x40007000

080011e4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d101      	bne.n	80011fa <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	e291      	b.n	800171e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	f000 8087 	beq.w	8001316 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001208:	4b96      	ldr	r3, [pc, #600]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800120a:	689b      	ldr	r3, [r3, #8]
 800120c:	f003 030c 	and.w	r3, r3, #12
 8001210:	2b04      	cmp	r3, #4
 8001212:	d00c      	beq.n	800122e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001214:	4b93      	ldr	r3, [pc, #588]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f003 030c 	and.w	r3, r3, #12
 800121c:	2b08      	cmp	r3, #8
 800121e:	d112      	bne.n	8001246 <HAL_RCC_OscConfig+0x62>
 8001220:	4b90      	ldr	r3, [pc, #576]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001228:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800122c:	d10b      	bne.n	8001246 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800122e:	4b8d      	ldr	r3, [pc, #564]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001236:	2b00      	cmp	r3, #0
 8001238:	d06c      	beq.n	8001314 <HAL_RCC_OscConfig+0x130>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d168      	bne.n	8001314 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	e26b      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800124e:	d106      	bne.n	800125e <HAL_RCC_OscConfig+0x7a>
 8001250:	4b84      	ldr	r3, [pc, #528]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a83      	ldr	r2, [pc, #524]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001256:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800125a:	6013      	str	r3, [r2, #0]
 800125c:	e02e      	b.n	80012bc <HAL_RCC_OscConfig+0xd8>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685b      	ldr	r3, [r3, #4]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d10c      	bne.n	8001280 <HAL_RCC_OscConfig+0x9c>
 8001266:	4b7f      	ldr	r3, [pc, #508]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	4a7e      	ldr	r2, [pc, #504]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800126c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001270:	6013      	str	r3, [r2, #0]
 8001272:	4b7c      	ldr	r3, [pc, #496]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a7b      	ldr	r2, [pc, #492]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001278:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800127c:	6013      	str	r3, [r2, #0]
 800127e:	e01d      	b.n	80012bc <HAL_RCC_OscConfig+0xd8>
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001288:	d10c      	bne.n	80012a4 <HAL_RCC_OscConfig+0xc0>
 800128a:	4b76      	ldr	r3, [pc, #472]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a75      	ldr	r2, [pc, #468]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001290:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001294:	6013      	str	r3, [r2, #0]
 8001296:	4b73      	ldr	r3, [pc, #460]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a72      	ldr	r2, [pc, #456]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800129c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a0:	6013      	str	r3, [r2, #0]
 80012a2:	e00b      	b.n	80012bc <HAL_RCC_OscConfig+0xd8>
 80012a4:	4b6f      	ldr	r3, [pc, #444]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a6e      	ldr	r2, [pc, #440]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80012aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012ae:	6013      	str	r3, [r2, #0]
 80012b0:	4b6c      	ldr	r3, [pc, #432]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a6b      	ldr	r2, [pc, #428]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80012b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d013      	beq.n	80012ec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c4:	f7ff fc76 	bl	8000bb4 <HAL_GetTick>
 80012c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012ca:	e008      	b.n	80012de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012cc:	f7ff fc72 	bl	8000bb4 <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	693b      	ldr	r3, [r7, #16]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	2b64      	cmp	r3, #100	; 0x64
 80012d8:	d901      	bls.n	80012de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80012da:	2303      	movs	r3, #3
 80012dc:	e21f      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012de:	4b61      	ldr	r3, [pc, #388]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d0f0      	beq.n	80012cc <HAL_RCC_OscConfig+0xe8>
 80012ea:	e014      	b.n	8001316 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012ec:	f7ff fc62 	bl	8000bb4 <HAL_GetTick>
 80012f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012f2:	e008      	b.n	8001306 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012f4:	f7ff fc5e 	bl	8000bb4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	2b64      	cmp	r3, #100	; 0x64
 8001300:	d901      	bls.n	8001306 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001302:	2303      	movs	r3, #3
 8001304:	e20b      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001306:	4b57      	ldr	r3, [pc, #348]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800130e:	2b00      	cmp	r3, #0
 8001310:	d1f0      	bne.n	80012f4 <HAL_RCC_OscConfig+0x110>
 8001312:	e000      	b.n	8001316 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001314:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	2b00      	cmp	r3, #0
 8001320:	d069      	beq.n	80013f6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001322:	4b50      	ldr	r3, [pc, #320]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	f003 030c 	and.w	r3, r3, #12
 800132a:	2b00      	cmp	r3, #0
 800132c:	d00b      	beq.n	8001346 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800132e:	4b4d      	ldr	r3, [pc, #308]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001330:	689b      	ldr	r3, [r3, #8]
 8001332:	f003 030c 	and.w	r3, r3, #12
 8001336:	2b08      	cmp	r3, #8
 8001338:	d11c      	bne.n	8001374 <HAL_RCC_OscConfig+0x190>
 800133a:	4b4a      	ldr	r3, [pc, #296]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d116      	bne.n	8001374 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001346:	4b47      	ldr	r3, [pc, #284]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0302 	and.w	r3, r3, #2
 800134e:	2b00      	cmp	r3, #0
 8001350:	d005      	beq.n	800135e <HAL_RCC_OscConfig+0x17a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	68db      	ldr	r3, [r3, #12]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d001      	beq.n	800135e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e1df      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800135e:	4b41      	ldr	r3, [pc, #260]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	691b      	ldr	r3, [r3, #16]
 800136a:	00db      	lsls	r3, r3, #3
 800136c:	493d      	ldr	r1, [pc, #244]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800136e:	4313      	orrs	r3, r2
 8001370:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001372:	e040      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d023      	beq.n	80013c4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800137c:	4b39      	ldr	r3, [pc, #228]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a38      	ldr	r2, [pc, #224]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001388:	f7ff fc14 	bl	8000bb4 <HAL_GetTick>
 800138c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138e:	e008      	b.n	80013a2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001390:	f7ff fc10 	bl	8000bb4 <HAL_GetTick>
 8001394:	4602      	mov	r2, r0
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	1ad3      	subs	r3, r2, r3
 800139a:	2b02      	cmp	r3, #2
 800139c:	d901      	bls.n	80013a2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800139e:	2303      	movs	r3, #3
 80013a0:	e1bd      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a2:	4b30      	ldr	r3, [pc, #192]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0f0      	beq.n	8001390 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013ae:	4b2d      	ldr	r3, [pc, #180]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	691b      	ldr	r3, [r3, #16]
 80013ba:	00db      	lsls	r3, r3, #3
 80013bc:	4929      	ldr	r1, [pc, #164]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013be:	4313      	orrs	r3, r2
 80013c0:	600b      	str	r3, [r1, #0]
 80013c2:	e018      	b.n	80013f6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c4:	4b27      	ldr	r3, [pc, #156]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	4a26      	ldr	r2, [pc, #152]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013ca:	f023 0301 	bic.w	r3, r3, #1
 80013ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013d0:	f7ff fbf0 	bl	8000bb4 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013d8:	f7ff fbec 	bl	8000bb4 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e199      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013ea:	4b1e      	ldr	r3, [pc, #120]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d1f0      	bne.n	80013d8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0308 	and.w	r3, r3, #8
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d038      	beq.n	8001474 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	695b      	ldr	r3, [r3, #20]
 8001406:	2b00      	cmp	r3, #0
 8001408:	d019      	beq.n	800143e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800140a:	4b16      	ldr	r3, [pc, #88]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 800140c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800140e:	4a15      	ldr	r2, [pc, #84]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001410:	f043 0301 	orr.w	r3, r3, #1
 8001414:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff fbcd 	bl	8000bb4 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fbc9 	bl	8000bb4 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e176      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001430:	4b0c      	ldr	r3, [pc, #48]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001434:	f003 0302 	and.w	r3, r3, #2
 8001438:	2b00      	cmp	r3, #0
 800143a:	d0f0      	beq.n	800141e <HAL_RCC_OscConfig+0x23a>
 800143c:	e01a      	b.n	8001474 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800143e:	4b09      	ldr	r3, [pc, #36]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001442:	4a08      	ldr	r2, [pc, #32]	; (8001464 <HAL_RCC_OscConfig+0x280>)
 8001444:	f023 0301 	bic.w	r3, r3, #1
 8001448:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800144a:	f7ff fbb3 	bl	8000bb4 <HAL_GetTick>
 800144e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001450:	e00a      	b.n	8001468 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001452:	f7ff fbaf 	bl	8000bb4 <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b02      	cmp	r3, #2
 800145e:	d903      	bls.n	8001468 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001460:	2303      	movs	r3, #3
 8001462:	e15c      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
 8001464:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001468:	4b91      	ldr	r3, [pc, #580]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800146a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800146c:	f003 0302 	and.w	r3, r3, #2
 8001470:	2b00      	cmp	r3, #0
 8001472:	d1ee      	bne.n	8001452 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f003 0304 	and.w	r3, r3, #4
 800147c:	2b00      	cmp	r3, #0
 800147e:	f000 80a4 	beq.w	80015ca <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001482:	4b8b      	ldr	r3, [pc, #556]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10d      	bne.n	80014aa <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800148e:	4b88      	ldr	r3, [pc, #544]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	4a87      	ldr	r2, [pc, #540]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001494:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001498:	6413      	str	r3, [r2, #64]	; 0x40
 800149a:	4b85      	ldr	r3, [pc, #532]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014a6:	2301      	movs	r3, #1
 80014a8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014aa:	4b82      	ldr	r3, [pc, #520]	; (80016b4 <HAL_RCC_OscConfig+0x4d0>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d118      	bne.n	80014e8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x4d0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a7e      	ldr	r2, [pc, #504]	; (80016b4 <HAL_RCC_OscConfig+0x4d0>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014c2:	f7ff fb77 	bl	8000bb4 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014ca:	f7ff fb73 	bl	8000bb4 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b64      	cmp	r3, #100	; 0x64
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e120      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x4d0>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d106      	bne.n	80014fe <HAL_RCC_OscConfig+0x31a>
 80014f0:	4b6f      	ldr	r3, [pc, #444]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80014f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014f4:	4a6e      	ldr	r2, [pc, #440]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80014f6:	f043 0301 	orr.w	r3, r3, #1
 80014fa:	6713      	str	r3, [r2, #112]	; 0x70
 80014fc:	e02d      	b.n	800155a <HAL_RCC_OscConfig+0x376>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10c      	bne.n	8001520 <HAL_RCC_OscConfig+0x33c>
 8001506:	4b6a      	ldr	r3, [pc, #424]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800150a:	4a69      	ldr	r2, [pc, #420]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	6713      	str	r3, [r2, #112]	; 0x70
 8001512:	4b67      	ldr	r3, [pc, #412]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001514:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001516:	4a66      	ldr	r2, [pc, #408]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001518:	f023 0304 	bic.w	r3, r3, #4
 800151c:	6713      	str	r3, [r2, #112]	; 0x70
 800151e:	e01c      	b.n	800155a <HAL_RCC_OscConfig+0x376>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	2b05      	cmp	r3, #5
 8001526:	d10c      	bne.n	8001542 <HAL_RCC_OscConfig+0x35e>
 8001528:	4b61      	ldr	r3, [pc, #388]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800152a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152c:	4a60      	ldr	r2, [pc, #384]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800152e:	f043 0304 	orr.w	r3, r3, #4
 8001532:	6713      	str	r3, [r2, #112]	; 0x70
 8001534:	4b5e      	ldr	r3, [pc, #376]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001538:	4a5d      	ldr	r2, [pc, #372]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800153a:	f043 0301 	orr.w	r3, r3, #1
 800153e:	6713      	str	r3, [r2, #112]	; 0x70
 8001540:	e00b      	b.n	800155a <HAL_RCC_OscConfig+0x376>
 8001542:	4b5b      	ldr	r3, [pc, #364]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5a      	ldr	r2, [pc, #360]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001548:	f023 0301 	bic.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	4b58      	ldr	r3, [pc, #352]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001552:	4a57      	ldr	r2, [pc, #348]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001554:	f023 0304 	bic.w	r3, r3, #4
 8001558:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d015      	beq.n	800158e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001562:	f7ff fb27 	bl	8000bb4 <HAL_GetTick>
 8001566:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001568:	e00a      	b.n	8001580 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800156a:	f7ff fb23 	bl	8000bb4 <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	693b      	ldr	r3, [r7, #16]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	f241 3288 	movw	r2, #5000	; 0x1388
 8001578:	4293      	cmp	r3, r2
 800157a:	d901      	bls.n	8001580 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800157c:	2303      	movs	r3, #3
 800157e:	e0ce      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001580:	4b4b      	ldr	r3, [pc, #300]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	2b00      	cmp	r3, #0
 800158a:	d0ee      	beq.n	800156a <HAL_RCC_OscConfig+0x386>
 800158c:	e014      	b.n	80015b8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fb11 	bl	8000bb4 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001594:	e00a      	b.n	80015ac <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001596:	f7ff fb0d 	bl	8000bb4 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d901      	bls.n	80015ac <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80015a8:	2303      	movs	r3, #3
 80015aa:	e0b8      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ac:	4b40      	ldr	r3, [pc, #256]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d1ee      	bne.n	8001596 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80015b8:	7dfb      	ldrb	r3, [r7, #23]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d105      	bne.n	80015ca <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015be:	4b3c      	ldr	r3, [pc, #240]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	4a3b      	ldr	r2, [pc, #236]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015c8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	699b      	ldr	r3, [r3, #24]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	f000 80a4 	beq.w	800171c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80015d4:	4b36      	ldr	r3, [pc, #216]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 030c 	and.w	r3, r3, #12
 80015dc:	2b08      	cmp	r3, #8
 80015de:	d06b      	beq.n	80016b8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	699b      	ldr	r3, [r3, #24]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d149      	bne.n	800167c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015e8:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a30      	ldr	r2, [pc, #192]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80015ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80015f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f4:	f7ff fade 	bl	8000bb4 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015fc:	f7ff fada 	bl	8000bb4 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e087      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d1f0      	bne.n	80015fc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69da      	ldr	r2, [r3, #28]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001628:	019b      	lsls	r3, r3, #6
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001630:	085b      	lsrs	r3, r3, #1
 8001632:	3b01      	subs	r3, #1
 8001634:	041b      	lsls	r3, r3, #16
 8001636:	431a      	orrs	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4313      	orrs	r3, r2
 8001640:	4a1b      	ldr	r2, [pc, #108]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001642:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001646:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a18      	ldr	r2, [pc, #96]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800164e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001652:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001654:	f7ff faae 	bl	8000bb4 <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800165c:	f7ff faaa 	bl	8000bb4 <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e057      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d0f0      	beq.n	800165c <HAL_RCC_OscConfig+0x478>
 800167a:	e04f      	b.n	800171c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 8001682:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001686:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001688:	f7ff fa94 	bl	8000bb4 <HAL_GetTick>
 800168c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	e008      	b.n	80016a2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001690:	f7ff fa90 	bl	8000bb4 <HAL_GetTick>
 8001694:	4602      	mov	r2, r0
 8001696:	693b      	ldr	r3, [r7, #16]
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	2b02      	cmp	r3, #2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e03d      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016a2:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <HAL_RCC_OscConfig+0x4cc>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d1f0      	bne.n	8001690 <HAL_RCC_OscConfig+0x4ac>
 80016ae:	e035      	b.n	800171c <HAL_RCC_OscConfig+0x538>
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80016b8:	4b1b      	ldr	r3, [pc, #108]	; (8001728 <HAL_RCC_OscConfig+0x544>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	699b      	ldr	r3, [r3, #24]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d028      	beq.n	8001718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d121      	bne.n	8001718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016de:	429a      	cmp	r2, r3
 80016e0:	d11a      	bne.n	8001718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016e8:	4013      	ands	r3, r2
 80016ea:	687a      	ldr	r2, [r7, #4]
 80016ec:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016ee:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80016f0:	4293      	cmp	r3, r2
 80016f2:	d111      	bne.n	8001718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016fe:	085b      	lsrs	r3, r3, #1
 8001700:	3b01      	subs	r3, #1
 8001702:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001704:	429a      	cmp	r2, r3
 8001706:	d107      	bne.n	8001718 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001712:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001714:	429a      	cmp	r2, r3
 8001716:	d001      	beq.n	800171c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	3718      	adds	r7, #24
 8001722:	46bd      	mov	sp, r7
 8001724:	bd80      	pop	{r7, pc}
 8001726:	bf00      	nop
 8001728:	40023800 	.word	0x40023800

0800172c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
 8001734:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001736:	2300      	movs	r3, #0
 8001738:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d101      	bne.n	8001744 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001740:	2301      	movs	r3, #1
 8001742:	e0d0      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001744:	4b6a      	ldr	r3, [pc, #424]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 030f 	and.w	r3, r3, #15
 800174c:	683a      	ldr	r2, [r7, #0]
 800174e:	429a      	cmp	r2, r3
 8001750:	d910      	bls.n	8001774 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001752:	4b67      	ldr	r3, [pc, #412]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f023 020f 	bic.w	r2, r3, #15
 800175a:	4965      	ldr	r1, [pc, #404]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	4313      	orrs	r3, r2
 8001760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001762:	4b63      	ldr	r3, [pc, #396]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 030f 	and.w	r3, r3, #15
 800176a:	683a      	ldr	r2, [r7, #0]
 800176c:	429a      	cmp	r2, r3
 800176e:	d001      	beq.n	8001774 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001770:	2301      	movs	r3, #1
 8001772:	e0b8      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d020      	beq.n	80017c2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d005      	beq.n	8001798 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800178c:	4b59      	ldr	r3, [pc, #356]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	4a58      	ldr	r2, [pc, #352]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001792:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001796:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 0308 	and.w	r3, r3, #8
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a4:	4b53      	ldr	r3, [pc, #332]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017a6:	689b      	ldr	r3, [r3, #8]
 80017a8:	4a52      	ldr	r2, [pc, #328]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017ae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017b0:	4b50      	ldr	r3, [pc, #320]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	494d      	ldr	r1, [pc, #308]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0301 	and.w	r3, r3, #1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d040      	beq.n	8001850 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b01      	cmp	r3, #1
 80017d4:	d107      	bne.n	80017e6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d6:	4b47      	ldr	r3, [pc, #284]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d115      	bne.n	800180e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e07f      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	2b02      	cmp	r3, #2
 80017ec:	d107      	bne.n	80017fe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ee:	4b41      	ldr	r3, [pc, #260]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d109      	bne.n	800180e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e073      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fe:	4b3d      	ldr	r3, [pc, #244]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d101      	bne.n	800180e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e06b      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800180e:	4b39      	ldr	r3, [pc, #228]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001810:	689b      	ldr	r3, [r3, #8]
 8001812:	f023 0203 	bic.w	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	4936      	ldr	r1, [pc, #216]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 800181c:	4313      	orrs	r3, r2
 800181e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001820:	f7ff f9c8 	bl	8000bb4 <HAL_GetTick>
 8001824:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001826:	e00a      	b.n	800183e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001828:	f7ff f9c4 	bl	8000bb4 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	f241 3288 	movw	r2, #5000	; 0x1388
 8001836:	4293      	cmp	r3, r2
 8001838:	d901      	bls.n	800183e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e053      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800183e:	4b2d      	ldr	r3, [pc, #180]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f003 020c 	and.w	r2, r3, #12
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	429a      	cmp	r2, r3
 800184e:	d1eb      	bne.n	8001828 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001850:	4b27      	ldr	r3, [pc, #156]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f003 030f 	and.w	r3, r3, #15
 8001858:	683a      	ldr	r2, [r7, #0]
 800185a:	429a      	cmp	r2, r3
 800185c:	d210      	bcs.n	8001880 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f023 020f 	bic.w	r2, r3, #15
 8001866:	4922      	ldr	r1, [pc, #136]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	4313      	orrs	r3, r2
 800186c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_ClockConfig+0x1c4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	683a      	ldr	r2, [r7, #0]
 8001878:	429a      	cmp	r2, r3
 800187a:	d001      	beq.n	8001880 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800187c:	2301      	movs	r3, #1
 800187e:	e032      	b.n	80018e6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	d008      	beq.n	800189e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800188c:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	68db      	ldr	r3, [r3, #12]
 8001898:	4916      	ldr	r1, [pc, #88]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 800189a:	4313      	orrs	r3, r2
 800189c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d009      	beq.n	80018be <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80018aa:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	691b      	ldr	r3, [r3, #16]
 80018b6:	00db      	lsls	r3, r3, #3
 80018b8:	490e      	ldr	r1, [pc, #56]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018ba:	4313      	orrs	r3, r2
 80018bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80018be:	f000 f821 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 80018c2:	4602      	mov	r2, r0
 80018c4:	4b0b      	ldr	r3, [pc, #44]	; (80018f4 <HAL_RCC_ClockConfig+0x1c8>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	091b      	lsrs	r3, r3, #4
 80018ca:	f003 030f 	and.w	r3, r3, #15
 80018ce:	490a      	ldr	r1, [pc, #40]	; (80018f8 <HAL_RCC_ClockConfig+0x1cc>)
 80018d0:	5ccb      	ldrb	r3, [r1, r3]
 80018d2:	fa22 f303 	lsr.w	r3, r2, r3
 80018d6:	4a09      	ldr	r2, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1d0>)
 80018d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80018da:	4b09      	ldr	r3, [pc, #36]	; (8001900 <HAL_RCC_ClockConfig+0x1d4>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f7ff f924 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3710      	adds	r7, #16
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023c00 	.word	0x40023c00
 80018f4:	40023800 	.word	0x40023800
 80018f8:	08002efc 	.word	0x08002efc
 80018fc:	20000000 	.word	0x20000000
 8001900:	20000004 	.word	0x20000004

08001904 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001904:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001908:	b094      	sub	sp, #80	; 0x50
 800190a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800190c:	2300      	movs	r3, #0
 800190e:	647b      	str	r3, [r7, #68]	; 0x44
 8001910:	2300      	movs	r3, #0
 8001912:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001914:	2300      	movs	r3, #0
 8001916:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191c:	4b79      	ldr	r3, [pc, #484]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	f003 030c 	and.w	r3, r3, #12
 8001924:	2b08      	cmp	r3, #8
 8001926:	d00d      	beq.n	8001944 <HAL_RCC_GetSysClockFreq+0x40>
 8001928:	2b08      	cmp	r3, #8
 800192a:	f200 80e1 	bhi.w	8001af0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800192e:	2b00      	cmp	r3, #0
 8001930:	d002      	beq.n	8001938 <HAL_RCC_GetSysClockFreq+0x34>
 8001932:	2b04      	cmp	r3, #4
 8001934:	d003      	beq.n	800193e <HAL_RCC_GetSysClockFreq+0x3a>
 8001936:	e0db      	b.n	8001af0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001938:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x204>)
 800193a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193c:	e0db      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193e:	4b73      	ldr	r3, [pc, #460]	; (8001b0c <HAL_RCC_GetSysClockFreq+0x208>)
 8001940:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001942:	e0d8      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001944:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800194c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d063      	beq.n	8001a22 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800195a:	4b6a      	ldr	r3, [pc, #424]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	099b      	lsrs	r3, r3, #6
 8001960:	2200      	movs	r2, #0
 8001962:	63bb      	str	r3, [r7, #56]	; 0x38
 8001964:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001966:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001968:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800196c:	633b      	str	r3, [r7, #48]	; 0x30
 800196e:	2300      	movs	r3, #0
 8001970:	637b      	str	r3, [r7, #52]	; 0x34
 8001972:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001976:	4622      	mov	r2, r4
 8001978:	462b      	mov	r3, r5
 800197a:	f04f 0000 	mov.w	r0, #0
 800197e:	f04f 0100 	mov.w	r1, #0
 8001982:	0159      	lsls	r1, r3, #5
 8001984:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001988:	0150      	lsls	r0, r2, #5
 800198a:	4602      	mov	r2, r0
 800198c:	460b      	mov	r3, r1
 800198e:	4621      	mov	r1, r4
 8001990:	1a51      	subs	r1, r2, r1
 8001992:	6139      	str	r1, [r7, #16]
 8001994:	4629      	mov	r1, r5
 8001996:	eb63 0301 	sbc.w	r3, r3, r1
 800199a:	617b      	str	r3, [r7, #20]
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	f04f 0300 	mov.w	r3, #0
 80019a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a8:	4659      	mov	r1, fp
 80019aa:	018b      	lsls	r3, r1, #6
 80019ac:	4651      	mov	r1, sl
 80019ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019b2:	4651      	mov	r1, sl
 80019b4:	018a      	lsls	r2, r1, #6
 80019b6:	4651      	mov	r1, sl
 80019b8:	ebb2 0801 	subs.w	r8, r2, r1
 80019bc:	4659      	mov	r1, fp
 80019be:	eb63 0901 	sbc.w	r9, r3, r1
 80019c2:	f04f 0200 	mov.w	r2, #0
 80019c6:	f04f 0300 	mov.w	r3, #0
 80019ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d6:	4690      	mov	r8, r2
 80019d8:	4699      	mov	r9, r3
 80019da:	4623      	mov	r3, r4
 80019dc:	eb18 0303 	adds.w	r3, r8, r3
 80019e0:	60bb      	str	r3, [r7, #8]
 80019e2:	462b      	mov	r3, r5
 80019e4:	eb49 0303 	adc.w	r3, r9, r3
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	f04f 0200 	mov.w	r2, #0
 80019ee:	f04f 0300 	mov.w	r3, #0
 80019f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f6:	4629      	mov	r1, r5
 80019f8:	024b      	lsls	r3, r1, #9
 80019fa:	4621      	mov	r1, r4
 80019fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a00:	4621      	mov	r1, r4
 8001a02:	024a      	lsls	r2, r1, #9
 8001a04:	4610      	mov	r0, r2
 8001a06:	4619      	mov	r1, r3
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a10:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a14:	f7fe fbf8 	bl	8000208 <__aeabi_uldivmod>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a20:	e058      	b.n	8001ad4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a22:	4b38      	ldr	r3, [pc, #224]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	099b      	lsrs	r3, r3, #6
 8001a28:	2200      	movs	r2, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4611      	mov	r1, r2
 8001a2e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a32:	623b      	str	r3, [r7, #32]
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
 8001a38:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a3c:	4642      	mov	r2, r8
 8001a3e:	464b      	mov	r3, r9
 8001a40:	f04f 0000 	mov.w	r0, #0
 8001a44:	f04f 0100 	mov.w	r1, #0
 8001a48:	0159      	lsls	r1, r3, #5
 8001a4a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4e:	0150      	lsls	r0, r2, #5
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4641      	mov	r1, r8
 8001a56:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a5a:	4649      	mov	r1, r9
 8001a5c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a6c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a70:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a74:	ebb2 040a 	subs.w	r4, r2, sl
 8001a78:	eb63 050b 	sbc.w	r5, r3, fp
 8001a7c:	f04f 0200 	mov.w	r2, #0
 8001a80:	f04f 0300 	mov.w	r3, #0
 8001a84:	00eb      	lsls	r3, r5, #3
 8001a86:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a8a:	00e2      	lsls	r2, r4, #3
 8001a8c:	4614      	mov	r4, r2
 8001a8e:	461d      	mov	r5, r3
 8001a90:	4643      	mov	r3, r8
 8001a92:	18e3      	adds	r3, r4, r3
 8001a94:	603b      	str	r3, [r7, #0]
 8001a96:	464b      	mov	r3, r9
 8001a98:	eb45 0303 	adc.w	r3, r5, r3
 8001a9c:	607b      	str	r3, [r7, #4]
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aaa:	4629      	mov	r1, r5
 8001aac:	028b      	lsls	r3, r1, #10
 8001aae:	4621      	mov	r1, r4
 8001ab0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab4:	4621      	mov	r1, r4
 8001ab6:	028a      	lsls	r2, r1, #10
 8001ab8:	4610      	mov	r0, r2
 8001aba:	4619      	mov	r1, r3
 8001abc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001abe:	2200      	movs	r2, #0
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	61fa      	str	r2, [r7, #28]
 8001ac4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac8:	f7fe fb9e 	bl	8000208 <__aeabi_uldivmod>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4613      	mov	r3, r2
 8001ad2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001ad4:	4b0b      	ldr	r3, [pc, #44]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	f003 0303 	and.w	r3, r3, #3
 8001ade:	3301      	adds	r3, #1
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8001ae4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aee:	e002      	b.n	8001af6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001af0:	4b05      	ldr	r3, [pc, #20]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x204>)
 8001af2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3750      	adds	r7, #80	; 0x50
 8001afc:	46bd      	mov	sp, r7
 8001afe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b02:	bf00      	nop
 8001b04:	40023800 	.word	0x40023800
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200

08001b10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	; (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b05      	ldr	r3, [pc, #20]	; (8001b48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a9b      	lsrs	r3, r3, #10
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4903      	ldr	r1, [pc, #12]	; (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b44:	4618      	mov	r0, r3
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40023800 	.word	0x40023800
 8001b4c:	08002f0c 	.word	0x08002f0c

08001b50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b54:	f7ff ffdc 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0b5b      	lsrs	r3, r3, #13
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4903      	ldr	r1, [pc, #12]	; (8001b74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	bd80      	pop	{r7, pc}
 8001b70:	40023800 	.word	0x40023800
 8001b74:	08002f0c 	.word	0x08002f0c

08001b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001b84:	2300      	movs	r3, #0
 8001b86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 0301 	and.w	r3, r3, #1
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d012      	beq.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001ba0:	4b69      	ldr	r3, [pc, #420]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	4a68      	ldr	r2, [pc, #416]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ba6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001baa:	6093      	str	r3, [r2, #8]
 8001bac:	4b66      	ldr	r3, [pc, #408]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb4:	4964      	ldr	r1, [pc, #400]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bb6:	4313      	orrs	r3, r2
 8001bb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d017      	beq.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bd2:	4b5d      	ldr	r3, [pc, #372]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be0:	4959      	ldr	r1, [pc, #356]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be2:	4313      	orrs	r3, r2
 8001be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001bf0:	d101      	bne.n	8001bf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001bf2:	2301      	movs	r3, #1
 8001bf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d101      	bne.n	8001c02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d017      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c0e:	4b4e      	ldr	r3, [pc, #312]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	494a      	ldr	r1, [pc, #296]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c2c:	d101      	bne.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d101      	bne.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d001      	beq.n	8001c4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0320 	and.w	r3, r3, #32
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f000 808b 	beq.w	8001d72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c5c:	4b3a      	ldr	r3, [pc, #232]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c60:	4a39      	ldr	r2, [pc, #228]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c66:	6413      	str	r3, [r2, #64]	; 0x40
 8001c68:	4b37      	ldr	r3, [pc, #220]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c74:	4b35      	ldr	r3, [pc, #212]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a34      	ldr	r2, [pc, #208]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c80:	f7fe ff98 	bl	8000bb4 <HAL_GetTick>
 8001c84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c86:	e008      	b.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c88:	f7fe ff94 	bl	8000bb4 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	; 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e357      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001c9a:	4b2c      	ldr	r3, [pc, #176]	; (8001d4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d0f0      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001ca6:	4b28      	ldr	r3, [pc, #160]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d035      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cbe:	693a      	ldr	r2, [r7, #16]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d02e      	beq.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001cc4:	4b20      	ldr	r3, [pc, #128]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ccc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001cce:	4b1e      	ldr	r3, [pc, #120]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a1d      	ldr	r2, [pc, #116]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001cda:	4b1b      	ldr	r3, [pc, #108]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cde:	4a1a      	ldr	r2, [pc, #104]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001ce6:	4a18      	ldr	r2, [pc, #96]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001cec:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d114      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf8:	f7fe ff5c 	bl	8000bb4 <HAL_GetTick>
 8001cfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cfe:	e00a      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d00:	f7fe ff58 	bl	8000bb4 <HAL_GetTick>
 8001d04:	4602      	mov	r2, r0
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e319      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d16:	4b0c      	ldr	r3, [pc, #48]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d0ee      	beq.n	8001d00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d2e:	d111      	bne.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d30:	4b05      	ldr	r3, [pc, #20]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d3c:	4b04      	ldr	r3, [pc, #16]	; (8001d50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d3e:	400b      	ands	r3, r1
 8001d40:	4901      	ldr	r1, [pc, #4]	; (8001d48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
 8001d46:	e00b      	b.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d48:	40023800 	.word	0x40023800
 8001d4c:	40007000 	.word	0x40007000
 8001d50:	0ffffcff 	.word	0x0ffffcff
 8001d54:	4baa      	ldr	r3, [pc, #680]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4aa9      	ldr	r2, [pc, #676]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d5e:	6093      	str	r3, [r2, #8]
 8001d60:	4ba7      	ldr	r3, [pc, #668]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d6c:	49a4      	ldr	r1, [pc, #656]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d6e:	4313      	orrs	r3, r2
 8001d70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f003 0310 	and.w	r3, r3, #16
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d010      	beq.n	8001da0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d7e:	4ba0      	ldr	r3, [pc, #640]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001d84:	4a9e      	ldr	r2, [pc, #632]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001d8e:	4b9c      	ldr	r3, [pc, #624]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d98:	4999      	ldr	r1, [pc, #612]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00a      	beq.n	8001dc2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dac:	4b94      	ldr	r3, [pc, #592]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dba:	4991      	ldr	r1, [pc, #580]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d00a      	beq.n	8001de4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dce:	4b8c      	ldr	r3, [pc, #560]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ddc:	4988      	ldr	r1, [pc, #544]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d00a      	beq.n	8001e06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001df0:	4b83      	ldr	r3, [pc, #524]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dfe:	4980      	ldr	r1, [pc, #512]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d00a      	beq.n	8001e28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e12:	4b7b      	ldr	r3, [pc, #492]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e20:	4977      	ldr	r1, [pc, #476]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e22:	4313      	orrs	r3, r2
 8001e24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d00a      	beq.n	8001e4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e34:	4b72      	ldr	r3, [pc, #456]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3a:	f023 0203 	bic.w	r2, r3, #3
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	496f      	ldr	r1, [pc, #444]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00a      	beq.n	8001e6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e56:	4b6a      	ldr	r3, [pc, #424]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5c:	f023 020c 	bic.w	r2, r3, #12
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e64:	4966      	ldr	r1, [pc, #408]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e66:	4313      	orrs	r3, r2
 8001e68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d00a      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e78:	4b61      	ldr	r3, [pc, #388]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e86:	495e      	ldr	r1, [pc, #376]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001e9a:	4b59      	ldr	r3, [pc, #356]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ea8:	4955      	ldr	r1, [pc, #340]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00a      	beq.n	8001ed2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001ebc:	4b50      	ldr	r3, [pc, #320]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eca:	494d      	ldr	r1, [pc, #308]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ecc:	4313      	orrs	r3, r2
 8001ece:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d00a      	beq.n	8001ef4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001ede:	4b48      	ldr	r3, [pc, #288]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4944      	ldr	r1, [pc, #272]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d00a      	beq.n	8001f16 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f00:	4b3f      	ldr	r3, [pc, #252]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0e:	493c      	ldr	r1, [pc, #240]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f10:	4313      	orrs	r3, r2
 8001f12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00a      	beq.n	8001f38 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f22:	4b37      	ldr	r3, [pc, #220]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f28:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f30:	4933      	ldr	r1, [pc, #204]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f32:	4313      	orrs	r3, r2
 8001f34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d00a      	beq.n	8001f5a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f44:	4b2e      	ldr	r3, [pc, #184]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f4a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f52:	492b      	ldr	r1, [pc, #172]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d011      	beq.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f66:	4b26      	ldr	r3, [pc, #152]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f74:	4922      	ldr	r1, [pc, #136]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001f76:	4313      	orrs	r3, r2
 8001f78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f80:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001f84:	d101      	bne.n	8001f8a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001f86:	2301      	movs	r3, #1
 8001f88:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d001      	beq.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001f96:	2301      	movs	r3, #1
 8001f98:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d00a      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fa6:	4b16      	ldr	r3, [pc, #88]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	4912      	ldr	r1, [pc, #72]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d00b      	beq.n	8001fe0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fc8:	4b0d      	ldr	r3, [pc, #52]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d006      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	f000 80d9 	beq.w	80021a6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001ff4:	4b02      	ldr	r3, [pc, #8]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a01      	ldr	r2, [pc, #4]	; (8002000 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8001ffa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001ffe:	e001      	b.n	8002004 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8002000:	40023800 	.word	0x40023800
 8002004:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002006:	f7fe fdd5 	bl	8000bb4 <HAL_GetTick>
 800200a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800200c:	e008      	b.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800200e:	f7fe fdd1 	bl	8000bb4 <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e194      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002020:	4b6c      	ldr	r3, [pc, #432]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002028:	2b00      	cmp	r3, #0
 800202a:	d1f0      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0301 	and.w	r3, r3, #1
 8002034:	2b00      	cmp	r3, #0
 8002036:	d021      	beq.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800203c:	2b00      	cmp	r3, #0
 800203e:	d11d      	bne.n	800207c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002040:	4b64      	ldr	r3, [pc, #400]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002042:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002046:	0c1b      	lsrs	r3, r3, #16
 8002048:	f003 0303 	and.w	r3, r3, #3
 800204c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800204e:	4b61      	ldr	r3, [pc, #388]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002050:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002054:	0e1b      	lsrs	r3, r3, #24
 8002056:	f003 030f 	and.w	r3, r3, #15
 800205a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	019a      	lsls	r2, r3, #6
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	041b      	lsls	r3, r3, #16
 8002066:	431a      	orrs	r2, r3
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	061b      	lsls	r3, r3, #24
 800206c:	431a      	orrs	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	689b      	ldr	r3, [r3, #8]
 8002072:	071b      	lsls	r3, r3, #28
 8002074:	4957      	ldr	r1, [pc, #348]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002076:	4313      	orrs	r3, r2
 8002078:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d004      	beq.n	8002092 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800209a:	2b00      	cmp	r3, #0
 800209c:	d02e      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020a6:	d129      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020a8:	4b4a      	ldr	r3, [pc, #296]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020ae:	0c1b      	lsrs	r3, r3, #16
 80020b0:	f003 0303 	and.w	r3, r3, #3
 80020b4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80020b6:	4b47      	ldr	r3, [pc, #284]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80020bc:	0f1b      	lsrs	r3, r3, #28
 80020be:	f003 0307 	and.w	r3, r3, #7
 80020c2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	019a      	lsls	r2, r3, #6
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	431a      	orrs	r2, r3
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	061b      	lsls	r3, r3, #24
 80020d6:	431a      	orrs	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	071b      	lsls	r3, r3, #28
 80020dc:	493d      	ldr	r1, [pc, #244]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80020e4:	4b3b      	ldr	r3, [pc, #236]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80020ea:	f023 021f 	bic.w	r2, r3, #31
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020f2:	3b01      	subs	r3, #1
 80020f4:	4937      	ldr	r1, [pc, #220]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d01d      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002108:	4b32      	ldr	r3, [pc, #200]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800210a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800210e:	0e1b      	lsrs	r3, r3, #24
 8002110:	f003 030f 	and.w	r3, r3, #15
 8002114:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002116:	4b2f      	ldr	r3, [pc, #188]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002118:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800211c:	0f1b      	lsrs	r3, r3, #28
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	019a      	lsls	r2, r3, #6
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	691b      	ldr	r3, [r3, #16]
 800212e:	041b      	lsls	r3, r3, #16
 8002130:	431a      	orrs	r2, r3
 8002132:	693b      	ldr	r3, [r7, #16]
 8002134:	061b      	lsls	r3, r3, #24
 8002136:	431a      	orrs	r2, r3
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	071b      	lsls	r3, r3, #28
 800213c:	4925      	ldr	r1, [pc, #148]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800213e:	4313      	orrs	r3, r2
 8002140:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d011      	beq.n	8002174 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	019a      	lsls	r2, r3, #6
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	691b      	ldr	r3, [r3, #16]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	071b      	lsls	r3, r3, #28
 800216c:	4919      	ldr	r1, [pc, #100]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800216e:	4313      	orrs	r3, r2
 8002170:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002174:	4b17      	ldr	r3, [pc, #92]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a16      	ldr	r2, [pc, #88]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800217a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800217e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002180:	f7fe fd18 	bl	8000bb4 <HAL_GetTick>
 8002184:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002186:	e008      	b.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002188:	f7fe fd14 	bl	8000bb4 <HAL_GetTick>
 800218c:	4602      	mov	r2, r0
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	1ad3      	subs	r3, r2, r3
 8002192:	2b64      	cmp	r3, #100	; 0x64
 8002194:	d901      	bls.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002196:	2303      	movs	r3, #3
 8002198:	e0d7      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800219a:	4b0e      	ldr	r3, [pc, #56]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d0f0      	beq.n	8002188 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	f040 80cd 	bne.w	8002348 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80021ae:	4b09      	ldr	r3, [pc, #36]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4a08      	ldr	r2, [pc, #32]	; (80021d4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80021b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021ba:	f7fe fcfb 	bl	8000bb4 <HAL_GetTick>
 80021be:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021c0:	e00a      	b.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80021c2:	f7fe fcf7 	bl	8000bb4 <HAL_GetTick>
 80021c6:	4602      	mov	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	1ad3      	subs	r3, r2, r3
 80021cc:	2b64      	cmp	r3, #100	; 0x64
 80021ce:	d903      	bls.n	80021d8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e0ba      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80021d4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80021d8:	4b5e      	ldr	r3, [pc, #376]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021e0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021e4:	d0ed      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d003      	beq.n	80021fa <HAL_RCCEx_PeriphCLKConfig+0x682>
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d009      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002202:	2b00      	cmp	r3, #0
 8002204:	d02e      	beq.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d12a      	bne.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800220e:	4b51      	ldr	r3, [pc, #324]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	0c1b      	lsrs	r3, r3, #16
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800221c:	4b4d      	ldr	r3, [pc, #308]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800221e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002222:	0f1b      	lsrs	r3, r3, #28
 8002224:	f003 0307 	and.w	r3, r3, #7
 8002228:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	019a      	lsls	r2, r3, #6
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	041b      	lsls	r3, r3, #16
 8002234:	431a      	orrs	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	699b      	ldr	r3, [r3, #24]
 800223a:	061b      	lsls	r3, r3, #24
 800223c:	431a      	orrs	r2, r3
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	071b      	lsls	r3, r3, #28
 8002242:	4944      	ldr	r1, [pc, #272]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800224a:	4b42      	ldr	r3, [pc, #264]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800224c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002250:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002258:	3b01      	subs	r3, #1
 800225a:	021b      	lsls	r3, r3, #8
 800225c:	493d      	ldr	r1, [pc, #244]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d022      	beq.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002274:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002278:	d11d      	bne.n	80022b6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800227a:	4b36      	ldr	r3, [pc, #216]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	0e1b      	lsrs	r3, r3, #24
 8002282:	f003 030f 	and.w	r3, r3, #15
 8002286:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002288:	4b32      	ldr	r3, [pc, #200]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800228a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800228e:	0f1b      	lsrs	r3, r3, #28
 8002290:	f003 0307 	and.w	r3, r3, #7
 8002294:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	019a      	lsls	r2, r3, #6
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	041b      	lsls	r3, r3, #16
 80022a2:	431a      	orrs	r2, r3
 80022a4:	693b      	ldr	r3, [r7, #16]
 80022a6:	061b      	lsls	r3, r3, #24
 80022a8:	431a      	orrs	r2, r3
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	071b      	lsls	r3, r3, #28
 80022ae:	4929      	ldr	r1, [pc, #164]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022b0:	4313      	orrs	r3, r2
 80022b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f003 0308 	and.w	r3, r3, #8
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d028      	beq.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80022c2:	4b24      	ldr	r3, [pc, #144]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c8:	0e1b      	lsrs	r3, r3, #24
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022d0:	4b20      	ldr	r3, [pc, #128]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	0c1b      	lsrs	r3, r3, #16
 80022d8:	f003 0303 	and.w	r3, r3, #3
 80022dc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	695b      	ldr	r3, [r3, #20]
 80022e2:	019a      	lsls	r2, r3, #6
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	431a      	orrs	r2, r3
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	061b      	lsls	r3, r3, #24
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	69db      	ldr	r3, [r3, #28]
 80022f4:	071b      	lsls	r3, r3, #28
 80022f6:	4917      	ldr	r1, [pc, #92]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002300:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002304:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800230c:	4911      	ldr	r1, [pc, #68]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800230e:	4313      	orrs	r3, r2
 8002310:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002314:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0e      	ldr	r2, [pc, #56]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002320:	f7fe fc48 	bl	8000bb4 <HAL_GetTick>
 8002324:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002326:	e008      	b.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002328:	f7fe fc44 	bl	8000bb4 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b64      	cmp	r3, #100	; 0x64
 8002334:	d901      	bls.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e007      	b.n	800234a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800233a:	4b06      	ldr	r3, [pc, #24]	; (8002354 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002342:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002346:	d1ef      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3720      	adds	r7, #32
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40023800 	.word	0x40023800

08002358 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e040      	b.n	80023ec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800236e:	2b00      	cmp	r3, #0
 8002370:	d106      	bne.n	8002380 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2200      	movs	r2, #0
 8002376:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7fe fb40 	bl	8000a00 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2224      	movs	r2, #36	; 0x24
 8002384:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f022 0201 	bic.w	r2, r2, #1
 8002394:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f000 f974 	bl	8002684 <UART_SetConfig>
 800239c:	4603      	mov	r3, r0
 800239e:	2b01      	cmp	r3, #1
 80023a0:	d101      	bne.n	80023a6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e022      	b.n	80023ec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d002      	beq.n	80023b4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f000 fbcc 	bl	8002b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	685a      	ldr	r2, [r3, #4]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80023c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689a      	ldr	r2, [r3, #8]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80023d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f042 0201 	orr.w	r2, r2, #1
 80023e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	f000 fc53 	bl	8002c90 <UART_CheckIdleState>
 80023ea:	4603      	mov	r3, r0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}

080023f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	; 0x28
 80023f8:	af02      	add	r7, sp, #8
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	4613      	mov	r3, r2
 8002402:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002408:	2b20      	cmp	r3, #32
 800240a:	d171      	bne.n	80024f0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d002      	beq.n	8002418 <HAL_UART_Transmit+0x24>
 8002412:	88fb      	ldrh	r3, [r7, #6]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d101      	bne.n	800241c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e06a      	b.n	80024f2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2221      	movs	r2, #33	; 0x21
 8002428:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800242a:	f7fe fbc3 	bl	8000bb4 <HAL_GetTick>
 800242e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	88fa      	ldrh	r2, [r7, #6]
 8002434:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	88fa      	ldrh	r2, [r7, #6]
 800243c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002448:	d108      	bne.n	800245c <HAL_UART_Transmit+0x68>
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	691b      	ldr	r3, [r3, #16]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d104      	bne.n	800245c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002452:	2300      	movs	r3, #0
 8002454:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002456:	68bb      	ldr	r3, [r7, #8]
 8002458:	61bb      	str	r3, [r7, #24]
 800245a:	e003      	b.n	8002464 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002460:	2300      	movs	r3, #0
 8002462:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002464:	e02c      	b.n	80024c0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	9300      	str	r3, [sp, #0]
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	2200      	movs	r2, #0
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	68f8      	ldr	r0, [r7, #12]
 8002472:	f000 fc44 	bl	8002cfe <UART_WaitOnFlagUntilTimeout>
 8002476:	4603      	mov	r3, r0
 8002478:	2b00      	cmp	r3, #0
 800247a:	d001      	beq.n	8002480 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e038      	b.n	80024f2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3302      	adds	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e007      	b.n	80024ae <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	3b01      	subs	r3, #1
 80024b8:	b29a      	uxth	r2, r3
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80024c6:	b29b      	uxth	r3, r3
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d1cc      	bne.n	8002466 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	9300      	str	r3, [sp, #0]
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	2200      	movs	r2, #0
 80024d4:	2140      	movs	r1, #64	; 0x40
 80024d6:	68f8      	ldr	r0, [r7, #12]
 80024d8:	f000 fc11 	bl	8002cfe <UART_WaitOnFlagUntilTimeout>
 80024dc:	4603      	mov	r3, r0
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d001      	beq.n	80024e6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e005      	b.n	80024f2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80024ec:	2300      	movs	r3, #0
 80024ee:	e000      	b.n	80024f2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80024f0:	2302      	movs	r3, #2
  }
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3720      	adds	r7, #32
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b08a      	sub	sp, #40	; 0x28
 80024fe:	af02      	add	r7, sp, #8
 8002500:	60f8      	str	r0, [r7, #12]
 8002502:	60b9      	str	r1, [r7, #8]
 8002504:	603b      	str	r3, [r7, #0]
 8002506:	4613      	mov	r3, r2
 8002508:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002510:	2b20      	cmp	r3, #32
 8002512:	f040 80b1 	bne.w	8002678 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_UART_Receive+0x28>
 800251c:	88fb      	ldrh	r3, [r7, #6]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e0a9      	b.n	800267a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2222      	movs	r2, #34	; 0x22
 8002532:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800253c:	f7fe fb3a 	bl	8000bb4 <HAL_GetTick>
 8002540:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	88fa      	ldrh	r2, [r7, #6]
 8002546:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	88fa      	ldrh	r2, [r7, #6]
 800254e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800255a:	d10e      	bne.n	800257a <HAL_UART_Receive+0x80>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d105      	bne.n	8002570 <HAL_UART_Receive+0x76>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	f240 12ff 	movw	r2, #511	; 0x1ff
 800256a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800256e:	e02d      	b.n	80025cc <HAL_UART_Receive+0xd2>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	22ff      	movs	r2, #255	; 0xff
 8002574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002578:	e028      	b.n	80025cc <HAL_UART_Receive+0xd2>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	689b      	ldr	r3, [r3, #8]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d10d      	bne.n	800259e <HAL_UART_Receive+0xa4>
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d104      	bne.n	8002594 <HAL_UART_Receive+0x9a>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	22ff      	movs	r2, #255	; 0xff
 800258e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002592:	e01b      	b.n	80025cc <HAL_UART_Receive+0xd2>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	227f      	movs	r2, #127	; 0x7f
 8002598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800259c:	e016      	b.n	80025cc <HAL_UART_Receive+0xd2>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025a6:	d10d      	bne.n	80025c4 <HAL_UART_Receive+0xca>
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	691b      	ldr	r3, [r3, #16]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d104      	bne.n	80025ba <HAL_UART_Receive+0xc0>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	227f      	movs	r2, #127	; 0x7f
 80025b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025b8:	e008      	b.n	80025cc <HAL_UART_Receive+0xd2>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	223f      	movs	r2, #63	; 0x3f
 80025be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025c2:	e003      	b.n	80025cc <HAL_UART_Receive+0xd2>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	2200      	movs	r2, #0
 80025c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80025d2:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025dc:	d108      	bne.n	80025f0 <HAL_UART_Receive+0xf6>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d104      	bne.n	80025f0 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80025e6:	2300      	movs	r3, #0
 80025e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	61bb      	str	r3, [r7, #24]
 80025ee:	e003      	b.n	80025f8 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025f4:	2300      	movs	r3, #0
 80025f6:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 80025f8:	e032      	b.n	8002660 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80025fa:	683b      	ldr	r3, [r7, #0]
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2200      	movs	r2, #0
 8002602:	2120      	movs	r1, #32
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 fb7a 	bl	8002cfe <UART_WaitOnFlagUntilTimeout>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e032      	b.n	800267a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d10c      	bne.n	8002634 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002620:	b29a      	uxth	r2, r3
 8002622:	8a7b      	ldrh	r3, [r7, #18]
 8002624:	4013      	ands	r3, r2
 8002626:	b29a      	uxth	r2, r3
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800262c:	69bb      	ldr	r3, [r7, #24]
 800262e:	3302      	adds	r3, #2
 8002630:	61bb      	str	r3, [r7, #24]
 8002632:	e00c      	b.n	800264e <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263a:	b2da      	uxtb	r2, r3
 800263c:	8a7b      	ldrh	r3, [r7, #18]
 800263e:	b2db      	uxtb	r3, r3
 8002640:	4013      	ands	r3, r2
 8002642:	b2da      	uxtb	r2, r3
 8002644:	69fb      	ldr	r3, [r7, #28]
 8002646:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	3301      	adds	r3, #1
 800264c:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002654:	b29b      	uxth	r3, r3
 8002656:	3b01      	subs	r3, #1
 8002658:	b29a      	uxth	r2, r3
 800265a:	68fb      	ldr	r3, [r7, #12]
 800265c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002666:	b29b      	uxth	r3, r3
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1c6      	bne.n	80025fa <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2220      	movs	r2, #32
 8002670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	e000      	b.n	800267a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8002678:	2302      	movs	r3, #2
  }
}
 800267a:	4618      	mov	r0, r3
 800267c:	3720      	adds	r7, #32
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
	...

08002684 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b088      	sub	sp, #32
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	691b      	ldr	r3, [r3, #16]
 8002698:	431a      	orrs	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	695b      	ldr	r3, [r3, #20]
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	69db      	ldr	r3, [r3, #28]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	4ba6      	ldr	r3, [pc, #664]	; (8002948 <UART_SetConfig+0x2c4>)
 80026b0:	4013      	ands	r3, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6812      	ldr	r2, [r2, #0]
 80026b6:	6979      	ldr	r1, [r7, #20]
 80026b8:	430b      	orrs	r3, r1
 80026ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	430a      	orrs	r2, r1
 80026d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	697a      	ldr	r2, [r7, #20]
 80026de:	4313      	orrs	r3, r2
 80026e0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	697a      	ldr	r2, [r7, #20]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a94      	ldr	r2, [pc, #592]	; (800294c <UART_SetConfig+0x2c8>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d120      	bne.n	8002742 <UART_SetConfig+0xbe>
 8002700:	4b93      	ldr	r3, [pc, #588]	; (8002950 <UART_SetConfig+0x2cc>)
 8002702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b03      	cmp	r3, #3
 800270c:	d816      	bhi.n	800273c <UART_SetConfig+0xb8>
 800270e:	a201      	add	r2, pc, #4	; (adr r2, 8002714 <UART_SetConfig+0x90>)
 8002710:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002714:	08002725 	.word	0x08002725
 8002718:	08002731 	.word	0x08002731
 800271c:	0800272b 	.word	0x0800272b
 8002720:	08002737 	.word	0x08002737
 8002724:	2301      	movs	r3, #1
 8002726:	77fb      	strb	r3, [r7, #31]
 8002728:	e150      	b.n	80029cc <UART_SetConfig+0x348>
 800272a:	2302      	movs	r3, #2
 800272c:	77fb      	strb	r3, [r7, #31]
 800272e:	e14d      	b.n	80029cc <UART_SetConfig+0x348>
 8002730:	2304      	movs	r3, #4
 8002732:	77fb      	strb	r3, [r7, #31]
 8002734:	e14a      	b.n	80029cc <UART_SetConfig+0x348>
 8002736:	2308      	movs	r3, #8
 8002738:	77fb      	strb	r3, [r7, #31]
 800273a:	e147      	b.n	80029cc <UART_SetConfig+0x348>
 800273c:	2310      	movs	r3, #16
 800273e:	77fb      	strb	r3, [r7, #31]
 8002740:	e144      	b.n	80029cc <UART_SetConfig+0x348>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a83      	ldr	r2, [pc, #524]	; (8002954 <UART_SetConfig+0x2d0>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d132      	bne.n	80027b2 <UART_SetConfig+0x12e>
 800274c:	4b80      	ldr	r3, [pc, #512]	; (8002950 <UART_SetConfig+0x2cc>)
 800274e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002752:	f003 030c 	and.w	r3, r3, #12
 8002756:	2b0c      	cmp	r3, #12
 8002758:	d828      	bhi.n	80027ac <UART_SetConfig+0x128>
 800275a:	a201      	add	r2, pc, #4	; (adr r2, 8002760 <UART_SetConfig+0xdc>)
 800275c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002760:	08002795 	.word	0x08002795
 8002764:	080027ad 	.word	0x080027ad
 8002768:	080027ad 	.word	0x080027ad
 800276c:	080027ad 	.word	0x080027ad
 8002770:	080027a1 	.word	0x080027a1
 8002774:	080027ad 	.word	0x080027ad
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027ad 	.word	0x080027ad
 8002780:	0800279b 	.word	0x0800279b
 8002784:	080027ad 	.word	0x080027ad
 8002788:	080027ad 	.word	0x080027ad
 800278c:	080027ad 	.word	0x080027ad
 8002790:	080027a7 	.word	0x080027a7
 8002794:	2300      	movs	r3, #0
 8002796:	77fb      	strb	r3, [r7, #31]
 8002798:	e118      	b.n	80029cc <UART_SetConfig+0x348>
 800279a:	2302      	movs	r3, #2
 800279c:	77fb      	strb	r3, [r7, #31]
 800279e:	e115      	b.n	80029cc <UART_SetConfig+0x348>
 80027a0:	2304      	movs	r3, #4
 80027a2:	77fb      	strb	r3, [r7, #31]
 80027a4:	e112      	b.n	80029cc <UART_SetConfig+0x348>
 80027a6:	2308      	movs	r3, #8
 80027a8:	77fb      	strb	r3, [r7, #31]
 80027aa:	e10f      	b.n	80029cc <UART_SetConfig+0x348>
 80027ac:	2310      	movs	r3, #16
 80027ae:	77fb      	strb	r3, [r7, #31]
 80027b0:	e10c      	b.n	80029cc <UART_SetConfig+0x348>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a68      	ldr	r2, [pc, #416]	; (8002958 <UART_SetConfig+0x2d4>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d120      	bne.n	80027fe <UART_SetConfig+0x17a>
 80027bc:	4b64      	ldr	r3, [pc, #400]	; (8002950 <UART_SetConfig+0x2cc>)
 80027be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80027c6:	2b30      	cmp	r3, #48	; 0x30
 80027c8:	d013      	beq.n	80027f2 <UART_SetConfig+0x16e>
 80027ca:	2b30      	cmp	r3, #48	; 0x30
 80027cc:	d814      	bhi.n	80027f8 <UART_SetConfig+0x174>
 80027ce:	2b20      	cmp	r3, #32
 80027d0:	d009      	beq.n	80027e6 <UART_SetConfig+0x162>
 80027d2:	2b20      	cmp	r3, #32
 80027d4:	d810      	bhi.n	80027f8 <UART_SetConfig+0x174>
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d002      	beq.n	80027e0 <UART_SetConfig+0x15c>
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d006      	beq.n	80027ec <UART_SetConfig+0x168>
 80027de:	e00b      	b.n	80027f8 <UART_SetConfig+0x174>
 80027e0:	2300      	movs	r3, #0
 80027e2:	77fb      	strb	r3, [r7, #31]
 80027e4:	e0f2      	b.n	80029cc <UART_SetConfig+0x348>
 80027e6:	2302      	movs	r3, #2
 80027e8:	77fb      	strb	r3, [r7, #31]
 80027ea:	e0ef      	b.n	80029cc <UART_SetConfig+0x348>
 80027ec:	2304      	movs	r3, #4
 80027ee:	77fb      	strb	r3, [r7, #31]
 80027f0:	e0ec      	b.n	80029cc <UART_SetConfig+0x348>
 80027f2:	2308      	movs	r3, #8
 80027f4:	77fb      	strb	r3, [r7, #31]
 80027f6:	e0e9      	b.n	80029cc <UART_SetConfig+0x348>
 80027f8:	2310      	movs	r3, #16
 80027fa:	77fb      	strb	r3, [r7, #31]
 80027fc:	e0e6      	b.n	80029cc <UART_SetConfig+0x348>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a56      	ldr	r2, [pc, #344]	; (800295c <UART_SetConfig+0x2d8>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d120      	bne.n	800284a <UART_SetConfig+0x1c6>
 8002808:	4b51      	ldr	r3, [pc, #324]	; (8002950 <UART_SetConfig+0x2cc>)
 800280a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800280e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002812:	2bc0      	cmp	r3, #192	; 0xc0
 8002814:	d013      	beq.n	800283e <UART_SetConfig+0x1ba>
 8002816:	2bc0      	cmp	r3, #192	; 0xc0
 8002818:	d814      	bhi.n	8002844 <UART_SetConfig+0x1c0>
 800281a:	2b80      	cmp	r3, #128	; 0x80
 800281c:	d009      	beq.n	8002832 <UART_SetConfig+0x1ae>
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d810      	bhi.n	8002844 <UART_SetConfig+0x1c0>
 8002822:	2b00      	cmp	r3, #0
 8002824:	d002      	beq.n	800282c <UART_SetConfig+0x1a8>
 8002826:	2b40      	cmp	r3, #64	; 0x40
 8002828:	d006      	beq.n	8002838 <UART_SetConfig+0x1b4>
 800282a:	e00b      	b.n	8002844 <UART_SetConfig+0x1c0>
 800282c:	2300      	movs	r3, #0
 800282e:	77fb      	strb	r3, [r7, #31]
 8002830:	e0cc      	b.n	80029cc <UART_SetConfig+0x348>
 8002832:	2302      	movs	r3, #2
 8002834:	77fb      	strb	r3, [r7, #31]
 8002836:	e0c9      	b.n	80029cc <UART_SetConfig+0x348>
 8002838:	2304      	movs	r3, #4
 800283a:	77fb      	strb	r3, [r7, #31]
 800283c:	e0c6      	b.n	80029cc <UART_SetConfig+0x348>
 800283e:	2308      	movs	r3, #8
 8002840:	77fb      	strb	r3, [r7, #31]
 8002842:	e0c3      	b.n	80029cc <UART_SetConfig+0x348>
 8002844:	2310      	movs	r3, #16
 8002846:	77fb      	strb	r3, [r7, #31]
 8002848:	e0c0      	b.n	80029cc <UART_SetConfig+0x348>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a44      	ldr	r2, [pc, #272]	; (8002960 <UART_SetConfig+0x2dc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d125      	bne.n	80028a0 <UART_SetConfig+0x21c>
 8002854:	4b3e      	ldr	r3, [pc, #248]	; (8002950 <UART_SetConfig+0x2cc>)
 8002856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800285a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800285e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002862:	d017      	beq.n	8002894 <UART_SetConfig+0x210>
 8002864:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002868:	d817      	bhi.n	800289a <UART_SetConfig+0x216>
 800286a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800286e:	d00b      	beq.n	8002888 <UART_SetConfig+0x204>
 8002870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002874:	d811      	bhi.n	800289a <UART_SetConfig+0x216>
 8002876:	2b00      	cmp	r3, #0
 8002878:	d003      	beq.n	8002882 <UART_SetConfig+0x1fe>
 800287a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800287e:	d006      	beq.n	800288e <UART_SetConfig+0x20a>
 8002880:	e00b      	b.n	800289a <UART_SetConfig+0x216>
 8002882:	2300      	movs	r3, #0
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e0a1      	b.n	80029cc <UART_SetConfig+0x348>
 8002888:	2302      	movs	r3, #2
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e09e      	b.n	80029cc <UART_SetConfig+0x348>
 800288e:	2304      	movs	r3, #4
 8002890:	77fb      	strb	r3, [r7, #31]
 8002892:	e09b      	b.n	80029cc <UART_SetConfig+0x348>
 8002894:	2308      	movs	r3, #8
 8002896:	77fb      	strb	r3, [r7, #31]
 8002898:	e098      	b.n	80029cc <UART_SetConfig+0x348>
 800289a:	2310      	movs	r3, #16
 800289c:	77fb      	strb	r3, [r7, #31]
 800289e:	e095      	b.n	80029cc <UART_SetConfig+0x348>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a2f      	ldr	r2, [pc, #188]	; (8002964 <UART_SetConfig+0x2e0>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d125      	bne.n	80028f6 <UART_SetConfig+0x272>
 80028aa:	4b29      	ldr	r3, [pc, #164]	; (8002950 <UART_SetConfig+0x2cc>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028b4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028b8:	d017      	beq.n	80028ea <UART_SetConfig+0x266>
 80028ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80028be:	d817      	bhi.n	80028f0 <UART_SetConfig+0x26c>
 80028c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028c4:	d00b      	beq.n	80028de <UART_SetConfig+0x25a>
 80028c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80028ca:	d811      	bhi.n	80028f0 <UART_SetConfig+0x26c>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d003      	beq.n	80028d8 <UART_SetConfig+0x254>
 80028d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028d4:	d006      	beq.n	80028e4 <UART_SetConfig+0x260>
 80028d6:	e00b      	b.n	80028f0 <UART_SetConfig+0x26c>
 80028d8:	2301      	movs	r3, #1
 80028da:	77fb      	strb	r3, [r7, #31]
 80028dc:	e076      	b.n	80029cc <UART_SetConfig+0x348>
 80028de:	2302      	movs	r3, #2
 80028e0:	77fb      	strb	r3, [r7, #31]
 80028e2:	e073      	b.n	80029cc <UART_SetConfig+0x348>
 80028e4:	2304      	movs	r3, #4
 80028e6:	77fb      	strb	r3, [r7, #31]
 80028e8:	e070      	b.n	80029cc <UART_SetConfig+0x348>
 80028ea:	2308      	movs	r3, #8
 80028ec:	77fb      	strb	r3, [r7, #31]
 80028ee:	e06d      	b.n	80029cc <UART_SetConfig+0x348>
 80028f0:	2310      	movs	r3, #16
 80028f2:	77fb      	strb	r3, [r7, #31]
 80028f4:	e06a      	b.n	80029cc <UART_SetConfig+0x348>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a1b      	ldr	r2, [pc, #108]	; (8002968 <UART_SetConfig+0x2e4>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d138      	bne.n	8002972 <UART_SetConfig+0x2ee>
 8002900:	4b13      	ldr	r3, [pc, #76]	; (8002950 <UART_SetConfig+0x2cc>)
 8002902:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002906:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800290a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800290e:	d017      	beq.n	8002940 <UART_SetConfig+0x2bc>
 8002910:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002914:	d82a      	bhi.n	800296c <UART_SetConfig+0x2e8>
 8002916:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800291a:	d00b      	beq.n	8002934 <UART_SetConfig+0x2b0>
 800291c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002920:	d824      	bhi.n	800296c <UART_SetConfig+0x2e8>
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <UART_SetConfig+0x2aa>
 8002926:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800292a:	d006      	beq.n	800293a <UART_SetConfig+0x2b6>
 800292c:	e01e      	b.n	800296c <UART_SetConfig+0x2e8>
 800292e:	2300      	movs	r3, #0
 8002930:	77fb      	strb	r3, [r7, #31]
 8002932:	e04b      	b.n	80029cc <UART_SetConfig+0x348>
 8002934:	2302      	movs	r3, #2
 8002936:	77fb      	strb	r3, [r7, #31]
 8002938:	e048      	b.n	80029cc <UART_SetConfig+0x348>
 800293a:	2304      	movs	r3, #4
 800293c:	77fb      	strb	r3, [r7, #31]
 800293e:	e045      	b.n	80029cc <UART_SetConfig+0x348>
 8002940:	2308      	movs	r3, #8
 8002942:	77fb      	strb	r3, [r7, #31]
 8002944:	e042      	b.n	80029cc <UART_SetConfig+0x348>
 8002946:	bf00      	nop
 8002948:	efff69f3 	.word	0xefff69f3
 800294c:	40011000 	.word	0x40011000
 8002950:	40023800 	.word	0x40023800
 8002954:	40004400 	.word	0x40004400
 8002958:	40004800 	.word	0x40004800
 800295c:	40004c00 	.word	0x40004c00
 8002960:	40005000 	.word	0x40005000
 8002964:	40011400 	.word	0x40011400
 8002968:	40007800 	.word	0x40007800
 800296c:	2310      	movs	r3, #16
 800296e:	77fb      	strb	r3, [r7, #31]
 8002970:	e02c      	b.n	80029cc <UART_SetConfig+0x348>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a72      	ldr	r2, [pc, #456]	; (8002b40 <UART_SetConfig+0x4bc>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d125      	bne.n	80029c8 <UART_SetConfig+0x344>
 800297c:	4b71      	ldr	r3, [pc, #452]	; (8002b44 <UART_SetConfig+0x4c0>)
 800297e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002982:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002986:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800298a:	d017      	beq.n	80029bc <UART_SetConfig+0x338>
 800298c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002990:	d817      	bhi.n	80029c2 <UART_SetConfig+0x33e>
 8002992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002996:	d00b      	beq.n	80029b0 <UART_SetConfig+0x32c>
 8002998:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800299c:	d811      	bhi.n	80029c2 <UART_SetConfig+0x33e>
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <UART_SetConfig+0x326>
 80029a2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80029a6:	d006      	beq.n	80029b6 <UART_SetConfig+0x332>
 80029a8:	e00b      	b.n	80029c2 <UART_SetConfig+0x33e>
 80029aa:	2300      	movs	r3, #0
 80029ac:	77fb      	strb	r3, [r7, #31]
 80029ae:	e00d      	b.n	80029cc <UART_SetConfig+0x348>
 80029b0:	2302      	movs	r3, #2
 80029b2:	77fb      	strb	r3, [r7, #31]
 80029b4:	e00a      	b.n	80029cc <UART_SetConfig+0x348>
 80029b6:	2304      	movs	r3, #4
 80029b8:	77fb      	strb	r3, [r7, #31]
 80029ba:	e007      	b.n	80029cc <UART_SetConfig+0x348>
 80029bc:	2308      	movs	r3, #8
 80029be:	77fb      	strb	r3, [r7, #31]
 80029c0:	e004      	b.n	80029cc <UART_SetConfig+0x348>
 80029c2:	2310      	movs	r3, #16
 80029c4:	77fb      	strb	r3, [r7, #31]
 80029c6:	e001      	b.n	80029cc <UART_SetConfig+0x348>
 80029c8:	2310      	movs	r3, #16
 80029ca:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69db      	ldr	r3, [r3, #28]
 80029d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029d4:	d15b      	bne.n	8002a8e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80029d6:	7ffb      	ldrb	r3, [r7, #31]
 80029d8:	2b08      	cmp	r3, #8
 80029da:	d828      	bhi.n	8002a2e <UART_SetConfig+0x3aa>
 80029dc:	a201      	add	r2, pc, #4	; (adr r2, 80029e4 <UART_SetConfig+0x360>)
 80029de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029e2:	bf00      	nop
 80029e4:	08002a09 	.word	0x08002a09
 80029e8:	08002a11 	.word	0x08002a11
 80029ec:	08002a19 	.word	0x08002a19
 80029f0:	08002a2f 	.word	0x08002a2f
 80029f4:	08002a1f 	.word	0x08002a1f
 80029f8:	08002a2f 	.word	0x08002a2f
 80029fc:	08002a2f 	.word	0x08002a2f
 8002a00:	08002a2f 	.word	0x08002a2f
 8002a04:	08002a27 	.word	0x08002a27
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a08:	f7ff f88e 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002a0c:	61b8      	str	r0, [r7, #24]
        break;
 8002a0e:	e013      	b.n	8002a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a10:	f7ff f89e 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002a14:	61b8      	str	r0, [r7, #24]
        break;
 8002a16:	e00f      	b.n	8002a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a18:	4b4b      	ldr	r3, [pc, #300]	; (8002b48 <UART_SetConfig+0x4c4>)
 8002a1a:	61bb      	str	r3, [r7, #24]
        break;
 8002a1c:	e00c      	b.n	8002a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a1e:	f7fe ff71 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 8002a22:	61b8      	str	r0, [r7, #24]
        break;
 8002a24:	e008      	b.n	8002a38 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a26:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a2a:	61bb      	str	r3, [r7, #24]
        break;
 8002a2c:	e004      	b.n	8002a38 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	77bb      	strb	r3, [r7, #30]
        break;
 8002a36:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d074      	beq.n	8002b28 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	005a      	lsls	r2, r3, #1
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	441a      	add	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a52:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	2b0f      	cmp	r3, #15
 8002a58:	d916      	bls.n	8002a88 <UART_SetConfig+0x404>
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a60:	d212      	bcs.n	8002a88 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a62:	693b      	ldr	r3, [r7, #16]
 8002a64:	b29b      	uxth	r3, r3
 8002a66:	f023 030f 	bic.w	r3, r3, #15
 8002a6a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	085b      	lsrs	r3, r3, #1
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	89fb      	ldrh	r3, [r7, #14]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	89fa      	ldrh	r2, [r7, #14]
 8002a84:	60da      	str	r2, [r3, #12]
 8002a86:	e04f      	b.n	8002b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a88:	2301      	movs	r3, #1
 8002a8a:	77bb      	strb	r3, [r7, #30]
 8002a8c:	e04c      	b.n	8002b28 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a8e:	7ffb      	ldrb	r3, [r7, #31]
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d828      	bhi.n	8002ae6 <UART_SetConfig+0x462>
 8002a94:	a201      	add	r2, pc, #4	; (adr r2, 8002a9c <UART_SetConfig+0x418>)
 8002a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a9a:	bf00      	nop
 8002a9c:	08002ac1 	.word	0x08002ac1
 8002aa0:	08002ac9 	.word	0x08002ac9
 8002aa4:	08002ad1 	.word	0x08002ad1
 8002aa8:	08002ae7 	.word	0x08002ae7
 8002aac:	08002ad7 	.word	0x08002ad7
 8002ab0:	08002ae7 	.word	0x08002ae7
 8002ab4:	08002ae7 	.word	0x08002ae7
 8002ab8:	08002ae7 	.word	0x08002ae7
 8002abc:	08002adf 	.word	0x08002adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ac0:	f7ff f832 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002ac4:	61b8      	str	r0, [r7, #24]
        break;
 8002ac6:	e013      	b.n	8002af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ac8:	f7ff f842 	bl	8001b50 <HAL_RCC_GetPCLK2Freq>
 8002acc:	61b8      	str	r0, [r7, #24]
        break;
 8002ace:	e00f      	b.n	8002af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002ad0:	4b1d      	ldr	r3, [pc, #116]	; (8002b48 <UART_SetConfig+0x4c4>)
 8002ad2:	61bb      	str	r3, [r7, #24]
        break;
 8002ad4:	e00c      	b.n	8002af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ad6:	f7fe ff15 	bl	8001904 <HAL_RCC_GetSysClockFreq>
 8002ada:	61b8      	str	r0, [r7, #24]
        break;
 8002adc:	e008      	b.n	8002af0 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ae2:	61bb      	str	r3, [r7, #24]
        break;
 8002ae4:	e004      	b.n	8002af0 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	77bb      	strb	r3, [r7, #30]
        break;
 8002aee:	bf00      	nop
    }

    if (pclk != 0U)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d018      	beq.n	8002b28 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	085a      	lsrs	r2, r3, #1
 8002afc:	69bb      	ldr	r3, [r7, #24]
 8002afe:	441a      	add	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b08:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b0f      	cmp	r3, #15
 8002b0e:	d909      	bls.n	8002b24 <UART_SetConfig+0x4a0>
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b16:	d205      	bcs.n	8002b24 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	60da      	str	r2, [r3, #12]
 8002b22:	e001      	b.n	8002b28 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002b34:	7fbb      	ldrb	r3, [r7, #30]
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	3720      	adds	r7, #32
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40007c00 	.word	0x40007c00
 8002b44:	40023800 	.word	0x40023800
 8002b48:	00f42400 	.word	0x00f42400

08002b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01a      	beq.n	8002c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4a:	d10a      	bne.n	8002c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b086      	sub	sp, #24
 8002c94:	af02      	add	r7, sp, #8
 8002c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002ca0:	f7fd ff88 	bl	8000bb4 <HAL_GetTick>
 8002ca4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0308 	and.w	r3, r3, #8
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d10e      	bne.n	8002cd2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb8:	9300      	str	r3, [sp, #0]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f000 f81b 	bl	8002cfe <UART_WaitOnFlagUntilTimeout>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e011      	b.n	8002cf6 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3710      	adds	r7, #16
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b09c      	sub	sp, #112	; 0x70
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	60f8      	str	r0, [r7, #12]
 8002d06:	60b9      	str	r1, [r7, #8]
 8002d08:	603b      	str	r3, [r7, #0]
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d0e:	e0a7      	b.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	f000 80a3 	beq.w	8002e60 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d1a:	f7fd ff4b 	bl	8000bb4 <HAL_GetTick>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	1ad3      	subs	r3, r2, r3
 8002d24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d302      	bcc.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x32>
 8002d2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d13f      	bne.n	8002db0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d38:	e853 3f00 	ldrex	r3, [r3]
 8002d3c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d40:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d44:	667b      	str	r3, [r7, #100]	; 0x64
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d4e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d50:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d56:	e841 2300 	strex	r3, r2, [r1]
 8002d5a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d5c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d1e6      	bne.n	8002d30 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	3308      	adds	r3, #8
 8002d68:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d6c:	e853 3f00 	ldrex	r3, [r3]
 8002d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d74:	f023 0301 	bic.w	r3, r3, #1
 8002d78:	663b      	str	r3, [r7, #96]	; 0x60
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	3308      	adds	r3, #8
 8002d80:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d82:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d84:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d8a:	e841 2300 	strex	r3, r2, [r1]
 8002d8e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d90:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d1e5      	bne.n	8002d62 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2220      	movs	r2, #32
 8002d9a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	2220      	movs	r2, #32
 8002da0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e068      	b.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d050      	beq.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	69db      	ldr	r3, [r3, #28]
 8002dc4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dcc:	d148      	bne.n	8002e60 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002dd6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002de0:	e853 3f00 	ldrex	r3, [r3]
 8002de4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002de8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dec:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002df6:	637b      	str	r3, [r7, #52]	; 0x34
 8002df8:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dfc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dfe:	e841 2300 	strex	r3, r2, [r1]
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1e6      	bne.n	8002dd8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	3308      	adds	r3, #8
 8002e10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e12:	697b      	ldr	r3, [r7, #20]
 8002e14:	e853 3f00 	ldrex	r3, [r3]
 8002e18:	613b      	str	r3, [r7, #16]
   return(result);
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	f023 0301 	bic.w	r3, r3, #1
 8002e20:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	3308      	adds	r3, #8
 8002e28:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e2a:	623a      	str	r2, [r7, #32]
 8002e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e2e:	69f9      	ldr	r1, [r7, #28]
 8002e30:	6a3a      	ldr	r2, [r7, #32]
 8002e32:	e841 2300 	strex	r3, r2, [r1]
 8002e36:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e38:	69bb      	ldr	r3, [r7, #24]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d1e5      	bne.n	8002e0a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	2220      	movs	r2, #32
 8002e42:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	2220      	movs	r2, #32
 8002e48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	e010      	b.n	8002e82 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	69da      	ldr	r2, [r3, #28]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	4013      	ands	r3, r2
 8002e6a:	68ba      	ldr	r2, [r7, #8]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	461a      	mov	r2, r3
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	f43f af48 	beq.w	8002d10 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	3770      	adds	r7, #112	; 0x70
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}
	...

08002e8c <__libc_init_array>:
 8002e8c:	b570      	push	{r4, r5, r6, lr}
 8002e8e:	4d0d      	ldr	r5, [pc, #52]	; (8002ec4 <__libc_init_array+0x38>)
 8002e90:	4c0d      	ldr	r4, [pc, #52]	; (8002ec8 <__libc_init_array+0x3c>)
 8002e92:	1b64      	subs	r4, r4, r5
 8002e94:	10a4      	asrs	r4, r4, #2
 8002e96:	2600      	movs	r6, #0
 8002e98:	42a6      	cmp	r6, r4
 8002e9a:	d109      	bne.n	8002eb0 <__libc_init_array+0x24>
 8002e9c:	4d0b      	ldr	r5, [pc, #44]	; (8002ecc <__libc_init_array+0x40>)
 8002e9e:	4c0c      	ldr	r4, [pc, #48]	; (8002ed0 <__libc_init_array+0x44>)
 8002ea0:	f000 f820 	bl	8002ee4 <_init>
 8002ea4:	1b64      	subs	r4, r4, r5
 8002ea6:	10a4      	asrs	r4, r4, #2
 8002ea8:	2600      	movs	r6, #0
 8002eaa:	42a6      	cmp	r6, r4
 8002eac:	d105      	bne.n	8002eba <__libc_init_array+0x2e>
 8002eae:	bd70      	pop	{r4, r5, r6, pc}
 8002eb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8002eb4:	4798      	blx	r3
 8002eb6:	3601      	adds	r6, #1
 8002eb8:	e7ee      	b.n	8002e98 <__libc_init_array+0xc>
 8002eba:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ebe:	4798      	blx	r3
 8002ec0:	3601      	adds	r6, #1
 8002ec2:	e7f2      	b.n	8002eaa <__libc_init_array+0x1e>
 8002ec4:	08002f1c 	.word	0x08002f1c
 8002ec8:	08002f1c 	.word	0x08002f1c
 8002ecc:	08002f1c 	.word	0x08002f1c
 8002ed0:	08002f20 	.word	0x08002f20

08002ed4 <memset>:
 8002ed4:	4402      	add	r2, r0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	4293      	cmp	r3, r2
 8002eda:	d100      	bne.n	8002ede <memset+0xa>
 8002edc:	4770      	bx	lr
 8002ede:	f803 1b01 	strb.w	r1, [r3], #1
 8002ee2:	e7f9      	b.n	8002ed8 <memset+0x4>

08002ee4 <_init>:
 8002ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ee6:	bf00      	nop
 8002ee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eea:	bc08      	pop	{r3}
 8002eec:	469e      	mov	lr, r3
 8002eee:	4770      	bx	lr

08002ef0 <_fini>:
 8002ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ef2:	bf00      	nop
 8002ef4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ef6:	bc08      	pop	{r3}
 8002ef8:	469e      	mov	lr, r3
 8002efa:	4770      	bx	lr
