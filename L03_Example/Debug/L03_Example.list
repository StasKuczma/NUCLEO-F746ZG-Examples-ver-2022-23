
L03_Example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  080092c0  080092c0  000192c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009740  08009740  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  08009740  08009740  00019740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009748  08009748  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009748  08009748  00019748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800974c  0800974c  0001974c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08009750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200001f0  08009940  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08009940  000202fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012acf  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000293b  00000000  00000000  00032cef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  00035630  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e28  00000000  00000000  00036598  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003676  00000000  00000000  000373c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000139ec  00000000  00000000  0003aa36  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f219c  00000000  00000000  0004e422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001405be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054e0  00000000  00000000  00140610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001f0 	.word	0x200001f0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080092a8 	.word	0x080092a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001f4 	.word	0x200001f4
 800020c:	080092a8 	.word	0x080092a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <__aeabi_uldivmod>:
 8000c78:	b953      	cbnz	r3, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7a:	b94a      	cbnz	r2, 8000c90 <__aeabi_uldivmod+0x18>
 8000c7c:	2900      	cmp	r1, #0
 8000c7e:	bf08      	it	eq
 8000c80:	2800      	cmpeq	r0, #0
 8000c82:	bf1c      	itt	ne
 8000c84:	f04f 31ff 	movne.w	r1, #4294967295
 8000c88:	f04f 30ff 	movne.w	r0, #4294967295
 8000c8c:	f000 b9aa 	b.w	8000fe4 <__aeabi_idiv0>
 8000c90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c98:	f000 f83c 	bl	8000d14 <__udivmoddi4>
 8000c9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ca0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca4:	b004      	add	sp, #16
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_d2lz>:
 8000ca8:	b538      	push	{r3, r4, r5, lr}
 8000caa:	2200      	movs	r2, #0
 8000cac:	2300      	movs	r3, #0
 8000cae:	4604      	mov	r4, r0
 8000cb0:	460d      	mov	r5, r1
 8000cb2:	f7ff ff33 	bl	8000b1c <__aeabi_dcmplt>
 8000cb6:	b928      	cbnz	r0, 8000cc4 <__aeabi_d2lz+0x1c>
 8000cb8:	4620      	mov	r0, r4
 8000cba:	4629      	mov	r1, r5
 8000cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cc0:	f000 b80a 	b.w	8000cd8 <__aeabi_d2ulz>
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cca:	f000 f805 	bl	8000cd8 <__aeabi_d2ulz>
 8000cce:	4240      	negs	r0, r0
 8000cd0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd4:	bd38      	pop	{r3, r4, r5, pc}
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_d2ulz>:
 8000cd8:	b5d0      	push	{r4, r6, r7, lr}
 8000cda:	4b0c      	ldr	r3, [pc, #48]	; (8000d0c <__aeabi_d2ulz+0x34>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	4606      	mov	r6, r0
 8000ce0:	460f      	mov	r7, r1
 8000ce2:	f7ff fca9 	bl	8000638 <__aeabi_dmul>
 8000ce6:	f7ff ff57 	bl	8000b98 <__aeabi_d2uiz>
 8000cea:	4604      	mov	r4, r0
 8000cec:	f7ff fc2a 	bl	8000544 <__aeabi_ui2d>
 8000cf0:	4b07      	ldr	r3, [pc, #28]	; (8000d10 <__aeabi_d2ulz+0x38>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	f7ff fca0 	bl	8000638 <__aeabi_dmul>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	460b      	mov	r3, r1
 8000cfc:	4630      	mov	r0, r6
 8000cfe:	4639      	mov	r1, r7
 8000d00:	f7ff fae2 	bl	80002c8 <__aeabi_dsub>
 8000d04:	f7ff ff48 	bl	8000b98 <__aeabi_d2uiz>
 8000d08:	4621      	mov	r1, r4
 8000d0a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d0c:	3df00000 	.word	0x3df00000
 8000d10:	41f00000 	.word	0x41f00000

08000d14 <__udivmoddi4>:
 8000d14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d18:	9d08      	ldr	r5, [sp, #32]
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	468e      	mov	lr, r1
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d14d      	bne.n	8000dbe <__udivmoddi4+0xaa>
 8000d22:	428a      	cmp	r2, r1
 8000d24:	4694      	mov	ip, r2
 8000d26:	d969      	bls.n	8000dfc <__udivmoddi4+0xe8>
 8000d28:	fab2 f282 	clz	r2, r2
 8000d2c:	b152      	cbz	r2, 8000d44 <__udivmoddi4+0x30>
 8000d2e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d32:	f1c2 0120 	rsb	r1, r2, #32
 8000d36:	fa20 f101 	lsr.w	r1, r0, r1
 8000d3a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d3e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d42:	4094      	lsls	r4, r2
 8000d44:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d48:	0c21      	lsrs	r1, r4, #16
 8000d4a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d4e:	fa1f f78c 	uxth.w	r7, ip
 8000d52:	fb08 e316 	mls	r3, r8, r6, lr
 8000d56:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d5a:	fb06 f107 	mul.w	r1, r6, r7
 8000d5e:	4299      	cmp	r1, r3
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x64>
 8000d62:	eb1c 0303 	adds.w	r3, ip, r3
 8000d66:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d6a:	f080 811f 	bcs.w	8000fac <__udivmoddi4+0x298>
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	f240 811c 	bls.w	8000fac <__udivmoddi4+0x298>
 8000d74:	3e02      	subs	r6, #2
 8000d76:	4463      	add	r3, ip
 8000d78:	1a5b      	subs	r3, r3, r1
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d80:	fb08 3310 	mls	r3, r8, r0, r3
 8000d84:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d88:	fb00 f707 	mul.w	r7, r0, r7
 8000d8c:	42a7      	cmp	r7, r4
 8000d8e:	d90a      	bls.n	8000da6 <__udivmoddi4+0x92>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d98:	f080 810a 	bcs.w	8000fb0 <__udivmoddi4+0x29c>
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	f240 8107 	bls.w	8000fb0 <__udivmoddi4+0x29c>
 8000da2:	4464      	add	r4, ip
 8000da4:	3802      	subs	r0, #2
 8000da6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000daa:	1be4      	subs	r4, r4, r7
 8000dac:	2600      	movs	r6, #0
 8000dae:	b11d      	cbz	r5, 8000db8 <__udivmoddi4+0xa4>
 8000db0:	40d4      	lsrs	r4, r2
 8000db2:	2300      	movs	r3, #0
 8000db4:	e9c5 4300 	strd	r4, r3, [r5]
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	428b      	cmp	r3, r1
 8000dc0:	d909      	bls.n	8000dd6 <__udivmoddi4+0xc2>
 8000dc2:	2d00      	cmp	r5, #0
 8000dc4:	f000 80ef 	beq.w	8000fa6 <__udivmoddi4+0x292>
 8000dc8:	2600      	movs	r6, #0
 8000dca:	e9c5 0100 	strd	r0, r1, [r5]
 8000dce:	4630      	mov	r0, r6
 8000dd0:	4631      	mov	r1, r6
 8000dd2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dd6:	fab3 f683 	clz	r6, r3
 8000dda:	2e00      	cmp	r6, #0
 8000ddc:	d14a      	bne.n	8000e74 <__udivmoddi4+0x160>
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d302      	bcc.n	8000de8 <__udivmoddi4+0xd4>
 8000de2:	4282      	cmp	r2, r0
 8000de4:	f200 80f9 	bhi.w	8000fda <__udivmoddi4+0x2c6>
 8000de8:	1a84      	subs	r4, r0, r2
 8000dea:	eb61 0303 	sbc.w	r3, r1, r3
 8000dee:	2001      	movs	r0, #1
 8000df0:	469e      	mov	lr, r3
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	d0e0      	beq.n	8000db8 <__udivmoddi4+0xa4>
 8000df6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000dfa:	e7dd      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000dfc:	b902      	cbnz	r2, 8000e00 <__udivmoddi4+0xec>
 8000dfe:	deff      	udf	#255	; 0xff
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	2a00      	cmp	r2, #0
 8000e06:	f040 8092 	bne.w	8000f2e <__udivmoddi4+0x21a>
 8000e0a:	eba1 010c 	sub.w	r1, r1, ip
 8000e0e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e12:	fa1f fe8c 	uxth.w	lr, ip
 8000e16:	2601      	movs	r6, #1
 8000e18:	0c20      	lsrs	r0, r4, #16
 8000e1a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e1e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e22:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e26:	fb0e f003 	mul.w	r0, lr, r3
 8000e2a:	4288      	cmp	r0, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x12c>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e36:	d202      	bcs.n	8000e3e <__udivmoddi4+0x12a>
 8000e38:	4288      	cmp	r0, r1
 8000e3a:	f200 80cb 	bhi.w	8000fd4 <__udivmoddi4+0x2c0>
 8000e3e:	4643      	mov	r3, r8
 8000e40:	1a09      	subs	r1, r1, r0
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e48:	fb07 1110 	mls	r1, r7, r0, r1
 8000e4c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e50:	fb0e fe00 	mul.w	lr, lr, r0
 8000e54:	45a6      	cmp	lr, r4
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x156>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e60:	d202      	bcs.n	8000e68 <__udivmoddi4+0x154>
 8000e62:	45a6      	cmp	lr, r4
 8000e64:	f200 80bb 	bhi.w	8000fde <__udivmoddi4+0x2ca>
 8000e68:	4608      	mov	r0, r1
 8000e6a:	eba4 040e 	sub.w	r4, r4, lr
 8000e6e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e72:	e79c      	b.n	8000dae <__udivmoddi4+0x9a>
 8000e74:	f1c6 0720 	rsb	r7, r6, #32
 8000e78:	40b3      	lsls	r3, r6
 8000e7a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e7e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e82:	fa20 f407 	lsr.w	r4, r0, r7
 8000e86:	fa01 f306 	lsl.w	r3, r1, r6
 8000e8a:	431c      	orrs	r4, r3
 8000e8c:	40f9      	lsrs	r1, r7
 8000e8e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e92:	fa00 f306 	lsl.w	r3, r0, r6
 8000e96:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e9a:	0c20      	lsrs	r0, r4, #16
 8000e9c:	fa1f fe8c 	uxth.w	lr, ip
 8000ea0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ea4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ea8:	fb08 f00e 	mul.w	r0, r8, lr
 8000eac:	4288      	cmp	r0, r1
 8000eae:	fa02 f206 	lsl.w	r2, r2, r6
 8000eb2:	d90b      	bls.n	8000ecc <__udivmoddi4+0x1b8>
 8000eb4:	eb1c 0101 	adds.w	r1, ip, r1
 8000eb8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ebc:	f080 8088 	bcs.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec0:	4288      	cmp	r0, r1
 8000ec2:	f240 8085 	bls.w	8000fd0 <__udivmoddi4+0x2bc>
 8000ec6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eca:	4461      	add	r1, ip
 8000ecc:	1a09      	subs	r1, r1, r0
 8000ece:	b2a4      	uxth	r4, r4
 8000ed0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ed4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ed8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000edc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ee0:	458e      	cmp	lr, r1
 8000ee2:	d908      	bls.n	8000ef6 <__udivmoddi4+0x1e2>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000eec:	d26c      	bcs.n	8000fc8 <__udivmoddi4+0x2b4>
 8000eee:	458e      	cmp	lr, r1
 8000ef0:	d96a      	bls.n	8000fc8 <__udivmoddi4+0x2b4>
 8000ef2:	3802      	subs	r0, #2
 8000ef4:	4461      	add	r1, ip
 8000ef6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000efa:	fba0 9402 	umull	r9, r4, r0, r2
 8000efe:	eba1 010e 	sub.w	r1, r1, lr
 8000f02:	42a1      	cmp	r1, r4
 8000f04:	46c8      	mov	r8, r9
 8000f06:	46a6      	mov	lr, r4
 8000f08:	d356      	bcc.n	8000fb8 <__udivmoddi4+0x2a4>
 8000f0a:	d053      	beq.n	8000fb4 <__udivmoddi4+0x2a0>
 8000f0c:	b15d      	cbz	r5, 8000f26 <__udivmoddi4+0x212>
 8000f0e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f12:	eb61 010e 	sbc.w	r1, r1, lr
 8000f16:	fa01 f707 	lsl.w	r7, r1, r7
 8000f1a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f1e:	40f1      	lsrs	r1, r6
 8000f20:	431f      	orrs	r7, r3
 8000f22:	e9c5 7100 	strd	r7, r1, [r5]
 8000f26:	2600      	movs	r6, #0
 8000f28:	4631      	mov	r1, r6
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	f1c2 0320 	rsb	r3, r2, #32
 8000f32:	40d8      	lsrs	r0, r3
 8000f34:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f38:	fa21 f303 	lsr.w	r3, r1, r3
 8000f3c:	4091      	lsls	r1, r2
 8000f3e:	4301      	orrs	r1, r0
 8000f40:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f44:	fa1f fe8c 	uxth.w	lr, ip
 8000f48:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f4c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f50:	0c0b      	lsrs	r3, r1, #16
 8000f52:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f56:	fb00 f60e 	mul.w	r6, r0, lr
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f60:	d908      	bls.n	8000f74 <__udivmoddi4+0x260>
 8000f62:	eb1c 0303 	adds.w	r3, ip, r3
 8000f66:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f6a:	d22f      	bcs.n	8000fcc <__udivmoddi4+0x2b8>
 8000f6c:	429e      	cmp	r6, r3
 8000f6e:	d92d      	bls.n	8000fcc <__udivmoddi4+0x2b8>
 8000f70:	3802      	subs	r0, #2
 8000f72:	4463      	add	r3, ip
 8000f74:	1b9b      	subs	r3, r3, r6
 8000f76:	b289      	uxth	r1, r1
 8000f78:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f7c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f80:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f84:	fb06 f30e 	mul.w	r3, r6, lr
 8000f88:	428b      	cmp	r3, r1
 8000f8a:	d908      	bls.n	8000f9e <__udivmoddi4+0x28a>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f94:	d216      	bcs.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f96:	428b      	cmp	r3, r1
 8000f98:	d914      	bls.n	8000fc4 <__udivmoddi4+0x2b0>
 8000f9a:	3e02      	subs	r6, #2
 8000f9c:	4461      	add	r1, ip
 8000f9e:	1ac9      	subs	r1, r1, r3
 8000fa0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fa4:	e738      	b.n	8000e18 <__udivmoddi4+0x104>
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e705      	b.n	8000db8 <__udivmoddi4+0xa4>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e3      	b.n	8000d78 <__udivmoddi4+0x64>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6f8      	b.n	8000da6 <__udivmoddi4+0x92>
 8000fb4:	454b      	cmp	r3, r9
 8000fb6:	d2a9      	bcs.n	8000f0c <__udivmoddi4+0x1f8>
 8000fb8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fbc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7a3      	b.n	8000f0c <__udivmoddi4+0x1f8>
 8000fc4:	4646      	mov	r6, r8
 8000fc6:	e7ea      	b.n	8000f9e <__udivmoddi4+0x28a>
 8000fc8:	4620      	mov	r0, r4
 8000fca:	e794      	b.n	8000ef6 <__udivmoddi4+0x1e2>
 8000fcc:	4640      	mov	r0, r8
 8000fce:	e7d1      	b.n	8000f74 <__udivmoddi4+0x260>
 8000fd0:	46d0      	mov	r8, sl
 8000fd2:	e77b      	b.n	8000ecc <__udivmoddi4+0x1b8>
 8000fd4:	3b02      	subs	r3, #2
 8000fd6:	4461      	add	r1, ip
 8000fd8:	e732      	b.n	8000e40 <__udivmoddi4+0x12c>
 8000fda:	4630      	mov	r0, r6
 8000fdc:	e709      	b.n	8000df2 <__udivmoddi4+0xde>
 8000fde:	4464      	add	r4, ip
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	e742      	b.n	8000e6a <__udivmoddi4+0x156>

08000fe4 <__aeabi_idiv0>:
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop

08000fe8 <__led_gpio_write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: GPIO pin state (0/1)
  * @retval None
  */
void __led_gpio_write(const LED_GPIO_Handle_TypeDef* hled, _Bool state)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
 8000ff0:	460b      	mov	r3, r1
 8000ff2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(hled->Port, hled->Pin, (GPIO_PinState)state);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	6818      	ldr	r0, [r3, #0]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	889b      	ldrh	r3, [r3, #4]
 8000ffc:	78fa      	ldrb	r2, [r7, #3]
 8000ffe:	4619      	mov	r1, r3
 8001000:	f001 f930 	bl	8002264 <HAL_GPIO_WritePin>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <__led_gpio_read>:
  * @brief Reads LED's GPIO pin
  * @param[in] hled		: LED GPIO handler
  * @retval GPIO pin state (0/1)
  */
_Bool __led_gpio_read(const LED_GPIO_Handle_TypeDef* hled)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
	return (_Bool)HAL_GPIO_ReadPin(hled->Port, hled->Pin);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	889b      	ldrh	r3, [r3, #4]
 800101c:	4619      	mov	r1, r3
 800101e:	4610      	mov	r0, r2
 8001020:	f001 f908 	bl	8002234 <HAL_GPIO_ReadPin>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	bf14      	ite	ne
 800102a:	2301      	movne	r3, #1
 800102c:	2300      	moveq	r3, #0
 800102e:	b2db      	uxtb	r3, r3
}
 8001030:	4618      	mov	r0, r3
 8001032:	3708      	adds	r7, #8
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}

08001038 <LED_GPIO_On>:
  * @brief Turns LED on
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_On(const LED_GPIO_Handle_TypeDef* hled)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
	LED_GPIO_Write(hled, LED_ON);
 8001040:	2101      	movs	r1, #1
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f000 f810 	bl	8001068 <LED_GPIO_Write>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <LED_GPIO_Off>:
  * @brief Turns LED off
  * @param[in] hled		: LED GPIO handler
  * @retval None
  */
void LED_GPIO_Off(const LED_GPIO_Handle_TypeDef* hled)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	LED_GPIO_Write(hled, LED_OFF);
 8001058:	2100      	movs	r1, #0
 800105a:	6878      	ldr	r0, [r7, #4]
 800105c:	f000 f804 	bl	8001068 <LED_GPIO_Write>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <LED_GPIO_Write>:
  * @param[in] hled		: LED GPIO handler
  * @param[in] state 	: LED state (LED_OFF or LED_ON)
  * @retval None
  */
void LED_GPIO_Write(const LED_GPIO_Handle_TypeDef* hled, LED_GPIO_State_TypeDef state)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	460b      	mov	r3, r1
 8001072:	70fb      	strb	r3, [r7, #3]
	__led_gpio_write(hled, hled->ActiveState == LED_ON_HIGH ? state : !state);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	799b      	ldrb	r3, [r3, #6]
 8001078:	2b01      	cmp	r3, #1
 800107a:	d106      	bne.n	800108a <LED_GPIO_Write+0x22>
 800107c:	78fb      	ldrb	r3, [r7, #3]
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	b2db      	uxtb	r3, r3
 8001088:	e005      	b.n	8001096 <LED_GPIO_Write+0x2e>
 800108a:	78fb      	ldrb	r3, [r7, #3]
 800108c:	2b00      	cmp	r3, #0
 800108e:	bf0c      	ite	eq
 8001090:	2301      	moveq	r3, #1
 8001092:	2300      	movne	r3, #0
 8001094:	b2db      	uxtb	r3, r3
 8001096:	4619      	mov	r1, r3
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffa5 	bl	8000fe8 <__led_gpio_write>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <LED_GPIO_Read>:
  * @brief Reads LED state
  * @param[in] hled		: LED GPIO handler
  * @retval	LED state (LED_OFF or LED_ON)
  */
LED_GPIO_State_TypeDef LED_GPIO_Read(const LED_GPIO_Handle_TypeDef* hled)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
	_Bool state = __led_gpio_read(hled);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ffac 	bl	800100c <__led_gpio_read>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
	return hled->ActiveState == LED_ON_HIGH ? state : !state;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	799b      	ldrb	r3, [r3, #6]
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d101      	bne.n	80010c4 <LED_GPIO_Read+0x1e>
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	e003      	b.n	80010cc <LED_GPIO_Read+0x26>
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
 80010c6:	f083 0301 	eor.w	r3, r3, #1
 80010ca:	b2db      	uxtb	r3, r3
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}

080010d4 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08c      	sub	sp, #48	; 0x30
 80010d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010da:	f107 031c 	add.w	r3, r7, #28
 80010de:	2200      	movs	r2, #0
 80010e0:	601a      	str	r2, [r3, #0]
 80010e2:	605a      	str	r2, [r3, #4]
 80010e4:	609a      	str	r2, [r3, #8]
 80010e6:	60da      	str	r2, [r3, #12]
 80010e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ea:	4bab      	ldr	r3, [pc, #684]	; (8001398 <MX_GPIO_Init+0x2c4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4aaa      	ldr	r2, [pc, #680]	; (8001398 <MX_GPIO_Init+0x2c4>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4ba8      	ldr	r3, [pc, #672]	; (8001398 <MX_GPIO_Init+0x2c4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	61bb      	str	r3, [r7, #24]
 8001100:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001102:	4ba5      	ldr	r3, [pc, #660]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001106:	4aa4      	ldr	r2, [pc, #656]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001108:	f043 0320 	orr.w	r3, r3, #32
 800110c:	6313      	str	r3, [r2, #48]	; 0x30
 800110e:	4ba2      	ldr	r3, [pc, #648]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001112:	f003 0320 	and.w	r3, r3, #32
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800111a:	4b9f      	ldr	r3, [pc, #636]	; (8001398 <MX_GPIO_Init+0x2c4>)
 800111c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111e:	4a9e      	ldr	r2, [pc, #632]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001120:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001124:	6313      	str	r3, [r2, #48]	; 0x30
 8001126:	4b9c      	ldr	r3, [pc, #624]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800112e:	613b      	str	r3, [r7, #16]
 8001130:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001132:	4b99      	ldr	r3, [pc, #612]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a98      	ldr	r2, [pc, #608]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001138:	f043 0301 	orr.w	r3, r3, #1
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b96      	ldr	r3, [pc, #600]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	60fb      	str	r3, [r7, #12]
 8001148:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800114a:	4b93      	ldr	r3, [pc, #588]	; (8001398 <MX_GPIO_Init+0x2c4>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800114e:	4a92      	ldr	r2, [pc, #584]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001150:	f043 0302 	orr.w	r3, r3, #2
 8001154:	6313      	str	r3, [r2, #48]	; 0x30
 8001156:	4b90      	ldr	r3, [pc, #576]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115a:	f003 0302 	and.w	r3, r3, #2
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001162:	4b8d      	ldr	r3, [pc, #564]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a8c      	ldr	r2, [pc, #560]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001168:	f043 0308 	orr.w	r3, r3, #8
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b8a      	ldr	r3, [pc, #552]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0308 	and.w	r3, r3, #8
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800117a:	4b87      	ldr	r3, [pc, #540]	; (8001398 <MX_GPIO_Init+0x2c4>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a86      	ldr	r2, [pc, #536]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b84      	ldr	r3, [pc, #528]	; (8001398 <MX_GPIO_Init+0x2c4>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800118e:	603b      	str	r3, [r7, #0]
 8001190:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LAMP_TRIAC_GPIO_Port, LAMP_TRIAC_Pin, GPIO_PIN_RESET);
 8001192:	2200      	movs	r2, #0
 8001194:	2108      	movs	r1, #8
 8001196:	4881      	ldr	r0, [pc, #516]	; (800139c <MX_GPIO_Init+0x2c8>)
 8001198:	f001 f864 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	487f      	ldr	r0, [pc, #508]	; (80013a0 <MX_GPIO_Init+0x2cc>)
 80011a2:	f001 f85f 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011a6:	2200      	movs	r2, #0
 80011a8:	f244 0181 	movw	r1, #16513	; 0x4081
 80011ac:	487d      	ldr	r0, [pc, #500]	; (80013a4 <MX_GPIO_Init+0x2d0>)
 80011ae:	f001 f859 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80011b2:	2200      	movs	r2, #0
 80011b4:	2140      	movs	r1, #64	; 0x40
 80011b6:	487c      	ldr	r0, [pc, #496]	; (80013a8 <MX_GPIO_Init+0x2d4>)
 80011b8:	f001 f854 	bl	8002264 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80011bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011c2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c8:	2300      	movs	r3, #0
 80011ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 031c 	add.w	r3, r7, #28
 80011d0:	4619      	mov	r1, r3
 80011d2:	4876      	ldr	r0, [pc, #472]	; (80013ac <MX_GPIO_Init+0x2d8>)
 80011d4:	f000 fe82 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_TRIAC_Pin;
 80011d8:	2308      	movs	r3, #8
 80011da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011dc:	2301      	movs	r3, #1
 80011de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011e4:	2302      	movs	r3, #2
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LAMP_TRIAC_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 031c 	add.w	r3, r7, #28
 80011ec:	4619      	mov	r1, r3
 80011ee:	486b      	ldr	r0, [pc, #428]	; (800139c <MX_GPIO_Init+0x2c8>)
 80011f0:	f000 fe74 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LAMP_SYNC_Pin;
 80011f4:	2320      	movs	r3, #32
 80011f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fe:	2300      	movs	r3, #0
 8001200:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(LAMP_SYNC_GPIO_Port, &GPIO_InitStruct);
 8001202:	f107 031c 	add.w	r3, r7, #28
 8001206:	4619      	mov	r1, r3
 8001208:	4864      	ldr	r0, [pc, #400]	; (800139c <MX_GPIO_Init+0x2c8>)
 800120a:	f000 fe67 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT1_Btn_Pin;
 800120e:	2301      	movs	r3, #1
 8001210:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001212:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001216:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001218:	2301      	movs	r3, #1
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT1_Btn_GPIO_Port, &GPIO_InitStruct);
 800121c:	f107 031c 	add.w	r3, r7, #28
 8001220:	4619      	mov	r1, r3
 8001222:	4862      	ldr	r0, [pc, #392]	; (80013ac <MX_GPIO_Init+0x2d8>)
 8001224:	f000 fe5a 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001228:	2332      	movs	r3, #50	; 0x32
 800122a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800122c:	2302      	movs	r3, #2
 800122e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001230:	2300      	movs	r3, #0
 8001232:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001234:	2303      	movs	r3, #3
 8001236:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001238:	230b      	movs	r3, #11
 800123a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800123c:	f107 031c 	add.w	r3, r7, #28
 8001240:	4619      	mov	r1, r3
 8001242:	485a      	ldr	r0, [pc, #360]	; (80013ac <MX_GPIO_Init+0x2d8>)
 8001244:	f000 fe4a 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EXT2_Btn_Pin;
 8001248:	2308      	movs	r3, #8
 800124a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800124c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001250:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001252:	2302      	movs	r3, #2
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(EXT2_Btn_GPIO_Port, &GPIO_InitStruct);
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	4619      	mov	r1, r3
 800125c:	4853      	ldr	r0, [pc, #332]	; (80013ac <MX_GPIO_Init+0x2d8>)
 800125e:	f000 fe3d 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001262:	2386      	movs	r3, #134	; 0x86
 8001264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001266:	2302      	movs	r3, #2
 8001268:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126a:	2300      	movs	r3, #0
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800126e:	2303      	movs	r3, #3
 8001270:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001272:	230b      	movs	r3, #11
 8001274:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4619      	mov	r1, r3
 800127c:	4848      	ldr	r0, [pc, #288]	; (80013a0 <MX_GPIO_Init+0x2cc>)
 800127e:	f000 fe2d 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD4_Pin;
 8001282:	2308      	movs	r3, #8
 8001284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001286:	2301      	movs	r3, #1
 8001288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800128a:	2302      	movs	r3, #2
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 8001292:	f107 031c 	add.w	r3, r7, #28
 8001296:	4619      	mov	r1, r3
 8001298:	4841      	ldr	r0, [pc, #260]	; (80013a0 <MX_GPIO_Init+0x2cc>)
 800129a:	f000 fe1f 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800129e:	f244 0381 	movw	r3, #16513	; 0x4081
 80012a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 031c 	add.w	r3, r7, #28
 80012b4:	4619      	mov	r1, r3
 80012b6:	483b      	ldr	r0, [pc, #236]	; (80013a4 <MX_GPIO_Init+0x2d0>)
 80012b8:	f000 fe10 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80012bc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012c2:	2302      	movs	r3, #2
 80012c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c6:	2300      	movs	r3, #0
 80012c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ca:	2303      	movs	r3, #3
 80012cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80012ce:	230b      	movs	r3, #11
 80012d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	4832      	ldr	r0, [pc, #200]	; (80013a4 <MX_GPIO_Init+0x2d0>)
 80012da:	f000 fdff 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80012de:	2340      	movs	r3, #64	; 0x40
 80012e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e2:	2301      	movs	r3, #1
 80012e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e6:	2300      	movs	r3, #0
 80012e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ea:	2300      	movs	r3, #0
 80012ec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	4619      	mov	r1, r3
 80012f4:	482c      	ldr	r0, [pc, #176]	; (80013a8 <MX_GPIO_Init+0x2d4>)
 80012f6:	f000 fdf1 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80012fa:	2380      	movs	r3, #128	; 0x80
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012fe:	2300      	movs	r3, #0
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	4619      	mov	r1, r3
 800130c:	4826      	ldr	r0, [pc, #152]	; (80013a8 <MX_GPIO_Init+0x2d4>)
 800130e:	f000 fde5 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001312:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001316:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131c:	2300      	movs	r3, #0
 800131e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001320:	2303      	movs	r3, #3
 8001322:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001324:	230a      	movs	r3, #10
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001328:	f107 031c 	add.w	r3, r7, #28
 800132c:	4619      	mov	r1, r3
 800132e:	481c      	ldr	r0, [pc, #112]	; (80013a0 <MX_GPIO_Init+0x2cc>)
 8001330:	f000 fdd4 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001334:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800133a:	2300      	movs	r3, #0
 800133c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133e:	2300      	movs	r3, #0
 8001340:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001342:	f107 031c 	add.w	r3, r7, #28
 8001346:	4619      	mov	r1, r3
 8001348:	4815      	ldr	r0, [pc, #84]	; (80013a0 <MX_GPIO_Init+0x2cc>)
 800134a:	f000 fdc7 	bl	8001edc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800134e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001352:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001354:	2302      	movs	r3, #2
 8001356:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001358:	2300      	movs	r3, #0
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001360:	230b      	movs	r3, #11
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	480f      	ldr	r0, [pc, #60]	; (80013a8 <MX_GPIO_Init+0x2d4>)
 800136c:	f000 fdb6 	bl	8001edc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001370:	2200      	movs	r2, #0
 8001372:	2100      	movs	r1, #0
 8001374:	2017      	movs	r0, #23
 8001376:	f000 fce8 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800137a:	2017      	movs	r0, #23
 800137c:	f000 fd01 	bl	8001d82 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001380:	2200      	movs	r2, #0
 8001382:	2100      	movs	r1, #0
 8001384:	2028      	movs	r0, #40	; 0x28
 8001386:	f000 fce0 	bl	8001d4a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800138a:	2028      	movs	r0, #40	; 0x28
 800138c:	f000 fcf9 	bl	8001d82 <HAL_NVIC_EnableIRQ>

}
 8001390:	bf00      	nop
 8001392:	3730      	adds	r7, #48	; 0x30
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40023800 	.word	0x40023800
 800139c:	40021400 	.word	0x40021400
 80013a0:	40020000 	.word	0x40020000
 80013a4:	40020400 	.word	0x40020400
 80013a8:	40021800 	.word	0x40021800
 80013ac:	40020800 	.word	0x40020800

080013b0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim == &htim2)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	4a0c      	ldr	r2, [pc, #48]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013bc:	4293      	cmp	r3, r2
 80013be:	d110      	bne.n	80013e2 <HAL_TIM_PeriodElapsedCallback+0x32>
  {
    LED_GPIO_Off(&hld1);
 80013c0:	480b      	ldr	r0, [pc, #44]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013c2:	f7ff fe45 	bl	8001050 <LED_GPIO_Off>
    LD1_State = LED_GPIO_Read(&hld1);
 80013c6:	480a      	ldr	r0, [pc, #40]	; (80013f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80013c8:	f7ff fe6d 	bl	80010a6 <LED_GPIO_Read>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	bf14      	ite	ne
 80013d2:	2301      	movne	r3, #1
 80013d4:	2300      	moveq	r3, #0
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	4b06      	ldr	r3, [pc, #24]	; (80013f4 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80013da:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Stop_IT(&htim2);
 80013dc:	4803      	ldr	r0, [pc, #12]	; (80013ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80013de:	f002 f95d 	bl	800369c <HAL_TIM_Base_Stop_IT>
  }
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}
 80013ea:	bf00      	nop
 80013ec:	20000214 	.word	0x20000214
 80013f0:	20000000 	.word	0x20000000
 80013f4:	2000020c 	.word	0x2000020c

080013f8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
  if(huart == &huart3)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	4a17      	ldr	r2, [pc, #92]	; (8001460 <HAL_UART_RxCpltCallback+0x68>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d126      	bne.n	8001456 <HAL_UART_RxCpltCallback+0x5e>
  {
    unsigned int time_ms, tim3_arr;
    int status = sscanf(msg, "%d", &time_ms);
 8001408:	f107 030c 	add.w	r3, r7, #12
 800140c:	461a      	mov	r2, r3
 800140e:	4915      	ldr	r1, [pc, #84]	; (8001464 <HAL_UART_RxCpltCallback+0x6c>)
 8001410:	4815      	ldr	r0, [pc, #84]	; (8001468 <HAL_UART_RxCpltCallback+0x70>)
 8001412:	f004 fa29 	bl	8005868 <siscanf>
 8001416:	6178      	str	r0, [r7, #20]
    tim3_arr = time_ms*1000 - 1;
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	3b01      	subs	r3, #1
 8001424:	613b      	str	r3, [r7, #16]
    if(status == 1)
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10d      	bne.n	8001448 <HAL_UART_RxCpltCallback+0x50>
    {
      HAL_TIM_Base_Stop_IT(&htim2);
 800142c:	480f      	ldr	r0, [pc, #60]	; (800146c <HAL_UART_RxCpltCallback+0x74>)
 800142e:	f002 f935 	bl	800369c <HAL_TIM_Base_Stop_IT>
      __HAL_TIM_SET_COUNTER(&htim2, 0);
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <HAL_UART_RxCpltCallback+0x74>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2200      	movs	r2, #0
 8001438:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_TIM_SET_AUTORELOAD(&htim2, tim3_arr);
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_UART_RxCpltCallback+0x74>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	62da      	str	r2, [r3, #44]	; 0x2c
 8001442:	4a0a      	ldr	r2, [pc, #40]	; (800146c <HAL_UART_RxCpltCallback+0x74>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	60d3      	str	r3, [r2, #12]
    }
    HAL_UART_Receive_IT(huart, (uint8_t*)msg, TIM2_MSG_LEN);
 8001448:	2304      	movs	r3, #4
 800144a:	b29b      	uxth	r3, r3
 800144c:	461a      	mov	r2, r3
 800144e:	4906      	ldr	r1, [pc, #24]	; (8001468 <HAL_UART_RxCpltCallback+0x70>)
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f002 fd97 	bl	8003f84 <HAL_UART_Receive_IT>
  }
}
 8001456:	bf00      	nop
 8001458:	3718      	adds	r7, #24
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
 800145e:	bf00      	nop
 8001460:	20000260 	.word	0x20000260
 8001464:	080092c0 	.word	0x080092c0
 8001468:	20000008 	.word	0x20000008
 800146c:	20000214 	.word	0x20000214

08001470 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_Btn_Pin)
 800147a:	88fb      	ldrh	r3, [r7, #6]
 800147c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001480:	d110      	bne.n	80014a4 <HAL_GPIO_EXTI_Callback+0x34>
  {
    LED_GPIO_On(&hld1);
 8001482:	480a      	ldr	r0, [pc, #40]	; (80014ac <HAL_GPIO_EXTI_Callback+0x3c>)
 8001484:	f7ff fdd8 	bl	8001038 <LED_GPIO_On>
    LD1_State = LED_GPIO_Read(&hld1);
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <HAL_GPIO_EXTI_Callback+0x3c>)
 800148a:	f7ff fe0c 	bl	80010a6 <LED_GPIO_Read>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	bf14      	ite	ne
 8001494:	2301      	movne	r3, #1
 8001496:	2300      	moveq	r3, #0
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <HAL_GPIO_EXTI_Callback+0x40>)
 800149c:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_Start_IT(&htim2);
 800149e:	4805      	ldr	r0, [pc, #20]	; (80014b4 <HAL_GPIO_EXTI_Callback+0x44>)
 80014a0:	f002 f884 	bl	80035ac <HAL_TIM_Base_Start_IT>
  }
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000000 	.word	0x20000000
 80014b0:	2000020c 	.word	0x2000020c
 80014b4:	20000214 	.word	0x20000214

080014b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014bc:	f000 fb0d 	bl	8001ada <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014c0:	f000 f81a 	bl	80014f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014c4:	f7ff fe06 	bl	80010d4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80014c8:	f000 fa46 	bl	8001958 <MX_USART3_UART_Init>
  MX_TIM2_Init();
 80014cc:	f000 f9d2 	bl	8001874 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  __HAL_TIM_CLEAR_FLAG(&htim2, TIM_SR_UIF);
 80014d0:	4b06      	ldr	r3, [pc, #24]	; (80014ec <main+0x34>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f06f 0201 	mvn.w	r2, #1
 80014d8:	611a      	str	r2, [r3, #16]
  HAL_UART_Receive_IT(&huart3, (uint8_t*)msg, TIM2_MSG_LEN);
 80014da:	2304      	movs	r3, #4
 80014dc:	b29b      	uxth	r3, r3
 80014de:	461a      	mov	r2, r3
 80014e0:	4903      	ldr	r1, [pc, #12]	; (80014f0 <main+0x38>)
 80014e2:	4804      	ldr	r0, [pc, #16]	; (80014f4 <main+0x3c>)
 80014e4:	f002 fd4e 	bl	8003f84 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014e8:	e7fe      	b.n	80014e8 <main+0x30>
 80014ea:	bf00      	nop
 80014ec:	20000214 	.word	0x20000214
 80014f0:	20000008 	.word	0x20000008
 80014f4:	20000260 	.word	0x20000260

080014f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b094      	sub	sp, #80	; 0x50
 80014fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fe:	f107 0320 	add.w	r3, r7, #32
 8001502:	2230      	movs	r2, #48	; 0x30
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f003 ff70 	bl	80053ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	2200      	movs	r2, #0
 8001512:	601a      	str	r2, [r3, #0]
 8001514:	605a      	str	r2, [r3, #4]
 8001516:	609a      	str	r2, [r3, #8]
 8001518:	60da      	str	r2, [r3, #12]
 800151a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800151c:	f000 fed4 	bl	80022c8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001520:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <SystemClock_Config+0xd4>)
 8001522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001524:	4a29      	ldr	r2, [pc, #164]	; (80015cc <SystemClock_Config+0xd4>)
 8001526:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800152a:	6413      	str	r3, [r2, #64]	; 0x40
 800152c:	4b27      	ldr	r3, [pc, #156]	; (80015cc <SystemClock_Config+0xd4>)
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001538:	4b25      	ldr	r3, [pc, #148]	; (80015d0 <SystemClock_Config+0xd8>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a24      	ldr	r2, [pc, #144]	; (80015d0 <SystemClock_Config+0xd8>)
 800153e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001542:	6013      	str	r3, [r2, #0]
 8001544:	4b22      	ldr	r3, [pc, #136]	; (80015d0 <SystemClock_Config+0xd8>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001550:	2301      	movs	r3, #1
 8001552:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001554:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001558:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800155a:	2302      	movs	r3, #2
 800155c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800155e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001562:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001564:	2304      	movs	r3, #4
 8001566:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001568:	23d8      	movs	r3, #216	; 0xd8
 800156a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800156c:	2302      	movs	r3, #2
 800156e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001570:	2303      	movs	r3, #3
 8001572:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001574:	f107 0320 	add.w	r3, r7, #32
 8001578:	4618      	mov	r0, r3
 800157a:	f000 ff05 	bl	8002388 <HAL_RCC_OscConfig>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001584:	f000 f826 	bl	80015d4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001588:	f000 feae 	bl	80022e8 <HAL_PWREx_EnableOverDrive>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001592:	f000 f81f 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80015a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80015ae:	f107 030c 	add.w	r3, r7, #12
 80015b2:	2107      	movs	r1, #7
 80015b4:	4618      	mov	r0, r3
 80015b6:	f001 f98b 	bl	80028d0 <HAL_RCC_ClockConfig>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80015c0:	f000 f808 	bl	80015d4 <Error_Handler>
  }
}
 80015c4:	bf00      	nop
 80015c6:	3750      	adds	r7, #80	; 0x50
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	40023800 	.word	0x40023800
 80015d0:	40007000 	.word	0x40007000

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	e7fe      	b.n	80015dc <Error_Handler+0x8>
	...

080015e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015e6:	4b0f      	ldr	r3, [pc, #60]	; (8001624 <HAL_MspInit+0x44>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a0e      	ldr	r2, [pc, #56]	; (8001624 <HAL_MspInit+0x44>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_MspInit+0x44>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	607b      	str	r3, [r7, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015fe:	4b09      	ldr	r3, [pc, #36]	; (8001624 <HAL_MspInit+0x44>)
 8001600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001602:	4a08      	ldr	r2, [pc, #32]	; (8001624 <HAL_MspInit+0x44>)
 8001604:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001608:	6453      	str	r3, [r2, #68]	; 0x44
 800160a:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_MspInit+0x44>)
 800160c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800160e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40023800 	.word	0x40023800

08001628 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800162c:	e7fe      	b.n	800162c <NMI_Handler+0x4>

0800162e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001632:	e7fe      	b.n	8001632 <HardFault_Handler+0x4>

08001634 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001638:	e7fe      	b.n	8001638 <MemManage_Handler+0x4>

0800163a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800163a:	b480      	push	{r7}
 800163c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800163e:	e7fe      	b.n	800163e <BusFault_Handler+0x4>

08001640 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001644:	e7fe      	b.n	8001644 <UsageFault_Handler+0x4>

08001646 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001646:	b480      	push	{r7}
 8001648:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800164a:	bf00      	nop
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001674:	f000 fa6e 	bl	8001b54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001678:	bf00      	nop
 800167a:	bd80      	pop	{r7, pc}

0800167c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(LAMP_SYNC_Pin);
 8001680:	2020      	movs	r0, #32
 8001682:	f000 fe09 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001686:	bf00      	nop
 8001688:	bd80      	pop	{r7, pc}
	...

0800168c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <TIM2_IRQHandler+0x10>)
 8001692:	f002 f832 	bl	80036fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000214 	.word	0x20000214

080016a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <USART3_IRQHandler+0x10>)
 80016a6:	f002 fcb1 	bl	800400c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000260 	.word	0x20000260

080016b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 80016b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016bc:	f000 fdec 	bl	8002298 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
	return 1;
 80016c8:	2301      	movs	r3, #1
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_kill>:

int _kill(int pid, int sig)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80016de:	f003 fe5b 	bl	8005398 <__errno>
 80016e2:	4603      	mov	r3, r0
 80016e4:	2216      	movs	r2, #22
 80016e6:	601a      	str	r2, [r3, #0]
	return -1;
 80016e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ec:	4618      	mov	r0, r3
 80016ee:	3708      	adds	r7, #8
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <_exit>:

void _exit (int status)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001700:	6878      	ldr	r0, [r7, #4]
 8001702:	f7ff ffe7 	bl	80016d4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001706:	e7fe      	b.n	8001706 <_exit+0x12>

08001708 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b086      	sub	sp, #24
 800170c:	af00      	add	r7, sp, #0
 800170e:	60f8      	str	r0, [r7, #12]
 8001710:	60b9      	str	r1, [r7, #8]
 8001712:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001714:	2300      	movs	r3, #0
 8001716:	617b      	str	r3, [r7, #20]
 8001718:	e00a      	b.n	8001730 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800171a:	f3af 8000 	nop.w
 800171e:	4601      	mov	r1, r0
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	1c5a      	adds	r2, r3, #1
 8001724:	60ba      	str	r2, [r7, #8]
 8001726:	b2ca      	uxtb	r2, r1
 8001728:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	3301      	adds	r3, #1
 800172e:	617b      	str	r3, [r7, #20]
 8001730:	697a      	ldr	r2, [r7, #20]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	429a      	cmp	r2, r3
 8001736:	dbf0      	blt.n	800171a <_read+0x12>
	}

return len;
 8001738:	687b      	ldr	r3, [r7, #4]
}
 800173a:	4618      	mov	r0, r3
 800173c:	3718      	adds	r7, #24
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}

08001742 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b086      	sub	sp, #24
 8001746:	af00      	add	r7, sp, #0
 8001748:	60f8      	str	r0, [r7, #12]
 800174a:	60b9      	str	r1, [r7, #8]
 800174c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
 8001752:	e009      	b.n	8001768 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	1c5a      	adds	r2, r3, #1
 8001758:	60ba      	str	r2, [r7, #8]
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	4618      	mov	r0, r3
 800175e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf1      	blt.n	8001754 <_write+0x12>
	}
	return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f003 fdc0 	bl	8005398 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20050000 	.word	0x20050000
 8001844:	00000400 	.word	0x00000400
 8001848:	20000210 	.word	0x20000210
 800184c:	20000300 	.word	0x20000300

08001850 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b088      	sub	sp, #32
 8001878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800187a:	f107 0310 	add.w	r3, r7, #16
 800187e:	2200      	movs	r2, #0
 8001880:	601a      	str	r2, [r3, #0]
 8001882:	605a      	str	r2, [r3, #4]
 8001884:	609a      	str	r2, [r3, #8]
 8001886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001888:	1d3b      	adds	r3, r7, #4
 800188a:	2200      	movs	r2, #0
 800188c:	601a      	str	r2, [r3, #0]
 800188e:	605a      	str	r2, [r3, #4]
 8001890:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001892:	4b1e      	ldr	r3, [pc, #120]	; (800190c <MX_TIM2_Init+0x98>)
 8001894:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001898:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800189a:	4b1c      	ldr	r3, [pc, #112]	; (800190c <MX_TIM2_Init+0x98>)
 800189c:	226b      	movs	r2, #107	; 0x6b
 800189e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018a0:	4b1a      	ldr	r3, [pc, #104]	; (800190c <MX_TIM2_Init+0x98>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 80018a6:	4b19      	ldr	r3, [pc, #100]	; (800190c <MX_TIM2_Init+0x98>)
 80018a8:	f242 720f 	movw	r2, #9999	; 0x270f
 80018ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018ae:	4b17      	ldr	r3, [pc, #92]	; (800190c <MX_TIM2_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018b4:	4b15      	ldr	r3, [pc, #84]	; (800190c <MX_TIM2_Init+0x98>)
 80018b6:	2200      	movs	r2, #0
 80018b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018ba:	4814      	ldr	r0, [pc, #80]	; (800190c <MX_TIM2_Init+0x98>)
 80018bc:	f001 fe1e 	bl	80034fc <HAL_TIM_Base_Init>
 80018c0:	4603      	mov	r3, r0
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80018c6:	f7ff fe85 	bl	80015d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018d0:	f107 0310 	add.w	r3, r7, #16
 80018d4:	4619      	mov	r1, r3
 80018d6:	480d      	ldr	r0, [pc, #52]	; (800190c <MX_TIM2_Init+0x98>)
 80018d8:	f002 f82e 	bl	8003938 <HAL_TIM_ConfigClockSource>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80018e2:	f7ff fe77 	bl	80015d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018ea:	2300      	movs	r3, #0
 80018ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4806      	ldr	r0, [pc, #24]	; (800190c <MX_TIM2_Init+0x98>)
 80018f4:	f002 fa4c 	bl	8003d90 <HAL_TIMEx_MasterConfigSynchronization>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80018fe:	f7ff fe69 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001902:	bf00      	nop
 8001904:	3720      	adds	r7, #32
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000214 	.word	0x20000214

08001910 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b084      	sub	sp, #16
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001920:	d113      	bne.n	800194a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001922:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <HAL_TIM_Base_MspInit+0x44>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	4a0b      	ldr	r2, [pc, #44]	; (8001954 <HAL_TIM_Base_MspInit+0x44>)
 8001928:	f043 0301 	orr.w	r3, r3, #1
 800192c:	6413      	str	r3, [r2, #64]	; 0x40
 800192e:	4b09      	ldr	r3, [pc, #36]	; (8001954 <HAL_TIM_Base_MspInit+0x44>)
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2100      	movs	r1, #0
 800193e:	201c      	movs	r0, #28
 8001940:	f000 fa03 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001944:	201c      	movs	r0, #28
 8001946:	f000 fa1c 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800194a:	bf00      	nop
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	40023800 	.word	0x40023800

08001958 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800195c:	4b14      	ldr	r3, [pc, #80]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800195e:	4a15      	ldr	r2, [pc, #84]	; (80019b4 <MX_USART3_UART_Init+0x5c>)
 8001960:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001962:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001964:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001968:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800196a:	4b11      	ldr	r3, [pc, #68]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800196c:	2200      	movs	r2, #0
 800196e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001970:	4b0f      	ldr	r3, [pc, #60]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001972:	2200      	movs	r2, #0
 8001974:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800197c:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800197e:	220c      	movs	r2, #12
 8001980:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001984:	2200      	movs	r2, #0
 8001986:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800198a:	2200      	movs	r2, #0
 800198c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001990:	2200      	movs	r2, #0
 8001992:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 8001996:	2200      	movs	r2, #0
 8001998:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_USART3_UART_Init+0x58>)
 800199c:	f002 faa4 	bl	8003ee8 <HAL_UART_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80019a6:	f7ff fe15 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000260 	.word	0x20000260
 80019b4:	40004800 	.word	0x40004800

080019b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b0aa      	sub	sp, #168	; 0xa8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019c0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]
 80019c8:	605a      	str	r2, [r3, #4]
 80019ca:	609a      	str	r2, [r3, #8]
 80019cc:	60da      	str	r2, [r3, #12]
 80019ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019d0:	f107 0310 	add.w	r3, r7, #16
 80019d4:	2284      	movs	r2, #132	; 0x84
 80019d6:	2100      	movs	r1, #0
 80019d8:	4618      	mov	r0, r3
 80019da:	f003 fd07 	bl	80053ec <memset>
  if(uartHandle->Instance==USART3)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a26      	ldr	r2, [pc, #152]	; (8001a7c <HAL_UART_MspInit+0xc4>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d144      	bne.n	8001a72 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80019e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019ec:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_SYSCLK;
 80019ee:	2310      	movs	r3, #16
 80019f0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019f2:	f107 0310 	add.w	r3, r7, #16
 80019f6:	4618      	mov	r0, r3
 80019f8:	f001 f990 	bl	8002d1c <HAL_RCCEx_PeriphCLKConfig>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001a02:	f7ff fde7 	bl	80015d4 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a06:	4b1e      	ldr	r3, [pc, #120]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a1d      	ldr	r2, [pc, #116]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b1b      	ldr	r3, [pc, #108]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1a:	60fb      	str	r3, [r7, #12]
 8001a1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a1e:	4b18      	ldr	r3, [pc, #96]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	4a17      	ldr	r2, [pc, #92]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a24:	f043 0308 	orr.w	r3, r3, #8
 8001a28:	6313      	str	r3, [r2, #48]	; 0x30
 8001a2a:	4b15      	ldr	r3, [pc, #84]	; (8001a80 <HAL_UART_MspInit+0xc8>)
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2e:	f003 0308 	and.w	r3, r3, #8
 8001a32:	60bb      	str	r3, [r7, #8]
 8001a34:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001a36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a3a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3e:	2302      	movs	r3, #2
 8001a40:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a50:	2307      	movs	r3, #7
 8001a52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a56:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4809      	ldr	r0, [pc, #36]	; (8001a84 <HAL_UART_MspInit+0xcc>)
 8001a5e:	f000 fa3d 	bl	8001edc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2027      	movs	r0, #39	; 0x27
 8001a68:	f000 f96f 	bl	8001d4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a6c:	2027      	movs	r0, #39	; 0x27
 8001a6e:	f000 f988 	bl	8001d82 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001a72:	bf00      	nop
 8001a74:	37a8      	adds	r7, #168	; 0xa8
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40004800 	.word	0x40004800
 8001a80:	40023800 	.word	0x40023800
 8001a84:	40020c00 	.word	0x40020c00

08001a88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001a88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ac0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001a8c:	480d      	ldr	r0, [pc, #52]	; (8001ac4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001a8e:	490e      	ldr	r1, [pc, #56]	; (8001ac8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001a90:	4a0e      	ldr	r2, [pc, #56]	; (8001acc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a94:	e002      	b.n	8001a9c <LoopCopyDataInit>

08001a96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a9a:	3304      	adds	r3, #4

08001a9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aa0:	d3f9      	bcc.n	8001a96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aa2:	4a0b      	ldr	r2, [pc, #44]	; (8001ad0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001aa4:	4c0b      	ldr	r4, [pc, #44]	; (8001ad4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001aa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa8:	e001      	b.n	8001aae <LoopFillZerobss>

08001aaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aac:	3204      	adds	r2, #4

08001aae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ab0:	d3fb      	bcc.n	8001aaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ab2:	f7ff fecd 	bl	8001850 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ab6:	f003 fc75 	bl	80053a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001aba:	f7ff fcfd 	bl	80014b8 <main>
  bx  lr    
 8001abe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ac0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ac4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8001acc:	08009750 	.word	0x08009750
  ldr r2, =_sbss
 8001ad0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8001ad4:	200002fc 	.word	0x200002fc

08001ad8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ad8:	e7fe      	b.n	8001ad8 <ADC_IRQHandler>

08001ada <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ade:	2003      	movs	r0, #3
 8001ae0:	f000 f928 	bl	8001d34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ae4:	2000      	movs	r0, #0
 8001ae6:	f000 f805 	bl	8001af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001aea:	f7ff fd79 	bl	80015e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001aee:	2300      	movs	r3, #0
}
 8001af0:	4618      	mov	r0, r3
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001afc:	4b12      	ldr	r3, [pc, #72]	; (8001b48 <HAL_InitTick+0x54>)
 8001afe:	681a      	ldr	r2, [r3, #0]
 8001b00:	4b12      	ldr	r3, [pc, #72]	; (8001b4c <HAL_InitTick+0x58>)
 8001b02:	781b      	ldrb	r3, [r3, #0]
 8001b04:	4619      	mov	r1, r3
 8001b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f943 	bl	8001d9e <HAL_SYSTICK_Config>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00e      	b.n	8001b40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2b0f      	cmp	r3, #15
 8001b26:	d80a      	bhi.n	8001b3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b28:	2200      	movs	r2, #0
 8001b2a:	6879      	ldr	r1, [r7, #4]
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b30:	f000 f90b 	bl	8001d4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b34:	4a06      	ldr	r2, [pc, #24]	; (8001b50 <HAL_InitTick+0x5c>)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	e000      	b.n	8001b40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000010 	.word	0x20000010
 8001b4c:	20000018 	.word	0x20000018
 8001b50:	20000014 	.word	0x20000014

08001b54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b58:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_IncTick+0x20>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_IncTick+0x24>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4413      	add	r3, r2
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <HAL_IncTick+0x24>)
 8001b66:	6013      	str	r3, [r2, #0]
}
 8001b68:	bf00      	nop
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr
 8001b72:	bf00      	nop
 8001b74:	20000018 	.word	0x20000018
 8001b78:	200002e8 	.word	0x200002e8

08001b7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  return uwTick;
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_GetTick+0x14>)
 8001b82:	681b      	ldr	r3, [r3, #0]
}
 8001b84:	4618      	mov	r0, r3
 8001b86:	46bd      	mov	sp, r7
 8001b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8c:	4770      	bx	lr
 8001b8e:	bf00      	nop
 8001b90:	200002e8 	.word	0x200002e8

08001b94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f003 0307 	and.w	r3, r3, #7
 8001ba2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ba4:	4b0b      	ldr	r3, [pc, #44]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <__NVIC_SetPriorityGrouping+0x44>)
 8001bbe:	4313      	orrs	r3, r2
 8001bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bc2:	4a04      	ldr	r2, [pc, #16]	; (8001bd4 <__NVIC_SetPriorityGrouping+0x40>)
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	60d3      	str	r3, [r2, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	e000ed00 	.word	0xe000ed00
 8001bd8:	05fa0000 	.word	0x05fa0000

08001bdc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001be0:	4b04      	ldr	r3, [pc, #16]	; (8001bf4 <__NVIC_GetPriorityGrouping+0x18>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	f003 0307 	and.w	r3, r3, #7
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	e000ed00 	.word	0xe000ed00

08001bf8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	db0b      	blt.n	8001c22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c0a:	79fb      	ldrb	r3, [r7, #7]
 8001c0c:	f003 021f 	and.w	r2, r3, #31
 8001c10:	4907      	ldr	r1, [pc, #28]	; (8001c30 <__NVIC_EnableIRQ+0x38>)
 8001c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c16:	095b      	lsrs	r3, r3, #5
 8001c18:	2001      	movs	r0, #1
 8001c1a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	e000e100 	.word	0xe000e100

08001c34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	6039      	str	r1, [r7, #0]
 8001c3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	db0a      	blt.n	8001c5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	b2da      	uxtb	r2, r3
 8001c4c:	490c      	ldr	r1, [pc, #48]	; (8001c80 <__NVIC_SetPriority+0x4c>)
 8001c4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c52:	0112      	lsls	r2, r2, #4
 8001c54:	b2d2      	uxtb	r2, r2
 8001c56:	440b      	add	r3, r1
 8001c58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c5c:	e00a      	b.n	8001c74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	b2da      	uxtb	r2, r3
 8001c62:	4908      	ldr	r1, [pc, #32]	; (8001c84 <__NVIC_SetPriority+0x50>)
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	f003 030f 	and.w	r3, r3, #15
 8001c6a:	3b04      	subs	r3, #4
 8001c6c:	0112      	lsls	r2, r2, #4
 8001c6e:	b2d2      	uxtb	r2, r2
 8001c70:	440b      	add	r3, r1
 8001c72:	761a      	strb	r2, [r3, #24]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr
 8001c80:	e000e100 	.word	0xe000e100
 8001c84:	e000ed00 	.word	0xe000ed00

08001c88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b089      	sub	sp, #36	; 0x24
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	60f8      	str	r0, [r7, #12]
 8001c90:	60b9      	str	r1, [r7, #8]
 8001c92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 0307 	and.w	r3, r3, #7
 8001c9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	bf28      	it	cs
 8001ca6:	2304      	movcs	r3, #4
 8001ca8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	3304      	adds	r3, #4
 8001cae:	2b06      	cmp	r3, #6
 8001cb0:	d902      	bls.n	8001cb8 <NVIC_EncodePriority+0x30>
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	3b03      	subs	r3, #3
 8001cb6:	e000      	b.n	8001cba <NVIC_EncodePriority+0x32>
 8001cb8:	2300      	movs	r3, #0
 8001cba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cbc:	f04f 32ff 	mov.w	r2, #4294967295
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	43da      	mvns	r2, r3
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	401a      	ands	r2, r3
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cd0:	f04f 31ff 	mov.w	r1, #4294967295
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001cda:	43d9      	mvns	r1, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce0:	4313      	orrs	r3, r2
         );
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3724      	adds	r7, #36	; 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
	...

08001cf0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b082      	sub	sp, #8
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	3b01      	subs	r3, #1
 8001cfc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d00:	d301      	bcc.n	8001d06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d02:	2301      	movs	r3, #1
 8001d04:	e00f      	b.n	8001d26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d06:	4a0a      	ldr	r2, [pc, #40]	; (8001d30 <SysTick_Config+0x40>)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3b01      	subs	r3, #1
 8001d0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d0e:	210f      	movs	r1, #15
 8001d10:	f04f 30ff 	mov.w	r0, #4294967295
 8001d14:	f7ff ff8e 	bl	8001c34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d18:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <SysTick_Config+0x40>)
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d1e:	4b04      	ldr	r3, [pc, #16]	; (8001d30 <SysTick_Config+0x40>)
 8001d20:	2207      	movs	r2, #7
 8001d22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d24:	2300      	movs	r3, #0
}
 8001d26:	4618      	mov	r0, r3
 8001d28:	3708      	adds	r7, #8
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	e000e010 	.word	0xe000e010

08001d34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b082      	sub	sp, #8
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff29 	bl	8001b94 <__NVIC_SetPriorityGrouping>
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd80      	pop	{r7, pc}

08001d4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b086      	sub	sp, #24
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	4603      	mov	r3, r0
 8001d52:	60b9      	str	r1, [r7, #8]
 8001d54:	607a      	str	r2, [r7, #4]
 8001d56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d58:	2300      	movs	r3, #0
 8001d5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d5c:	f7ff ff3e 	bl	8001bdc <__NVIC_GetPriorityGrouping>
 8001d60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	68b9      	ldr	r1, [r7, #8]
 8001d66:	6978      	ldr	r0, [r7, #20]
 8001d68:	f7ff ff8e 	bl	8001c88 <NVIC_EncodePriority>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff5d 	bl	8001c34 <__NVIC_SetPriority>
}
 8001d7a:	bf00      	nop
 8001d7c:	3718      	adds	r7, #24
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}

08001d82 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d82:	b580      	push	{r7, lr}
 8001d84:	b082      	sub	sp, #8
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	4603      	mov	r3, r0
 8001d8a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ff31 	bl	8001bf8 <__NVIC_EnableIRQ>
}
 8001d96:	bf00      	nop
 8001d98:	3708      	adds	r7, #8
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}

08001d9e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d9e:	b580      	push	{r7, lr}
 8001da0:	b082      	sub	sp, #8
 8001da2:	af00      	add	r7, sp, #0
 8001da4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f7ff ffa2 	bl	8001cf0 <SysTick_Config>
 8001dac:	4603      	mov	r3, r0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3708      	adds	r7, #8
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}

08001db6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b084      	sub	sp, #16
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001dc4:	f7ff feda 	bl	8001b7c <HAL_GetTick>
 8001dc8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	2b02      	cmp	r3, #2
 8001dd4:	d008      	beq.n	8001de8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2280      	movs	r2, #128	; 0x80
 8001dda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2200      	movs	r2, #0
 8001de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e052      	b.n	8001e8e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	f022 0216 	bic.w	r2, r2, #22
 8001df6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	695a      	ldr	r2, [r3, #20]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e06:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d103      	bne.n	8001e18 <HAL_DMA_Abort+0x62>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d007      	beq.n	8001e28 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f022 0208 	bic.w	r2, r2, #8
 8001e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f022 0201 	bic.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e38:	e013      	b.n	8001e62 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e3a:	f7ff fe9f 	bl	8001b7c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d90c      	bls.n	8001e62 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2203      	movs	r2, #3
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001e5e:	2303      	movs	r3, #3
 8001e60:	e015      	b.n	8001e8e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0301 	and.w	r3, r3, #1
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1e4      	bne.n	8001e3a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e74:	223f      	movs	r2, #63	; 0x3f
 8001e76:	409a      	lsls	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001e8c:	2300      	movs	r3, #0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3710      	adds	r7, #16
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e96:	b480      	push	{r7}
 8001e98:	b083      	sub	sp, #12
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d004      	beq.n	8001eb4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2280      	movs	r2, #128	; 0x80
 8001eae:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e00c      	b.n	8001ece <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2205      	movs	r2, #5
 8001eb8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f022 0201 	bic.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	370c      	adds	r7, #12
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b089      	sub	sp, #36	; 0x24
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001eea:	2300      	movs	r3, #0
 8001eec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	61fb      	str	r3, [r7, #28]
 8001efa:	e175      	b.n	80021e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001efc:	2201      	movs	r2, #1
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	fa02 f303 	lsl.w	r3, r2, r3
 8001f04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f10:	693a      	ldr	r2, [r7, #16]
 8001f12:	697b      	ldr	r3, [r7, #20]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	f040 8164 	bne.w	80021e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	f003 0303 	and.w	r3, r3, #3
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d005      	beq.n	8001f32 <HAL_GPIO_Init+0x56>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d130      	bne.n	8001f94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	689b      	ldr	r3, [r3, #8]
 8001f36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f38:	69fb      	ldr	r3, [r7, #28]
 8001f3a:	005b      	lsls	r3, r3, #1
 8001f3c:	2203      	movs	r2, #3
 8001f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4013      	ands	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	68da      	ldr	r2, [r3, #12]
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fa02 f303 	lsl.w	r3, r2, r3
 8001f56:	69ba      	ldr	r2, [r7, #24]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	69ba      	ldr	r2, [r7, #24]
 8001f60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	43db      	mvns	r3, r3
 8001f72:	69ba      	ldr	r2, [r7, #24]
 8001f74:	4013      	ands	r3, r2
 8001f76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	091b      	lsrs	r3, r3, #4
 8001f7e:	f003 0201 	and.w	r2, r3, #1
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	fa02 f303 	lsl.w	r3, r2, r3
 8001f88:	69ba      	ldr	r2, [r7, #24]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f003 0303 	and.w	r3, r3, #3
 8001f9c:	2b03      	cmp	r3, #3
 8001f9e:	d017      	beq.n	8001fd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	005b      	lsls	r3, r3, #1
 8001faa:	2203      	movs	r2, #3
 8001fac:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	69ba      	ldr	r2, [r7, #24]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	689a      	ldr	r2, [r3, #8]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	69ba      	ldr	r2, [r7, #24]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fd0:	683b      	ldr	r3, [r7, #0]
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	f003 0303 	and.w	r3, r3, #3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d123      	bne.n	8002024 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fdc:	69fb      	ldr	r3, [r7, #28]
 8001fde:	08da      	lsrs	r2, r3, #3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3208      	adds	r2, #8
 8001fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fe8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f003 0307 	and.w	r3, r3, #7
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	220f      	movs	r2, #15
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	f003 0307 	and.w	r3, r3, #7
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	08da      	lsrs	r2, r3, #3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	3208      	adds	r2, #8
 800201e:	69b9      	ldr	r1, [r7, #24]
 8002020:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	005b      	lsls	r3, r3, #1
 800202e:	2203      	movs	r2, #3
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	4013      	ands	r3, r2
 800203a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0203 	and.w	r2, r3, #3
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002060:	2b00      	cmp	r3, #0
 8002062:	f000 80be 	beq.w	80021e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002066:	4b66      	ldr	r3, [pc, #408]	; (8002200 <HAL_GPIO_Init+0x324>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a65      	ldr	r2, [pc, #404]	; (8002200 <HAL_GPIO_Init+0x324>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b63      	ldr	r3, [pc, #396]	; (8002200 <HAL_GPIO_Init+0x324>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800207e:	4a61      	ldr	r2, [pc, #388]	; (8002204 <HAL_GPIO_Init+0x328>)
 8002080:	69fb      	ldr	r3, [r7, #28]
 8002082:	089b      	lsrs	r3, r3, #2
 8002084:	3302      	adds	r3, #2
 8002086:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0303 	and.w	r3, r3, #3
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	220f      	movs	r2, #15
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	4a58      	ldr	r2, [pc, #352]	; (8002208 <HAL_GPIO_Init+0x32c>)
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d037      	beq.n	800211a <HAL_GPIO_Init+0x23e>
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	4a57      	ldr	r2, [pc, #348]	; (800220c <HAL_GPIO_Init+0x330>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d031      	beq.n	8002116 <HAL_GPIO_Init+0x23a>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	4a56      	ldr	r2, [pc, #344]	; (8002210 <HAL_GPIO_Init+0x334>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d02b      	beq.n	8002112 <HAL_GPIO_Init+0x236>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	4a55      	ldr	r2, [pc, #340]	; (8002214 <HAL_GPIO_Init+0x338>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d025      	beq.n	800210e <HAL_GPIO_Init+0x232>
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4a54      	ldr	r2, [pc, #336]	; (8002218 <HAL_GPIO_Init+0x33c>)
 80020c6:	4293      	cmp	r3, r2
 80020c8:	d01f      	beq.n	800210a <HAL_GPIO_Init+0x22e>
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4a53      	ldr	r2, [pc, #332]	; (800221c <HAL_GPIO_Init+0x340>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d019      	beq.n	8002106 <HAL_GPIO_Init+0x22a>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	4a52      	ldr	r2, [pc, #328]	; (8002220 <HAL_GPIO_Init+0x344>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d013      	beq.n	8002102 <HAL_GPIO_Init+0x226>
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a51      	ldr	r2, [pc, #324]	; (8002224 <HAL_GPIO_Init+0x348>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d00d      	beq.n	80020fe <HAL_GPIO_Init+0x222>
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	4a50      	ldr	r2, [pc, #320]	; (8002228 <HAL_GPIO_Init+0x34c>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d007      	beq.n	80020fa <HAL_GPIO_Init+0x21e>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	4a4f      	ldr	r2, [pc, #316]	; (800222c <HAL_GPIO_Init+0x350>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d101      	bne.n	80020f6 <HAL_GPIO_Init+0x21a>
 80020f2:	2309      	movs	r3, #9
 80020f4:	e012      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020f6:	230a      	movs	r3, #10
 80020f8:	e010      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020fa:	2308      	movs	r3, #8
 80020fc:	e00e      	b.n	800211c <HAL_GPIO_Init+0x240>
 80020fe:	2307      	movs	r3, #7
 8002100:	e00c      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002102:	2306      	movs	r3, #6
 8002104:	e00a      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002106:	2305      	movs	r3, #5
 8002108:	e008      	b.n	800211c <HAL_GPIO_Init+0x240>
 800210a:	2304      	movs	r3, #4
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x240>
 800210e:	2303      	movs	r3, #3
 8002110:	e004      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002112:	2302      	movs	r3, #2
 8002114:	e002      	b.n	800211c <HAL_GPIO_Init+0x240>
 8002116:	2301      	movs	r3, #1
 8002118:	e000      	b.n	800211c <HAL_GPIO_Init+0x240>
 800211a:	2300      	movs	r3, #0
 800211c:	69fa      	ldr	r2, [r7, #28]
 800211e:	f002 0203 	and.w	r2, r2, #3
 8002122:	0092      	lsls	r2, r2, #2
 8002124:	4093      	lsls	r3, r2
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4313      	orrs	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800212c:	4935      	ldr	r1, [pc, #212]	; (8002204 <HAL_GPIO_Init+0x328>)
 800212e:	69fb      	ldr	r3, [r7, #28]
 8002130:	089b      	lsrs	r3, r3, #2
 8002132:	3302      	adds	r3, #2
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800213a:	4b3d      	ldr	r3, [pc, #244]	; (8002230 <HAL_GPIO_Init+0x354>)
 800213c:	689b      	ldr	r3, [r3, #8]
 800213e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4313      	orrs	r3, r2
 800215c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800215e:	4a34      	ldr	r2, [pc, #208]	; (8002230 <HAL_GPIO_Init+0x354>)
 8002160:	69bb      	ldr	r3, [r7, #24]
 8002162:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002164:	4b32      	ldr	r3, [pc, #200]	; (8002230 <HAL_GPIO_Init+0x354>)
 8002166:	68db      	ldr	r3, [r3, #12]
 8002168:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	43db      	mvns	r3, r3
 800216e:	69ba      	ldr	r2, [r7, #24]
 8002170:	4013      	ands	r3, r2
 8002172:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d003      	beq.n	8002188 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	4313      	orrs	r3, r2
 8002186:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002188:	4a29      	ldr	r2, [pc, #164]	; (8002230 <HAL_GPIO_Init+0x354>)
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800218e:	4b28      	ldr	r3, [pc, #160]	; (8002230 <HAL_GPIO_Init+0x354>)
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d003      	beq.n	80021b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80021aa:	69ba      	ldr	r2, [r7, #24]
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	4313      	orrs	r3, r2
 80021b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80021b2:	4a1f      	ldr	r2, [pc, #124]	; (8002230 <HAL_GPIO_Init+0x354>)
 80021b4:	69bb      	ldr	r3, [r7, #24]
 80021b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021b8:	4b1d      	ldr	r3, [pc, #116]	; (8002230 <HAL_GPIO_Init+0x354>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d003      	beq.n	80021dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80021d4:	69ba      	ldr	r2, [r7, #24]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80021dc:	4a14      	ldr	r2, [pc, #80]	; (8002230 <HAL_GPIO_Init+0x354>)
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	3301      	adds	r3, #1
 80021e6:	61fb      	str	r3, [r7, #28]
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	2b0f      	cmp	r3, #15
 80021ec:	f67f ae86 	bls.w	8001efc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80021f0:	bf00      	nop
 80021f2:	bf00      	nop
 80021f4:	3724      	adds	r7, #36	; 0x24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	40023800 	.word	0x40023800
 8002204:	40013800 	.word	0x40013800
 8002208:	40020000 	.word	0x40020000
 800220c:	40020400 	.word	0x40020400
 8002210:	40020800 	.word	0x40020800
 8002214:	40020c00 	.word	0x40020c00
 8002218:	40021000 	.word	0x40021000
 800221c:	40021400 	.word	0x40021400
 8002220:	40021800 	.word	0x40021800
 8002224:	40021c00 	.word	0x40021c00
 8002228:	40022000 	.word	0x40022000
 800222c:	40022400 	.word	0x40022400
 8002230:	40013c00 	.word	0x40013c00

08002234 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002234:	b480      	push	{r7}
 8002236:	b085      	sub	sp, #20
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
 800223c:	460b      	mov	r3, r1
 800223e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	887b      	ldrh	r3, [r7, #2]
 8002246:	4013      	ands	r3, r2
 8002248:	2b00      	cmp	r3, #0
 800224a:	d002      	beq.n	8002252 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800224c:	2301      	movs	r3, #1
 800224e:	73fb      	strb	r3, [r7, #15]
 8002250:	e001      	b.n	8002256 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002252:	2300      	movs	r3, #0
 8002254:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002256:	7bfb      	ldrb	r3, [r7, #15]
}
 8002258:	4618      	mov	r0, r3
 800225a:	3714      	adds	r7, #20
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr

08002264 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002264:	b480      	push	{r7}
 8002266:	b083      	sub	sp, #12
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	460b      	mov	r3, r1
 800226e:	807b      	strh	r3, [r7, #2]
 8002270:	4613      	mov	r3, r2
 8002272:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002274:	787b      	ldrb	r3, [r7, #1]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800227a:	887a      	ldrh	r2, [r7, #2]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002280:	e003      	b.n	800228a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002282:	887b      	ldrh	r3, [r7, #2]
 8002284:	041a      	lsls	r2, r3, #16
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	619a      	str	r2, [r3, #24]
}
 800228a:	bf00      	nop
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
	...

08002298 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b082      	sub	sp, #8
 800229c:	af00      	add	r7, sp, #0
 800229e:	4603      	mov	r3, r0
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	88fb      	ldrh	r3, [r7, #6]
 80022a8:	4013      	ands	r3, r2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d006      	beq.n	80022bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80022ae:	4a05      	ldr	r2, [pc, #20]	; (80022c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f8da 	bl	8001470 <HAL_GPIO_EXTI_Callback>
  }
}
 80022bc:	bf00      	nop
 80022be:	3708      	adds	r7, #8
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40013c00 	.word	0x40013c00

080022c8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022cc:	4b05      	ldr	r3, [pc, #20]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a04      	ldr	r2, [pc, #16]	; (80022e4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80022d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022d6:	6013      	str	r3, [r2, #0]
}
 80022d8:	bf00      	nop
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr
 80022e2:	bf00      	nop
 80022e4:	40007000 	.word	0x40007000

080022e8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80022f2:	4b23      	ldr	r3, [pc, #140]	; (8002380 <HAL_PWREx_EnableOverDrive+0x98>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a22      	ldr	r2, [pc, #136]	; (8002380 <HAL_PWREx_EnableOverDrive+0x98>)
 80022f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b20      	ldr	r3, [pc, #128]	; (8002380 <HAL_PWREx_EnableOverDrive+0x98>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	603b      	str	r3, [r7, #0]
 8002308:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800230a:	4b1e      	ldr	r3, [pc, #120]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a1d      	ldr	r2, [pc, #116]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002316:	f7ff fc31 	bl	8001b7c <HAL_GetTick>
 800231a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800231c:	e009      	b.n	8002332 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800231e:	f7ff fc2d 	bl	8001b7c <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800232c:	d901      	bls.n	8002332 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	e022      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002332:	4b14      	ldr	r3, [pc, #80]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800233a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800233e:	d1ee      	bne.n	800231e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002340:	4b10      	ldr	r3, [pc, #64]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a0f      	ldr	r2, [pc, #60]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002346:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800234a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800234c:	f7ff fc16 	bl	8001b7c <HAL_GetTick>
 8002350:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002352:	e009      	b.n	8002368 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002354:	f7ff fc12 	bl	8001b7c <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002362:	d901      	bls.n	8002368 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e007      	b.n	8002378 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002368:	4b06      	ldr	r3, [pc, #24]	; (8002384 <HAL_PWREx_EnableOverDrive+0x9c>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002370:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002374:	d1ee      	bne.n	8002354 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002376:	2300      	movs	r3, #0
}
 8002378:	4618      	mov	r0, r3
 800237a:	3708      	adds	r7, #8
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40023800 	.word	0x40023800
 8002384:	40007000 	.word	0x40007000

08002388 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b086      	sub	sp, #24
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002390:	2300      	movs	r3, #0
 8002392:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e291      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8087 	beq.w	80024ba <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023ac:	4b96      	ldr	r3, [pc, #600]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b04      	cmp	r3, #4
 80023b6:	d00c      	beq.n	80023d2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023b8:	4b93      	ldr	r3, [pc, #588]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	f003 030c 	and.w	r3, r3, #12
 80023c0:	2b08      	cmp	r3, #8
 80023c2:	d112      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
 80023c4:	4b90      	ldr	r3, [pc, #576]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80023d0:	d10b      	bne.n	80023ea <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023d2:	4b8d      	ldr	r3, [pc, #564]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d06c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x130>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d168      	bne.n	80024b8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e26b      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	685b      	ldr	r3, [r3, #4]
 80023ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023f2:	d106      	bne.n	8002402 <HAL_RCC_OscConfig+0x7a>
 80023f4:	4b84      	ldr	r3, [pc, #528]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a83      	ldr	r2, [pc, #524]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80023fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	e02e      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x9c>
 800240a:	4b7f      	ldr	r3, [pc, #508]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a7e      	ldr	r2, [pc, #504]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002410:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b7c      	ldr	r3, [pc, #496]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a7b      	ldr	r2, [pc, #492]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800241c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e01d      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800242c:	d10c      	bne.n	8002448 <HAL_RCC_OscConfig+0xc0>
 800242e:	4b76      	ldr	r3, [pc, #472]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a75      	ldr	r2, [pc, #468]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002434:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	4b73      	ldr	r3, [pc, #460]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a72      	ldr	r2, [pc, #456]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0xd8>
 8002448:	4b6f      	ldr	r3, [pc, #444]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a6e      	ldr	r2, [pc, #440]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800244e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002452:	6013      	str	r3, [r2, #0]
 8002454:	4b6c      	ldr	r3, [pc, #432]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	4a6b      	ldr	r2, [pc, #428]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800245a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800245e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff fb88 	bl	8001b7c <HAL_GetTick>
 800246c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002470:	f7ff fb84 	bl	8001b7c <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b64      	cmp	r3, #100	; 0x64
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e21f      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002482:	4b61      	ldr	r3, [pc, #388]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d0f0      	beq.n	8002470 <HAL_RCC_OscConfig+0xe8>
 800248e:	e014      	b.n	80024ba <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002490:	f7ff fb74 	bl	8001b7c <HAL_GetTick>
 8002494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002496:	e008      	b.n	80024aa <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002498:	f7ff fb70 	bl	8001b7c <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	2b64      	cmp	r3, #100	; 0x64
 80024a4:	d901      	bls.n	80024aa <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80024a6:	2303      	movs	r3, #3
 80024a8:	e20b      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024aa:	4b57      	ldr	r3, [pc, #348]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1f0      	bne.n	8002498 <HAL_RCC_OscConfig+0x110>
 80024b6:	e000      	b.n	80024ba <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 0302 	and.w	r3, r3, #2
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d069      	beq.n	800259a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024c6:	4b50      	ldr	r3, [pc, #320]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d00b      	beq.n	80024ea <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024d2:	4b4d      	ldr	r3, [pc, #308]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f003 030c 	and.w	r3, r3, #12
 80024da:	2b08      	cmp	r3, #8
 80024dc:	d11c      	bne.n	8002518 <HAL_RCC_OscConfig+0x190>
 80024de:	4b4a      	ldr	r3, [pc, #296]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d116      	bne.n	8002518 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024ea:	4b47      	ldr	r3, [pc, #284]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d005      	beq.n	8002502 <HAL_RCC_OscConfig+0x17a>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d001      	beq.n	8002502 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e1df      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002502:	4b41      	ldr	r3, [pc, #260]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	691b      	ldr	r3, [r3, #16]
 800250e:	00db      	lsls	r3, r3, #3
 8002510:	493d      	ldr	r1, [pc, #244]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002512:	4313      	orrs	r3, r2
 8002514:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002516:	e040      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d023      	beq.n	8002568 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002520:	4b39      	ldr	r3, [pc, #228]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4a38      	ldr	r2, [pc, #224]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7ff fb26 	bl	8001b7c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002534:	f7ff fb22 	bl	8001b7c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e1bd      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002546:	4b30      	ldr	r3, [pc, #192]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 0302 	and.w	r3, r3, #2
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002552:	4b2d      	ldr	r3, [pc, #180]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	00db      	lsls	r3, r3, #3
 8002560:	4929      	ldr	r1, [pc, #164]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002562:	4313      	orrs	r3, r2
 8002564:	600b      	str	r3, [r1, #0]
 8002566:	e018      	b.n	800259a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002568:	4b27      	ldr	r3, [pc, #156]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a26      	ldr	r2, [pc, #152]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 800256e:	f023 0301 	bic.w	r3, r3, #1
 8002572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002574:	f7ff fb02 	bl	8001b7c <HAL_GetTick>
 8002578:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800257a:	e008      	b.n	800258e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800257c:	f7ff fafe 	bl	8001b7c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	2b02      	cmp	r3, #2
 8002588:	d901      	bls.n	800258e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800258a:	2303      	movs	r3, #3
 800258c:	e199      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800258e:	4b1e      	ldr	r3, [pc, #120]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0302 	and.w	r3, r3, #2
 8002596:	2b00      	cmp	r3, #0
 8002598:	d1f0      	bne.n	800257c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0308 	and.w	r3, r3, #8
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d038      	beq.n	8002618 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d019      	beq.n	80025e2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ae:	4b16      	ldr	r3, [pc, #88]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80025b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b2:	4a15      	ldr	r2, [pc, #84]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80025b4:	f043 0301 	orr.w	r3, r3, #1
 80025b8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ba:	f7ff fadf 	bl	8001b7c <HAL_GetTick>
 80025be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025c0:	e008      	b.n	80025d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025c2:	f7ff fadb 	bl	8001b7c <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b02      	cmp	r3, #2
 80025ce:	d901      	bls.n	80025d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80025d0:	2303      	movs	r3, #3
 80025d2:	e176      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d4:	4b0c      	ldr	r3, [pc, #48]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80025d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025d8:	f003 0302 	and.w	r3, r3, #2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d0f0      	beq.n	80025c2 <HAL_RCC_OscConfig+0x23a>
 80025e0:	e01a      	b.n	8002618 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025e2:	4b09      	ldr	r3, [pc, #36]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80025e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025e6:	4a08      	ldr	r2, [pc, #32]	; (8002608 <HAL_RCC_OscConfig+0x280>)
 80025e8:	f023 0301 	bic.w	r3, r3, #1
 80025ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ee:	f7ff fac5 	bl	8001b7c <HAL_GetTick>
 80025f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f4:	e00a      	b.n	800260c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f6:	f7ff fac1 	bl	8001b7c <HAL_GetTick>
 80025fa:	4602      	mov	r2, r0
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	1ad3      	subs	r3, r2, r3
 8002600:	2b02      	cmp	r3, #2
 8002602:	d903      	bls.n	800260c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002604:	2303      	movs	r3, #3
 8002606:	e15c      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
 8002608:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800260c:	4b91      	ldr	r3, [pc, #580]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 800260e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b00      	cmp	r3, #0
 8002616:	d1ee      	bne.n	80025f6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 0304 	and.w	r3, r3, #4
 8002620:	2b00      	cmp	r3, #0
 8002622:	f000 80a4 	beq.w	800276e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002626:	4b8b      	ldr	r3, [pc, #556]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d10d      	bne.n	800264e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002632:	4b88      	ldr	r3, [pc, #544]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	4a87      	ldr	r2, [pc, #540]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800263c:	6413      	str	r3, [r2, #64]	; 0x40
 800263e:	4b85      	ldr	r3, [pc, #532]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002646:	60bb      	str	r3, [r7, #8]
 8002648:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800264a:	2301      	movs	r3, #1
 800264c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800264e:	4b82      	ldr	r3, [pc, #520]	; (8002858 <HAL_RCC_OscConfig+0x4d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002656:	2b00      	cmp	r3, #0
 8002658:	d118      	bne.n	800268c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800265a:	4b7f      	ldr	r3, [pc, #508]	; (8002858 <HAL_RCC_OscConfig+0x4d0>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4a7e      	ldr	r2, [pc, #504]	; (8002858 <HAL_RCC_OscConfig+0x4d0>)
 8002660:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002664:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002666:	f7ff fa89 	bl	8001b7c <HAL_GetTick>
 800266a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800266c:	e008      	b.n	8002680 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800266e:	f7ff fa85 	bl	8001b7c <HAL_GetTick>
 8002672:	4602      	mov	r2, r0
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	1ad3      	subs	r3, r2, r3
 8002678:	2b64      	cmp	r3, #100	; 0x64
 800267a:	d901      	bls.n	8002680 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800267c:	2303      	movs	r3, #3
 800267e:	e120      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002680:	4b75      	ldr	r3, [pc, #468]	; (8002858 <HAL_RCC_OscConfig+0x4d0>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002688:	2b00      	cmp	r3, #0
 800268a:	d0f0      	beq.n	800266e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	689b      	ldr	r3, [r3, #8]
 8002690:	2b01      	cmp	r3, #1
 8002692:	d106      	bne.n	80026a2 <HAL_RCC_OscConfig+0x31a>
 8002694:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002696:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002698:	4a6e      	ldr	r2, [pc, #440]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 800269a:	f043 0301 	orr.w	r3, r3, #1
 800269e:	6713      	str	r3, [r2, #112]	; 0x70
 80026a0:	e02d      	b.n	80026fe <HAL_RCC_OscConfig+0x376>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x33c>
 80026aa:	4b6a      	ldr	r3, [pc, #424]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ae:	4a69      	ldr	r2, [pc, #420]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026b0:	f023 0301 	bic.w	r3, r3, #1
 80026b4:	6713      	str	r3, [r2, #112]	; 0x70
 80026b6:	4b67      	ldr	r3, [pc, #412]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a66      	ldr	r2, [pc, #408]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x376>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x35e>
 80026cc:	4b61      	ldr	r3, [pc, #388]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a60      	ldr	r2, [pc, #384]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b5e      	ldr	r3, [pc, #376]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a5d      	ldr	r2, [pc, #372]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x376>
 80026e6:	4b5b      	ldr	r3, [pc, #364]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a5a      	ldr	r2, [pc, #360]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b58      	ldr	r3, [pc, #352]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a57      	ldr	r2, [pc, #348]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7ff fa39 	bl	8001b7c <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff fa35 	bl	8001b7c <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0ce      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b4b      	ldr	r3, [pc, #300]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x386>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002732:	f7ff fa23 	bl	8001b7c <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7ff fa1f 	bl	8001b7c <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0b8      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b40      	ldr	r3, [pc, #256]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b3c      	ldr	r3, [pc, #240]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a3b      	ldr	r2, [pc, #236]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 80a4 	beq.w	80028c0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002778:	4b36      	ldr	r3, [pc, #216]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d06b      	beq.n	800285c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d149      	bne.n	8002820 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b31      	ldr	r3, [pc, #196]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a30      	ldr	r2, [pc, #192]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002792:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002796:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7ff f9f0 	bl	8001b7c <HAL_GetTick>
 800279c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800279e:	e008      	b.n	80027b2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027a0:	f7ff f9ec 	bl	8001b7c <HAL_GetTick>
 80027a4:	4602      	mov	r2, r0
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	1ad3      	subs	r3, r2, r3
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d901      	bls.n	80027b2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80027ae:	2303      	movs	r3, #3
 80027b0:	e087      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b2:	4b28      	ldr	r3, [pc, #160]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d1f0      	bne.n	80027a0 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	69da      	ldr	r2, [r3, #28]
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a1b      	ldr	r3, [r3, #32]
 80027c6:	431a      	orrs	r2, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027cc:	019b      	lsls	r3, r3, #6
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027d4:	085b      	lsrs	r3, r3, #1
 80027d6:	3b01      	subs	r3, #1
 80027d8:	041b      	lsls	r3, r3, #16
 80027da:	431a      	orrs	r2, r3
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027e0:	061b      	lsls	r3, r3, #24
 80027e2:	4313      	orrs	r3, r2
 80027e4:	4a1b      	ldr	r2, [pc, #108]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80027e6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80027ea:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027ec:	4b19      	ldr	r3, [pc, #100]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a18      	ldr	r2, [pc, #96]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 80027f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027f8:	f7ff f9c0 	bl	8001b7c <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002800:	f7ff f9bc 	bl	8001b7c <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e057      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002812:	4b10      	ldr	r3, [pc, #64]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281a:	2b00      	cmp	r3, #0
 800281c:	d0f0      	beq.n	8002800 <HAL_RCC_OscConfig+0x478>
 800281e:	e04f      	b.n	80028c0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002820:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a0b      	ldr	r2, [pc, #44]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002826:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800282a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7ff f9a6 	bl	8001b7c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002834:	f7ff f9a2 	bl	8001b7c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e03d      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_OscConfig+0x4cc>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x4ac>
 8002852:	e035      	b.n	80028c0 <HAL_RCC_OscConfig+0x538>
 8002854:	40023800 	.word	0x40023800
 8002858:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800285c:	4b1b      	ldr	r3, [pc, #108]	; (80028cc <HAL_RCC_OscConfig+0x544>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	2b01      	cmp	r3, #1
 8002868:	d028      	beq.n	80028bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002874:	429a      	cmp	r2, r3
 8002876:	d121      	bne.n	80028bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	429a      	cmp	r2, r3
 8002884:	d11a      	bne.n	80028bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002886:	68fa      	ldr	r2, [r7, #12]
 8002888:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800288c:	4013      	ands	r3, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002892:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002894:	4293      	cmp	r3, r2
 8002896:	d111      	bne.n	80028bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	3b01      	subs	r3, #1
 80028a6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d107      	bne.n	80028bc <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028b6:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d001      	beq.n	80028c0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e000      	b.n	80028c2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	3718      	adds	r7, #24
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80028da:	2300      	movs	r3, #0
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d101      	bne.n	80028e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e0d0      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028e8:	4b6a      	ldr	r3, [pc, #424]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f003 030f 	and.w	r3, r3, #15
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d910      	bls.n	8002918 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028f6:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f023 020f 	bic.w	r2, r3, #15
 80028fe:	4965      	ldr	r1, [pc, #404]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002906:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 030f 	and.w	r3, r3, #15
 800290e:	683a      	ldr	r2, [r7, #0]
 8002910:	429a      	cmp	r2, r3
 8002912:	d001      	beq.n	8002918 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	e0b8      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0302 	and.w	r3, r3, #2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d020      	beq.n	8002966 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002930:	4b59      	ldr	r3, [pc, #356]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a58      	ldr	r2, [pc, #352]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800293a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f003 0308 	and.w	r3, r3, #8
 8002944:	2b00      	cmp	r3, #0
 8002946:	d005      	beq.n	8002954 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002948:	4b53      	ldr	r3, [pc, #332]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800294a:	689b      	ldr	r3, [r3, #8]
 800294c:	4a52      	ldr	r2, [pc, #328]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800294e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002952:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002954:	4b50      	ldr	r3, [pc, #320]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	494d      	ldr	r1, [pc, #308]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0301 	and.w	r3, r3, #1
 800296e:	2b00      	cmp	r3, #0
 8002970:	d040      	beq.n	80029f4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b01      	cmp	r3, #1
 8002978:	d107      	bne.n	800298a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800297a:	4b47      	ldr	r3, [pc, #284]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d115      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e07f      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	2b02      	cmp	r3, #2
 8002990:	d107      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002992:	4b41      	ldr	r3, [pc, #260]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800299a:	2b00      	cmp	r3, #0
 800299c:	d109      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e073      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a2:	4b3d      	ldr	r3, [pc, #244]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	e06b      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029b2:	4b39      	ldr	r3, [pc, #228]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	f023 0203 	bic.w	r2, r3, #3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	4936      	ldr	r1, [pc, #216]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029c4:	f7ff f8da 	bl	8001b7c <HAL_GetTick>
 80029c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ca:	e00a      	b.n	80029e2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029cc:	f7ff f8d6 	bl	8001b7c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029da:	4293      	cmp	r3, r2
 80029dc:	d901      	bls.n	80029e2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	e053      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 020c 	and.w	r2, r3, #12
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	009b      	lsls	r3, r3, #2
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d1eb      	bne.n	80029cc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029f4:	4b27      	ldr	r3, [pc, #156]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	683a      	ldr	r2, [r7, #0]
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d210      	bcs.n	8002a24 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a02:	4b24      	ldr	r3, [pc, #144]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f023 020f 	bic.w	r2, r3, #15
 8002a0a:	4922      	ldr	r1, [pc, #136]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a12:	4b20      	ldr	r3, [pc, #128]	; (8002a94 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 030f 	and.w	r3, r3, #15
 8002a1a:	683a      	ldr	r2, [r7, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e032      	b.n	8002a8a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0304 	and.w	r3, r3, #4
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d008      	beq.n	8002a42 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a30:	4b19      	ldr	r3, [pc, #100]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	68db      	ldr	r3, [r3, #12]
 8002a3c:	4916      	ldr	r1, [pc, #88]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f003 0308 	and.w	r3, r3, #8
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d009      	beq.n	8002a62 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002a4e:	4b12      	ldr	r3, [pc, #72]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a50:	689b      	ldr	r3, [r3, #8]
 8002a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	691b      	ldr	r3, [r3, #16]
 8002a5a:	00db      	lsls	r3, r3, #3
 8002a5c:	490e      	ldr	r1, [pc, #56]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a62:	f000 f821 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8002a66:	4602      	mov	r2, r0
 8002a68:	4b0b      	ldr	r3, [pc, #44]	; (8002a98 <HAL_RCC_ClockConfig+0x1c8>)
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	091b      	lsrs	r3, r3, #4
 8002a6e:	f003 030f 	and.w	r3, r3, #15
 8002a72:	490a      	ldr	r1, [pc, #40]	; (8002a9c <HAL_RCC_ClockConfig+0x1cc>)
 8002a74:	5ccb      	ldrb	r3, [r1, r3]
 8002a76:	fa22 f303 	lsr.w	r3, r2, r3
 8002a7a:	4a09      	ldr	r2, [pc, #36]	; (8002aa0 <HAL_RCC_ClockConfig+0x1d0>)
 8002a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a7e:	4b09      	ldr	r3, [pc, #36]	; (8002aa4 <HAL_RCC_ClockConfig+0x1d4>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff f836 	bl	8001af4 <HAL_InitTick>

  return HAL_OK;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40023c00 	.word	0x40023c00
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	080092d0 	.word	0x080092d0
 8002aa0:	20000010 	.word	0x20000010
 8002aa4:	20000014 	.word	0x20000014

08002aa8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002aa8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002aac:	b094      	sub	sp, #80	; 0x50
 8002aae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ab4:	2300      	movs	r3, #0
 8002ab6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ab8:	2300      	movs	r3, #0
 8002aba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002abc:	2300      	movs	r3, #0
 8002abe:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ac0:	4b79      	ldr	r3, [pc, #484]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f003 030c 	and.w	r3, r3, #12
 8002ac8:	2b08      	cmp	r3, #8
 8002aca:	d00d      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x40>
 8002acc:	2b08      	cmp	r3, #8
 8002ace:	f200 80e1 	bhi.w	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <HAL_RCC_GetSysClockFreq+0x34>
 8002ad6:	2b04      	cmp	r3, #4
 8002ad8:	d003      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002ada:	e0db      	b.n	8002c94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b73      	ldr	r3, [pc, #460]	; (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002ade:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae0:	e0db      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ae2:	4b73      	ldr	r3, [pc, #460]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002ae4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae6:	e0d8      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ae8:	4b6f      	ldr	r3, [pc, #444]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002af0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002af2:	4b6d      	ldr	r3, [pc, #436]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d063      	beq.n	8002bc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002afe:	4b6a      	ldr	r3, [pc, #424]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	099b      	lsrs	r3, r3, #6
 8002b04:	2200      	movs	r2, #0
 8002b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b08:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b10:	633b      	str	r3, [r7, #48]	; 0x30
 8002b12:	2300      	movs	r3, #0
 8002b14:	637b      	str	r3, [r7, #52]	; 0x34
 8002b16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b1a:	4622      	mov	r2, r4
 8002b1c:	462b      	mov	r3, r5
 8002b1e:	f04f 0000 	mov.w	r0, #0
 8002b22:	f04f 0100 	mov.w	r1, #0
 8002b26:	0159      	lsls	r1, r3, #5
 8002b28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b2c:	0150      	lsls	r0, r2, #5
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4621      	mov	r1, r4
 8002b34:	1a51      	subs	r1, r2, r1
 8002b36:	6139      	str	r1, [r7, #16]
 8002b38:	4629      	mov	r1, r5
 8002b3a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b3e:	617b      	str	r3, [r7, #20]
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	f04f 0300 	mov.w	r3, #0
 8002b48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b4c:	4659      	mov	r1, fp
 8002b4e:	018b      	lsls	r3, r1, #6
 8002b50:	4651      	mov	r1, sl
 8002b52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b56:	4651      	mov	r1, sl
 8002b58:	018a      	lsls	r2, r1, #6
 8002b5a:	4651      	mov	r1, sl
 8002b5c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b60:	4659      	mov	r1, fp
 8002b62:	eb63 0901 	sbc.w	r9, r3, r1
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b7a:	4690      	mov	r8, r2
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4623      	mov	r3, r4
 8002b80:	eb18 0303 	adds.w	r3, r8, r3
 8002b84:	60bb      	str	r3, [r7, #8]
 8002b86:	462b      	mov	r3, r5
 8002b88:	eb49 0303 	adc.w	r3, r9, r3
 8002b8c:	60fb      	str	r3, [r7, #12]
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	f04f 0300 	mov.w	r3, #0
 8002b96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002b9a:	4629      	mov	r1, r5
 8002b9c:	024b      	lsls	r3, r1, #9
 8002b9e:	4621      	mov	r1, r4
 8002ba0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ba4:	4621      	mov	r1, r4
 8002ba6:	024a      	lsls	r2, r1, #9
 8002ba8:	4610      	mov	r0, r2
 8002baa:	4619      	mov	r1, r3
 8002bac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bb2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bb4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bb8:	f7fe f85e 	bl	8000c78 <__aeabi_uldivmod>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bc4:	e058      	b.n	8002c78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bc6:	4b38      	ldr	r3, [pc, #224]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	099b      	lsrs	r3, r3, #6
 8002bcc:	2200      	movs	r2, #0
 8002bce:	4618      	mov	r0, r3
 8002bd0:	4611      	mov	r1, r2
 8002bd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002bd6:	623b      	str	r3, [r7, #32]
 8002bd8:	2300      	movs	r3, #0
 8002bda:	627b      	str	r3, [r7, #36]	; 0x24
 8002bdc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002be0:	4642      	mov	r2, r8
 8002be2:	464b      	mov	r3, r9
 8002be4:	f04f 0000 	mov.w	r0, #0
 8002be8:	f04f 0100 	mov.w	r1, #0
 8002bec:	0159      	lsls	r1, r3, #5
 8002bee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bf2:	0150      	lsls	r0, r2, #5
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	460b      	mov	r3, r1
 8002bf8:	4641      	mov	r1, r8
 8002bfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8002bfe:	4649      	mov	r1, r9
 8002c00:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c04:	f04f 0200 	mov.w	r2, #0
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c18:	ebb2 040a 	subs.w	r4, r2, sl
 8002c1c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c20:	f04f 0200 	mov.w	r2, #0
 8002c24:	f04f 0300 	mov.w	r3, #0
 8002c28:	00eb      	lsls	r3, r5, #3
 8002c2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c2e:	00e2      	lsls	r2, r4, #3
 8002c30:	4614      	mov	r4, r2
 8002c32:	461d      	mov	r5, r3
 8002c34:	4643      	mov	r3, r8
 8002c36:	18e3      	adds	r3, r4, r3
 8002c38:	603b      	str	r3, [r7, #0]
 8002c3a:	464b      	mov	r3, r9
 8002c3c:	eb45 0303 	adc.w	r3, r5, r3
 8002c40:	607b      	str	r3, [r7, #4]
 8002c42:	f04f 0200 	mov.w	r2, #0
 8002c46:	f04f 0300 	mov.w	r3, #0
 8002c4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c4e:	4629      	mov	r1, r5
 8002c50:	028b      	lsls	r3, r1, #10
 8002c52:	4621      	mov	r1, r4
 8002c54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c58:	4621      	mov	r1, r4
 8002c5a:	028a      	lsls	r2, r1, #10
 8002c5c:	4610      	mov	r0, r2
 8002c5e:	4619      	mov	r1, r3
 8002c60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c62:	2200      	movs	r2, #0
 8002c64:	61bb      	str	r3, [r7, #24]
 8002c66:	61fa      	str	r2, [r7, #28]
 8002c68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c6c:	f7fe f804 	bl	8000c78 <__aeabi_uldivmod>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4613      	mov	r3, r2
 8002c76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	0c1b      	lsrs	r3, r3, #16
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	3301      	adds	r3, #1
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002c88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c92:	e002      	b.n	8002c9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c94:	4b05      	ldr	r3, [pc, #20]	; (8002cac <HAL_RCC_GetSysClockFreq+0x204>)
 8002c96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	3750      	adds	r7, #80	; 0x50
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ca6:	bf00      	nop
 8002ca8:	40023800 	.word	0x40023800
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000010 	.word	0x20000010

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCC_GetPCLK1Freq+0x20>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a9b      	lsrs	r3, r3, #10
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4903      	ldr	r1, [pc, #12]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	40023800 	.word	0x40023800
 8002cf0:	080092e0 	.word	0x080092e0

08002cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002cf8:	f7ff ffdc 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	4b05      	ldr	r3, [pc, #20]	; (8002d14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	0b5b      	lsrs	r3, r3, #13
 8002d04:	f003 0307 	and.w	r3, r3, #7
 8002d08:	4903      	ldr	r1, [pc, #12]	; (8002d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d0a:	5ccb      	ldrb	r3, [r1, r3]
 8002d0c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d10:	4618      	mov	r0, r3
 8002d12:	bd80      	pop	{r7, pc}
 8002d14:	40023800 	.word	0x40023800
 8002d18:	080092e0 	.word	0x080092e0

08002d1c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b088      	sub	sp, #32
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002d24:	2300      	movs	r3, #0
 8002d26:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002d30:	2300      	movs	r3, #0
 8002d32:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002d34:	2300      	movs	r3, #0
 8002d36:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0301 	and.w	r3, r3, #1
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d012      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002d44:	4b69      	ldr	r3, [pc, #420]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4a68      	ldr	r2, [pc, #416]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	4b66      	ldr	r3, [pc, #408]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d58:	4964      	ldr	r1, [pc, #400]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d101      	bne.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d017      	beq.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d76:	4b5d      	ldr	r3, [pc, #372]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d7c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	4959      	ldr	r1, [pc, #356]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002d94:	d101      	bne.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002d96:	2301      	movs	r3, #1
 8002d98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d017      	beq.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002db2:	4b4e      	ldr	r3, [pc, #312]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002db8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc0:	494a      	ldr	r1, [pc, #296]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dcc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002dd0:	d101      	bne.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002dde:	2301      	movs	r3, #1
 8002de0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d001      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002dee:	2301      	movs	r3, #1
 8002df0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f003 0320 	and.w	r3, r3, #32
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	f000 808b 	beq.w	8002f16 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e04:	4a39      	ldr	r2, [pc, #228]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	6413      	str	r3, [r2, #64]	; 0x40
 8002e0c:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e14:	60bb      	str	r3, [r7, #8]
 8002e16:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002e18:	4b35      	ldr	r3, [pc, #212]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e24:	f7fe feaa 	bl	8001b7c <HAL_GetTick>
 8002e28:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e2a:	e008      	b.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e2c:	f7fe fea6 	bl	8001b7c <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	2b64      	cmp	r3, #100	; 0x64
 8002e38:	d901      	bls.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002e3a:	2303      	movs	r3, #3
 8002e3c:	e357      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002e3e:	4b2c      	ldr	r3, [pc, #176]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d0f0      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e4a:	4b28      	ldr	r3, [pc, #160]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e52:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d035      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d02e      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e68:	4b20      	ldr	r3, [pc, #128]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e70:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e76:	4a1d      	ldr	r2, [pc, #116]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e7c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e82:	4a1a      	ldr	r2, [pc, #104]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002e8a:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e94:	f003 0301 	and.w	r3, r3, #1
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d114      	bne.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e9c:	f7fe fe6e 	bl	8001b7c <HAL_GetTick>
 8002ea0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fe6a 	bl	8001b7c <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e319      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eba:	4b0c      	ldr	r3, [pc, #48]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0ee      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ece:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ed2:	d111      	bne.n	8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002ed4:	4b05      	ldr	r3, [pc, #20]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee0:	4b04      	ldr	r3, [pc, #16]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002ee2:	400b      	ands	r3, r1
 8002ee4:	4901      	ldr	r1, [pc, #4]	; (8002eec <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	608b      	str	r3, [r1, #8]
 8002eea:	e00b      	b.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40007000 	.word	0x40007000
 8002ef4:	0ffffcff 	.word	0x0ffffcff
 8002ef8:	4baa      	ldr	r3, [pc, #680]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	4aa9      	ldr	r2, [pc, #676]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002efe:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f02:	6093      	str	r3, [r2, #8]
 8002f04:	4ba7      	ldr	r3, [pc, #668]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f06:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	49a4      	ldr	r1, [pc, #656]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0310 	and.w	r3, r3, #16
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d010      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f22:	4ba0      	ldr	r3, [pc, #640]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f28:	4a9e      	ldr	r2, [pc, #632]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002f2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002f32:	4b9c      	ldr	r3, [pc, #624]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f34:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f3c:	4999      	ldr	r1, [pc, #612]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f50:	4b94      	ldr	r3, [pc, #592]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f56:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002f5e:	4991      	ldr	r1, [pc, #580]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f60:	4313      	orrs	r3, r2
 8002f62:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00a      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002f72:	4b8c      	ldr	r3, [pc, #560]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f78:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f80:	4988      	ldr	r1, [pc, #544]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d00a      	beq.n	8002faa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f94:	4b83      	ldr	r3, [pc, #524]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002f96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002fa2:	4980      	ldr	r1, [pc, #512]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00a      	beq.n	8002fcc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002fb6:	4b7b      	ldr	r3, [pc, #492]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4977      	ldr	r1, [pc, #476]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00a      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fd8:	4b72      	ldr	r3, [pc, #456]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fde:	f023 0203 	bic.w	r2, r3, #3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	496f      	ldr	r1, [pc, #444]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d00a      	beq.n	8003010 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ffa:	4b6a      	ldr	r3, [pc, #424]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8002ffc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003000:	f023 020c 	bic.w	r2, r3, #12
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003008:	4966      	ldr	r1, [pc, #408]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800300a:	4313      	orrs	r3, r2
 800300c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003018:	2b00      	cmp	r3, #0
 800301a:	d00a      	beq.n	8003032 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800301c:	4b61      	ldr	r3, [pc, #388]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800301e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003022:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	495e      	ldr	r1, [pc, #376]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800302c:	4313      	orrs	r3, r2
 800302e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800303a:	2b00      	cmp	r3, #0
 800303c:	d00a      	beq.n	8003054 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800303e:	4b59      	ldr	r3, [pc, #356]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003044:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800304c:	4955      	ldr	r1, [pc, #340]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800304e:	4313      	orrs	r3, r2
 8003050:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800305c:	2b00      	cmp	r3, #0
 800305e:	d00a      	beq.n	8003076 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003060:	4b50      	ldr	r3, [pc, #320]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003066:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800306e:	494d      	ldr	r1, [pc, #308]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003070:	4313      	orrs	r3, r2
 8003072:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800307e:	2b00      	cmp	r3, #0
 8003080:	d00a      	beq.n	8003098 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003082:	4b48      	ldr	r3, [pc, #288]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003088:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003090:	4944      	ldr	r1, [pc, #272]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003092:	4313      	orrs	r3, r2
 8003094:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00a      	beq.n	80030ba <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80030a4:	4b3f      	ldr	r3, [pc, #252]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030b2:	493c      	ldr	r1, [pc, #240]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80030c6:	4b37      	ldr	r3, [pc, #220]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030cc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030d4:	4933      	ldr	r1, [pc, #204]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030d6:	4313      	orrs	r3, r2
 80030d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d00a      	beq.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80030e8:	4b2e      	ldr	r3, [pc, #184]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ee:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030f6:	492b      	ldr	r1, [pc, #172]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80030f8:	4313      	orrs	r3, r2
 80030fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003106:	2b00      	cmp	r3, #0
 8003108:	d011      	beq.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800310a:	4b26      	ldr	r3, [pc, #152]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800310c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003110:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003118:	4922      	ldr	r1, [pc, #136]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003124:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003128:	d101      	bne.n	800312e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800312a:	2301      	movs	r3, #1
 800312c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d001      	beq.n	800313e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800313a:	2301      	movs	r3, #1
 800313c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d00a      	beq.n	8003160 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800314a:	4b16      	ldr	r3, [pc, #88]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003150:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003158:	4912      	ldr	r1, [pc, #72]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800315a:	4313      	orrs	r3, r2
 800315c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00b      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800316c:	4b0d      	ldr	r3, [pc, #52]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800316e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003172:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800317c:	4909      	ldr	r1, [pc, #36]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800317e:	4313      	orrs	r3, r2
 8003180:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	2b01      	cmp	r3, #1
 8003188:	d006      	beq.n	8003198 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003192:	2b00      	cmp	r3, #0
 8003194:	f000 80d9 	beq.w	800334a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003198:	4b02      	ldr	r3, [pc, #8]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a01      	ldr	r2, [pc, #4]	; (80031a4 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800319e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031a2:	e001      	b.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80031a4:	40023800 	.word	0x40023800
 80031a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031aa:	f7fe fce7 	bl	8001b7c <HAL_GetTick>
 80031ae:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031b0:	e008      	b.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031b2:	f7fe fce3 	bl	8001b7c <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b64      	cmp	r3, #100	; 0x64
 80031be:	d901      	bls.n	80031c4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e194      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031c4:	4b6c      	ldr	r3, [pc, #432]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d1f0      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0301 	and.w	r3, r3, #1
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d021      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d11d      	bne.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031e4:	4b64      	ldr	r3, [pc, #400]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031ea:	0c1b      	lsrs	r3, r3, #16
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031f2:	4b61      	ldr	r3, [pc, #388]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80031f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	019a      	lsls	r2, r3, #6
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	041b      	lsls	r3, r3, #16
 800320a:	431a      	orrs	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	061b      	lsls	r3, r3, #24
 8003210:	431a      	orrs	r2, r3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	071b      	lsls	r3, r3, #28
 8003218:	4957      	ldr	r1, [pc, #348]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800321a:	4313      	orrs	r3, r2
 800321c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003228:	2b00      	cmp	r3, #0
 800322a:	d004      	beq.n	8003236 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003230:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003234:	d00a      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800323e:	2b00      	cmp	r3, #0
 8003240:	d02e      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800324a:	d129      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800324c:	4b4a      	ldr	r3, [pc, #296]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800324e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003252:	0c1b      	lsrs	r3, r3, #16
 8003254:	f003 0303 	and.w	r3, r3, #3
 8003258:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800325c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003260:	0f1b      	lsrs	r3, r3, #28
 8003262:	f003 0307 	and.w	r3, r3, #7
 8003266:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	019a      	lsls	r2, r3, #6
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	041b      	lsls	r3, r3, #16
 8003272:	431a      	orrs	r2, r3
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	061b      	lsls	r3, r3, #24
 800327a:	431a      	orrs	r2, r3
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	071b      	lsls	r3, r3, #28
 8003280:	493d      	ldr	r1, [pc, #244]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003282:	4313      	orrs	r3, r2
 8003284:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003288:	4b3b      	ldr	r3, [pc, #236]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800328a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800328e:	f023 021f 	bic.w	r2, r3, #31
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003296:	3b01      	subs	r3, #1
 8003298:	4937      	ldr	r1, [pc, #220]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800329a:	4313      	orrs	r3, r2
 800329c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d01d      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80032ac:	4b32      	ldr	r3, [pc, #200]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032b2:	0e1b      	lsrs	r3, r3, #24
 80032b4:	f003 030f 	and.w	r3, r3, #15
 80032b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80032ba:	4b2f      	ldr	r3, [pc, #188]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80032c0:	0f1b      	lsrs	r3, r3, #28
 80032c2:	f003 0307 	and.w	r3, r3, #7
 80032c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	019a      	lsls	r2, r3, #6
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	691b      	ldr	r3, [r3, #16]
 80032d2:	041b      	lsls	r3, r3, #16
 80032d4:	431a      	orrs	r2, r3
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	061b      	lsls	r3, r3, #24
 80032da:	431a      	orrs	r2, r3
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	071b      	lsls	r3, r3, #28
 80032e0:	4925      	ldr	r1, [pc, #148]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80032e2:	4313      	orrs	r3, r2
 80032e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d011      	beq.n	8003318 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	019a      	lsls	r2, r3, #6
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	691b      	ldr	r3, [r3, #16]
 80032fe:	041b      	lsls	r3, r3, #16
 8003300:	431a      	orrs	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	431a      	orrs	r2, r3
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	4919      	ldr	r1, [pc, #100]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003318:	4b17      	ldr	r3, [pc, #92]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a16      	ldr	r2, [pc, #88]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800331e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003322:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003324:	f7fe fc2a 	bl	8001b7c <HAL_GetTick>
 8003328:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800332a:	e008      	b.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800332c:	f7fe fc26 	bl	8001b7c <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b64      	cmp	r3, #100	; 0x64
 8003338:	d901      	bls.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e0d7      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800333e:	4b0e      	ldr	r3, [pc, #56]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	2b01      	cmp	r3, #1
 800334e:	f040 80cd 	bne.w	80034ec <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003352:	4b09      	ldr	r3, [pc, #36]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a08      	ldr	r2, [pc, #32]	; (8003378 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800335c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800335e:	f7fe fc0d 	bl	8001b7c <HAL_GetTick>
 8003362:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003364:	e00a      	b.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003366:	f7fe fc09 	bl	8001b7c <HAL_GetTick>
 800336a:	4602      	mov	r2, r0
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	1ad3      	subs	r3, r2, r3
 8003370:	2b64      	cmp	r3, #100	; 0x64
 8003372:	d903      	bls.n	800337c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e0ba      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003378:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800337c:	4b5e      	ldr	r3, [pc, #376]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003388:	d0ed      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d003      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800339a:	2b00      	cmp	r3, #0
 800339c:	d009      	beq.n	80033b2 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d02e      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d12a      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033b2:	4b51      	ldr	r3, [pc, #324]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	0c1b      	lsrs	r3, r3, #16
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033c0:	4b4d      	ldr	r3, [pc, #308]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	0f1b      	lsrs	r3, r3, #28
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	019a      	lsls	r2, r3, #6
 80033d4:	693b      	ldr	r3, [r7, #16]
 80033d6:	041b      	lsls	r3, r3, #16
 80033d8:	431a      	orrs	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	4944      	ldr	r1, [pc, #272]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80033ee:	4b42      	ldr	r3, [pc, #264]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033fc:	3b01      	subs	r3, #1
 80033fe:	021b      	lsls	r3, r3, #8
 8003400:	493d      	ldr	r1, [pc, #244]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d022      	beq.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003418:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800341c:	d11d      	bne.n	800345a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800341e:	4b36      	ldr	r3, [pc, #216]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003420:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003424:	0e1b      	lsrs	r3, r3, #24
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800342c:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800342e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003432:	0f1b      	lsrs	r3, r3, #28
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	695b      	ldr	r3, [r3, #20]
 800343e:	019a      	lsls	r2, r3, #6
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	041b      	lsls	r3, r3, #16
 8003446:	431a      	orrs	r2, r3
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	061b      	lsls	r3, r3, #24
 800344c:	431a      	orrs	r2, r3
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	071b      	lsls	r3, r3, #28
 8003452:	4929      	ldr	r1, [pc, #164]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0308 	and.w	r3, r3, #8
 8003462:	2b00      	cmp	r3, #0
 8003464:	d028      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003468:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800346c:	0e1b      	lsrs	r3, r3, #24
 800346e:	f003 030f 	and.w	r3, r3, #15
 8003472:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003474:	4b20      	ldr	r3, [pc, #128]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800347a:	0c1b      	lsrs	r3, r3, #16
 800347c:	f003 0303 	and.w	r3, r3, #3
 8003480:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	019a      	lsls	r2, r3, #6
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	041b      	lsls	r3, r3, #16
 800348c:	431a      	orrs	r2, r3
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	061b      	lsls	r3, r3, #24
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	071b      	lsls	r3, r3, #28
 800349a:	4917      	ldr	r1, [pc, #92]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800349c:	4313      	orrs	r3, r2
 800349e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80034a2:	4b15      	ldr	r3, [pc, #84]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b0:	4911      	ldr	r1, [pc, #68]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80034b8:	4b0f      	ldr	r3, [pc, #60]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034c2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034c4:	f7fe fb5a 	bl	8001b7c <HAL_GetTick>
 80034c8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80034cc:	f7fe fb56 	bl	8001b7c <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b64      	cmp	r3, #100	; 0x64
 80034d8:	d901      	bls.n	80034de <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e007      	b.n	80034ee <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80034de:	4b06      	ldr	r3, [pc, #24]	; (80034f8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034e6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034ea:	d1ef      	bne.n	80034cc <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800

080034fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e049      	b.n	80035a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003514:	b2db      	uxtb	r3, r3
 8003516:	2b00      	cmp	r3, #0
 8003518:	d106      	bne.n	8003528 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2200      	movs	r2, #0
 800351e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003522:	6878      	ldr	r0, [r7, #4]
 8003524:	f7fe f9f4 	bl	8001910 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2202      	movs	r2, #2
 800352c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	3304      	adds	r3, #4
 8003538:	4619      	mov	r1, r3
 800353a:	4610      	mov	r0, r2
 800353c:	f000 faee 	bl	8003b1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2201      	movs	r2, #1
 8003584:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035a0:	2300      	movs	r3, #0
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	3708      	adds	r7, #8
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
	...

080035ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b085      	sub	sp, #20
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d001      	beq.n	80035c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e054      	b.n	800366e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68da      	ldr	r2, [r3, #12]
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f042 0201 	orr.w	r2, r2, #1
 80035da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a26      	ldr	r2, [pc, #152]	; (800367c <HAL_TIM_Base_Start_IT+0xd0>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d022      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035ee:	d01d      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a22      	ldr	r2, [pc, #136]	; (8003680 <HAL_TIM_Base_Start_IT+0xd4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d018      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a21      	ldr	r2, [pc, #132]	; (8003684 <HAL_TIM_Base_Start_IT+0xd8>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d013      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a1f      	ldr	r2, [pc, #124]	; (8003688 <HAL_TIM_Base_Start_IT+0xdc>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00e      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1e      	ldr	r2, [pc, #120]	; (800368c <HAL_TIM_Base_Start_IT+0xe0>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d009      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <HAL_TIM_Base_Start_IT+0xe4>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d004      	beq.n	800362c <HAL_TIM_Base_Start_IT+0x80>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1b      	ldr	r2, [pc, #108]	; (8003694 <HAL_TIM_Base_Start_IT+0xe8>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d115      	bne.n	8003658 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	4b19      	ldr	r3, [pc, #100]	; (8003698 <HAL_TIM_Base_Start_IT+0xec>)
 8003634:	4013      	ands	r3, r2
 8003636:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	2b06      	cmp	r3, #6
 800363c:	d015      	beq.n	800366a <HAL_TIM_Base_Start_IT+0xbe>
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d011      	beq.n	800366a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f042 0201 	orr.w	r2, r2, #1
 8003654:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003656:	e008      	b.n	800366a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f042 0201 	orr.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]
 8003668:	e000      	b.n	800366c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	4618      	mov	r0, r3
 8003670:	3714      	adds	r7, #20
 8003672:	46bd      	mov	sp, r7
 8003674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003678:	4770      	bx	lr
 800367a:	bf00      	nop
 800367c:	40010000 	.word	0x40010000
 8003680:	40000400 	.word	0x40000400
 8003684:	40000800 	.word	0x40000800
 8003688:	40000c00 	.word	0x40000c00
 800368c:	40010400 	.word	0x40010400
 8003690:	40014000 	.word	0x40014000
 8003694:	40001800 	.word	0x40001800
 8003698:	00010007 	.word	0x00010007

0800369c <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800369c:	b480      	push	{r7}
 800369e:	b083      	sub	sp, #12
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	68da      	ldr	r2, [r3, #12]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0201 	bic.w	r2, r2, #1
 80036b2:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	6a1a      	ldr	r2, [r3, #32]
 80036ba:	f241 1311 	movw	r3, #4369	; 0x1111
 80036be:	4013      	ands	r3, r2
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d10f      	bne.n	80036e4 <HAL_TIM_Base_Stop_IT+0x48>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6a1a      	ldr	r2, [r3, #32]
 80036ca:	f240 4344 	movw	r3, #1092	; 0x444
 80036ce:	4013      	ands	r3, r2
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_TIM_Base_Stop_IT+0x48>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f022 0201 	bic.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80036ec:	2300      	movs	r3, #0
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr

080036fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80036fa:	b580      	push	{r7, lr}
 80036fc:	b082      	sub	sp, #8
 80036fe:	af00      	add	r7, sp, #0
 8003700:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f003 0302 	and.w	r3, r3, #2
 800370c:	2b02      	cmp	r3, #2
 800370e:	d122      	bne.n	8003756 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	2b02      	cmp	r3, #2
 800371c:	d11b      	bne.n	8003756 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f06f 0202 	mvn.w	r2, #2
 8003726:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	f003 0303 	and.w	r3, r3, #3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d003      	beq.n	8003744 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800373c:	6878      	ldr	r0, [r7, #4]
 800373e:	f000 f9cf 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003742:	e005      	b.n	8003750 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f9c1 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f000 f9d2 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	f003 0304 	and.w	r3, r3, #4
 8003760:	2b04      	cmp	r3, #4
 8003762:	d122      	bne.n	80037aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	f003 0304 	and.w	r3, r3, #4
 800376e:	2b04      	cmp	r3, #4
 8003770:	d11b      	bne.n	80037aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f06f 0204 	mvn.w	r2, #4
 800377a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2202      	movs	r2, #2
 8003780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	699b      	ldr	r3, [r3, #24]
 8003788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800378c:	2b00      	cmp	r3, #0
 800378e:	d003      	beq.n	8003798 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003790:	6878      	ldr	r0, [r7, #4]
 8003792:	f000 f9a5 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 8003796:	e005      	b.n	80037a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 f997 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 f9a8 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2200      	movs	r2, #0
 80037a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	691b      	ldr	r3, [r3, #16]
 80037b0:	f003 0308 	and.w	r3, r3, #8
 80037b4:	2b08      	cmp	r3, #8
 80037b6:	d122      	bne.n	80037fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	2b08      	cmp	r3, #8
 80037c4:	d11b      	bne.n	80037fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f06f 0208 	mvn.w	r2, #8
 80037ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2204      	movs	r2, #4
 80037d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69db      	ldr	r3, [r3, #28]
 80037dc:	f003 0303 	and.w	r3, r3, #3
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d003      	beq.n	80037ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f97b 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 80037ea:	e005      	b.n	80037f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 f96d 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 f97e 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	f003 0310 	and.w	r3, r3, #16
 8003808:	2b10      	cmp	r3, #16
 800380a:	d122      	bne.n	8003852 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	68db      	ldr	r3, [r3, #12]
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	d11b      	bne.n	8003852 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f06f 0210 	mvn.w	r2, #16
 8003822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2208      	movs	r2, #8
 8003828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	69db      	ldr	r3, [r3, #28]
 8003830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003834:	2b00      	cmp	r3, #0
 8003836:	d003      	beq.n	8003840 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	f000 f951 	bl	8003ae0 <HAL_TIM_IC_CaptureCallback>
 800383e:	e005      	b.n	800384c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 f943 	bl	8003acc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003846:	6878      	ldr	r0, [r7, #4]
 8003848:	f000 f954 	bl	8003af4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	691b      	ldr	r3, [r3, #16]
 8003858:	f003 0301 	and.w	r3, r3, #1
 800385c:	2b01      	cmp	r3, #1
 800385e:	d10e      	bne.n	800387e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d107      	bne.n	800387e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f06f 0201 	mvn.w	r2, #1
 8003876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7fd fd99 	bl	80013b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003888:	2b80      	cmp	r3, #128	; 0x80
 800388a:	d10e      	bne.n	80038aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003896:	2b80      	cmp	r3, #128	; 0x80
 8003898:	d107      	bne.n	80038aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80038a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f000 fb0b 	bl	8003ec0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	691b      	ldr	r3, [r3, #16]
 80038b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038c4:	2b80      	cmp	r3, #128	; 0x80
 80038c6:	d107      	bne.n	80038d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80038d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 fafe 	bl	8003ed4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038e2:	2b40      	cmp	r3, #64	; 0x40
 80038e4:	d10e      	bne.n	8003904 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038f0:	2b40      	cmp	r3, #64	; 0x40
 80038f2:	d107      	bne.n	8003904 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80038fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f000 f902 	bl	8003b08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	691b      	ldr	r3, [r3, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b20      	cmp	r3, #32
 8003910:	d10e      	bne.n	8003930 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	68db      	ldr	r3, [r3, #12]
 8003918:	f003 0320 	and.w	r3, r3, #32
 800391c:	2b20      	cmp	r3, #32
 800391e:	d107      	bne.n	8003930 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f06f 0220 	mvn.w	r2, #32
 8003928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 fabe 	bl	8003eac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003930:	bf00      	nop
 8003932:	3708      	adds	r7, #8
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}

08003938 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	b084      	sub	sp, #16
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
 8003940:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003942:	2300      	movs	r3, #0
 8003944:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800394c:	2b01      	cmp	r3, #1
 800394e:	d101      	bne.n	8003954 <HAL_TIM_ConfigClockSource+0x1c>
 8003950:	2302      	movs	r3, #2
 8003952:	e0b4      	b.n	8003abe <HAL_TIM_ConfigClockSource+0x186>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	689b      	ldr	r3, [r3, #8]
 800396a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800396c:	68ba      	ldr	r2, [r7, #8]
 800396e:	4b56      	ldr	r3, [pc, #344]	; (8003ac8 <HAL_TIM_ConfigClockSource+0x190>)
 8003970:	4013      	ands	r3, r2
 8003972:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800397a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800398c:	d03e      	beq.n	8003a0c <HAL_TIM_ConfigClockSource+0xd4>
 800398e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003992:	f200 8087 	bhi.w	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800399a:	f000 8086 	beq.w	8003aaa <HAL_TIM_ConfigClockSource+0x172>
 800399e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039a2:	d87f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039a4:	2b70      	cmp	r3, #112	; 0x70
 80039a6:	d01a      	beq.n	80039de <HAL_TIM_ConfigClockSource+0xa6>
 80039a8:	2b70      	cmp	r3, #112	; 0x70
 80039aa:	d87b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039ac:	2b60      	cmp	r3, #96	; 0x60
 80039ae:	d050      	beq.n	8003a52 <HAL_TIM_ConfigClockSource+0x11a>
 80039b0:	2b60      	cmp	r3, #96	; 0x60
 80039b2:	d877      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039b4:	2b50      	cmp	r3, #80	; 0x50
 80039b6:	d03c      	beq.n	8003a32 <HAL_TIM_ConfigClockSource+0xfa>
 80039b8:	2b50      	cmp	r3, #80	; 0x50
 80039ba:	d873      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039bc:	2b40      	cmp	r3, #64	; 0x40
 80039be:	d058      	beq.n	8003a72 <HAL_TIM_ConfigClockSource+0x13a>
 80039c0:	2b40      	cmp	r3, #64	; 0x40
 80039c2:	d86f      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039c4:	2b30      	cmp	r3, #48	; 0x30
 80039c6:	d064      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039c8:	2b30      	cmp	r3, #48	; 0x30
 80039ca:	d86b      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039cc:	2b20      	cmp	r3, #32
 80039ce:	d060      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d0:	2b20      	cmp	r3, #32
 80039d2:	d867      	bhi.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d05c      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039d8:	2b10      	cmp	r3, #16
 80039da:	d05a      	beq.n	8003a92 <HAL_TIM_ConfigClockSource+0x15a>
 80039dc:	e062      	b.n	8003aa4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6818      	ldr	r0, [r3, #0]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	6899      	ldr	r1, [r3, #8]
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	685a      	ldr	r2, [r3, #4]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68db      	ldr	r3, [r3, #12]
 80039ee:	f000 f9af 	bl	8003d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	689b      	ldr	r3, [r3, #8]
 80039f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003a00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	68ba      	ldr	r2, [r7, #8]
 8003a08:	609a      	str	r2, [r3, #8]
      break;
 8003a0a:	e04f      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6818      	ldr	r0, [r3, #0]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	6899      	ldr	r1, [r3, #8]
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	68db      	ldr	r3, [r3, #12]
 8003a1c:	f000 f998 	bl	8003d50 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	689a      	ldr	r2, [r3, #8]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a2e:	609a      	str	r2, [r3, #8]
      break;
 8003a30:	e03c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6818      	ldr	r0, [r3, #0]
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	6859      	ldr	r1, [r3, #4]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	461a      	mov	r2, r3
 8003a40:	f000 f90c 	bl	8003c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2150      	movs	r1, #80	; 0x50
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 f965 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a50:	e02c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	6859      	ldr	r1, [r3, #4]
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	68db      	ldr	r3, [r3, #12]
 8003a5e:	461a      	mov	r2, r3
 8003a60:	f000 f92b 	bl	8003cba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2160      	movs	r1, #96	; 0x60
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f955 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a70:	e01c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6818      	ldr	r0, [r3, #0]
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	6859      	ldr	r1, [r3, #4]
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	68db      	ldr	r3, [r3, #12]
 8003a7e:	461a      	mov	r2, r3
 8003a80:	f000 f8ec 	bl	8003c5c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	2140      	movs	r1, #64	; 0x40
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 f945 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003a90:	e00c      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	4610      	mov	r0, r2
 8003a9e:	f000 f93c 	bl	8003d1a <TIM_ITRx_SetConfig>
      break;
 8003aa2:	e003      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8003aa8:	e000      	b.n	8003aac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003aaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003abc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3710      	adds	r7, #16
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
 8003ac6:	bf00      	nop
 8003ac8:	fffeff88 	.word	0xfffeff88

08003acc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b083      	sub	sp, #12
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003b10:	bf00      	nop
 8003b12:	370c      	adds	r7, #12
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr

08003b1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a40      	ldr	r2, [pc, #256]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d013      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b3a:	d00f      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a3d      	ldr	r2, [pc, #244]	; (8003c34 <TIM_Base_SetConfig+0x118>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a3c      	ldr	r2, [pc, #240]	; (8003c38 <TIM_Base_SetConfig+0x11c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d007      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a3b      	ldr	r2, [pc, #236]	; (8003c3c <TIM_Base_SetConfig+0x120>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d003      	beq.n	8003b5c <TIM_Base_SetConfig+0x40>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	4a3a      	ldr	r2, [pc, #232]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d108      	bne.n	8003b6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	68fa      	ldr	r2, [r7, #12]
 8003b6a:	4313      	orrs	r3, r2
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d02b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7c:	d027      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2c      	ldr	r2, [pc, #176]	; (8003c34 <TIM_Base_SetConfig+0x118>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d023      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2b      	ldr	r2, [pc, #172]	; (8003c38 <TIM_Base_SetConfig+0x11c>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d01f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2a      	ldr	r2, [pc, #168]	; (8003c3c <TIM_Base_SetConfig+0x120>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d01b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a29      	ldr	r2, [pc, #164]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d017      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a28      	ldr	r2, [pc, #160]	; (8003c44 <TIM_Base_SetConfig+0x128>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d013      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a27      	ldr	r2, [pc, #156]	; (8003c48 <TIM_Base_SetConfig+0x12c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d00f      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a26      	ldr	r2, [pc, #152]	; (8003c4c <TIM_Base_SetConfig+0x130>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00b      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a25      	ldr	r2, [pc, #148]	; (8003c50 <TIM_Base_SetConfig+0x134>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a24      	ldr	r2, [pc, #144]	; (8003c54 <TIM_Base_SetConfig+0x138>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d003      	beq.n	8003bce <TIM_Base_SetConfig+0xb2>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a23      	ldr	r2, [pc, #140]	; (8003c58 <TIM_Base_SetConfig+0x13c>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d108      	bne.n	8003be0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	68fa      	ldr	r2, [r7, #12]
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	695b      	ldr	r3, [r3, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a0a      	ldr	r2, [pc, #40]	; (8003c30 <TIM_Base_SetConfig+0x114>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d003      	beq.n	8003c14 <TIM_Base_SetConfig+0xf8>
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	4a0c      	ldr	r2, [pc, #48]	; (8003c40 <TIM_Base_SetConfig+0x124>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d103      	bne.n	8003c1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	691a      	ldr	r2, [r3, #16]
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	615a      	str	r2, [r3, #20]
}
 8003c22:	bf00      	nop
 8003c24:	3714      	adds	r7, #20
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr
 8003c2e:	bf00      	nop
 8003c30:	40010000 	.word	0x40010000
 8003c34:	40000400 	.word	0x40000400
 8003c38:	40000800 	.word	0x40000800
 8003c3c:	40000c00 	.word	0x40000c00
 8003c40:	40010400 	.word	0x40010400
 8003c44:	40014000 	.word	0x40014000
 8003c48:	40014400 	.word	0x40014400
 8003c4c:	40014800 	.word	0x40014800
 8003c50:	40001800 	.word	0x40001800
 8003c54:	40001c00 	.word	0x40001c00
 8003c58:	40002000 	.word	0x40002000

08003c5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	60f8      	str	r0, [r7, #12]
 8003c64:	60b9      	str	r1, [r7, #8]
 8003c66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6a1b      	ldr	r3, [r3, #32]
 8003c6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	f023 0201 	bic.w	r2, r3, #1
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	011b      	lsls	r3, r3, #4
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f023 030a 	bic.w	r3, r3, #10
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c9a:	697a      	ldr	r2, [r7, #20]
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	697a      	ldr	r2, [r7, #20]
 8003cac:	621a      	str	r2, [r3, #32]
}
 8003cae:	bf00      	nop
 8003cb0:	371c      	adds	r7, #28
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b087      	sub	sp, #28
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	60f8      	str	r0, [r7, #12]
 8003cc2:	60b9      	str	r1, [r7, #8]
 8003cc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0210 	bic.w	r2, r3, #16
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ce4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	031b      	lsls	r3, r3, #12
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	4313      	orrs	r3, r2
 8003cee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003cf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	011b      	lsls	r3, r3, #4
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	697a      	ldr	r2, [r7, #20]
 8003d06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	693a      	ldr	r2, [r7, #16]
 8003d0c:	621a      	str	r2, [r3, #32]
}
 8003d0e:	bf00      	nop
 8003d10:	371c      	adds	r7, #28
 8003d12:	46bd      	mov	sp, r7
 8003d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d18:	4770      	bx	lr

08003d1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d1a:	b480      	push	{r7}
 8003d1c:	b085      	sub	sp, #20
 8003d1e:	af00      	add	r7, sp, #0
 8003d20:	6078      	str	r0, [r7, #4]
 8003d22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d32:	683a      	ldr	r2, [r7, #0]
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	f043 0307 	orr.w	r3, r3, #7
 8003d3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	609a      	str	r2, [r3, #8]
}
 8003d44:	bf00      	nop
 8003d46:	3714      	adds	r7, #20
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4e:	4770      	bx	lr

08003d50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b087      	sub	sp, #28
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	60f8      	str	r0, [r7, #12]
 8003d58:	60b9      	str	r1, [r7, #8]
 8003d5a:	607a      	str	r2, [r7, #4]
 8003d5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	021a      	lsls	r2, r3, #8
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	4313      	orrs	r3, r2
 8003d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	609a      	str	r2, [r3, #8]
}
 8003d84:	bf00      	nop
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr

08003d90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b085      	sub	sp, #20
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d101      	bne.n	8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003da4:	2302      	movs	r3, #2
 8003da6:	e06d      	b.n	8003e84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2201      	movs	r2, #1
 8003dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2202      	movs	r2, #2
 8003db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4a30      	ldr	r2, [pc, #192]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d004      	beq.n	8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a2f      	ldr	r2, [pc, #188]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d108      	bne.n	8003dee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003de2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	68fa      	ldr	r2, [r7, #12]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003df4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68fa      	ldr	r2, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	68fa      	ldr	r2, [r7, #12]
 8003e06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	4a20      	ldr	r2, [pc, #128]	; (8003e90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003e0e:	4293      	cmp	r3, r2
 8003e10:	d022      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e1a:	d01d      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a1d      	ldr	r2, [pc, #116]	; (8003e98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d018      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a1c      	ldr	r2, [pc, #112]	; (8003e9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d013      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	; (8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d00e      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a15      	ldr	r2, [pc, #84]	; (8003e94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d009      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d004      	beq.n	8003e58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a15      	ldr	r2, [pc, #84]	; (8003ea8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d10c      	bne.n	8003e72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	68ba      	ldr	r2, [r7, #8]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	68ba      	ldr	r2, [r7, #8]
 8003e70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2201      	movs	r2, #1
 8003e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e82:	2300      	movs	r3, #0
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	40010000 	.word	0x40010000
 8003e94:	40010400 	.word	0x40010400
 8003e98:	40000400 	.word	0x40000400
 8003e9c:	40000800 	.word	0x40000800
 8003ea0:	40000c00 	.word	0x40000c00
 8003ea4:	40014000 	.word	0x40014000
 8003ea8:	40001800 	.word	0x40001800

08003eac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b083      	sub	sp, #12
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003eb4:	bf00      	nop
 8003eb6:	370c      	adds	r7, #12
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b083      	sub	sp, #12
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ec8:	bf00      	nop
 8003eca:	370c      	adds	r7, #12
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003edc:	bf00      	nop
 8003ede:	370c      	adds	r7, #12
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	b082      	sub	sp, #8
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e040      	b.n	8003f7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f0a:	6878      	ldr	r0, [r7, #4]
 8003f0c:	f7fd fd54 	bl	80019b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2224      	movs	r2, #36	; 0x24
 8003f14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0201 	bic.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f000 fb62 	bl	80045f0 <UART_SetConfig>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b01      	cmp	r3, #1
 8003f30:	d101      	bne.n	8003f36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e022      	b.n	8003f7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d002      	beq.n	8003f44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 fdba 	bl	8004ab8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681a      	ldr	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f042 0201 	orr.w	r2, r2, #1
 8003f72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f74:	6878      	ldr	r0, [r7, #4]
 8003f76:	f000 fe41 	bl	8004bfc <UART_CheckIdleState>
 8003f7a:	4603      	mov	r3, r0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	3708      	adds	r7, #8
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b08a      	sub	sp, #40	; 0x28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	60f8      	str	r0, [r7, #12]
 8003f8c:	60b9      	str	r1, [r7, #8]
 8003f8e:	4613      	mov	r3, r2
 8003f90:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f98:	2b20      	cmp	r3, #32
 8003f9a:	d132      	bne.n	8004002 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d002      	beq.n	8003fa8 <HAL_UART_Receive_IT+0x24>
 8003fa2:	88fb      	ldrh	r3, [r7, #6]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e02b      	b.n	8004004 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d018      	beq.n	8003ff2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	613b      	str	r3, [r7, #16]
   return(result);
 8003fce:	693b      	ldr	r3, [r7, #16]
 8003fd0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003fd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	461a      	mov	r2, r3
 8003fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fde:	623b      	str	r3, [r7, #32]
 8003fe0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	69f9      	ldr	r1, [r7, #28]
 8003fe4:	6a3a      	ldr	r2, [r7, #32]
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e6      	bne.n	8003fc0 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003ff2:	88fb      	ldrh	r3, [r7, #6]
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	68b9      	ldr	r1, [r7, #8]
 8003ff8:	68f8      	ldr	r0, [r7, #12]
 8003ffa:	f000 fefd 	bl	8004df8 <UART_Start_Receive_IT>
 8003ffe:	4603      	mov	r3, r0
 8004000:	e000      	b.n	8004004 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 8004002:	2302      	movs	r3, #2
  }
}
 8004004:	4618      	mov	r0, r3
 8004006:	3728      	adds	r7, #40	; 0x28
 8004008:	46bd      	mov	sp, r7
 800400a:	bd80      	pop	{r7, pc}

0800400c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b0ba      	sub	sp, #232	; 0xe8
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	69db      	ldr	r3, [r3, #28]
 800401a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004032:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8004036:	f640 030f 	movw	r3, #2063	; 0x80f
 800403a:	4013      	ands	r3, r2
 800403c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8004040:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004044:	2b00      	cmp	r3, #0
 8004046:	d115      	bne.n	8004074 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800404c:	f003 0320 	and.w	r3, r3, #32
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00f      	beq.n	8004074 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004058:	f003 0320 	and.w	r3, r3, #32
 800405c:	2b00      	cmp	r3, #0
 800405e:	d009      	beq.n	8004074 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004064:	2b00      	cmp	r3, #0
 8004066:	f000 8297 	beq.w	8004598 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	4798      	blx	r3
      }
      return;
 8004072:	e291      	b.n	8004598 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8004074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004078:	2b00      	cmp	r3, #0
 800407a:	f000 8117 	beq.w	80042ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800407e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004082:	f003 0301 	and.w	r3, r3, #1
 8004086:	2b00      	cmp	r3, #0
 8004088:	d106      	bne.n	8004098 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800408a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800408e:	4b85      	ldr	r3, [pc, #532]	; (80042a4 <HAL_UART_IRQHandler+0x298>)
 8004090:	4013      	ands	r3, r2
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 810a 	beq.w	80042ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d011      	beq.n	80040c8 <HAL_UART_IRQHandler+0xbc>
 80040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00b      	beq.n	80040c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	2201      	movs	r2, #1
 80040b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040be:	f043 0201 	orr.w	r2, r3, #1
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040cc:	f003 0302 	and.w	r3, r3, #2
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d011      	beq.n	80040f8 <HAL_UART_IRQHandler+0xec>
 80040d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040d8:	f003 0301 	and.w	r3, r3, #1
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00b      	beq.n	80040f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	2202      	movs	r2, #2
 80040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80040ee:	f043 0204 	orr.w	r2, r3, #4
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b00      	cmp	r3, #0
 8004102:	d011      	beq.n	8004128 <HAL_UART_IRQHandler+0x11c>
 8004104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004108:	f003 0301 	and.w	r3, r3, #1
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00b      	beq.n	8004128 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2204      	movs	r2, #4
 8004116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800411e:	f043 0202 	orr.w	r2, r3, #2
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800412c:	f003 0308 	and.w	r3, r3, #8
 8004130:	2b00      	cmp	r3, #0
 8004132:	d017      	beq.n	8004164 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004138:	f003 0320 	and.w	r3, r3, #32
 800413c:	2b00      	cmp	r3, #0
 800413e:	d105      	bne.n	800414c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8004140:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004144:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004148:	2b00      	cmp	r3, #0
 800414a:	d00b      	beq.n	8004164 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2208      	movs	r2, #8
 8004152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800415a:	f043 0208 	orr.w	r2, r3, #8
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800416c:	2b00      	cmp	r3, #0
 800416e:	d012      	beq.n	8004196 <HAL_UART_IRQHandler+0x18a>
 8004170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00c      	beq.n	8004196 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800418c:	f043 0220 	orr.w	r2, r3, #32
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 81fd 	beq.w	800459c <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a6:	f003 0320 	and.w	r3, r3, #32
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041b2:	f003 0320 	and.w	r3, r3, #32
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d003      	beq.n	80041ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d005      	beq.n	80041ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80041e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80041e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d04f      	beq.n	800428e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	f000 fec8 	bl	8004f84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041fe:	2b40      	cmp	r3, #64	; 0x40
 8004200:	d141      	bne.n	8004286 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	3308      	adds	r3, #8
 8004208:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004218:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800421c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	3308      	adds	r3, #8
 800422a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800422e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004232:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800423a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004246:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004252:	2b00      	cmp	r3, #0
 8004254:	d013      	beq.n	800427e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800425a:	4a13      	ldr	r2, [pc, #76]	; (80042a8 <HAL_UART_IRQHandler+0x29c>)
 800425c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004262:	4618      	mov	r0, r3
 8004264:	f7fd fe17 	bl	8001e96 <HAL_DMA_Abort_IT>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d017      	beq.n	800429e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004272:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004274:	687a      	ldr	r2, [r7, #4]
 8004276:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004278:	4610      	mov	r0, r2
 800427a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800427c:	e00f      	b.n	800429e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 f9a0 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004284:	e00b      	b.n	800429e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f000 f99c 	bl	80045c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800428c:	e007      	b.n	800429e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f000 f998 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800429c:	e17e      	b.n	800459c <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429e:	bf00      	nop
    return;
 80042a0:	e17c      	b.n	800459c <HAL_UART_IRQHandler+0x590>
 80042a2:	bf00      	nop
 80042a4:	04000120 	.word	0x04000120
 80042a8:	0800504d 	.word	0x0800504d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	f040 814c 	bne.w	800454e <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80042b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80042ba:	f003 0310 	and.w	r3, r3, #16
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 8145 	beq.w	800454e <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80042c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80042c8:	f003 0310 	and.w	r3, r3, #16
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 813e 	beq.w	800454e <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2210      	movs	r2, #16
 80042d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e4:	2b40      	cmp	r3, #64	; 0x40
 80042e6:	f040 80b6 	bne.w	8004456 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80042f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	f000 8150 	beq.w	80045a0 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004306:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800430a:	429a      	cmp	r2, r3
 800430c:	f080 8148 	bcs.w	80045a0 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004316:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431e:	69db      	ldr	r3, [r3, #28]
 8004320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004324:	f000 8086 	beq.w	8004434 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004330:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004334:	e853 3f00 	ldrex	r3, [r3]
 8004338:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800433c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004340:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004344:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	461a      	mov	r2, r3
 800434e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004352:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004356:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800435a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800435e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004362:	e841 2300 	strex	r3, r2, [r1]
 8004366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800436a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800436e:	2b00      	cmp	r3, #0
 8004370:	d1da      	bne.n	8004328 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	3308      	adds	r3, #8
 8004378:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800437c:	e853 3f00 	ldrex	r3, [r3]
 8004380:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004382:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004384:	f023 0301 	bic.w	r3, r3, #1
 8004388:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004396:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800439a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800439e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80043a2:	e841 2300 	strex	r3, r2, [r1]
 80043a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80043a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1e1      	bne.n	8004372 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3308      	adds	r3, #8
 80043b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80043b8:	e853 3f00 	ldrex	r3, [r3]
 80043bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80043be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80043c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3308      	adds	r3, #8
 80043ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80043d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80043d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80043d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80043da:	e841 2300 	strex	r3, r2, [r1]
 80043de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d1e3      	bne.n	80043ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2220      	movs	r2, #32
 80043ea:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043fc:	e853 3f00 	ldrex	r3, [r3]
 8004400:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	f023 0310 	bic.w	r3, r3, #16
 8004408:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004416:	65bb      	str	r3, [r7, #88]	; 0x58
 8004418:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800441c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004424:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e4      	bne.n	80043f4 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800442e:	4618      	mov	r0, r3
 8004430:	f7fd fcc1 	bl	8001db6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2202      	movs	r2, #2
 8004438:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004446:	b29b      	uxth	r3, r3
 8004448:	1ad3      	subs	r3, r2, r3
 800444a:	b29b      	uxth	r3, r3
 800444c:	4619      	mov	r1, r3
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f000 f8c2 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004454:	e0a4      	b.n	80045a0 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004462:	b29b      	uxth	r3, r3
 8004464:	1ad3      	subs	r3, r2, r3
 8004466:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004470:	b29b      	uxth	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 8096 	beq.w	80045a4 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8004478:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800447c:	2b00      	cmp	r3, #0
 800447e:	f000 8091 	beq.w	80045a4 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800448a:	e853 3f00 	ldrex	r3, [r3]
 800448e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004496:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	461a      	mov	r2, r3
 80044a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80044a4:	647b      	str	r3, [r7, #68]	; 0x44
 80044a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80044aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80044ac:	e841 2300 	strex	r3, r2, [r1]
 80044b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80044b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d1e4      	bne.n	8004482 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	3308      	adds	r3, #8
 80044be:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c2:	e853 3f00 	ldrex	r3, [r3]
 80044c6:	623b      	str	r3, [r7, #32]
   return(result);
 80044c8:	6a3b      	ldr	r3, [r7, #32]
 80044ca:	f023 0301 	bic.w	r3, r3, #1
 80044ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	3308      	adds	r3, #8
 80044d8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80044dc:	633a      	str	r2, [r7, #48]	; 0x30
 80044de:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044e4:	e841 2300 	strex	r3, r2, [r1]
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80044ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d1e3      	bne.n	80044b8 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2220      	movs	r2, #32
 80044f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2200      	movs	r2, #0
 80044fc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450a:	693b      	ldr	r3, [r7, #16]
 800450c:	e853 3f00 	ldrex	r3, [r3]
 8004510:	60fb      	str	r3, [r7, #12]
   return(result);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	f023 0310 	bic.w	r3, r3, #16
 8004518:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	461a      	mov	r2, r3
 8004522:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004526:	61fb      	str	r3, [r7, #28]
 8004528:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800452a:	69b9      	ldr	r1, [r7, #24]
 800452c:	69fa      	ldr	r2, [r7, #28]
 800452e:	e841 2300 	strex	r3, r2, [r1]
 8004532:	617b      	str	r3, [r7, #20]
   return(result);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d1e4      	bne.n	8004504 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2202      	movs	r2, #2
 800453e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004540:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004544:	4619      	mov	r1, r3
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f846 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800454c:	e02a      	b.n	80045a4 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800454e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004556:	2b00      	cmp	r3, #0
 8004558:	d00e      	beq.n	8004578 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800455a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800455e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004562:	2b00      	cmp	r3, #0
 8004564:	d008      	beq.n	8004578 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800456a:	2b00      	cmp	r3, #0
 800456c:	d01c      	beq.n	80045a8 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004572:	6878      	ldr	r0, [r7, #4]
 8004574:	4798      	blx	r3
    }
    return;
 8004576:	e017      	b.n	80045a8 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004578:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800457c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004580:	2b00      	cmp	r3, #0
 8004582:	d012      	beq.n	80045aa <HAL_UART_IRQHandler+0x59e>
 8004584:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004588:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00c      	beq.n	80045aa <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8004590:	6878      	ldr	r0, [r7, #4]
 8004592:	f000 fd71 	bl	8005078 <UART_EndTransmit_IT>
    return;
 8004596:	e008      	b.n	80045aa <HAL_UART_IRQHandler+0x59e>
      return;
 8004598:	bf00      	nop
 800459a:	e006      	b.n	80045aa <HAL_UART_IRQHandler+0x59e>
    return;
 800459c:	bf00      	nop
 800459e:	e004      	b.n	80045aa <HAL_UART_IRQHandler+0x59e>
      return;
 80045a0:	bf00      	nop
 80045a2:	e002      	b.n	80045aa <HAL_UART_IRQHandler+0x59e>
      return;
 80045a4:	bf00      	nop
 80045a6:	e000      	b.n	80045aa <HAL_UART_IRQHandler+0x59e>
    return;
 80045a8:	bf00      	nop
  }

}
 80045aa:	37e8      	adds	r7, #232	; 0xe8
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}

080045b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b083      	sub	sp, #12
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b083      	sub	sp, #12
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	460b      	mov	r3, r1
 80045e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80045f8:	2300      	movs	r3, #0
 80045fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689a      	ldr	r2, [r3, #8]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	431a      	orrs	r2, r3
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	695b      	ldr	r3, [r3, #20]
 800460a:	431a      	orrs	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	69db      	ldr	r3, [r3, #28]
 8004610:	4313      	orrs	r3, r2
 8004612:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	4ba6      	ldr	r3, [pc, #664]	; (80048b4 <UART_SetConfig+0x2c4>)
 800461c:	4013      	ands	r3, r2
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	6812      	ldr	r2, [r2, #0]
 8004622:	6979      	ldr	r1, [r7, #20]
 8004624:	430b      	orrs	r3, r1
 8004626:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6a1b      	ldr	r3, [r3, #32]
 8004648:	697a      	ldr	r2, [r7, #20]
 800464a:	4313      	orrs	r3, r2
 800464c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	697a      	ldr	r2, [r7, #20]
 800465e:	430a      	orrs	r2, r1
 8004660:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a94      	ldr	r2, [pc, #592]	; (80048b8 <UART_SetConfig+0x2c8>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d120      	bne.n	80046ae <UART_SetConfig+0xbe>
 800466c:	4b93      	ldr	r3, [pc, #588]	; (80048bc <UART_SetConfig+0x2cc>)
 800466e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004672:	f003 0303 	and.w	r3, r3, #3
 8004676:	2b03      	cmp	r3, #3
 8004678:	d816      	bhi.n	80046a8 <UART_SetConfig+0xb8>
 800467a:	a201      	add	r2, pc, #4	; (adr r2, 8004680 <UART_SetConfig+0x90>)
 800467c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004680:	08004691 	.word	0x08004691
 8004684:	0800469d 	.word	0x0800469d
 8004688:	08004697 	.word	0x08004697
 800468c:	080046a3 	.word	0x080046a3
 8004690:	2301      	movs	r3, #1
 8004692:	77fb      	strb	r3, [r7, #31]
 8004694:	e150      	b.n	8004938 <UART_SetConfig+0x348>
 8004696:	2302      	movs	r3, #2
 8004698:	77fb      	strb	r3, [r7, #31]
 800469a:	e14d      	b.n	8004938 <UART_SetConfig+0x348>
 800469c:	2304      	movs	r3, #4
 800469e:	77fb      	strb	r3, [r7, #31]
 80046a0:	e14a      	b.n	8004938 <UART_SetConfig+0x348>
 80046a2:	2308      	movs	r3, #8
 80046a4:	77fb      	strb	r3, [r7, #31]
 80046a6:	e147      	b.n	8004938 <UART_SetConfig+0x348>
 80046a8:	2310      	movs	r3, #16
 80046aa:	77fb      	strb	r3, [r7, #31]
 80046ac:	e144      	b.n	8004938 <UART_SetConfig+0x348>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a83      	ldr	r2, [pc, #524]	; (80048c0 <UART_SetConfig+0x2d0>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d132      	bne.n	800471e <UART_SetConfig+0x12e>
 80046b8:	4b80      	ldr	r3, [pc, #512]	; (80048bc <UART_SetConfig+0x2cc>)
 80046ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046be:	f003 030c 	and.w	r3, r3, #12
 80046c2:	2b0c      	cmp	r3, #12
 80046c4:	d828      	bhi.n	8004718 <UART_SetConfig+0x128>
 80046c6:	a201      	add	r2, pc, #4	; (adr r2, 80046cc <UART_SetConfig+0xdc>)
 80046c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046cc:	08004701 	.word	0x08004701
 80046d0:	08004719 	.word	0x08004719
 80046d4:	08004719 	.word	0x08004719
 80046d8:	08004719 	.word	0x08004719
 80046dc:	0800470d 	.word	0x0800470d
 80046e0:	08004719 	.word	0x08004719
 80046e4:	08004719 	.word	0x08004719
 80046e8:	08004719 	.word	0x08004719
 80046ec:	08004707 	.word	0x08004707
 80046f0:	08004719 	.word	0x08004719
 80046f4:	08004719 	.word	0x08004719
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004713 	.word	0x08004713
 8004700:	2300      	movs	r3, #0
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e118      	b.n	8004938 <UART_SetConfig+0x348>
 8004706:	2302      	movs	r3, #2
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e115      	b.n	8004938 <UART_SetConfig+0x348>
 800470c:	2304      	movs	r3, #4
 800470e:	77fb      	strb	r3, [r7, #31]
 8004710:	e112      	b.n	8004938 <UART_SetConfig+0x348>
 8004712:	2308      	movs	r3, #8
 8004714:	77fb      	strb	r3, [r7, #31]
 8004716:	e10f      	b.n	8004938 <UART_SetConfig+0x348>
 8004718:	2310      	movs	r3, #16
 800471a:	77fb      	strb	r3, [r7, #31]
 800471c:	e10c      	b.n	8004938 <UART_SetConfig+0x348>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a68      	ldr	r2, [pc, #416]	; (80048c4 <UART_SetConfig+0x2d4>)
 8004724:	4293      	cmp	r3, r2
 8004726:	d120      	bne.n	800476a <UART_SetConfig+0x17a>
 8004728:	4b64      	ldr	r3, [pc, #400]	; (80048bc <UART_SetConfig+0x2cc>)
 800472a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800472e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004732:	2b30      	cmp	r3, #48	; 0x30
 8004734:	d013      	beq.n	800475e <UART_SetConfig+0x16e>
 8004736:	2b30      	cmp	r3, #48	; 0x30
 8004738:	d814      	bhi.n	8004764 <UART_SetConfig+0x174>
 800473a:	2b20      	cmp	r3, #32
 800473c:	d009      	beq.n	8004752 <UART_SetConfig+0x162>
 800473e:	2b20      	cmp	r3, #32
 8004740:	d810      	bhi.n	8004764 <UART_SetConfig+0x174>
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <UART_SetConfig+0x15c>
 8004746:	2b10      	cmp	r3, #16
 8004748:	d006      	beq.n	8004758 <UART_SetConfig+0x168>
 800474a:	e00b      	b.n	8004764 <UART_SetConfig+0x174>
 800474c:	2300      	movs	r3, #0
 800474e:	77fb      	strb	r3, [r7, #31]
 8004750:	e0f2      	b.n	8004938 <UART_SetConfig+0x348>
 8004752:	2302      	movs	r3, #2
 8004754:	77fb      	strb	r3, [r7, #31]
 8004756:	e0ef      	b.n	8004938 <UART_SetConfig+0x348>
 8004758:	2304      	movs	r3, #4
 800475a:	77fb      	strb	r3, [r7, #31]
 800475c:	e0ec      	b.n	8004938 <UART_SetConfig+0x348>
 800475e:	2308      	movs	r3, #8
 8004760:	77fb      	strb	r3, [r7, #31]
 8004762:	e0e9      	b.n	8004938 <UART_SetConfig+0x348>
 8004764:	2310      	movs	r3, #16
 8004766:	77fb      	strb	r3, [r7, #31]
 8004768:	e0e6      	b.n	8004938 <UART_SetConfig+0x348>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	4a56      	ldr	r2, [pc, #344]	; (80048c8 <UART_SetConfig+0x2d8>)
 8004770:	4293      	cmp	r3, r2
 8004772:	d120      	bne.n	80047b6 <UART_SetConfig+0x1c6>
 8004774:	4b51      	ldr	r3, [pc, #324]	; (80048bc <UART_SetConfig+0x2cc>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800477e:	2bc0      	cmp	r3, #192	; 0xc0
 8004780:	d013      	beq.n	80047aa <UART_SetConfig+0x1ba>
 8004782:	2bc0      	cmp	r3, #192	; 0xc0
 8004784:	d814      	bhi.n	80047b0 <UART_SetConfig+0x1c0>
 8004786:	2b80      	cmp	r3, #128	; 0x80
 8004788:	d009      	beq.n	800479e <UART_SetConfig+0x1ae>
 800478a:	2b80      	cmp	r3, #128	; 0x80
 800478c:	d810      	bhi.n	80047b0 <UART_SetConfig+0x1c0>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <UART_SetConfig+0x1a8>
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	d006      	beq.n	80047a4 <UART_SetConfig+0x1b4>
 8004796:	e00b      	b.n	80047b0 <UART_SetConfig+0x1c0>
 8004798:	2300      	movs	r3, #0
 800479a:	77fb      	strb	r3, [r7, #31]
 800479c:	e0cc      	b.n	8004938 <UART_SetConfig+0x348>
 800479e:	2302      	movs	r3, #2
 80047a0:	77fb      	strb	r3, [r7, #31]
 80047a2:	e0c9      	b.n	8004938 <UART_SetConfig+0x348>
 80047a4:	2304      	movs	r3, #4
 80047a6:	77fb      	strb	r3, [r7, #31]
 80047a8:	e0c6      	b.n	8004938 <UART_SetConfig+0x348>
 80047aa:	2308      	movs	r3, #8
 80047ac:	77fb      	strb	r3, [r7, #31]
 80047ae:	e0c3      	b.n	8004938 <UART_SetConfig+0x348>
 80047b0:	2310      	movs	r3, #16
 80047b2:	77fb      	strb	r3, [r7, #31]
 80047b4:	e0c0      	b.n	8004938 <UART_SetConfig+0x348>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a44      	ldr	r2, [pc, #272]	; (80048cc <UART_SetConfig+0x2dc>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d125      	bne.n	800480c <UART_SetConfig+0x21c>
 80047c0:	4b3e      	ldr	r3, [pc, #248]	; (80048bc <UART_SetConfig+0x2cc>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047ce:	d017      	beq.n	8004800 <UART_SetConfig+0x210>
 80047d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80047d4:	d817      	bhi.n	8004806 <UART_SetConfig+0x216>
 80047d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047da:	d00b      	beq.n	80047f4 <UART_SetConfig+0x204>
 80047dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047e0:	d811      	bhi.n	8004806 <UART_SetConfig+0x216>
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <UART_SetConfig+0x1fe>
 80047e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ea:	d006      	beq.n	80047fa <UART_SetConfig+0x20a>
 80047ec:	e00b      	b.n	8004806 <UART_SetConfig+0x216>
 80047ee:	2300      	movs	r3, #0
 80047f0:	77fb      	strb	r3, [r7, #31]
 80047f2:	e0a1      	b.n	8004938 <UART_SetConfig+0x348>
 80047f4:	2302      	movs	r3, #2
 80047f6:	77fb      	strb	r3, [r7, #31]
 80047f8:	e09e      	b.n	8004938 <UART_SetConfig+0x348>
 80047fa:	2304      	movs	r3, #4
 80047fc:	77fb      	strb	r3, [r7, #31]
 80047fe:	e09b      	b.n	8004938 <UART_SetConfig+0x348>
 8004800:	2308      	movs	r3, #8
 8004802:	77fb      	strb	r3, [r7, #31]
 8004804:	e098      	b.n	8004938 <UART_SetConfig+0x348>
 8004806:	2310      	movs	r3, #16
 8004808:	77fb      	strb	r3, [r7, #31]
 800480a:	e095      	b.n	8004938 <UART_SetConfig+0x348>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a2f      	ldr	r2, [pc, #188]	; (80048d0 <UART_SetConfig+0x2e0>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d125      	bne.n	8004862 <UART_SetConfig+0x272>
 8004816:	4b29      	ldr	r3, [pc, #164]	; (80048bc <UART_SetConfig+0x2cc>)
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004820:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004824:	d017      	beq.n	8004856 <UART_SetConfig+0x266>
 8004826:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800482a:	d817      	bhi.n	800485c <UART_SetConfig+0x26c>
 800482c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004830:	d00b      	beq.n	800484a <UART_SetConfig+0x25a>
 8004832:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004836:	d811      	bhi.n	800485c <UART_SetConfig+0x26c>
 8004838:	2b00      	cmp	r3, #0
 800483a:	d003      	beq.n	8004844 <UART_SetConfig+0x254>
 800483c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004840:	d006      	beq.n	8004850 <UART_SetConfig+0x260>
 8004842:	e00b      	b.n	800485c <UART_SetConfig+0x26c>
 8004844:	2301      	movs	r3, #1
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e076      	b.n	8004938 <UART_SetConfig+0x348>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e073      	b.n	8004938 <UART_SetConfig+0x348>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e070      	b.n	8004938 <UART_SetConfig+0x348>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e06d      	b.n	8004938 <UART_SetConfig+0x348>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e06a      	b.n	8004938 <UART_SetConfig+0x348>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a1b      	ldr	r2, [pc, #108]	; (80048d4 <UART_SetConfig+0x2e4>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d138      	bne.n	80048de <UART_SetConfig+0x2ee>
 800486c:	4b13      	ldr	r3, [pc, #76]	; (80048bc <UART_SetConfig+0x2cc>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004876:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x2bc>
 800487c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004880:	d82a      	bhi.n	80048d8 <UART_SetConfig+0x2e8>
 8004882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x2b0>
 8004888:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800488c:	d824      	bhi.n	80048d8 <UART_SetConfig+0x2e8>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x2aa>
 8004892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x2b6>
 8004898:	e01e      	b.n	80048d8 <UART_SetConfig+0x2e8>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e04b      	b.n	8004938 <UART_SetConfig+0x348>
 80048a0:	2302      	movs	r3, #2
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e048      	b.n	8004938 <UART_SetConfig+0x348>
 80048a6:	2304      	movs	r3, #4
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e045      	b.n	8004938 <UART_SetConfig+0x348>
 80048ac:	2308      	movs	r3, #8
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e042      	b.n	8004938 <UART_SetConfig+0x348>
 80048b2:	bf00      	nop
 80048b4:	efff69f3 	.word	0xefff69f3
 80048b8:	40011000 	.word	0x40011000
 80048bc:	40023800 	.word	0x40023800
 80048c0:	40004400 	.word	0x40004400
 80048c4:	40004800 	.word	0x40004800
 80048c8:	40004c00 	.word	0x40004c00
 80048cc:	40005000 	.word	0x40005000
 80048d0:	40011400 	.word	0x40011400
 80048d4:	40007800 	.word	0x40007800
 80048d8:	2310      	movs	r3, #16
 80048da:	77fb      	strb	r3, [r7, #31]
 80048dc:	e02c      	b.n	8004938 <UART_SetConfig+0x348>
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a72      	ldr	r2, [pc, #456]	; (8004aac <UART_SetConfig+0x4bc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d125      	bne.n	8004934 <UART_SetConfig+0x344>
 80048e8:	4b71      	ldr	r3, [pc, #452]	; (8004ab0 <UART_SetConfig+0x4c0>)
 80048ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ee:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80048f2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048f6:	d017      	beq.n	8004928 <UART_SetConfig+0x338>
 80048f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80048fc:	d817      	bhi.n	800492e <UART_SetConfig+0x33e>
 80048fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004902:	d00b      	beq.n	800491c <UART_SetConfig+0x32c>
 8004904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004908:	d811      	bhi.n	800492e <UART_SetConfig+0x33e>
 800490a:	2b00      	cmp	r3, #0
 800490c:	d003      	beq.n	8004916 <UART_SetConfig+0x326>
 800490e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004912:	d006      	beq.n	8004922 <UART_SetConfig+0x332>
 8004914:	e00b      	b.n	800492e <UART_SetConfig+0x33e>
 8004916:	2300      	movs	r3, #0
 8004918:	77fb      	strb	r3, [r7, #31]
 800491a:	e00d      	b.n	8004938 <UART_SetConfig+0x348>
 800491c:	2302      	movs	r3, #2
 800491e:	77fb      	strb	r3, [r7, #31]
 8004920:	e00a      	b.n	8004938 <UART_SetConfig+0x348>
 8004922:	2304      	movs	r3, #4
 8004924:	77fb      	strb	r3, [r7, #31]
 8004926:	e007      	b.n	8004938 <UART_SetConfig+0x348>
 8004928:	2308      	movs	r3, #8
 800492a:	77fb      	strb	r3, [r7, #31]
 800492c:	e004      	b.n	8004938 <UART_SetConfig+0x348>
 800492e:	2310      	movs	r3, #16
 8004930:	77fb      	strb	r3, [r7, #31]
 8004932:	e001      	b.n	8004938 <UART_SetConfig+0x348>
 8004934:	2310      	movs	r3, #16
 8004936:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004940:	d15b      	bne.n	80049fa <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004942:	7ffb      	ldrb	r3, [r7, #31]
 8004944:	2b08      	cmp	r3, #8
 8004946:	d828      	bhi.n	800499a <UART_SetConfig+0x3aa>
 8004948:	a201      	add	r2, pc, #4	; (adr r2, 8004950 <UART_SetConfig+0x360>)
 800494a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800494e:	bf00      	nop
 8004950:	08004975 	.word	0x08004975
 8004954:	0800497d 	.word	0x0800497d
 8004958:	08004985 	.word	0x08004985
 800495c:	0800499b 	.word	0x0800499b
 8004960:	0800498b 	.word	0x0800498b
 8004964:	0800499b 	.word	0x0800499b
 8004968:	0800499b 	.word	0x0800499b
 800496c:	0800499b 	.word	0x0800499b
 8004970:	08004993 	.word	0x08004993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004974:	f7fe f9aa 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004978:	61b8      	str	r0, [r7, #24]
        break;
 800497a:	e013      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800497c:	f7fe f9ba 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004980:	61b8      	str	r0, [r7, #24]
        break;
 8004982:	e00f      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004984:	4b4b      	ldr	r3, [pc, #300]	; (8004ab4 <UART_SetConfig+0x4c4>)
 8004986:	61bb      	str	r3, [r7, #24]
        break;
 8004988:	e00c      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800498a:	f7fe f88d 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 800498e:	61b8      	str	r0, [r7, #24]
        break;
 8004990:	e008      	b.n	80049a4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004996:	61bb      	str	r3, [r7, #24]
        break;
 8004998:	e004      	b.n	80049a4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	77bb      	strb	r3, [r7, #30]
        break;
 80049a2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d074      	beq.n	8004a94 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	005a      	lsls	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	685b      	ldr	r3, [r3, #4]
 80049b2:	085b      	lsrs	r3, r3, #1
 80049b4:	441a      	add	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80049be:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0f      	cmp	r3, #15
 80049c4:	d916      	bls.n	80049f4 <UART_SetConfig+0x404>
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80049cc:	d212      	bcs.n	80049f4 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	b29b      	uxth	r3, r3
 80049d2:	f023 030f 	bic.w	r3, r3, #15
 80049d6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	085b      	lsrs	r3, r3, #1
 80049dc:	b29b      	uxth	r3, r3
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	89fb      	ldrh	r3, [r7, #14]
 80049e6:	4313      	orrs	r3, r2
 80049e8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	89fa      	ldrh	r2, [r7, #14]
 80049f0:	60da      	str	r2, [r3, #12]
 80049f2:	e04f      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80049f4:	2301      	movs	r3, #1
 80049f6:	77bb      	strb	r3, [r7, #30]
 80049f8:	e04c      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80049fa:	7ffb      	ldrb	r3, [r7, #31]
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d828      	bhi.n	8004a52 <UART_SetConfig+0x462>
 8004a00:	a201      	add	r2, pc, #4	; (adr r2, 8004a08 <UART_SetConfig+0x418>)
 8004a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a06:	bf00      	nop
 8004a08:	08004a2d 	.word	0x08004a2d
 8004a0c:	08004a35 	.word	0x08004a35
 8004a10:	08004a3d 	.word	0x08004a3d
 8004a14:	08004a53 	.word	0x08004a53
 8004a18:	08004a43 	.word	0x08004a43
 8004a1c:	08004a53 	.word	0x08004a53
 8004a20:	08004a53 	.word	0x08004a53
 8004a24:	08004a53 	.word	0x08004a53
 8004a28:	08004a4b 	.word	0x08004a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a2c:	f7fe f94e 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 8004a30:	61b8      	str	r0, [r7, #24]
        break;
 8004a32:	e013      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a34:	f7fe f95e 	bl	8002cf4 <HAL_RCC_GetPCLK2Freq>
 8004a38:	61b8      	str	r0, [r7, #24]
        break;
 8004a3a:	e00f      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a3c:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <UART_SetConfig+0x4c4>)
 8004a3e:	61bb      	str	r3, [r7, #24]
        break;
 8004a40:	e00c      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a42:	f7fe f831 	bl	8002aa8 <HAL_RCC_GetSysClockFreq>
 8004a46:	61b8      	str	r0, [r7, #24]
        break;
 8004a48:	e008      	b.n	8004a5c <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a4e:	61bb      	str	r3, [r7, #24]
        break;
 8004a50:	e004      	b.n	8004a5c <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004a52:	2300      	movs	r3, #0
 8004a54:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a56:	2301      	movs	r3, #1
 8004a58:	77bb      	strb	r3, [r7, #30]
        break;
 8004a5a:	bf00      	nop
    }

    if (pclk != 0U)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d018      	beq.n	8004a94 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085a      	lsrs	r2, r3, #1
 8004a68:	69bb      	ldr	r3, [r7, #24]
 8004a6a:	441a      	add	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a74:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	2b0f      	cmp	r3, #15
 8004a7a:	d909      	bls.n	8004a90 <UART_SetConfig+0x4a0>
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a82:	d205      	bcs.n	8004a90 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	b29a      	uxth	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60da      	str	r2, [r3, #12]
 8004a8e:	e001      	b.n	8004a94 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004aa0:	7fbb      	ldrb	r3, [r7, #30]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3720      	adds	r7, #32
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	40007c00 	.word	0x40007c00
 8004ab0:	40023800 	.word	0x40023800
 8004ab4:	00f42400 	.word	0x00f42400

08004ab8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b083      	sub	sp, #12
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac4:	f003 0301 	and.w	r3, r3, #1
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d00a      	beq.n	8004ae2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	430a      	orrs	r2, r1
 8004ae0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d00a      	beq.n	8004b04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	430a      	orrs	r2, r1
 8004b02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	f003 0304 	and.w	r3, r3, #4
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00a      	beq.n	8004b26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	430a      	orrs	r2, r1
 8004b24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	f003 0308 	and.w	r3, r3, #8
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00a      	beq.n	8004b48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	f003 0310 	and.w	r3, r3, #16
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	430a      	orrs	r2, r1
 8004b68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6e:	f003 0320 	and.w	r3, r3, #32
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d00a      	beq.n	8004b8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	430a      	orrs	r2, r1
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d01a      	beq.n	8004bce <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004bb6:	d10a      	bne.n	8004bce <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685b      	ldr	r3, [r3, #4]
 8004bbe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	430a      	orrs	r2, r1
 8004bcc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d00a      	beq.n	8004bf0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	605a      	str	r2, [r3, #4]
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b086      	sub	sp, #24
 8004c00:	af02      	add	r7, sp, #8
 8004c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2200      	movs	r2, #0
 8004c08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004c0c:	f7fc ffb6 	bl	8001b7c <HAL_GetTick>
 8004c10:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f003 0308 	and.w	r3, r3, #8
 8004c1c:	2b08      	cmp	r3, #8
 8004c1e:	d10e      	bne.n	8004c3e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004c20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f81b 	bl	8004c6a <UART_WaitOnFlagUntilTimeout>
 8004c34:	4603      	mov	r3, r0
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d001      	beq.n	8004c3e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e011      	b.n	8004c62 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2220      	movs	r2, #32
 8004c42:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2220      	movs	r2, #32
 8004c48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b09c      	sub	sp, #112	; 0x70
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	603b      	str	r3, [r7, #0]
 8004c76:	4613      	mov	r3, r2
 8004c78:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c7a:	e0a7      	b.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c82:	f000 80a3 	beq.w	8004dcc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c86:	f7fc ff79 	bl	8001b7c <HAL_GetTick>
 8004c8a:	4602      	mov	r2, r0
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	1ad3      	subs	r3, r2, r3
 8004c90:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004c92:	429a      	cmp	r2, r3
 8004c94:	d302      	bcc.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x32>
 8004c96:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d13f      	bne.n	8004d1c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ca4:	e853 3f00 	ldrex	r3, [r3]
 8004ca8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004caa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004cac:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004cb0:	667b      	str	r3, [r7, #100]	; 0x64
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004cba:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cbc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004cc0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004cc8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e6      	bne.n	8004c9c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004cd8:	e853 3f00 	ldrex	r3, [r3]
 8004cdc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce0:	f023 0301 	bic.w	r3, r3, #1
 8004ce4:	663b      	str	r3, [r7, #96]	; 0x60
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	3308      	adds	r3, #8
 8004cec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004cee:	64ba      	str	r2, [r7, #72]	; 0x48
 8004cf0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cf2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004cf4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004cf6:	e841 2300 	strex	r3, r2, [r1]
 8004cfa:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004cfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1e5      	bne.n	8004cce <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2220      	movs	r2, #32
 8004d06:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	2220      	movs	r2, #32
 8004d0c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	e068      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 0304 	and.w	r3, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d050      	beq.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69db      	ldr	r3, [r3, #28]
 8004d30:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d38:	d148      	bne.n	8004dcc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004d42:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d4c:	e853 3f00 	ldrex	r3, [r3]
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d54:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d58:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	461a      	mov	r2, r3
 8004d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004d62:	637b      	str	r3, [r7, #52]	; 0x34
 8004d64:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d66:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004d68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d6a:	e841 2300 	strex	r3, r2, [r1]
 8004d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004d70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d1e6      	bne.n	8004d44 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	3308      	adds	r3, #8
 8004d7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	e853 3f00 	ldrex	r3, [r3]
 8004d84:	613b      	str	r3, [r7, #16]
   return(result);
 8004d86:	693b      	ldr	r3, [r7, #16]
 8004d88:	f023 0301 	bic.w	r3, r3, #1
 8004d8c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3308      	adds	r3, #8
 8004d94:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d96:	623a      	str	r2, [r7, #32]
 8004d98:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9a:	69f9      	ldr	r1, [r7, #28]
 8004d9c:	6a3a      	ldr	r2, [r7, #32]
 8004d9e:	e841 2300 	strex	r3, r2, [r1]
 8004da2:	61bb      	str	r3, [r7, #24]
   return(result);
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1e5      	bne.n	8004d76 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2220      	movs	r2, #32
 8004dae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2220      	movs	r2, #32
 8004db4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2220      	movs	r2, #32
 8004dbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004dc8:	2303      	movs	r3, #3
 8004dca:	e010      	b.n	8004dee <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69da      	ldr	r2, [r3, #28]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	4013      	ands	r3, r2
 8004dd6:	68ba      	ldr	r2, [r7, #8]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	bf0c      	ite	eq
 8004ddc:	2301      	moveq	r3, #1
 8004dde:	2300      	movne	r3, #0
 8004de0:	b2db      	uxtb	r3, r3
 8004de2:	461a      	mov	r2, r3
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	f43f af48 	beq.w	8004c7c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3770      	adds	r7, #112	; 0x70
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
	...

08004df8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b097      	sub	sp, #92	; 0x5c
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	60f8      	str	r0, [r7, #12]
 8004e00:	60b9      	str	r1, [r7, #8]
 8004e02:	4613      	mov	r3, r2
 8004e04:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	68ba      	ldr	r2, [r7, #8]
 8004e0a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	88fa      	ldrh	r2, [r7, #6]
 8004e10:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	88fa      	ldrh	r2, [r7, #6]
 8004e18:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2a:	d10e      	bne.n	8004e4a <UART_Start_Receive_IT+0x52>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	691b      	ldr	r3, [r3, #16]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d105      	bne.n	8004e40 <UART_Start_Receive_IT+0x48>
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004e3a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e3e:	e02d      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	22ff      	movs	r2, #255	; 0xff
 8004e44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e48:	e028      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10d      	bne.n	8004e6e <UART_Start_Receive_IT+0x76>
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <UART_Start_Receive_IT+0x6c>
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	22ff      	movs	r2, #255	; 0xff
 8004e5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e62:	e01b      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	227f      	movs	r2, #127	; 0x7f
 8004e68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e6c:	e016      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004e76:	d10d      	bne.n	8004e94 <UART_Start_Receive_IT+0x9c>
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d104      	bne.n	8004e8a <UART_Start_Receive_IT+0x92>
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	227f      	movs	r2, #127	; 0x7f
 8004e84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e88:	e008      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	223f      	movs	r2, #63	; 0x3f
 8004e8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004e92:	e003      	b.n	8004e9c <UART_Start_Receive_IT+0xa4>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2222      	movs	r2, #34	; 0x22
 8004ea8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	3308      	adds	r3, #8
 8004eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb6:	e853 3f00 	ldrex	r3, [r3]
 8004eba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ebc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ebe:	f043 0301 	orr.w	r3, r3, #1
 8004ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	3308      	adds	r3, #8
 8004eca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004ecc:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ece:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ed2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ed4:	e841 2300 	strex	r3, r2, [r1]
 8004ed8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d1e5      	bne.n	8004eac <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ee8:	d107      	bne.n	8004efa <UART_Start_Receive_IT+0x102>
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	691b      	ldr	r3, [r3, #16]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d103      	bne.n	8004efa <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4a21      	ldr	r2, [pc, #132]	; (8004f7c <UART_Start_Receive_IT+0x184>)
 8004ef6:	669a      	str	r2, [r3, #104]	; 0x68
 8004ef8:	e002      	b.n	8004f00 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	4a20      	ldr	r2, [pc, #128]	; (8004f80 <UART_Start_Receive_IT+0x188>)
 8004efe:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	691b      	ldr	r3, [r3, #16]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d019      	beq.n	8004f3c <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f18:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004f1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	461a      	mov	r2, r3
 8004f24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f2a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f2e:	e841 2300 	strex	r3, r2, [r1]
 8004f32:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d1e6      	bne.n	8004f08 <UART_Start_Receive_IT+0x110>
 8004f3a:	e018      	b.n	8004f6e <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	e853 3f00 	ldrex	r3, [r3]
 8004f48:	613b      	str	r3, [r7, #16]
   return(result);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	f043 0320 	orr.w	r3, r3, #32
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	461a      	mov	r2, r3
 8004f58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f5a:	623b      	str	r3, [r7, #32]
 8004f5c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5e:	69f9      	ldr	r1, [r7, #28]
 8004f60:	6a3a      	ldr	r2, [r7, #32]
 8004f62:	e841 2300 	strex	r3, r2, [r1]
 8004f66:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d1e6      	bne.n	8004f3c <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8004f6e:	2300      	movs	r3, #0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	375c      	adds	r7, #92	; 0x5c
 8004f74:	46bd      	mov	sp, r7
 8004f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7a:	4770      	bx	lr
 8004f7c:	08005233 	.word	0x08005233
 8004f80:	080050cd 	.word	0x080050cd

08004f84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f84:	b480      	push	{r7}
 8004f86:	b095      	sub	sp, #84	; 0x54
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004fa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004faa:	643b      	str	r3, [r7, #64]	; 0x40
 8004fac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004fb0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fb2:	e841 2300 	strex	r3, r2, [r1]
 8004fb6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d1e6      	bne.n	8004f8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	3308      	adds	r3, #8
 8004fc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	e853 3f00 	ldrex	r3, [r3]
 8004fcc:	61fb      	str	r3, [r7, #28]
   return(result);
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	f023 0301 	bic.w	r3, r3, #1
 8004fd4:	64bb      	str	r3, [r7, #72]	; 0x48
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3308      	adds	r3, #8
 8004fdc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fde:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fe0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe6:	e841 2300 	strex	r3, r2, [r1]
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1e5      	bne.n	8004fbe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d118      	bne.n	800502c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	e853 3f00 	ldrex	r3, [r3]
 8005006:	60bb      	str	r3, [r7, #8]
   return(result);
 8005008:	68bb      	ldr	r3, [r7, #8]
 800500a:	f023 0310 	bic.w	r3, r3, #16
 800500e:	647b      	str	r3, [r7, #68]	; 0x44
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	461a      	mov	r2, r3
 8005016:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005018:	61bb      	str	r3, [r7, #24]
 800501a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501c:	6979      	ldr	r1, [r7, #20]
 800501e:	69ba      	ldr	r2, [r7, #24]
 8005020:	e841 2300 	strex	r3, r2, [r1]
 8005024:	613b      	str	r3, [r7, #16]
   return(result);
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d1e6      	bne.n	8004ffa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2220      	movs	r2, #32
 8005030:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2200      	movs	r2, #0
 8005038:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2200      	movs	r2, #0
 800503e:	669a      	str	r2, [r3, #104]	; 0x68
}
 8005040:	bf00      	nop
 8005042:	3754      	adds	r7, #84	; 0x54
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b084      	sub	sp, #16
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005058:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	2200      	movs	r2, #0
 800505e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800506a:	68f8      	ldr	r0, [r7, #12]
 800506c:	f7ff faaa 	bl	80045c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005070:	bf00      	nop
 8005072:	3710      	adds	r7, #16
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}

08005078 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	e853 3f00 	ldrex	r3, [r3]
 800508c:	60bb      	str	r3, [r7, #8]
   return(result);
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	61fb      	str	r3, [r7, #28]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	61bb      	str	r3, [r7, #24]
 80050a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050a2:	6979      	ldr	r1, [r7, #20]
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	e841 2300 	strex	r3, r2, [r1]
 80050aa:	613b      	str	r3, [r7, #16]
   return(result);
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d1e6      	bne.n	8005080 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2220      	movs	r2, #32
 80050b6:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f7ff fa76 	bl	80045b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050c4:	bf00      	nop
 80050c6:	3720      	adds	r7, #32
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}

080050cc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b096      	sub	sp, #88	; 0x58
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80050da:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050e4:	2b22      	cmp	r3, #34	; 0x22
 80050e6:	f040 8098 	bne.w	800521a <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80050f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80050f8:	b2d9      	uxtb	r1, r3
 80050fa:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005104:	400a      	ands	r2, r1
 8005106:	b2d2      	uxtb	r2, r2
 8005108:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510e:	1c5a      	adds	r2, r3, #1
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800512c:	b29b      	uxth	r3, r3
 800512e:	2b00      	cmp	r3, #0
 8005130:	d17b      	bne.n	800522a <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005140:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005142:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005146:	653b      	str	r3, [r7, #80]	; 0x50
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005150:	647b      	str	r3, [r7, #68]	; 0x44
 8005152:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800515e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	3308      	adds	r3, #8
 800516a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	623b      	str	r3, [r7, #32]
   return(result);
 8005174:	6a3b      	ldr	r3, [r7, #32]
 8005176:	f023 0301 	bic.w	r3, r3, #1
 800517a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	3308      	adds	r3, #8
 8005182:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005184:	633a      	str	r2, [r7, #48]	; 0x30
 8005186:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800518a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005192:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e5      	bne.n	8005164 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d12e      	bne.n	8005212 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2200      	movs	r2, #0
 80051b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	e853 3f00 	ldrex	r3, [r3]
 80051c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f023 0310 	bic.w	r3, r3, #16
 80051ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	461a      	mov	r2, r3
 80051d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051d8:	61fb      	str	r3, [r7, #28]
 80051da:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051dc:	69b9      	ldr	r1, [r7, #24]
 80051de:	69fa      	ldr	r2, [r7, #28]
 80051e0:	e841 2300 	strex	r3, r2, [r1]
 80051e4:	617b      	str	r3, [r7, #20]
   return(result);
 80051e6:	697b      	ldr	r3, [r7, #20]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d1e6      	bne.n	80051ba <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	69db      	ldr	r3, [r3, #28]
 80051f2:	f003 0310 	and.w	r3, r3, #16
 80051f6:	2b10      	cmp	r3, #16
 80051f8:	d103      	bne.n	8005202 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2210      	movs	r2, #16
 8005200:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005208:	4619      	mov	r1, r3
 800520a:	6878      	ldr	r0, [r7, #4]
 800520c:	f7ff f9e4 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005210:	e00b      	b.n	800522a <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7fc f8f0 	bl	80013f8 <HAL_UART_RxCpltCallback>
}
 8005218:	e007      	b.n	800522a <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	699a      	ldr	r2, [r3, #24]
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	619a      	str	r2, [r3, #24]
}
 800522a:	bf00      	nop
 800522c:	3758      	adds	r7, #88	; 0x58
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b096      	sub	sp, #88	; 0x58
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005240:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800524a:	2b22      	cmp	r3, #34	; 0x22
 800524c:	f040 8098 	bne.w	8005380 <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800525e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8005260:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8005264:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005268:	4013      	ands	r3, r2
 800526a:	b29a      	uxth	r2, r3
 800526c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800526e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005274:	1c9a      	adds	r2, r3, #2
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8005292:	b29b      	uxth	r3, r3
 8005294:	2b00      	cmp	r3, #0
 8005296:	d17b      	bne.n	8005390 <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800529e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a0:	e853 3f00 	ldrex	r3, [r3]
 80052a4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ac:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	461a      	mov	r2, r3
 80052b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052b6:	643b      	str	r3, [r7, #64]	; 0x40
 80052b8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ba:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052bc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052be:	e841 2300 	strex	r3, r2, [r1]
 80052c2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d1e6      	bne.n	8005298 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3308      	adds	r3, #8
 80052d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d2:	6a3b      	ldr	r3, [r7, #32]
 80052d4:	e853 3f00 	ldrex	r3, [r3]
 80052d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	f023 0301 	bic.w	r3, r3, #1
 80052e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	3308      	adds	r3, #8
 80052e8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ea:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f2:	e841 2300 	strex	r3, r2, [r1]
 80052f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1e5      	bne.n	80052ca <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2220      	movs	r2, #32
 8005302:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005316:	2b01      	cmp	r3, #1
 8005318:	d12e      	bne.n	8005378 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	e853 3f00 	ldrex	r3, [r3]
 800532c:	60bb      	str	r3, [r7, #8]
   return(result);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	f023 0310 	bic.w	r3, r3, #16
 8005334:	647b      	str	r3, [r7, #68]	; 0x44
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533e:	61bb      	str	r3, [r7, #24]
 8005340:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005342:	6979      	ldr	r1, [r7, #20]
 8005344:	69ba      	ldr	r2, [r7, #24]
 8005346:	e841 2300 	strex	r3, r2, [r1]
 800534a:	613b      	str	r3, [r7, #16]
   return(result);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1e6      	bne.n	8005320 <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	f003 0310 	and.w	r3, r3, #16
 800535c:	2b10      	cmp	r3, #16
 800535e:	d103      	bne.n	8005368 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2210      	movs	r2, #16
 8005366:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800536e:	4619      	mov	r1, r3
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f7ff f931 	bl	80045d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005376:	e00b      	b.n	8005390 <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f7fc f83d 	bl	80013f8 <HAL_UART_RxCpltCallback>
}
 800537e:	e007      	b.n	8005390 <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	699a      	ldr	r2, [r3, #24]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0208 	orr.w	r2, r2, #8
 800538e:	619a      	str	r2, [r3, #24]
}
 8005390:	bf00      	nop
 8005392:	3758      	adds	r7, #88	; 0x58
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}

08005398 <__errno>:
 8005398:	4b01      	ldr	r3, [pc, #4]	; (80053a0 <__errno+0x8>)
 800539a:	6818      	ldr	r0, [r3, #0]
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	2000001c 	.word	0x2000001c

080053a4 <__libc_init_array>:
 80053a4:	b570      	push	{r4, r5, r6, lr}
 80053a6:	4d0d      	ldr	r5, [pc, #52]	; (80053dc <__libc_init_array+0x38>)
 80053a8:	4c0d      	ldr	r4, [pc, #52]	; (80053e0 <__libc_init_array+0x3c>)
 80053aa:	1b64      	subs	r4, r4, r5
 80053ac:	10a4      	asrs	r4, r4, #2
 80053ae:	2600      	movs	r6, #0
 80053b0:	42a6      	cmp	r6, r4
 80053b2:	d109      	bne.n	80053c8 <__libc_init_array+0x24>
 80053b4:	4d0b      	ldr	r5, [pc, #44]	; (80053e4 <__libc_init_array+0x40>)
 80053b6:	4c0c      	ldr	r4, [pc, #48]	; (80053e8 <__libc_init_array+0x44>)
 80053b8:	f003 ff76 	bl	80092a8 <_init>
 80053bc:	1b64      	subs	r4, r4, r5
 80053be:	10a4      	asrs	r4, r4, #2
 80053c0:	2600      	movs	r6, #0
 80053c2:	42a6      	cmp	r6, r4
 80053c4:	d105      	bne.n	80053d2 <__libc_init_array+0x2e>
 80053c6:	bd70      	pop	{r4, r5, r6, pc}
 80053c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80053cc:	4798      	blx	r3
 80053ce:	3601      	adds	r6, #1
 80053d0:	e7ee      	b.n	80053b0 <__libc_init_array+0xc>
 80053d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80053d6:	4798      	blx	r3
 80053d8:	3601      	adds	r6, #1
 80053da:	e7f2      	b.n	80053c2 <__libc_init_array+0x1e>
 80053dc:	08009748 	.word	0x08009748
 80053e0:	08009748 	.word	0x08009748
 80053e4:	08009748 	.word	0x08009748
 80053e8:	0800974c 	.word	0x0800974c

080053ec <memset>:
 80053ec:	4402      	add	r2, r0
 80053ee:	4603      	mov	r3, r0
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d100      	bne.n	80053f6 <memset+0xa>
 80053f4:	4770      	bx	lr
 80053f6:	f803 1b01 	strb.w	r1, [r3], #1
 80053fa:	e7f9      	b.n	80053f0 <memset+0x4>

080053fc <_scanf_float>:
 80053fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005400:	b087      	sub	sp, #28
 8005402:	4617      	mov	r7, r2
 8005404:	9303      	str	r3, [sp, #12]
 8005406:	688b      	ldr	r3, [r1, #8]
 8005408:	1e5a      	subs	r2, r3, #1
 800540a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800540e:	bf83      	ittte	hi
 8005410:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8005414:	195b      	addhi	r3, r3, r5
 8005416:	9302      	strhi	r3, [sp, #8]
 8005418:	2300      	movls	r3, #0
 800541a:	bf86      	itte	hi
 800541c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005420:	608b      	strhi	r3, [r1, #8]
 8005422:	9302      	strls	r3, [sp, #8]
 8005424:	680b      	ldr	r3, [r1, #0]
 8005426:	468b      	mov	fp, r1
 8005428:	2500      	movs	r5, #0
 800542a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800542e:	f84b 3b1c 	str.w	r3, [fp], #28
 8005432:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8005436:	4680      	mov	r8, r0
 8005438:	460c      	mov	r4, r1
 800543a:	465e      	mov	r6, fp
 800543c:	46aa      	mov	sl, r5
 800543e:	46a9      	mov	r9, r5
 8005440:	9501      	str	r5, [sp, #4]
 8005442:	68a2      	ldr	r2, [r4, #8]
 8005444:	b152      	cbz	r2, 800545c <_scanf_float+0x60>
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	2b4e      	cmp	r3, #78	; 0x4e
 800544c:	d864      	bhi.n	8005518 <_scanf_float+0x11c>
 800544e:	2b40      	cmp	r3, #64	; 0x40
 8005450:	d83c      	bhi.n	80054cc <_scanf_float+0xd0>
 8005452:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8005456:	b2c8      	uxtb	r0, r1
 8005458:	280e      	cmp	r0, #14
 800545a:	d93a      	bls.n	80054d2 <_scanf_float+0xd6>
 800545c:	f1b9 0f00 	cmp.w	r9, #0
 8005460:	d003      	beq.n	800546a <_scanf_float+0x6e>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005468:	6023      	str	r3, [r4, #0]
 800546a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800546e:	f1ba 0f01 	cmp.w	sl, #1
 8005472:	f200 8113 	bhi.w	800569c <_scanf_float+0x2a0>
 8005476:	455e      	cmp	r6, fp
 8005478:	f200 8105 	bhi.w	8005686 <_scanf_float+0x28a>
 800547c:	2501      	movs	r5, #1
 800547e:	4628      	mov	r0, r5
 8005480:	b007      	add	sp, #28
 8005482:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005486:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800548a:	2a0d      	cmp	r2, #13
 800548c:	d8e6      	bhi.n	800545c <_scanf_float+0x60>
 800548e:	a101      	add	r1, pc, #4	; (adr r1, 8005494 <_scanf_float+0x98>)
 8005490:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8005494:	080055d3 	.word	0x080055d3
 8005498:	0800545d 	.word	0x0800545d
 800549c:	0800545d 	.word	0x0800545d
 80054a0:	0800545d 	.word	0x0800545d
 80054a4:	08005633 	.word	0x08005633
 80054a8:	0800560b 	.word	0x0800560b
 80054ac:	0800545d 	.word	0x0800545d
 80054b0:	0800545d 	.word	0x0800545d
 80054b4:	080055e1 	.word	0x080055e1
 80054b8:	0800545d 	.word	0x0800545d
 80054bc:	0800545d 	.word	0x0800545d
 80054c0:	0800545d 	.word	0x0800545d
 80054c4:	0800545d 	.word	0x0800545d
 80054c8:	08005599 	.word	0x08005599
 80054cc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80054d0:	e7db      	b.n	800548a <_scanf_float+0x8e>
 80054d2:	290e      	cmp	r1, #14
 80054d4:	d8c2      	bhi.n	800545c <_scanf_float+0x60>
 80054d6:	a001      	add	r0, pc, #4	; (adr r0, 80054dc <_scanf_float+0xe0>)
 80054d8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80054dc:	0800558b 	.word	0x0800558b
 80054e0:	0800545d 	.word	0x0800545d
 80054e4:	0800558b 	.word	0x0800558b
 80054e8:	0800561f 	.word	0x0800561f
 80054ec:	0800545d 	.word	0x0800545d
 80054f0:	08005539 	.word	0x08005539
 80054f4:	08005575 	.word	0x08005575
 80054f8:	08005575 	.word	0x08005575
 80054fc:	08005575 	.word	0x08005575
 8005500:	08005575 	.word	0x08005575
 8005504:	08005575 	.word	0x08005575
 8005508:	08005575 	.word	0x08005575
 800550c:	08005575 	.word	0x08005575
 8005510:	08005575 	.word	0x08005575
 8005514:	08005575 	.word	0x08005575
 8005518:	2b6e      	cmp	r3, #110	; 0x6e
 800551a:	d809      	bhi.n	8005530 <_scanf_float+0x134>
 800551c:	2b60      	cmp	r3, #96	; 0x60
 800551e:	d8b2      	bhi.n	8005486 <_scanf_float+0x8a>
 8005520:	2b54      	cmp	r3, #84	; 0x54
 8005522:	d077      	beq.n	8005614 <_scanf_float+0x218>
 8005524:	2b59      	cmp	r3, #89	; 0x59
 8005526:	d199      	bne.n	800545c <_scanf_float+0x60>
 8005528:	2d07      	cmp	r5, #7
 800552a:	d197      	bne.n	800545c <_scanf_float+0x60>
 800552c:	2508      	movs	r5, #8
 800552e:	e029      	b.n	8005584 <_scanf_float+0x188>
 8005530:	2b74      	cmp	r3, #116	; 0x74
 8005532:	d06f      	beq.n	8005614 <_scanf_float+0x218>
 8005534:	2b79      	cmp	r3, #121	; 0x79
 8005536:	e7f6      	b.n	8005526 <_scanf_float+0x12a>
 8005538:	6821      	ldr	r1, [r4, #0]
 800553a:	05c8      	lsls	r0, r1, #23
 800553c:	d51a      	bpl.n	8005574 <_scanf_float+0x178>
 800553e:	9b02      	ldr	r3, [sp, #8]
 8005540:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8005544:	6021      	str	r1, [r4, #0]
 8005546:	f109 0901 	add.w	r9, r9, #1
 800554a:	b11b      	cbz	r3, 8005554 <_scanf_float+0x158>
 800554c:	3b01      	subs	r3, #1
 800554e:	3201      	adds	r2, #1
 8005550:	9302      	str	r3, [sp, #8]
 8005552:	60a2      	str	r2, [r4, #8]
 8005554:	68a3      	ldr	r3, [r4, #8]
 8005556:	3b01      	subs	r3, #1
 8005558:	60a3      	str	r3, [r4, #8]
 800555a:	6923      	ldr	r3, [r4, #16]
 800555c:	3301      	adds	r3, #1
 800555e:	6123      	str	r3, [r4, #16]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	3b01      	subs	r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	607b      	str	r3, [r7, #4]
 8005568:	f340 8084 	ble.w	8005674 <_scanf_float+0x278>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	3301      	adds	r3, #1
 8005570:	603b      	str	r3, [r7, #0]
 8005572:	e766      	b.n	8005442 <_scanf_float+0x46>
 8005574:	eb1a 0f05 	cmn.w	sl, r5
 8005578:	f47f af70 	bne.w	800545c <_scanf_float+0x60>
 800557c:	6822      	ldr	r2, [r4, #0]
 800557e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8005582:	6022      	str	r2, [r4, #0]
 8005584:	f806 3b01 	strb.w	r3, [r6], #1
 8005588:	e7e4      	b.n	8005554 <_scanf_float+0x158>
 800558a:	6822      	ldr	r2, [r4, #0]
 800558c:	0610      	lsls	r0, r2, #24
 800558e:	f57f af65 	bpl.w	800545c <_scanf_float+0x60>
 8005592:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005596:	e7f4      	b.n	8005582 <_scanf_float+0x186>
 8005598:	f1ba 0f00 	cmp.w	sl, #0
 800559c:	d10e      	bne.n	80055bc <_scanf_float+0x1c0>
 800559e:	f1b9 0f00 	cmp.w	r9, #0
 80055a2:	d10e      	bne.n	80055c2 <_scanf_float+0x1c6>
 80055a4:	6822      	ldr	r2, [r4, #0]
 80055a6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055aa:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055ae:	d108      	bne.n	80055c2 <_scanf_float+0x1c6>
 80055b0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055b4:	6022      	str	r2, [r4, #0]
 80055b6:	f04f 0a01 	mov.w	sl, #1
 80055ba:	e7e3      	b.n	8005584 <_scanf_float+0x188>
 80055bc:	f1ba 0f02 	cmp.w	sl, #2
 80055c0:	d055      	beq.n	800566e <_scanf_float+0x272>
 80055c2:	2d01      	cmp	r5, #1
 80055c4:	d002      	beq.n	80055cc <_scanf_float+0x1d0>
 80055c6:	2d04      	cmp	r5, #4
 80055c8:	f47f af48 	bne.w	800545c <_scanf_float+0x60>
 80055cc:	3501      	adds	r5, #1
 80055ce:	b2ed      	uxtb	r5, r5
 80055d0:	e7d8      	b.n	8005584 <_scanf_float+0x188>
 80055d2:	f1ba 0f01 	cmp.w	sl, #1
 80055d6:	f47f af41 	bne.w	800545c <_scanf_float+0x60>
 80055da:	f04f 0a02 	mov.w	sl, #2
 80055de:	e7d1      	b.n	8005584 <_scanf_float+0x188>
 80055e0:	b97d      	cbnz	r5, 8005602 <_scanf_float+0x206>
 80055e2:	f1b9 0f00 	cmp.w	r9, #0
 80055e6:	f47f af3c 	bne.w	8005462 <_scanf_float+0x66>
 80055ea:	6822      	ldr	r2, [r4, #0]
 80055ec:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80055f0:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80055f4:	f47f af39 	bne.w	800546a <_scanf_float+0x6e>
 80055f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80055fc:	6022      	str	r2, [r4, #0]
 80055fe:	2501      	movs	r5, #1
 8005600:	e7c0      	b.n	8005584 <_scanf_float+0x188>
 8005602:	2d03      	cmp	r5, #3
 8005604:	d0e2      	beq.n	80055cc <_scanf_float+0x1d0>
 8005606:	2d05      	cmp	r5, #5
 8005608:	e7de      	b.n	80055c8 <_scanf_float+0x1cc>
 800560a:	2d02      	cmp	r5, #2
 800560c:	f47f af26 	bne.w	800545c <_scanf_float+0x60>
 8005610:	2503      	movs	r5, #3
 8005612:	e7b7      	b.n	8005584 <_scanf_float+0x188>
 8005614:	2d06      	cmp	r5, #6
 8005616:	f47f af21 	bne.w	800545c <_scanf_float+0x60>
 800561a:	2507      	movs	r5, #7
 800561c:	e7b2      	b.n	8005584 <_scanf_float+0x188>
 800561e:	6822      	ldr	r2, [r4, #0]
 8005620:	0591      	lsls	r1, r2, #22
 8005622:	f57f af1b 	bpl.w	800545c <_scanf_float+0x60>
 8005626:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	f8cd 9004 	str.w	r9, [sp, #4]
 8005630:	e7a8      	b.n	8005584 <_scanf_float+0x188>
 8005632:	6822      	ldr	r2, [r4, #0]
 8005634:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005638:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800563c:	d006      	beq.n	800564c <_scanf_float+0x250>
 800563e:	0550      	lsls	r0, r2, #21
 8005640:	f57f af0c 	bpl.w	800545c <_scanf_float+0x60>
 8005644:	f1b9 0f00 	cmp.w	r9, #0
 8005648:	f43f af0f 	beq.w	800546a <_scanf_float+0x6e>
 800564c:	0591      	lsls	r1, r2, #22
 800564e:	bf58      	it	pl
 8005650:	9901      	ldrpl	r1, [sp, #4]
 8005652:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005656:	bf58      	it	pl
 8005658:	eba9 0101 	subpl.w	r1, r9, r1
 800565c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005660:	bf58      	it	pl
 8005662:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8005666:	6022      	str	r2, [r4, #0]
 8005668:	f04f 0900 	mov.w	r9, #0
 800566c:	e78a      	b.n	8005584 <_scanf_float+0x188>
 800566e:	f04f 0a03 	mov.w	sl, #3
 8005672:	e787      	b.n	8005584 <_scanf_float+0x188>
 8005674:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005678:	4639      	mov	r1, r7
 800567a:	4640      	mov	r0, r8
 800567c:	4798      	blx	r3
 800567e:	2800      	cmp	r0, #0
 8005680:	f43f aedf 	beq.w	8005442 <_scanf_float+0x46>
 8005684:	e6ea      	b.n	800545c <_scanf_float+0x60>
 8005686:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800568a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800568e:	463a      	mov	r2, r7
 8005690:	4640      	mov	r0, r8
 8005692:	4798      	blx	r3
 8005694:	6923      	ldr	r3, [r4, #16]
 8005696:	3b01      	subs	r3, #1
 8005698:	6123      	str	r3, [r4, #16]
 800569a:	e6ec      	b.n	8005476 <_scanf_float+0x7a>
 800569c:	1e6b      	subs	r3, r5, #1
 800569e:	2b06      	cmp	r3, #6
 80056a0:	d825      	bhi.n	80056ee <_scanf_float+0x2f2>
 80056a2:	2d02      	cmp	r5, #2
 80056a4:	d836      	bhi.n	8005714 <_scanf_float+0x318>
 80056a6:	455e      	cmp	r6, fp
 80056a8:	f67f aee8 	bls.w	800547c <_scanf_float+0x80>
 80056ac:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056b0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056b4:	463a      	mov	r2, r7
 80056b6:	4640      	mov	r0, r8
 80056b8:	4798      	blx	r3
 80056ba:	6923      	ldr	r3, [r4, #16]
 80056bc:	3b01      	subs	r3, #1
 80056be:	6123      	str	r3, [r4, #16]
 80056c0:	e7f1      	b.n	80056a6 <_scanf_float+0x2aa>
 80056c2:	9802      	ldr	r0, [sp, #8]
 80056c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80056c8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80056cc:	9002      	str	r0, [sp, #8]
 80056ce:	463a      	mov	r2, r7
 80056d0:	4640      	mov	r0, r8
 80056d2:	4798      	blx	r3
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	6123      	str	r3, [r4, #16]
 80056da:	f10a 3aff 	add.w	sl, sl, #4294967295
 80056de:	fa5f fa8a 	uxtb.w	sl, sl
 80056e2:	f1ba 0f02 	cmp.w	sl, #2
 80056e6:	d1ec      	bne.n	80056c2 <_scanf_float+0x2c6>
 80056e8:	3d03      	subs	r5, #3
 80056ea:	b2ed      	uxtb	r5, r5
 80056ec:	1b76      	subs	r6, r6, r5
 80056ee:	6823      	ldr	r3, [r4, #0]
 80056f0:	05da      	lsls	r2, r3, #23
 80056f2:	d52f      	bpl.n	8005754 <_scanf_float+0x358>
 80056f4:	055b      	lsls	r3, r3, #21
 80056f6:	d510      	bpl.n	800571a <_scanf_float+0x31e>
 80056f8:	455e      	cmp	r6, fp
 80056fa:	f67f aebf 	bls.w	800547c <_scanf_float+0x80>
 80056fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005702:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005706:	463a      	mov	r2, r7
 8005708:	4640      	mov	r0, r8
 800570a:	4798      	blx	r3
 800570c:	6923      	ldr	r3, [r4, #16]
 800570e:	3b01      	subs	r3, #1
 8005710:	6123      	str	r3, [r4, #16]
 8005712:	e7f1      	b.n	80056f8 <_scanf_float+0x2fc>
 8005714:	46aa      	mov	sl, r5
 8005716:	9602      	str	r6, [sp, #8]
 8005718:	e7df      	b.n	80056da <_scanf_float+0x2de>
 800571a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800571e:	6923      	ldr	r3, [r4, #16]
 8005720:	2965      	cmp	r1, #101	; 0x65
 8005722:	f103 33ff 	add.w	r3, r3, #4294967295
 8005726:	f106 35ff 	add.w	r5, r6, #4294967295
 800572a:	6123      	str	r3, [r4, #16]
 800572c:	d00c      	beq.n	8005748 <_scanf_float+0x34c>
 800572e:	2945      	cmp	r1, #69	; 0x45
 8005730:	d00a      	beq.n	8005748 <_scanf_float+0x34c>
 8005732:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005736:	463a      	mov	r2, r7
 8005738:	4640      	mov	r0, r8
 800573a:	4798      	blx	r3
 800573c:	6923      	ldr	r3, [r4, #16]
 800573e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8005742:	3b01      	subs	r3, #1
 8005744:	1eb5      	subs	r5, r6, #2
 8005746:	6123      	str	r3, [r4, #16]
 8005748:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800574c:	463a      	mov	r2, r7
 800574e:	4640      	mov	r0, r8
 8005750:	4798      	blx	r3
 8005752:	462e      	mov	r6, r5
 8005754:	6825      	ldr	r5, [r4, #0]
 8005756:	f015 0510 	ands.w	r5, r5, #16
 800575a:	d159      	bne.n	8005810 <_scanf_float+0x414>
 800575c:	7035      	strb	r5, [r6, #0]
 800575e:	6823      	ldr	r3, [r4, #0]
 8005760:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005764:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005768:	d11b      	bne.n	80057a2 <_scanf_float+0x3a6>
 800576a:	9b01      	ldr	r3, [sp, #4]
 800576c:	454b      	cmp	r3, r9
 800576e:	eba3 0209 	sub.w	r2, r3, r9
 8005772:	d123      	bne.n	80057bc <_scanf_float+0x3c0>
 8005774:	2200      	movs	r2, #0
 8005776:	4659      	mov	r1, fp
 8005778:	4640      	mov	r0, r8
 800577a:	f000 ff1f 	bl	80065bc <_strtod_r>
 800577e:	6822      	ldr	r2, [r4, #0]
 8005780:	9b03      	ldr	r3, [sp, #12]
 8005782:	f012 0f02 	tst.w	r2, #2
 8005786:	ec57 6b10 	vmov	r6, r7, d0
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	d021      	beq.n	80057d2 <_scanf_float+0x3d6>
 800578e:	9903      	ldr	r1, [sp, #12]
 8005790:	1d1a      	adds	r2, r3, #4
 8005792:	600a      	str	r2, [r1, #0]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	e9c3 6700 	strd	r6, r7, [r3]
 800579a:	68e3      	ldr	r3, [r4, #12]
 800579c:	3301      	adds	r3, #1
 800579e:	60e3      	str	r3, [r4, #12]
 80057a0:	e66d      	b.n	800547e <_scanf_float+0x82>
 80057a2:	9b04      	ldr	r3, [sp, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0e5      	beq.n	8005774 <_scanf_float+0x378>
 80057a8:	9905      	ldr	r1, [sp, #20]
 80057aa:	230a      	movs	r3, #10
 80057ac:	462a      	mov	r2, r5
 80057ae:	3101      	adds	r1, #1
 80057b0:	4640      	mov	r0, r8
 80057b2:	f000 ff8b 	bl	80066cc <_strtol_r>
 80057b6:	9b04      	ldr	r3, [sp, #16]
 80057b8:	9e05      	ldr	r6, [sp, #20]
 80057ba:	1ac2      	subs	r2, r0, r3
 80057bc:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80057c0:	429e      	cmp	r6, r3
 80057c2:	bf28      	it	cs
 80057c4:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80057c8:	4912      	ldr	r1, [pc, #72]	; (8005814 <_scanf_float+0x418>)
 80057ca:	4630      	mov	r0, r6
 80057cc:	f000 f82c 	bl	8005828 <siprintf>
 80057d0:	e7d0      	b.n	8005774 <_scanf_float+0x378>
 80057d2:	9903      	ldr	r1, [sp, #12]
 80057d4:	f012 0f04 	tst.w	r2, #4
 80057d8:	f103 0204 	add.w	r2, r3, #4
 80057dc:	600a      	str	r2, [r1, #0]
 80057de:	d1d9      	bne.n	8005794 <_scanf_float+0x398>
 80057e0:	f8d3 8000 	ldr.w	r8, [r3]
 80057e4:	ee10 2a10 	vmov	r2, s0
 80057e8:	ee10 0a10 	vmov	r0, s0
 80057ec:	463b      	mov	r3, r7
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fb f9bc 	bl	8000b6c <__aeabi_dcmpun>
 80057f4:	b128      	cbz	r0, 8005802 <_scanf_float+0x406>
 80057f6:	4808      	ldr	r0, [pc, #32]	; (8005818 <_scanf_float+0x41c>)
 80057f8:	f000 f810 	bl	800581c <nanf>
 80057fc:	ed88 0a00 	vstr	s0, [r8]
 8005800:	e7cb      	b.n	800579a <_scanf_float+0x39e>
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f9e7 	bl	8000bd8 <__aeabi_d2f>
 800580a:	f8c8 0000 	str.w	r0, [r8]
 800580e:	e7c4      	b.n	800579a <_scanf_float+0x39e>
 8005810:	2500      	movs	r5, #0
 8005812:	e634      	b.n	800547e <_scanf_float+0x82>
 8005814:	080092ec 	.word	0x080092ec
 8005818:	0800973d 	.word	0x0800973d

0800581c <nanf>:
 800581c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005824 <nanf+0x8>
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	7fc00000 	.word	0x7fc00000

08005828 <siprintf>:
 8005828:	b40e      	push	{r1, r2, r3}
 800582a:	b500      	push	{lr}
 800582c:	b09c      	sub	sp, #112	; 0x70
 800582e:	ab1d      	add	r3, sp, #116	; 0x74
 8005830:	9002      	str	r0, [sp, #8]
 8005832:	9006      	str	r0, [sp, #24]
 8005834:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005838:	4809      	ldr	r0, [pc, #36]	; (8005860 <siprintf+0x38>)
 800583a:	9107      	str	r1, [sp, #28]
 800583c:	9104      	str	r1, [sp, #16]
 800583e:	4909      	ldr	r1, [pc, #36]	; (8005864 <siprintf+0x3c>)
 8005840:	f853 2b04 	ldr.w	r2, [r3], #4
 8005844:	9105      	str	r1, [sp, #20]
 8005846:	6800      	ldr	r0, [r0, #0]
 8005848:	9301      	str	r3, [sp, #4]
 800584a:	a902      	add	r1, sp, #8
 800584c:	f002 fbf8 	bl	8008040 <_svfiprintf_r>
 8005850:	9b02      	ldr	r3, [sp, #8]
 8005852:	2200      	movs	r2, #0
 8005854:	701a      	strb	r2, [r3, #0]
 8005856:	b01c      	add	sp, #112	; 0x70
 8005858:	f85d eb04 	ldr.w	lr, [sp], #4
 800585c:	b003      	add	sp, #12
 800585e:	4770      	bx	lr
 8005860:	2000001c 	.word	0x2000001c
 8005864:	ffff0208 	.word	0xffff0208

08005868 <siscanf>:
 8005868:	b40e      	push	{r1, r2, r3}
 800586a:	b510      	push	{r4, lr}
 800586c:	b09f      	sub	sp, #124	; 0x7c
 800586e:	ac21      	add	r4, sp, #132	; 0x84
 8005870:	f44f 7101 	mov.w	r1, #516	; 0x204
 8005874:	f854 2b04 	ldr.w	r2, [r4], #4
 8005878:	9201      	str	r2, [sp, #4]
 800587a:	f8ad 101c 	strh.w	r1, [sp, #28]
 800587e:	9004      	str	r0, [sp, #16]
 8005880:	9008      	str	r0, [sp, #32]
 8005882:	f7fa fcc5 	bl	8000210 <strlen>
 8005886:	4b0c      	ldr	r3, [pc, #48]	; (80058b8 <siscanf+0x50>)
 8005888:	9005      	str	r0, [sp, #20]
 800588a:	9009      	str	r0, [sp, #36]	; 0x24
 800588c:	930d      	str	r3, [sp, #52]	; 0x34
 800588e:	480b      	ldr	r0, [pc, #44]	; (80058bc <siscanf+0x54>)
 8005890:	9a01      	ldr	r2, [sp, #4]
 8005892:	6800      	ldr	r0, [r0, #0]
 8005894:	9403      	str	r4, [sp, #12]
 8005896:	2300      	movs	r3, #0
 8005898:	9311      	str	r3, [sp, #68]	; 0x44
 800589a:	9316      	str	r3, [sp, #88]	; 0x58
 800589c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80058a0:	f8ad 301e 	strh.w	r3, [sp, #30]
 80058a4:	a904      	add	r1, sp, #16
 80058a6:	4623      	mov	r3, r4
 80058a8:	f002 fd24 	bl	80082f4 <__ssvfiscanf_r>
 80058ac:	b01f      	add	sp, #124	; 0x7c
 80058ae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058b2:	b003      	add	sp, #12
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	080058e3 	.word	0x080058e3
 80058bc:	2000001c 	.word	0x2000001c

080058c0 <__sread>:
 80058c0:	b510      	push	{r4, lr}
 80058c2:	460c      	mov	r4, r1
 80058c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058c8:	f003 f972 	bl	8008bb0 <_read_r>
 80058cc:	2800      	cmp	r0, #0
 80058ce:	bfab      	itete	ge
 80058d0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80058d2:	89a3      	ldrhlt	r3, [r4, #12]
 80058d4:	181b      	addge	r3, r3, r0
 80058d6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80058da:	bfac      	ite	ge
 80058dc:	6563      	strge	r3, [r4, #84]	; 0x54
 80058de:	81a3      	strhlt	r3, [r4, #12]
 80058e0:	bd10      	pop	{r4, pc}

080058e2 <__seofread>:
 80058e2:	2000      	movs	r0, #0
 80058e4:	4770      	bx	lr

080058e6 <__swrite>:
 80058e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80058ea:	461f      	mov	r7, r3
 80058ec:	898b      	ldrh	r3, [r1, #12]
 80058ee:	05db      	lsls	r3, r3, #23
 80058f0:	4605      	mov	r5, r0
 80058f2:	460c      	mov	r4, r1
 80058f4:	4616      	mov	r6, r2
 80058f6:	d505      	bpl.n	8005904 <__swrite+0x1e>
 80058f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80058fc:	2302      	movs	r3, #2
 80058fe:	2200      	movs	r2, #0
 8005900:	f001 fcf2 	bl	80072e8 <_lseek_r>
 8005904:	89a3      	ldrh	r3, [r4, #12]
 8005906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800590a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800590e:	81a3      	strh	r3, [r4, #12]
 8005910:	4632      	mov	r2, r6
 8005912:	463b      	mov	r3, r7
 8005914:	4628      	mov	r0, r5
 8005916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800591a:	f000 bf2b 	b.w	8006774 <_write_r>

0800591e <__sseek>:
 800591e:	b510      	push	{r4, lr}
 8005920:	460c      	mov	r4, r1
 8005922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005926:	f001 fcdf 	bl	80072e8 <_lseek_r>
 800592a:	1c43      	adds	r3, r0, #1
 800592c:	89a3      	ldrh	r3, [r4, #12]
 800592e:	bf15      	itete	ne
 8005930:	6560      	strne	r0, [r4, #84]	; 0x54
 8005932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800593a:	81a3      	strheq	r3, [r4, #12]
 800593c:	bf18      	it	ne
 800593e:	81a3      	strhne	r3, [r4, #12]
 8005940:	bd10      	pop	{r4, pc}

08005942 <__sclose>:
 8005942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005946:	f000 bf95 	b.w	8006874 <_close_r>

0800594a <strncmp>:
 800594a:	b510      	push	{r4, lr}
 800594c:	b17a      	cbz	r2, 800596e <strncmp+0x24>
 800594e:	4603      	mov	r3, r0
 8005950:	3901      	subs	r1, #1
 8005952:	1884      	adds	r4, r0, r2
 8005954:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005958:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800595c:	4290      	cmp	r0, r2
 800595e:	d101      	bne.n	8005964 <strncmp+0x1a>
 8005960:	42a3      	cmp	r3, r4
 8005962:	d101      	bne.n	8005968 <strncmp+0x1e>
 8005964:	1a80      	subs	r0, r0, r2
 8005966:	bd10      	pop	{r4, pc}
 8005968:	2800      	cmp	r0, #0
 800596a:	d1f3      	bne.n	8005954 <strncmp+0xa>
 800596c:	e7fa      	b.n	8005964 <strncmp+0x1a>
 800596e:	4610      	mov	r0, r2
 8005970:	e7f9      	b.n	8005966 <strncmp+0x1c>

08005972 <sulp>:
 8005972:	b570      	push	{r4, r5, r6, lr}
 8005974:	4604      	mov	r4, r0
 8005976:	460d      	mov	r5, r1
 8005978:	ec45 4b10 	vmov	d0, r4, r5
 800597c:	4616      	mov	r6, r2
 800597e:	f002 f8bd 	bl	8007afc <__ulp>
 8005982:	ec51 0b10 	vmov	r0, r1, d0
 8005986:	b17e      	cbz	r6, 80059a8 <sulp+0x36>
 8005988:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800598c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8005990:	2b00      	cmp	r3, #0
 8005992:	dd09      	ble.n	80059a8 <sulp+0x36>
 8005994:	051b      	lsls	r3, r3, #20
 8005996:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800599a:	2400      	movs	r4, #0
 800599c:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80059a0:	4622      	mov	r2, r4
 80059a2:	462b      	mov	r3, r5
 80059a4:	f7fa fe48 	bl	8000638 <__aeabi_dmul>
 80059a8:	bd70      	pop	{r4, r5, r6, pc}
 80059aa:	0000      	movs	r0, r0
 80059ac:	0000      	movs	r0, r0
	...

080059b0 <_strtod_l>:
 80059b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059b4:	ed2d 8b02 	vpush	{d8}
 80059b8:	b09d      	sub	sp, #116	; 0x74
 80059ba:	461f      	mov	r7, r3
 80059bc:	2300      	movs	r3, #0
 80059be:	9318      	str	r3, [sp, #96]	; 0x60
 80059c0:	4ba2      	ldr	r3, [pc, #648]	; (8005c4c <_strtod_l+0x29c>)
 80059c2:	9213      	str	r2, [sp, #76]	; 0x4c
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	9305      	str	r3, [sp, #20]
 80059c8:	4604      	mov	r4, r0
 80059ca:	4618      	mov	r0, r3
 80059cc:	4688      	mov	r8, r1
 80059ce:	f7fa fc1f 	bl	8000210 <strlen>
 80059d2:	f04f 0a00 	mov.w	sl, #0
 80059d6:	4605      	mov	r5, r0
 80059d8:	f04f 0b00 	mov.w	fp, #0
 80059dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80059e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80059e2:	781a      	ldrb	r2, [r3, #0]
 80059e4:	2a2b      	cmp	r2, #43	; 0x2b
 80059e6:	d04e      	beq.n	8005a86 <_strtod_l+0xd6>
 80059e8:	d83b      	bhi.n	8005a62 <_strtod_l+0xb2>
 80059ea:	2a0d      	cmp	r2, #13
 80059ec:	d834      	bhi.n	8005a58 <_strtod_l+0xa8>
 80059ee:	2a08      	cmp	r2, #8
 80059f0:	d834      	bhi.n	8005a5c <_strtod_l+0xac>
 80059f2:	2a00      	cmp	r2, #0
 80059f4:	d03e      	beq.n	8005a74 <_strtod_l+0xc4>
 80059f6:	2300      	movs	r3, #0
 80059f8:	930a      	str	r3, [sp, #40]	; 0x28
 80059fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80059fc:	7833      	ldrb	r3, [r6, #0]
 80059fe:	2b30      	cmp	r3, #48	; 0x30
 8005a00:	f040 80b0 	bne.w	8005b64 <_strtod_l+0x1b4>
 8005a04:	7873      	ldrb	r3, [r6, #1]
 8005a06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005a0a:	2b58      	cmp	r3, #88	; 0x58
 8005a0c:	d168      	bne.n	8005ae0 <_strtod_l+0x130>
 8005a0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a10:	9301      	str	r3, [sp, #4]
 8005a12:	ab18      	add	r3, sp, #96	; 0x60
 8005a14:	9702      	str	r7, [sp, #8]
 8005a16:	9300      	str	r3, [sp, #0]
 8005a18:	4a8d      	ldr	r2, [pc, #564]	; (8005c50 <_strtod_l+0x2a0>)
 8005a1a:	ab19      	add	r3, sp, #100	; 0x64
 8005a1c:	a917      	add	r1, sp, #92	; 0x5c
 8005a1e:	4620      	mov	r0, r4
 8005a20:	f001 f956 	bl	8006cd0 <__gethex>
 8005a24:	f010 0707 	ands.w	r7, r0, #7
 8005a28:	4605      	mov	r5, r0
 8005a2a:	d005      	beq.n	8005a38 <_strtod_l+0x88>
 8005a2c:	2f06      	cmp	r7, #6
 8005a2e:	d12c      	bne.n	8005a8a <_strtod_l+0xda>
 8005a30:	3601      	adds	r6, #1
 8005a32:	2300      	movs	r3, #0
 8005a34:	9617      	str	r6, [sp, #92]	; 0x5c
 8005a36:	930a      	str	r3, [sp, #40]	; 0x28
 8005a38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	f040 8590 	bne.w	8006560 <_strtod_l+0xbb0>
 8005a40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005a42:	b1eb      	cbz	r3, 8005a80 <_strtod_l+0xd0>
 8005a44:	4652      	mov	r2, sl
 8005a46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8005a4a:	ec43 2b10 	vmov	d0, r2, r3
 8005a4e:	b01d      	add	sp, #116	; 0x74
 8005a50:	ecbd 8b02 	vpop	{d8}
 8005a54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a58:	2a20      	cmp	r2, #32
 8005a5a:	d1cc      	bne.n	80059f6 <_strtod_l+0x46>
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8005a60:	e7be      	b.n	80059e0 <_strtod_l+0x30>
 8005a62:	2a2d      	cmp	r2, #45	; 0x2d
 8005a64:	d1c7      	bne.n	80059f6 <_strtod_l+0x46>
 8005a66:	2201      	movs	r2, #1
 8005a68:	920a      	str	r2, [sp, #40]	; 0x28
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8005a6e:	785b      	ldrb	r3, [r3, #1]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1c2      	bne.n	80059fa <_strtod_l+0x4a>
 8005a74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8005a76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	f040 856e 	bne.w	800655c <_strtod_l+0xbac>
 8005a80:	4652      	mov	r2, sl
 8005a82:	465b      	mov	r3, fp
 8005a84:	e7e1      	b.n	8005a4a <_strtod_l+0x9a>
 8005a86:	2200      	movs	r2, #0
 8005a88:	e7ee      	b.n	8005a68 <_strtod_l+0xb8>
 8005a8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8005a8c:	b13a      	cbz	r2, 8005a9e <_strtod_l+0xee>
 8005a8e:	2135      	movs	r1, #53	; 0x35
 8005a90:	a81a      	add	r0, sp, #104	; 0x68
 8005a92:	f002 f93e 	bl	8007d12 <__copybits>
 8005a96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005a98:	4620      	mov	r0, r4
 8005a9a:	f001 fcfd 	bl	8007498 <_Bfree>
 8005a9e:	3f01      	subs	r7, #1
 8005aa0:	2f04      	cmp	r7, #4
 8005aa2:	d806      	bhi.n	8005ab2 <_strtod_l+0x102>
 8005aa4:	e8df f007 	tbb	[pc, r7]
 8005aa8:	1714030a 	.word	0x1714030a
 8005aac:	0a          	.byte	0x0a
 8005aad:	00          	.byte	0x00
 8005aae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8005ab2:	0728      	lsls	r0, r5, #28
 8005ab4:	d5c0      	bpl.n	8005a38 <_strtod_l+0x88>
 8005ab6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8005aba:	e7bd      	b.n	8005a38 <_strtod_l+0x88>
 8005abc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8005ac0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005ac2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005ac6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8005aca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005ace:	e7f0      	b.n	8005ab2 <_strtod_l+0x102>
 8005ad0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8005c54 <_strtod_l+0x2a4>
 8005ad4:	e7ed      	b.n	8005ab2 <_strtod_l+0x102>
 8005ad6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8005ada:	f04f 3aff 	mov.w	sl, #4294967295
 8005ade:	e7e8      	b.n	8005ab2 <_strtod_l+0x102>
 8005ae0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ae6:	785b      	ldrb	r3, [r3, #1]
 8005ae8:	2b30      	cmp	r3, #48	; 0x30
 8005aea:	d0f9      	beq.n	8005ae0 <_strtod_l+0x130>
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d0a3      	beq.n	8005a38 <_strtod_l+0x88>
 8005af0:	2301      	movs	r3, #1
 8005af2:	f04f 0900 	mov.w	r9, #0
 8005af6:	9304      	str	r3, [sp, #16]
 8005af8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005afa:	9308      	str	r3, [sp, #32]
 8005afc:	f8cd 901c 	str.w	r9, [sp, #28]
 8005b00:	464f      	mov	r7, r9
 8005b02:	220a      	movs	r2, #10
 8005b04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8005b06:	7806      	ldrb	r6, [r0, #0]
 8005b08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8005b0c:	b2d9      	uxtb	r1, r3
 8005b0e:	2909      	cmp	r1, #9
 8005b10:	d92a      	bls.n	8005b68 <_strtod_l+0x1b8>
 8005b12:	9905      	ldr	r1, [sp, #20]
 8005b14:	462a      	mov	r2, r5
 8005b16:	f7ff ff18 	bl	800594a <strncmp>
 8005b1a:	b398      	cbz	r0, 8005b84 <_strtod_l+0x1d4>
 8005b1c:	2000      	movs	r0, #0
 8005b1e:	4632      	mov	r2, r6
 8005b20:	463d      	mov	r5, r7
 8005b22:	9005      	str	r0, [sp, #20]
 8005b24:	4603      	mov	r3, r0
 8005b26:	2a65      	cmp	r2, #101	; 0x65
 8005b28:	d001      	beq.n	8005b2e <_strtod_l+0x17e>
 8005b2a:	2a45      	cmp	r2, #69	; 0x45
 8005b2c:	d118      	bne.n	8005b60 <_strtod_l+0x1b0>
 8005b2e:	b91d      	cbnz	r5, 8005b38 <_strtod_l+0x188>
 8005b30:	9a04      	ldr	r2, [sp, #16]
 8005b32:	4302      	orrs	r2, r0
 8005b34:	d09e      	beq.n	8005a74 <_strtod_l+0xc4>
 8005b36:	2500      	movs	r5, #0
 8005b38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8005b3c:	f108 0201 	add.w	r2, r8, #1
 8005b40:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8005b46:	2a2b      	cmp	r2, #43	; 0x2b
 8005b48:	d075      	beq.n	8005c36 <_strtod_l+0x286>
 8005b4a:	2a2d      	cmp	r2, #45	; 0x2d
 8005b4c:	d07b      	beq.n	8005c46 <_strtod_l+0x296>
 8005b4e:	f04f 0c00 	mov.w	ip, #0
 8005b52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8005b56:	2909      	cmp	r1, #9
 8005b58:	f240 8082 	bls.w	8005c60 <_strtod_l+0x2b0>
 8005b5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8005b60:	2600      	movs	r6, #0
 8005b62:	e09d      	b.n	8005ca0 <_strtod_l+0x2f0>
 8005b64:	2300      	movs	r3, #0
 8005b66:	e7c4      	b.n	8005af2 <_strtod_l+0x142>
 8005b68:	2f08      	cmp	r7, #8
 8005b6a:	bfd8      	it	le
 8005b6c:	9907      	ldrle	r1, [sp, #28]
 8005b6e:	f100 0001 	add.w	r0, r0, #1
 8005b72:	bfda      	itte	le
 8005b74:	fb02 3301 	mlale	r3, r2, r1, r3
 8005b78:	9307      	strle	r3, [sp, #28]
 8005b7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8005b7e:	3701      	adds	r7, #1
 8005b80:	9017      	str	r0, [sp, #92]	; 0x5c
 8005b82:	e7bf      	b.n	8005b04 <_strtod_l+0x154>
 8005b84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005b86:	195a      	adds	r2, r3, r5
 8005b88:	9217      	str	r2, [sp, #92]	; 0x5c
 8005b8a:	5d5a      	ldrb	r2, [r3, r5]
 8005b8c:	2f00      	cmp	r7, #0
 8005b8e:	d037      	beq.n	8005c00 <_strtod_l+0x250>
 8005b90:	9005      	str	r0, [sp, #20]
 8005b92:	463d      	mov	r5, r7
 8005b94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8005b98:	2b09      	cmp	r3, #9
 8005b9a:	d912      	bls.n	8005bc2 <_strtod_l+0x212>
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e7c2      	b.n	8005b26 <_strtod_l+0x176>
 8005ba0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005ba2:	1c5a      	adds	r2, r3, #1
 8005ba4:	9217      	str	r2, [sp, #92]	; 0x5c
 8005ba6:	785a      	ldrb	r2, [r3, #1]
 8005ba8:	3001      	adds	r0, #1
 8005baa:	2a30      	cmp	r2, #48	; 0x30
 8005bac:	d0f8      	beq.n	8005ba0 <_strtod_l+0x1f0>
 8005bae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8005bb2:	2b08      	cmp	r3, #8
 8005bb4:	f200 84d9 	bhi.w	800656a <_strtod_l+0xbba>
 8005bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005bba:	9005      	str	r0, [sp, #20]
 8005bbc:	2000      	movs	r0, #0
 8005bbe:	9308      	str	r3, [sp, #32]
 8005bc0:	4605      	mov	r5, r0
 8005bc2:	3a30      	subs	r2, #48	; 0x30
 8005bc4:	f100 0301 	add.w	r3, r0, #1
 8005bc8:	d014      	beq.n	8005bf4 <_strtod_l+0x244>
 8005bca:	9905      	ldr	r1, [sp, #20]
 8005bcc:	4419      	add	r1, r3
 8005bce:	9105      	str	r1, [sp, #20]
 8005bd0:	462b      	mov	r3, r5
 8005bd2:	eb00 0e05 	add.w	lr, r0, r5
 8005bd6:	210a      	movs	r1, #10
 8005bd8:	4573      	cmp	r3, lr
 8005bda:	d113      	bne.n	8005c04 <_strtod_l+0x254>
 8005bdc:	182b      	adds	r3, r5, r0
 8005bde:	2b08      	cmp	r3, #8
 8005be0:	f105 0501 	add.w	r5, r5, #1
 8005be4:	4405      	add	r5, r0
 8005be6:	dc1c      	bgt.n	8005c22 <_strtod_l+0x272>
 8005be8:	9907      	ldr	r1, [sp, #28]
 8005bea:	230a      	movs	r3, #10
 8005bec:	fb03 2301 	mla	r3, r3, r1, r2
 8005bf0:	9307      	str	r3, [sp, #28]
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005bf6:	1c51      	adds	r1, r2, #1
 8005bf8:	9117      	str	r1, [sp, #92]	; 0x5c
 8005bfa:	7852      	ldrb	r2, [r2, #1]
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	e7c9      	b.n	8005b94 <_strtod_l+0x1e4>
 8005c00:	4638      	mov	r0, r7
 8005c02:	e7d2      	b.n	8005baa <_strtod_l+0x1fa>
 8005c04:	2b08      	cmp	r3, #8
 8005c06:	dc04      	bgt.n	8005c12 <_strtod_l+0x262>
 8005c08:	9e07      	ldr	r6, [sp, #28]
 8005c0a:	434e      	muls	r6, r1
 8005c0c:	9607      	str	r6, [sp, #28]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	e7e2      	b.n	8005bd8 <_strtod_l+0x228>
 8005c12:	f103 0c01 	add.w	ip, r3, #1
 8005c16:	f1bc 0f10 	cmp.w	ip, #16
 8005c1a:	bfd8      	it	le
 8005c1c:	fb01 f909 	mulle.w	r9, r1, r9
 8005c20:	e7f5      	b.n	8005c0e <_strtod_l+0x25e>
 8005c22:	2d10      	cmp	r5, #16
 8005c24:	bfdc      	itt	le
 8005c26:	230a      	movle	r3, #10
 8005c28:	fb03 2909 	mlale	r9, r3, r9, r2
 8005c2c:	e7e1      	b.n	8005bf2 <_strtod_l+0x242>
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9305      	str	r3, [sp, #20]
 8005c32:	2301      	movs	r3, #1
 8005c34:	e77c      	b.n	8005b30 <_strtod_l+0x180>
 8005c36:	f04f 0c00 	mov.w	ip, #0
 8005c3a:	f108 0202 	add.w	r2, r8, #2
 8005c3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8005c40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8005c44:	e785      	b.n	8005b52 <_strtod_l+0x1a2>
 8005c46:	f04f 0c01 	mov.w	ip, #1
 8005c4a:	e7f6      	b.n	8005c3a <_strtod_l+0x28a>
 8005c4c:	0800952c 	.word	0x0800952c
 8005c50:	08009300 	.word	0x08009300
 8005c54:	7ff00000 	.word	0x7ff00000
 8005c58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c5a:	1c51      	adds	r1, r2, #1
 8005c5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c5e:	7852      	ldrb	r2, [r2, #1]
 8005c60:	2a30      	cmp	r2, #48	; 0x30
 8005c62:	d0f9      	beq.n	8005c58 <_strtod_l+0x2a8>
 8005c64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8005c68:	2908      	cmp	r1, #8
 8005c6a:	f63f af79 	bhi.w	8005b60 <_strtod_l+0x1b0>
 8005c6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8005c72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c74:	9206      	str	r2, [sp, #24]
 8005c76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8005c78:	1c51      	adds	r1, r2, #1
 8005c7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8005c7c:	7852      	ldrb	r2, [r2, #1]
 8005c7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8005c82:	2e09      	cmp	r6, #9
 8005c84:	d937      	bls.n	8005cf6 <_strtod_l+0x346>
 8005c86:	9e06      	ldr	r6, [sp, #24]
 8005c88:	1b89      	subs	r1, r1, r6
 8005c8a:	2908      	cmp	r1, #8
 8005c8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8005c90:	dc02      	bgt.n	8005c98 <_strtod_l+0x2e8>
 8005c92:	4576      	cmp	r6, lr
 8005c94:	bfa8      	it	ge
 8005c96:	4676      	movge	r6, lr
 8005c98:	f1bc 0f00 	cmp.w	ip, #0
 8005c9c:	d000      	beq.n	8005ca0 <_strtod_l+0x2f0>
 8005c9e:	4276      	negs	r6, r6
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	d14d      	bne.n	8005d40 <_strtod_l+0x390>
 8005ca4:	9904      	ldr	r1, [sp, #16]
 8005ca6:	4301      	orrs	r1, r0
 8005ca8:	f47f aec6 	bne.w	8005a38 <_strtod_l+0x88>
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	f47f aee1 	bne.w	8005a74 <_strtod_l+0xc4>
 8005cb2:	2a69      	cmp	r2, #105	; 0x69
 8005cb4:	d027      	beq.n	8005d06 <_strtod_l+0x356>
 8005cb6:	dc24      	bgt.n	8005d02 <_strtod_l+0x352>
 8005cb8:	2a49      	cmp	r2, #73	; 0x49
 8005cba:	d024      	beq.n	8005d06 <_strtod_l+0x356>
 8005cbc:	2a4e      	cmp	r2, #78	; 0x4e
 8005cbe:	f47f aed9 	bne.w	8005a74 <_strtod_l+0xc4>
 8005cc2:	499f      	ldr	r1, [pc, #636]	; (8005f40 <_strtod_l+0x590>)
 8005cc4:	a817      	add	r0, sp, #92	; 0x5c
 8005cc6:	f001 fa5b 	bl	8007180 <__match>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f43f aed2 	beq.w	8005a74 <_strtod_l+0xc4>
 8005cd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	2b28      	cmp	r3, #40	; 0x28
 8005cd6:	d12d      	bne.n	8005d34 <_strtod_l+0x384>
 8005cd8:	499a      	ldr	r1, [pc, #616]	; (8005f44 <_strtod_l+0x594>)
 8005cda:	aa1a      	add	r2, sp, #104	; 0x68
 8005cdc:	a817      	add	r0, sp, #92	; 0x5c
 8005cde:	f001 fa63 	bl	80071a8 <__hexnan>
 8005ce2:	2805      	cmp	r0, #5
 8005ce4:	d126      	bne.n	8005d34 <_strtod_l+0x384>
 8005ce6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8005ce8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8005cec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8005cf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8005cf4:	e6a0      	b.n	8005a38 <_strtod_l+0x88>
 8005cf6:	210a      	movs	r1, #10
 8005cf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8005cfc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8005d00:	e7b9      	b.n	8005c76 <_strtod_l+0x2c6>
 8005d02:	2a6e      	cmp	r2, #110	; 0x6e
 8005d04:	e7db      	b.n	8005cbe <_strtod_l+0x30e>
 8005d06:	4990      	ldr	r1, [pc, #576]	; (8005f48 <_strtod_l+0x598>)
 8005d08:	a817      	add	r0, sp, #92	; 0x5c
 8005d0a:	f001 fa39 	bl	8007180 <__match>
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	f43f aeb0 	beq.w	8005a74 <_strtod_l+0xc4>
 8005d14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d16:	498d      	ldr	r1, [pc, #564]	; (8005f4c <_strtod_l+0x59c>)
 8005d18:	3b01      	subs	r3, #1
 8005d1a:	a817      	add	r0, sp, #92	; 0x5c
 8005d1c:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d1e:	f001 fa2f 	bl	8007180 <__match>
 8005d22:	b910      	cbnz	r0, 8005d2a <_strtod_l+0x37a>
 8005d24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005d26:	3301      	adds	r3, #1
 8005d28:	9317      	str	r3, [sp, #92]	; 0x5c
 8005d2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 8005f5c <_strtod_l+0x5ac>
 8005d2e:	f04f 0a00 	mov.w	sl, #0
 8005d32:	e681      	b.n	8005a38 <_strtod_l+0x88>
 8005d34:	4886      	ldr	r0, [pc, #536]	; (8005f50 <_strtod_l+0x5a0>)
 8005d36:	f002 ff4f 	bl	8008bd8 <nan>
 8005d3a:	ec5b ab10 	vmov	sl, fp, d0
 8005d3e:	e67b      	b.n	8005a38 <_strtod_l+0x88>
 8005d40:	9b05      	ldr	r3, [sp, #20]
 8005d42:	9807      	ldr	r0, [sp, #28]
 8005d44:	1af3      	subs	r3, r6, r3
 8005d46:	2f00      	cmp	r7, #0
 8005d48:	bf08      	it	eq
 8005d4a:	462f      	moveq	r7, r5
 8005d4c:	2d10      	cmp	r5, #16
 8005d4e:	9306      	str	r3, [sp, #24]
 8005d50:	46a8      	mov	r8, r5
 8005d52:	bfa8      	it	ge
 8005d54:	f04f 0810 	movge.w	r8, #16
 8005d58:	f7fa fbf4 	bl	8000544 <__aeabi_ui2d>
 8005d5c:	2d09      	cmp	r5, #9
 8005d5e:	4682      	mov	sl, r0
 8005d60:	468b      	mov	fp, r1
 8005d62:	dd13      	ble.n	8005d8c <_strtod_l+0x3dc>
 8005d64:	4b7b      	ldr	r3, [pc, #492]	; (8005f54 <_strtod_l+0x5a4>)
 8005d66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8005d6e:	f7fa fc63 	bl	8000638 <__aeabi_dmul>
 8005d72:	4682      	mov	sl, r0
 8005d74:	4648      	mov	r0, r9
 8005d76:	468b      	mov	fp, r1
 8005d78:	f7fa fbe4 	bl	8000544 <__aeabi_ui2d>
 8005d7c:	4602      	mov	r2, r0
 8005d7e:	460b      	mov	r3, r1
 8005d80:	4650      	mov	r0, sl
 8005d82:	4659      	mov	r1, fp
 8005d84:	f7fa faa2 	bl	80002cc <__adddf3>
 8005d88:	4682      	mov	sl, r0
 8005d8a:	468b      	mov	fp, r1
 8005d8c:	2d0f      	cmp	r5, #15
 8005d8e:	dc38      	bgt.n	8005e02 <_strtod_l+0x452>
 8005d90:	9b06      	ldr	r3, [sp, #24]
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	f43f ae50 	beq.w	8005a38 <_strtod_l+0x88>
 8005d98:	dd24      	ble.n	8005de4 <_strtod_l+0x434>
 8005d9a:	2b16      	cmp	r3, #22
 8005d9c:	dc0b      	bgt.n	8005db6 <_strtod_l+0x406>
 8005d9e:	496d      	ldr	r1, [pc, #436]	; (8005f54 <_strtod_l+0x5a4>)
 8005da0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005da4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005da8:	4652      	mov	r2, sl
 8005daa:	465b      	mov	r3, fp
 8005dac:	f7fa fc44 	bl	8000638 <__aeabi_dmul>
 8005db0:	4682      	mov	sl, r0
 8005db2:	468b      	mov	fp, r1
 8005db4:	e640      	b.n	8005a38 <_strtod_l+0x88>
 8005db6:	9a06      	ldr	r2, [sp, #24]
 8005db8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	db20      	blt.n	8005e02 <_strtod_l+0x452>
 8005dc0:	4c64      	ldr	r4, [pc, #400]	; (8005f54 <_strtod_l+0x5a4>)
 8005dc2:	f1c5 050f 	rsb	r5, r5, #15
 8005dc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005dca:	4652      	mov	r2, sl
 8005dcc:	465b      	mov	r3, fp
 8005dce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005dd2:	f7fa fc31 	bl	8000638 <__aeabi_dmul>
 8005dd6:	9b06      	ldr	r3, [sp, #24]
 8005dd8:	1b5d      	subs	r5, r3, r5
 8005dda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005dde:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005de2:	e7e3      	b.n	8005dac <_strtod_l+0x3fc>
 8005de4:	9b06      	ldr	r3, [sp, #24]
 8005de6:	3316      	adds	r3, #22
 8005de8:	db0b      	blt.n	8005e02 <_strtod_l+0x452>
 8005dea:	9b05      	ldr	r3, [sp, #20]
 8005dec:	1b9e      	subs	r6, r3, r6
 8005dee:	4b59      	ldr	r3, [pc, #356]	; (8005f54 <_strtod_l+0x5a4>)
 8005df0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005df4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005df8:	4650      	mov	r0, sl
 8005dfa:	4659      	mov	r1, fp
 8005dfc:	f7fa fd46 	bl	800088c <__aeabi_ddiv>
 8005e00:	e7d6      	b.n	8005db0 <_strtod_l+0x400>
 8005e02:	9b06      	ldr	r3, [sp, #24]
 8005e04:	eba5 0808 	sub.w	r8, r5, r8
 8005e08:	4498      	add	r8, r3
 8005e0a:	f1b8 0f00 	cmp.w	r8, #0
 8005e0e:	dd74      	ble.n	8005efa <_strtod_l+0x54a>
 8005e10:	f018 030f 	ands.w	r3, r8, #15
 8005e14:	d00a      	beq.n	8005e2c <_strtod_l+0x47c>
 8005e16:	494f      	ldr	r1, [pc, #316]	; (8005f54 <_strtod_l+0x5a4>)
 8005e18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	465b      	mov	r3, fp
 8005e20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e24:	f7fa fc08 	bl	8000638 <__aeabi_dmul>
 8005e28:	4682      	mov	sl, r0
 8005e2a:	468b      	mov	fp, r1
 8005e2c:	f038 080f 	bics.w	r8, r8, #15
 8005e30:	d04f      	beq.n	8005ed2 <_strtod_l+0x522>
 8005e32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8005e36:	dd22      	ble.n	8005e7e <_strtod_l+0x4ce>
 8005e38:	2500      	movs	r5, #0
 8005e3a:	462e      	mov	r6, r5
 8005e3c:	9507      	str	r5, [sp, #28]
 8005e3e:	9505      	str	r5, [sp, #20]
 8005e40:	2322      	movs	r3, #34	; 0x22
 8005e42:	f8df b118 	ldr.w	fp, [pc, #280]	; 8005f5c <_strtod_l+0x5ac>
 8005e46:	6023      	str	r3, [r4, #0]
 8005e48:	f04f 0a00 	mov.w	sl, #0
 8005e4c:	9b07      	ldr	r3, [sp, #28]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	f43f adf2 	beq.w	8005a38 <_strtod_l+0x88>
 8005e54:	9918      	ldr	r1, [sp, #96]	; 0x60
 8005e56:	4620      	mov	r0, r4
 8005e58:	f001 fb1e 	bl	8007498 <_Bfree>
 8005e5c:	9905      	ldr	r1, [sp, #20]
 8005e5e:	4620      	mov	r0, r4
 8005e60:	f001 fb1a 	bl	8007498 <_Bfree>
 8005e64:	4631      	mov	r1, r6
 8005e66:	4620      	mov	r0, r4
 8005e68:	f001 fb16 	bl	8007498 <_Bfree>
 8005e6c:	9907      	ldr	r1, [sp, #28]
 8005e6e:	4620      	mov	r0, r4
 8005e70:	f001 fb12 	bl	8007498 <_Bfree>
 8005e74:	4629      	mov	r1, r5
 8005e76:	4620      	mov	r0, r4
 8005e78:	f001 fb0e 	bl	8007498 <_Bfree>
 8005e7c:	e5dc      	b.n	8005a38 <_strtod_l+0x88>
 8005e7e:	4b36      	ldr	r3, [pc, #216]	; (8005f58 <_strtod_l+0x5a8>)
 8005e80:	9304      	str	r3, [sp, #16]
 8005e82:	2300      	movs	r3, #0
 8005e84:	ea4f 1828 	mov.w	r8, r8, asr #4
 8005e88:	4650      	mov	r0, sl
 8005e8a:	4659      	mov	r1, fp
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	f1b8 0f01 	cmp.w	r8, #1
 8005e92:	dc21      	bgt.n	8005ed8 <_strtod_l+0x528>
 8005e94:	b10b      	cbz	r3, 8005e9a <_strtod_l+0x4ea>
 8005e96:	4682      	mov	sl, r0
 8005e98:	468b      	mov	fp, r1
 8005e9a:	4b2f      	ldr	r3, [pc, #188]	; (8005f58 <_strtod_l+0x5a8>)
 8005e9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8005ea0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8005ea4:	4652      	mov	r2, sl
 8005ea6:	465b      	mov	r3, fp
 8005ea8:	e9d9 0100 	ldrd	r0, r1, [r9]
 8005eac:	f7fa fbc4 	bl	8000638 <__aeabi_dmul>
 8005eb0:	4b2a      	ldr	r3, [pc, #168]	; (8005f5c <_strtod_l+0x5ac>)
 8005eb2:	460a      	mov	r2, r1
 8005eb4:	400b      	ands	r3, r1
 8005eb6:	492a      	ldr	r1, [pc, #168]	; (8005f60 <_strtod_l+0x5b0>)
 8005eb8:	428b      	cmp	r3, r1
 8005eba:	4682      	mov	sl, r0
 8005ebc:	d8bc      	bhi.n	8005e38 <_strtod_l+0x488>
 8005ebe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8005ec2:	428b      	cmp	r3, r1
 8005ec4:	bf86      	itte	hi
 8005ec6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8005f64 <_strtod_l+0x5b4>
 8005eca:	f04f 3aff 	movhi.w	sl, #4294967295
 8005ece:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	9304      	str	r3, [sp, #16]
 8005ed6:	e084      	b.n	8005fe2 <_strtod_l+0x632>
 8005ed8:	f018 0f01 	tst.w	r8, #1
 8005edc:	d005      	beq.n	8005eea <_strtod_l+0x53a>
 8005ede:	9b04      	ldr	r3, [sp, #16]
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fba8 	bl	8000638 <__aeabi_dmul>
 8005ee8:	2301      	movs	r3, #1
 8005eea:	9a04      	ldr	r2, [sp, #16]
 8005eec:	3208      	adds	r2, #8
 8005eee:	f109 0901 	add.w	r9, r9, #1
 8005ef2:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005ef6:	9204      	str	r2, [sp, #16]
 8005ef8:	e7c9      	b.n	8005e8e <_strtod_l+0x4de>
 8005efa:	d0ea      	beq.n	8005ed2 <_strtod_l+0x522>
 8005efc:	f1c8 0800 	rsb	r8, r8, #0
 8005f00:	f018 020f 	ands.w	r2, r8, #15
 8005f04:	d00a      	beq.n	8005f1c <_strtod_l+0x56c>
 8005f06:	4b13      	ldr	r3, [pc, #76]	; (8005f54 <_strtod_l+0x5a4>)
 8005f08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f0c:	4650      	mov	r0, sl
 8005f0e:	4659      	mov	r1, fp
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f7fa fcba 	bl	800088c <__aeabi_ddiv>
 8005f18:	4682      	mov	sl, r0
 8005f1a:	468b      	mov	fp, r1
 8005f1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8005f20:	d0d7      	beq.n	8005ed2 <_strtod_l+0x522>
 8005f22:	f1b8 0f1f 	cmp.w	r8, #31
 8005f26:	dd1f      	ble.n	8005f68 <_strtod_l+0x5b8>
 8005f28:	2500      	movs	r5, #0
 8005f2a:	462e      	mov	r6, r5
 8005f2c:	9507      	str	r5, [sp, #28]
 8005f2e:	9505      	str	r5, [sp, #20]
 8005f30:	2322      	movs	r3, #34	; 0x22
 8005f32:	f04f 0a00 	mov.w	sl, #0
 8005f36:	f04f 0b00 	mov.w	fp, #0
 8005f3a:	6023      	str	r3, [r4, #0]
 8005f3c:	e786      	b.n	8005e4c <_strtod_l+0x49c>
 8005f3e:	bf00      	nop
 8005f40:	080092fa 	.word	0x080092fa
 8005f44:	08009314 	.word	0x08009314
 8005f48:	080092f1 	.word	0x080092f1
 8005f4c:	080092f4 	.word	0x080092f4
 8005f50:	0800973d 	.word	0x0800973d
 8005f54:	080095e0 	.word	0x080095e0
 8005f58:	080095b8 	.word	0x080095b8
 8005f5c:	7ff00000 	.word	0x7ff00000
 8005f60:	7ca00000 	.word	0x7ca00000
 8005f64:	7fefffff 	.word	0x7fefffff
 8005f68:	f018 0310 	ands.w	r3, r8, #16
 8005f6c:	bf18      	it	ne
 8005f6e:	236a      	movne	r3, #106	; 0x6a
 8005f70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8006320 <_strtod_l+0x970>
 8005f74:	9304      	str	r3, [sp, #16]
 8005f76:	4650      	mov	r0, sl
 8005f78:	4659      	mov	r1, fp
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	f018 0f01 	tst.w	r8, #1
 8005f80:	d004      	beq.n	8005f8c <_strtod_l+0x5dc>
 8005f82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005f86:	f7fa fb57 	bl	8000638 <__aeabi_dmul>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8005f90:	f109 0908 	add.w	r9, r9, #8
 8005f94:	d1f2      	bne.n	8005f7c <_strtod_l+0x5cc>
 8005f96:	b10b      	cbz	r3, 8005f9c <_strtod_l+0x5ec>
 8005f98:	4682      	mov	sl, r0
 8005f9a:	468b      	mov	fp, r1
 8005f9c:	9b04      	ldr	r3, [sp, #16]
 8005f9e:	b1c3      	cbz	r3, 8005fd2 <_strtod_l+0x622>
 8005fa0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005fa4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	4659      	mov	r1, fp
 8005fac:	dd11      	ble.n	8005fd2 <_strtod_l+0x622>
 8005fae:	2b1f      	cmp	r3, #31
 8005fb0:	f340 8124 	ble.w	80061fc <_strtod_l+0x84c>
 8005fb4:	2b34      	cmp	r3, #52	; 0x34
 8005fb6:	bfde      	ittt	le
 8005fb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8005fbc:	f04f 33ff 	movle.w	r3, #4294967295
 8005fc0:	fa03 f202 	lslle.w	r2, r3, r2
 8005fc4:	f04f 0a00 	mov.w	sl, #0
 8005fc8:	bfcc      	ite	gt
 8005fca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8005fce:	ea02 0b01 	andle.w	fp, r2, r1
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	4650      	mov	r0, sl
 8005fd8:	4659      	mov	r1, fp
 8005fda:	f7fa fd95 	bl	8000b08 <__aeabi_dcmpeq>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d1a2      	bne.n	8005f28 <_strtod_l+0x578>
 8005fe2:	9b07      	ldr	r3, [sp, #28]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	9908      	ldr	r1, [sp, #32]
 8005fe8:	462b      	mov	r3, r5
 8005fea:	463a      	mov	r2, r7
 8005fec:	4620      	mov	r0, r4
 8005fee:	f001 fabb 	bl	8007568 <__s2b>
 8005ff2:	9007      	str	r0, [sp, #28]
 8005ff4:	2800      	cmp	r0, #0
 8005ff6:	f43f af1f 	beq.w	8005e38 <_strtod_l+0x488>
 8005ffa:	9b05      	ldr	r3, [sp, #20]
 8005ffc:	1b9e      	subs	r6, r3, r6
 8005ffe:	9b06      	ldr	r3, [sp, #24]
 8006000:	2b00      	cmp	r3, #0
 8006002:	bfb4      	ite	lt
 8006004:	4633      	movlt	r3, r6
 8006006:	2300      	movge	r3, #0
 8006008:	930c      	str	r3, [sp, #48]	; 0x30
 800600a:	9b06      	ldr	r3, [sp, #24]
 800600c:	2500      	movs	r5, #0
 800600e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8006012:	9312      	str	r3, [sp, #72]	; 0x48
 8006014:	462e      	mov	r6, r5
 8006016:	9b07      	ldr	r3, [sp, #28]
 8006018:	4620      	mov	r0, r4
 800601a:	6859      	ldr	r1, [r3, #4]
 800601c:	f001 f9fc 	bl	8007418 <_Balloc>
 8006020:	9005      	str	r0, [sp, #20]
 8006022:	2800      	cmp	r0, #0
 8006024:	f43f af0c 	beq.w	8005e40 <_strtod_l+0x490>
 8006028:	9b07      	ldr	r3, [sp, #28]
 800602a:	691a      	ldr	r2, [r3, #16]
 800602c:	3202      	adds	r2, #2
 800602e:	f103 010c 	add.w	r1, r3, #12
 8006032:	0092      	lsls	r2, r2, #2
 8006034:	300c      	adds	r0, #12
 8006036:	f001 f9e1 	bl	80073fc <memcpy>
 800603a:	ec4b ab10 	vmov	d0, sl, fp
 800603e:	aa1a      	add	r2, sp, #104	; 0x68
 8006040:	a919      	add	r1, sp, #100	; 0x64
 8006042:	4620      	mov	r0, r4
 8006044:	f001 fdd6 	bl	8007bf4 <__d2b>
 8006048:	ec4b ab18 	vmov	d8, sl, fp
 800604c:	9018      	str	r0, [sp, #96]	; 0x60
 800604e:	2800      	cmp	r0, #0
 8006050:	f43f aef6 	beq.w	8005e40 <_strtod_l+0x490>
 8006054:	2101      	movs	r1, #1
 8006056:	4620      	mov	r0, r4
 8006058:	f001 fb20 	bl	800769c <__i2b>
 800605c:	4606      	mov	r6, r0
 800605e:	2800      	cmp	r0, #0
 8006060:	f43f aeee 	beq.w	8005e40 <_strtod_l+0x490>
 8006064:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8006066:	9904      	ldr	r1, [sp, #16]
 8006068:	2b00      	cmp	r3, #0
 800606a:	bfab      	itete	ge
 800606c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800606e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8006070:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8006072:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8006076:	bfac      	ite	ge
 8006078:	eb03 0902 	addge.w	r9, r3, r2
 800607c:	1ad7      	sublt	r7, r2, r3
 800607e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8006080:	eba3 0801 	sub.w	r8, r3, r1
 8006084:	4490      	add	r8, r2
 8006086:	4ba1      	ldr	r3, [pc, #644]	; (800630c <_strtod_l+0x95c>)
 8006088:	f108 38ff 	add.w	r8, r8, #4294967295
 800608c:	4598      	cmp	r8, r3
 800608e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8006092:	f280 80c7 	bge.w	8006224 <_strtod_l+0x874>
 8006096:	eba3 0308 	sub.w	r3, r3, r8
 800609a:	2b1f      	cmp	r3, #31
 800609c:	eba2 0203 	sub.w	r2, r2, r3
 80060a0:	f04f 0101 	mov.w	r1, #1
 80060a4:	f300 80b1 	bgt.w	800620a <_strtod_l+0x85a>
 80060a8:	fa01 f303 	lsl.w	r3, r1, r3
 80060ac:	930d      	str	r3, [sp, #52]	; 0x34
 80060ae:	2300      	movs	r3, #0
 80060b0:	9308      	str	r3, [sp, #32]
 80060b2:	eb09 0802 	add.w	r8, r9, r2
 80060b6:	9b04      	ldr	r3, [sp, #16]
 80060b8:	45c1      	cmp	r9, r8
 80060ba:	4417      	add	r7, r2
 80060bc:	441f      	add	r7, r3
 80060be:	464b      	mov	r3, r9
 80060c0:	bfa8      	it	ge
 80060c2:	4643      	movge	r3, r8
 80060c4:	42bb      	cmp	r3, r7
 80060c6:	bfa8      	it	ge
 80060c8:	463b      	movge	r3, r7
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	bfc2      	ittt	gt
 80060ce:	eba8 0803 	subgt.w	r8, r8, r3
 80060d2:	1aff      	subgt	r7, r7, r3
 80060d4:	eba9 0903 	subgt.w	r9, r9, r3
 80060d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80060da:	2b00      	cmp	r3, #0
 80060dc:	dd17      	ble.n	800610e <_strtod_l+0x75e>
 80060de:	4631      	mov	r1, r6
 80060e0:	461a      	mov	r2, r3
 80060e2:	4620      	mov	r0, r4
 80060e4:	f001 fb9a 	bl	800781c <__pow5mult>
 80060e8:	4606      	mov	r6, r0
 80060ea:	2800      	cmp	r0, #0
 80060ec:	f43f aea8 	beq.w	8005e40 <_strtod_l+0x490>
 80060f0:	4601      	mov	r1, r0
 80060f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80060f4:	4620      	mov	r0, r4
 80060f6:	f001 fae7 	bl	80076c8 <__multiply>
 80060fa:	900b      	str	r0, [sp, #44]	; 0x2c
 80060fc:	2800      	cmp	r0, #0
 80060fe:	f43f ae9f 	beq.w	8005e40 <_strtod_l+0x490>
 8006102:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006104:	4620      	mov	r0, r4
 8006106:	f001 f9c7 	bl	8007498 <_Bfree>
 800610a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800610c:	9318      	str	r3, [sp, #96]	; 0x60
 800610e:	f1b8 0f00 	cmp.w	r8, #0
 8006112:	f300 808c 	bgt.w	800622e <_strtod_l+0x87e>
 8006116:	9b06      	ldr	r3, [sp, #24]
 8006118:	2b00      	cmp	r3, #0
 800611a:	dd08      	ble.n	800612e <_strtod_l+0x77e>
 800611c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800611e:	9905      	ldr	r1, [sp, #20]
 8006120:	4620      	mov	r0, r4
 8006122:	f001 fb7b 	bl	800781c <__pow5mult>
 8006126:	9005      	str	r0, [sp, #20]
 8006128:	2800      	cmp	r0, #0
 800612a:	f43f ae89 	beq.w	8005e40 <_strtod_l+0x490>
 800612e:	2f00      	cmp	r7, #0
 8006130:	dd08      	ble.n	8006144 <_strtod_l+0x794>
 8006132:	9905      	ldr	r1, [sp, #20]
 8006134:	463a      	mov	r2, r7
 8006136:	4620      	mov	r0, r4
 8006138:	f001 fbca 	bl	80078d0 <__lshift>
 800613c:	9005      	str	r0, [sp, #20]
 800613e:	2800      	cmp	r0, #0
 8006140:	f43f ae7e 	beq.w	8005e40 <_strtod_l+0x490>
 8006144:	f1b9 0f00 	cmp.w	r9, #0
 8006148:	dd08      	ble.n	800615c <_strtod_l+0x7ac>
 800614a:	4631      	mov	r1, r6
 800614c:	464a      	mov	r2, r9
 800614e:	4620      	mov	r0, r4
 8006150:	f001 fbbe 	bl	80078d0 <__lshift>
 8006154:	4606      	mov	r6, r0
 8006156:	2800      	cmp	r0, #0
 8006158:	f43f ae72 	beq.w	8005e40 <_strtod_l+0x490>
 800615c:	9a05      	ldr	r2, [sp, #20]
 800615e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006160:	4620      	mov	r0, r4
 8006162:	f001 fc41 	bl	80079e8 <__mdiff>
 8006166:	4605      	mov	r5, r0
 8006168:	2800      	cmp	r0, #0
 800616a:	f43f ae69 	beq.w	8005e40 <_strtod_l+0x490>
 800616e:	68c3      	ldr	r3, [r0, #12]
 8006170:	930b      	str	r3, [sp, #44]	; 0x2c
 8006172:	2300      	movs	r3, #0
 8006174:	60c3      	str	r3, [r0, #12]
 8006176:	4631      	mov	r1, r6
 8006178:	f001 fc1a 	bl	80079b0 <__mcmp>
 800617c:	2800      	cmp	r0, #0
 800617e:	da60      	bge.n	8006242 <_strtod_l+0x892>
 8006180:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006182:	ea53 030a 	orrs.w	r3, r3, sl
 8006186:	f040 8082 	bne.w	800628e <_strtod_l+0x8de>
 800618a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800618e:	2b00      	cmp	r3, #0
 8006190:	d17d      	bne.n	800628e <_strtod_l+0x8de>
 8006192:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006196:	0d1b      	lsrs	r3, r3, #20
 8006198:	051b      	lsls	r3, r3, #20
 800619a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800619e:	d976      	bls.n	800628e <_strtod_l+0x8de>
 80061a0:	696b      	ldr	r3, [r5, #20]
 80061a2:	b913      	cbnz	r3, 80061aa <_strtod_l+0x7fa>
 80061a4:	692b      	ldr	r3, [r5, #16]
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	dd71      	ble.n	800628e <_strtod_l+0x8de>
 80061aa:	4629      	mov	r1, r5
 80061ac:	2201      	movs	r2, #1
 80061ae:	4620      	mov	r0, r4
 80061b0:	f001 fb8e 	bl	80078d0 <__lshift>
 80061b4:	4631      	mov	r1, r6
 80061b6:	4605      	mov	r5, r0
 80061b8:	f001 fbfa 	bl	80079b0 <__mcmp>
 80061bc:	2800      	cmp	r0, #0
 80061be:	dd66      	ble.n	800628e <_strtod_l+0x8de>
 80061c0:	9904      	ldr	r1, [sp, #16]
 80061c2:	4a53      	ldr	r2, [pc, #332]	; (8006310 <_strtod_l+0x960>)
 80061c4:	465b      	mov	r3, fp
 80061c6:	2900      	cmp	r1, #0
 80061c8:	f000 8081 	beq.w	80062ce <_strtod_l+0x91e>
 80061cc:	ea02 010b 	and.w	r1, r2, fp
 80061d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 80061d4:	dc7b      	bgt.n	80062ce <_strtod_l+0x91e>
 80061d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 80061da:	f77f aea9 	ble.w	8005f30 <_strtod_l+0x580>
 80061de:	4b4d      	ldr	r3, [pc, #308]	; (8006314 <_strtod_l+0x964>)
 80061e0:	4650      	mov	r0, sl
 80061e2:	4659      	mov	r1, fp
 80061e4:	2200      	movs	r2, #0
 80061e6:	f7fa fa27 	bl	8000638 <__aeabi_dmul>
 80061ea:	460b      	mov	r3, r1
 80061ec:	4303      	orrs	r3, r0
 80061ee:	bf08      	it	eq
 80061f0:	2322      	moveq	r3, #34	; 0x22
 80061f2:	4682      	mov	sl, r0
 80061f4:	468b      	mov	fp, r1
 80061f6:	bf08      	it	eq
 80061f8:	6023      	streq	r3, [r4, #0]
 80061fa:	e62b      	b.n	8005e54 <_strtod_l+0x4a4>
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	fa02 f303 	lsl.w	r3, r2, r3
 8006204:	ea03 0a0a 	and.w	sl, r3, sl
 8006208:	e6e3      	b.n	8005fd2 <_strtod_l+0x622>
 800620a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800620e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8006212:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8006216:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800621a:	fa01 f308 	lsl.w	r3, r1, r8
 800621e:	9308      	str	r3, [sp, #32]
 8006220:	910d      	str	r1, [sp, #52]	; 0x34
 8006222:	e746      	b.n	80060b2 <_strtod_l+0x702>
 8006224:	2300      	movs	r3, #0
 8006226:	9308      	str	r3, [sp, #32]
 8006228:	2301      	movs	r3, #1
 800622a:	930d      	str	r3, [sp, #52]	; 0x34
 800622c:	e741      	b.n	80060b2 <_strtod_l+0x702>
 800622e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8006230:	4642      	mov	r2, r8
 8006232:	4620      	mov	r0, r4
 8006234:	f001 fb4c 	bl	80078d0 <__lshift>
 8006238:	9018      	str	r0, [sp, #96]	; 0x60
 800623a:	2800      	cmp	r0, #0
 800623c:	f47f af6b 	bne.w	8006116 <_strtod_l+0x766>
 8006240:	e5fe      	b.n	8005e40 <_strtod_l+0x490>
 8006242:	465f      	mov	r7, fp
 8006244:	d16e      	bne.n	8006324 <_strtod_l+0x974>
 8006246:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800624c:	b342      	cbz	r2, 80062a0 <_strtod_l+0x8f0>
 800624e:	4a32      	ldr	r2, [pc, #200]	; (8006318 <_strtod_l+0x968>)
 8006250:	4293      	cmp	r3, r2
 8006252:	d128      	bne.n	80062a6 <_strtod_l+0x8f6>
 8006254:	9b04      	ldr	r3, [sp, #16]
 8006256:	4651      	mov	r1, sl
 8006258:	b1eb      	cbz	r3, 8006296 <_strtod_l+0x8e6>
 800625a:	4b2d      	ldr	r3, [pc, #180]	; (8006310 <_strtod_l+0x960>)
 800625c:	403b      	ands	r3, r7
 800625e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8006262:	f04f 32ff 	mov.w	r2, #4294967295
 8006266:	d819      	bhi.n	800629c <_strtod_l+0x8ec>
 8006268:	0d1b      	lsrs	r3, r3, #20
 800626a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800626e:	fa02 f303 	lsl.w	r3, r2, r3
 8006272:	4299      	cmp	r1, r3
 8006274:	d117      	bne.n	80062a6 <_strtod_l+0x8f6>
 8006276:	4b29      	ldr	r3, [pc, #164]	; (800631c <_strtod_l+0x96c>)
 8006278:	429f      	cmp	r7, r3
 800627a:	d102      	bne.n	8006282 <_strtod_l+0x8d2>
 800627c:	3101      	adds	r1, #1
 800627e:	f43f addf 	beq.w	8005e40 <_strtod_l+0x490>
 8006282:	4b23      	ldr	r3, [pc, #140]	; (8006310 <_strtod_l+0x960>)
 8006284:	403b      	ands	r3, r7
 8006286:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800628a:	f04f 0a00 	mov.w	sl, #0
 800628e:	9b04      	ldr	r3, [sp, #16]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1a4      	bne.n	80061de <_strtod_l+0x82e>
 8006294:	e5de      	b.n	8005e54 <_strtod_l+0x4a4>
 8006296:	f04f 33ff 	mov.w	r3, #4294967295
 800629a:	e7ea      	b.n	8006272 <_strtod_l+0x8c2>
 800629c:	4613      	mov	r3, r2
 800629e:	e7e8      	b.n	8006272 <_strtod_l+0x8c2>
 80062a0:	ea53 030a 	orrs.w	r3, r3, sl
 80062a4:	d08c      	beq.n	80061c0 <_strtod_l+0x810>
 80062a6:	9b08      	ldr	r3, [sp, #32]
 80062a8:	b1db      	cbz	r3, 80062e2 <_strtod_l+0x932>
 80062aa:	423b      	tst	r3, r7
 80062ac:	d0ef      	beq.n	800628e <_strtod_l+0x8de>
 80062ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062b0:	9a04      	ldr	r2, [sp, #16]
 80062b2:	4650      	mov	r0, sl
 80062b4:	4659      	mov	r1, fp
 80062b6:	b1c3      	cbz	r3, 80062ea <_strtod_l+0x93a>
 80062b8:	f7ff fb5b 	bl	8005972 <sulp>
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	ec51 0b18 	vmov	r0, r1, d8
 80062c4:	f7fa f802 	bl	80002cc <__adddf3>
 80062c8:	4682      	mov	sl, r0
 80062ca:	468b      	mov	fp, r1
 80062cc:	e7df      	b.n	800628e <_strtod_l+0x8de>
 80062ce:	4013      	ands	r3, r2
 80062d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80062d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80062d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80062dc:	f04f 3aff 	mov.w	sl, #4294967295
 80062e0:	e7d5      	b.n	800628e <_strtod_l+0x8de>
 80062e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80062e4:	ea13 0f0a 	tst.w	r3, sl
 80062e8:	e7e0      	b.n	80062ac <_strtod_l+0x8fc>
 80062ea:	f7ff fb42 	bl	8005972 <sulp>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	ec51 0b18 	vmov	r0, r1, d8
 80062f6:	f7f9 ffe7 	bl	80002c8 <__aeabi_dsub>
 80062fa:	2200      	movs	r2, #0
 80062fc:	2300      	movs	r3, #0
 80062fe:	4682      	mov	sl, r0
 8006300:	468b      	mov	fp, r1
 8006302:	f7fa fc01 	bl	8000b08 <__aeabi_dcmpeq>
 8006306:	2800      	cmp	r0, #0
 8006308:	d0c1      	beq.n	800628e <_strtod_l+0x8de>
 800630a:	e611      	b.n	8005f30 <_strtod_l+0x580>
 800630c:	fffffc02 	.word	0xfffffc02
 8006310:	7ff00000 	.word	0x7ff00000
 8006314:	39500000 	.word	0x39500000
 8006318:	000fffff 	.word	0x000fffff
 800631c:	7fefffff 	.word	0x7fefffff
 8006320:	08009328 	.word	0x08009328
 8006324:	4631      	mov	r1, r6
 8006326:	4628      	mov	r0, r5
 8006328:	f001 fcc0 	bl	8007cac <__ratio>
 800632c:	ec59 8b10 	vmov	r8, r9, d0
 8006330:	ee10 0a10 	vmov	r0, s0
 8006334:	2200      	movs	r2, #0
 8006336:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800633a:	4649      	mov	r1, r9
 800633c:	f7fa fbf8 	bl	8000b30 <__aeabi_dcmple>
 8006340:	2800      	cmp	r0, #0
 8006342:	d07a      	beq.n	800643a <_strtod_l+0xa8a>
 8006344:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006346:	2b00      	cmp	r3, #0
 8006348:	d04a      	beq.n	80063e0 <_strtod_l+0xa30>
 800634a:	4b95      	ldr	r3, [pc, #596]	; (80065a0 <_strtod_l+0xbf0>)
 800634c:	2200      	movs	r2, #0
 800634e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006352:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80065a0 <_strtod_l+0xbf0>
 8006356:	f04f 0800 	mov.w	r8, #0
 800635a:	4b92      	ldr	r3, [pc, #584]	; (80065a4 <_strtod_l+0xbf4>)
 800635c:	403b      	ands	r3, r7
 800635e:	930d      	str	r3, [sp, #52]	; 0x34
 8006360:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006362:	4b91      	ldr	r3, [pc, #580]	; (80065a8 <_strtod_l+0xbf8>)
 8006364:	429a      	cmp	r2, r3
 8006366:	f040 80b0 	bne.w	80064ca <_strtod_l+0xb1a>
 800636a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800636e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8006372:	ec4b ab10 	vmov	d0, sl, fp
 8006376:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800637a:	f001 fbbf 	bl	8007afc <__ulp>
 800637e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006382:	ec53 2b10 	vmov	r2, r3, d0
 8006386:	f7fa f957 	bl	8000638 <__aeabi_dmul>
 800638a:	4652      	mov	r2, sl
 800638c:	465b      	mov	r3, fp
 800638e:	f7f9 ff9d 	bl	80002cc <__adddf3>
 8006392:	460b      	mov	r3, r1
 8006394:	4983      	ldr	r1, [pc, #524]	; (80065a4 <_strtod_l+0xbf4>)
 8006396:	4a85      	ldr	r2, [pc, #532]	; (80065ac <_strtod_l+0xbfc>)
 8006398:	4019      	ands	r1, r3
 800639a:	4291      	cmp	r1, r2
 800639c:	4682      	mov	sl, r0
 800639e:	d960      	bls.n	8006462 <_strtod_l+0xab2>
 80063a0:	ee18 3a90 	vmov	r3, s17
 80063a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d104      	bne.n	80063b6 <_strtod_l+0xa06>
 80063ac:	ee18 3a10 	vmov	r3, s16
 80063b0:	3301      	adds	r3, #1
 80063b2:	f43f ad45 	beq.w	8005e40 <_strtod_l+0x490>
 80063b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 80065b8 <_strtod_l+0xc08>
 80063ba:	f04f 3aff 	mov.w	sl, #4294967295
 80063be:	9918      	ldr	r1, [sp, #96]	; 0x60
 80063c0:	4620      	mov	r0, r4
 80063c2:	f001 f869 	bl	8007498 <_Bfree>
 80063c6:	9905      	ldr	r1, [sp, #20]
 80063c8:	4620      	mov	r0, r4
 80063ca:	f001 f865 	bl	8007498 <_Bfree>
 80063ce:	4631      	mov	r1, r6
 80063d0:	4620      	mov	r0, r4
 80063d2:	f001 f861 	bl	8007498 <_Bfree>
 80063d6:	4629      	mov	r1, r5
 80063d8:	4620      	mov	r0, r4
 80063da:	f001 f85d 	bl	8007498 <_Bfree>
 80063de:	e61a      	b.n	8006016 <_strtod_l+0x666>
 80063e0:	f1ba 0f00 	cmp.w	sl, #0
 80063e4:	d11b      	bne.n	800641e <_strtod_l+0xa6e>
 80063e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80063ea:	b9f3      	cbnz	r3, 800642a <_strtod_l+0xa7a>
 80063ec:	4b6c      	ldr	r3, [pc, #432]	; (80065a0 <_strtod_l+0xbf0>)
 80063ee:	2200      	movs	r2, #0
 80063f0:	4640      	mov	r0, r8
 80063f2:	4649      	mov	r1, r9
 80063f4:	f7fa fb92 	bl	8000b1c <__aeabi_dcmplt>
 80063f8:	b9d0      	cbnz	r0, 8006430 <_strtod_l+0xa80>
 80063fa:	4640      	mov	r0, r8
 80063fc:	4649      	mov	r1, r9
 80063fe:	4b6c      	ldr	r3, [pc, #432]	; (80065b0 <_strtod_l+0xc00>)
 8006400:	2200      	movs	r2, #0
 8006402:	f7fa f919 	bl	8000638 <__aeabi_dmul>
 8006406:	4680      	mov	r8, r0
 8006408:	4689      	mov	r9, r1
 800640a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800640e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8006412:	9315      	str	r3, [sp, #84]	; 0x54
 8006414:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8006418:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800641c:	e79d      	b.n	800635a <_strtod_l+0x9aa>
 800641e:	f1ba 0f01 	cmp.w	sl, #1
 8006422:	d102      	bne.n	800642a <_strtod_l+0xa7a>
 8006424:	2f00      	cmp	r7, #0
 8006426:	f43f ad83 	beq.w	8005f30 <_strtod_l+0x580>
 800642a:	4b62      	ldr	r3, [pc, #392]	; (80065b4 <_strtod_l+0xc04>)
 800642c:	2200      	movs	r2, #0
 800642e:	e78e      	b.n	800634e <_strtod_l+0x99e>
 8006430:	f8df 917c 	ldr.w	r9, [pc, #380]	; 80065b0 <_strtod_l+0xc00>
 8006434:	f04f 0800 	mov.w	r8, #0
 8006438:	e7e7      	b.n	800640a <_strtod_l+0xa5a>
 800643a:	4b5d      	ldr	r3, [pc, #372]	; (80065b0 <_strtod_l+0xc00>)
 800643c:	4640      	mov	r0, r8
 800643e:	4649      	mov	r1, r9
 8006440:	2200      	movs	r2, #0
 8006442:	f7fa f8f9 	bl	8000638 <__aeabi_dmul>
 8006446:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006448:	4680      	mov	r8, r0
 800644a:	4689      	mov	r9, r1
 800644c:	b933      	cbnz	r3, 800645c <_strtod_l+0xaac>
 800644e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006452:	900e      	str	r0, [sp, #56]	; 0x38
 8006454:	930f      	str	r3, [sp, #60]	; 0x3c
 8006456:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800645a:	e7dd      	b.n	8006418 <_strtod_l+0xa68>
 800645c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8006460:	e7f9      	b.n	8006456 <_strtod_l+0xaa6>
 8006462:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8006466:	9b04      	ldr	r3, [sp, #16]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1a8      	bne.n	80063be <_strtod_l+0xa0e>
 800646c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8006470:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006472:	0d1b      	lsrs	r3, r3, #20
 8006474:	051b      	lsls	r3, r3, #20
 8006476:	429a      	cmp	r2, r3
 8006478:	d1a1      	bne.n	80063be <_strtod_l+0xa0e>
 800647a:	4640      	mov	r0, r8
 800647c:	4649      	mov	r1, r9
 800647e:	f7fa fc13 	bl	8000ca8 <__aeabi_d2lz>
 8006482:	f7fa f8ab 	bl	80005dc <__aeabi_l2d>
 8006486:	4602      	mov	r2, r0
 8006488:	460b      	mov	r3, r1
 800648a:	4640      	mov	r0, r8
 800648c:	4649      	mov	r1, r9
 800648e:	f7f9 ff1b 	bl	80002c8 <__aeabi_dsub>
 8006492:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006494:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006498:	ea43 030a 	orr.w	r3, r3, sl
 800649c:	4313      	orrs	r3, r2
 800649e:	4680      	mov	r8, r0
 80064a0:	4689      	mov	r9, r1
 80064a2:	d055      	beq.n	8006550 <_strtod_l+0xba0>
 80064a4:	a336      	add	r3, pc, #216	; (adr r3, 8006580 <_strtod_l+0xbd0>)
 80064a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064aa:	f7fa fb37 	bl	8000b1c <__aeabi_dcmplt>
 80064ae:	2800      	cmp	r0, #0
 80064b0:	f47f acd0 	bne.w	8005e54 <_strtod_l+0x4a4>
 80064b4:	a334      	add	r3, pc, #208	; (adr r3, 8006588 <_strtod_l+0xbd8>)
 80064b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ba:	4640      	mov	r0, r8
 80064bc:	4649      	mov	r1, r9
 80064be:	f7fa fb4b 	bl	8000b58 <__aeabi_dcmpgt>
 80064c2:	2800      	cmp	r0, #0
 80064c4:	f43f af7b 	beq.w	80063be <_strtod_l+0xa0e>
 80064c8:	e4c4      	b.n	8005e54 <_strtod_l+0x4a4>
 80064ca:	9b04      	ldr	r3, [sp, #16]
 80064cc:	b333      	cbz	r3, 800651c <_strtod_l+0xb6c>
 80064ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80064d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80064d4:	d822      	bhi.n	800651c <_strtod_l+0xb6c>
 80064d6:	a32e      	add	r3, pc, #184	; (adr r3, 8006590 <_strtod_l+0xbe0>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	4640      	mov	r0, r8
 80064de:	4649      	mov	r1, r9
 80064e0:	f7fa fb26 	bl	8000b30 <__aeabi_dcmple>
 80064e4:	b1a0      	cbz	r0, 8006510 <_strtod_l+0xb60>
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	f7fa fb55 	bl	8000b98 <__aeabi_d2uiz>
 80064ee:	2801      	cmp	r0, #1
 80064f0:	bf38      	it	cc
 80064f2:	2001      	movcc	r0, #1
 80064f4:	f7fa f826 	bl	8000544 <__aeabi_ui2d>
 80064f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064fa:	4680      	mov	r8, r0
 80064fc:	4689      	mov	r9, r1
 80064fe:	bb23      	cbnz	r3, 800654a <_strtod_l+0xb9a>
 8006500:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006504:	9010      	str	r0, [sp, #64]	; 0x40
 8006506:	9311      	str	r3, [sp, #68]	; 0x44
 8006508:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800650c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8006510:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006512:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006514:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8006518:	1a9b      	subs	r3, r3, r2
 800651a:	9309      	str	r3, [sp, #36]	; 0x24
 800651c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006520:	eeb0 0a48 	vmov.f32	s0, s16
 8006524:	eef0 0a68 	vmov.f32	s1, s17
 8006528:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800652c:	f001 fae6 	bl	8007afc <__ulp>
 8006530:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8006534:	ec53 2b10 	vmov	r2, r3, d0
 8006538:	f7fa f87e 	bl	8000638 <__aeabi_dmul>
 800653c:	ec53 2b18 	vmov	r2, r3, d8
 8006540:	f7f9 fec4 	bl	80002cc <__adddf3>
 8006544:	4682      	mov	sl, r0
 8006546:	468b      	mov	fp, r1
 8006548:	e78d      	b.n	8006466 <_strtod_l+0xab6>
 800654a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800654e:	e7db      	b.n	8006508 <_strtod_l+0xb58>
 8006550:	a311      	add	r3, pc, #68	; (adr r3, 8006598 <_strtod_l+0xbe8>)
 8006552:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006556:	f7fa fae1 	bl	8000b1c <__aeabi_dcmplt>
 800655a:	e7b2      	b.n	80064c2 <_strtod_l+0xb12>
 800655c:	2300      	movs	r3, #0
 800655e:	930a      	str	r3, [sp, #40]	; 0x28
 8006560:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006562:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8006564:	6013      	str	r3, [r2, #0]
 8006566:	f7ff ba6b 	b.w	8005a40 <_strtod_l+0x90>
 800656a:	2a65      	cmp	r2, #101	; 0x65
 800656c:	f43f ab5f 	beq.w	8005c2e <_strtod_l+0x27e>
 8006570:	2a45      	cmp	r2, #69	; 0x45
 8006572:	f43f ab5c 	beq.w	8005c2e <_strtod_l+0x27e>
 8006576:	2301      	movs	r3, #1
 8006578:	f7ff bb94 	b.w	8005ca4 <_strtod_l+0x2f4>
 800657c:	f3af 8000 	nop.w
 8006580:	94a03595 	.word	0x94a03595
 8006584:	3fdfffff 	.word	0x3fdfffff
 8006588:	35afe535 	.word	0x35afe535
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	ffc00000 	.word	0xffc00000
 8006594:	41dfffff 	.word	0x41dfffff
 8006598:	94a03595 	.word	0x94a03595
 800659c:	3fcfffff 	.word	0x3fcfffff
 80065a0:	3ff00000 	.word	0x3ff00000
 80065a4:	7ff00000 	.word	0x7ff00000
 80065a8:	7fe00000 	.word	0x7fe00000
 80065ac:	7c9fffff 	.word	0x7c9fffff
 80065b0:	3fe00000 	.word	0x3fe00000
 80065b4:	bff00000 	.word	0xbff00000
 80065b8:	7fefffff 	.word	0x7fefffff

080065bc <_strtod_r>:
 80065bc:	4b01      	ldr	r3, [pc, #4]	; (80065c4 <_strtod_r+0x8>)
 80065be:	f7ff b9f7 	b.w	80059b0 <_strtod_l>
 80065c2:	bf00      	nop
 80065c4:	20000084 	.word	0x20000084

080065c8 <_strtol_l.constprop.0>:
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ce:	d001      	beq.n	80065d4 <_strtol_l.constprop.0+0xc>
 80065d0:	2b24      	cmp	r3, #36	; 0x24
 80065d2:	d906      	bls.n	80065e2 <_strtol_l.constprop.0+0x1a>
 80065d4:	f7fe fee0 	bl	8005398 <__errno>
 80065d8:	2316      	movs	r3, #22
 80065da:	6003      	str	r3, [r0, #0]
 80065dc:	2000      	movs	r0, #0
 80065de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066c8 <_strtol_l.constprop.0+0x100>
 80065e6:	460d      	mov	r5, r1
 80065e8:	462e      	mov	r6, r5
 80065ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 80065f2:	f017 0708 	ands.w	r7, r7, #8
 80065f6:	d1f7      	bne.n	80065e8 <_strtol_l.constprop.0+0x20>
 80065f8:	2c2d      	cmp	r4, #45	; 0x2d
 80065fa:	d132      	bne.n	8006662 <_strtol_l.constprop.0+0x9a>
 80065fc:	782c      	ldrb	r4, [r5, #0]
 80065fe:	2701      	movs	r7, #1
 8006600:	1cb5      	adds	r5, r6, #2
 8006602:	2b00      	cmp	r3, #0
 8006604:	d05b      	beq.n	80066be <_strtol_l.constprop.0+0xf6>
 8006606:	2b10      	cmp	r3, #16
 8006608:	d109      	bne.n	800661e <_strtol_l.constprop.0+0x56>
 800660a:	2c30      	cmp	r4, #48	; 0x30
 800660c:	d107      	bne.n	800661e <_strtol_l.constprop.0+0x56>
 800660e:	782c      	ldrb	r4, [r5, #0]
 8006610:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006614:	2c58      	cmp	r4, #88	; 0x58
 8006616:	d14d      	bne.n	80066b4 <_strtol_l.constprop.0+0xec>
 8006618:	786c      	ldrb	r4, [r5, #1]
 800661a:	2310      	movs	r3, #16
 800661c:	3502      	adds	r5, #2
 800661e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006622:	f108 38ff 	add.w	r8, r8, #4294967295
 8006626:	f04f 0c00 	mov.w	ip, #0
 800662a:	fbb8 f9f3 	udiv	r9, r8, r3
 800662e:	4666      	mov	r6, ip
 8006630:	fb03 8a19 	mls	sl, r3, r9, r8
 8006634:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006638:	f1be 0f09 	cmp.w	lr, #9
 800663c:	d816      	bhi.n	800666c <_strtol_l.constprop.0+0xa4>
 800663e:	4674      	mov	r4, lr
 8006640:	42a3      	cmp	r3, r4
 8006642:	dd24      	ble.n	800668e <_strtol_l.constprop.0+0xc6>
 8006644:	f1bc 0f00 	cmp.w	ip, #0
 8006648:	db1e      	blt.n	8006688 <_strtol_l.constprop.0+0xc0>
 800664a:	45b1      	cmp	r9, r6
 800664c:	d31c      	bcc.n	8006688 <_strtol_l.constprop.0+0xc0>
 800664e:	d101      	bne.n	8006654 <_strtol_l.constprop.0+0x8c>
 8006650:	45a2      	cmp	sl, r4
 8006652:	db19      	blt.n	8006688 <_strtol_l.constprop.0+0xc0>
 8006654:	fb06 4603 	mla	r6, r6, r3, r4
 8006658:	f04f 0c01 	mov.w	ip, #1
 800665c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006660:	e7e8      	b.n	8006634 <_strtol_l.constprop.0+0x6c>
 8006662:	2c2b      	cmp	r4, #43	; 0x2b
 8006664:	bf04      	itt	eq
 8006666:	782c      	ldrbeq	r4, [r5, #0]
 8006668:	1cb5      	addeq	r5, r6, #2
 800666a:	e7ca      	b.n	8006602 <_strtol_l.constprop.0+0x3a>
 800666c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006670:	f1be 0f19 	cmp.w	lr, #25
 8006674:	d801      	bhi.n	800667a <_strtol_l.constprop.0+0xb2>
 8006676:	3c37      	subs	r4, #55	; 0x37
 8006678:	e7e2      	b.n	8006640 <_strtol_l.constprop.0+0x78>
 800667a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800667e:	f1be 0f19 	cmp.w	lr, #25
 8006682:	d804      	bhi.n	800668e <_strtol_l.constprop.0+0xc6>
 8006684:	3c57      	subs	r4, #87	; 0x57
 8006686:	e7db      	b.n	8006640 <_strtol_l.constprop.0+0x78>
 8006688:	f04f 3cff 	mov.w	ip, #4294967295
 800668c:	e7e6      	b.n	800665c <_strtol_l.constprop.0+0x94>
 800668e:	f1bc 0f00 	cmp.w	ip, #0
 8006692:	da05      	bge.n	80066a0 <_strtol_l.constprop.0+0xd8>
 8006694:	2322      	movs	r3, #34	; 0x22
 8006696:	6003      	str	r3, [r0, #0]
 8006698:	4646      	mov	r6, r8
 800669a:	b942      	cbnz	r2, 80066ae <_strtol_l.constprop.0+0xe6>
 800669c:	4630      	mov	r0, r6
 800669e:	e79e      	b.n	80065de <_strtol_l.constprop.0+0x16>
 80066a0:	b107      	cbz	r7, 80066a4 <_strtol_l.constprop.0+0xdc>
 80066a2:	4276      	negs	r6, r6
 80066a4:	2a00      	cmp	r2, #0
 80066a6:	d0f9      	beq.n	800669c <_strtol_l.constprop.0+0xd4>
 80066a8:	f1bc 0f00 	cmp.w	ip, #0
 80066ac:	d000      	beq.n	80066b0 <_strtol_l.constprop.0+0xe8>
 80066ae:	1e69      	subs	r1, r5, #1
 80066b0:	6011      	str	r1, [r2, #0]
 80066b2:	e7f3      	b.n	800669c <_strtol_l.constprop.0+0xd4>
 80066b4:	2430      	movs	r4, #48	; 0x30
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d1b1      	bne.n	800661e <_strtol_l.constprop.0+0x56>
 80066ba:	2308      	movs	r3, #8
 80066bc:	e7af      	b.n	800661e <_strtol_l.constprop.0+0x56>
 80066be:	2c30      	cmp	r4, #48	; 0x30
 80066c0:	d0a5      	beq.n	800660e <_strtol_l.constprop.0+0x46>
 80066c2:	230a      	movs	r3, #10
 80066c4:	e7ab      	b.n	800661e <_strtol_l.constprop.0+0x56>
 80066c6:	bf00      	nop
 80066c8:	08009351 	.word	0x08009351

080066cc <_strtol_r>:
 80066cc:	f7ff bf7c 	b.w	80065c8 <_strtol_l.constprop.0>

080066d0 <__swbuf_r>:
 80066d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066d2:	460e      	mov	r6, r1
 80066d4:	4614      	mov	r4, r2
 80066d6:	4605      	mov	r5, r0
 80066d8:	b118      	cbz	r0, 80066e2 <__swbuf_r+0x12>
 80066da:	6983      	ldr	r3, [r0, #24]
 80066dc:	b90b      	cbnz	r3, 80066e2 <__swbuf_r+0x12>
 80066de:	f000 f9f3 	bl	8006ac8 <__sinit>
 80066e2:	4b21      	ldr	r3, [pc, #132]	; (8006768 <__swbuf_r+0x98>)
 80066e4:	429c      	cmp	r4, r3
 80066e6:	d12b      	bne.n	8006740 <__swbuf_r+0x70>
 80066e8:	686c      	ldr	r4, [r5, #4]
 80066ea:	69a3      	ldr	r3, [r4, #24]
 80066ec:	60a3      	str	r3, [r4, #8]
 80066ee:	89a3      	ldrh	r3, [r4, #12]
 80066f0:	071a      	lsls	r2, r3, #28
 80066f2:	d52f      	bpl.n	8006754 <__swbuf_r+0x84>
 80066f4:	6923      	ldr	r3, [r4, #16]
 80066f6:	b36b      	cbz	r3, 8006754 <__swbuf_r+0x84>
 80066f8:	6923      	ldr	r3, [r4, #16]
 80066fa:	6820      	ldr	r0, [r4, #0]
 80066fc:	1ac0      	subs	r0, r0, r3
 80066fe:	6963      	ldr	r3, [r4, #20]
 8006700:	b2f6      	uxtb	r6, r6
 8006702:	4283      	cmp	r3, r0
 8006704:	4637      	mov	r7, r6
 8006706:	dc04      	bgt.n	8006712 <__swbuf_r+0x42>
 8006708:	4621      	mov	r1, r4
 800670a:	4628      	mov	r0, r5
 800670c:	f000 f948 	bl	80069a0 <_fflush_r>
 8006710:	bb30      	cbnz	r0, 8006760 <__swbuf_r+0x90>
 8006712:	68a3      	ldr	r3, [r4, #8]
 8006714:	3b01      	subs	r3, #1
 8006716:	60a3      	str	r3, [r4, #8]
 8006718:	6823      	ldr	r3, [r4, #0]
 800671a:	1c5a      	adds	r2, r3, #1
 800671c:	6022      	str	r2, [r4, #0]
 800671e:	701e      	strb	r6, [r3, #0]
 8006720:	6963      	ldr	r3, [r4, #20]
 8006722:	3001      	adds	r0, #1
 8006724:	4283      	cmp	r3, r0
 8006726:	d004      	beq.n	8006732 <__swbuf_r+0x62>
 8006728:	89a3      	ldrh	r3, [r4, #12]
 800672a:	07db      	lsls	r3, r3, #31
 800672c:	d506      	bpl.n	800673c <__swbuf_r+0x6c>
 800672e:	2e0a      	cmp	r6, #10
 8006730:	d104      	bne.n	800673c <__swbuf_r+0x6c>
 8006732:	4621      	mov	r1, r4
 8006734:	4628      	mov	r0, r5
 8006736:	f000 f933 	bl	80069a0 <_fflush_r>
 800673a:	b988      	cbnz	r0, 8006760 <__swbuf_r+0x90>
 800673c:	4638      	mov	r0, r7
 800673e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006740:	4b0a      	ldr	r3, [pc, #40]	; (800676c <__swbuf_r+0x9c>)
 8006742:	429c      	cmp	r4, r3
 8006744:	d101      	bne.n	800674a <__swbuf_r+0x7a>
 8006746:	68ac      	ldr	r4, [r5, #8]
 8006748:	e7cf      	b.n	80066ea <__swbuf_r+0x1a>
 800674a:	4b09      	ldr	r3, [pc, #36]	; (8006770 <__swbuf_r+0xa0>)
 800674c:	429c      	cmp	r4, r3
 800674e:	bf08      	it	eq
 8006750:	68ec      	ldreq	r4, [r5, #12]
 8006752:	e7ca      	b.n	80066ea <__swbuf_r+0x1a>
 8006754:	4621      	mov	r1, r4
 8006756:	4628      	mov	r0, r5
 8006758:	f000 f81e 	bl	8006798 <__swsetup_r>
 800675c:	2800      	cmp	r0, #0
 800675e:	d0cb      	beq.n	80066f8 <__swbuf_r+0x28>
 8006760:	f04f 37ff 	mov.w	r7, #4294967295
 8006764:	e7ea      	b.n	800673c <__swbuf_r+0x6c>
 8006766:	bf00      	nop
 8006768:	08009474 	.word	0x08009474
 800676c:	08009494 	.word	0x08009494
 8006770:	08009454 	.word	0x08009454

08006774 <_write_r>:
 8006774:	b538      	push	{r3, r4, r5, lr}
 8006776:	4d07      	ldr	r5, [pc, #28]	; (8006794 <_write_r+0x20>)
 8006778:	4604      	mov	r4, r0
 800677a:	4608      	mov	r0, r1
 800677c:	4611      	mov	r1, r2
 800677e:	2200      	movs	r2, #0
 8006780:	602a      	str	r2, [r5, #0]
 8006782:	461a      	mov	r2, r3
 8006784:	f7fa ffdd 	bl	8001742 <_write>
 8006788:	1c43      	adds	r3, r0, #1
 800678a:	d102      	bne.n	8006792 <_write_r+0x1e>
 800678c:	682b      	ldr	r3, [r5, #0]
 800678e:	b103      	cbz	r3, 8006792 <_write_r+0x1e>
 8006790:	6023      	str	r3, [r4, #0]
 8006792:	bd38      	pop	{r3, r4, r5, pc}
 8006794:	200002f8 	.word	0x200002f8

08006798 <__swsetup_r>:
 8006798:	4b32      	ldr	r3, [pc, #200]	; (8006864 <__swsetup_r+0xcc>)
 800679a:	b570      	push	{r4, r5, r6, lr}
 800679c:	681d      	ldr	r5, [r3, #0]
 800679e:	4606      	mov	r6, r0
 80067a0:	460c      	mov	r4, r1
 80067a2:	b125      	cbz	r5, 80067ae <__swsetup_r+0x16>
 80067a4:	69ab      	ldr	r3, [r5, #24]
 80067a6:	b913      	cbnz	r3, 80067ae <__swsetup_r+0x16>
 80067a8:	4628      	mov	r0, r5
 80067aa:	f000 f98d 	bl	8006ac8 <__sinit>
 80067ae:	4b2e      	ldr	r3, [pc, #184]	; (8006868 <__swsetup_r+0xd0>)
 80067b0:	429c      	cmp	r4, r3
 80067b2:	d10f      	bne.n	80067d4 <__swsetup_r+0x3c>
 80067b4:	686c      	ldr	r4, [r5, #4]
 80067b6:	89a3      	ldrh	r3, [r4, #12]
 80067b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067bc:	0719      	lsls	r1, r3, #28
 80067be:	d42c      	bmi.n	800681a <__swsetup_r+0x82>
 80067c0:	06dd      	lsls	r5, r3, #27
 80067c2:	d411      	bmi.n	80067e8 <__swsetup_r+0x50>
 80067c4:	2309      	movs	r3, #9
 80067c6:	6033      	str	r3, [r6, #0]
 80067c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80067cc:	81a3      	strh	r3, [r4, #12]
 80067ce:	f04f 30ff 	mov.w	r0, #4294967295
 80067d2:	e03e      	b.n	8006852 <__swsetup_r+0xba>
 80067d4:	4b25      	ldr	r3, [pc, #148]	; (800686c <__swsetup_r+0xd4>)
 80067d6:	429c      	cmp	r4, r3
 80067d8:	d101      	bne.n	80067de <__swsetup_r+0x46>
 80067da:	68ac      	ldr	r4, [r5, #8]
 80067dc:	e7eb      	b.n	80067b6 <__swsetup_r+0x1e>
 80067de:	4b24      	ldr	r3, [pc, #144]	; (8006870 <__swsetup_r+0xd8>)
 80067e0:	429c      	cmp	r4, r3
 80067e2:	bf08      	it	eq
 80067e4:	68ec      	ldreq	r4, [r5, #12]
 80067e6:	e7e6      	b.n	80067b6 <__swsetup_r+0x1e>
 80067e8:	0758      	lsls	r0, r3, #29
 80067ea:	d512      	bpl.n	8006812 <__swsetup_r+0x7a>
 80067ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80067ee:	b141      	cbz	r1, 8006802 <__swsetup_r+0x6a>
 80067f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067f4:	4299      	cmp	r1, r3
 80067f6:	d002      	beq.n	80067fe <__swsetup_r+0x66>
 80067f8:	4630      	mov	r0, r6
 80067fa:	f001 fae5 	bl	8007dc8 <_free_r>
 80067fe:	2300      	movs	r3, #0
 8006800:	6363      	str	r3, [r4, #52]	; 0x34
 8006802:	89a3      	ldrh	r3, [r4, #12]
 8006804:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006808:	81a3      	strh	r3, [r4, #12]
 800680a:	2300      	movs	r3, #0
 800680c:	6063      	str	r3, [r4, #4]
 800680e:	6923      	ldr	r3, [r4, #16]
 8006810:	6023      	str	r3, [r4, #0]
 8006812:	89a3      	ldrh	r3, [r4, #12]
 8006814:	f043 0308 	orr.w	r3, r3, #8
 8006818:	81a3      	strh	r3, [r4, #12]
 800681a:	6923      	ldr	r3, [r4, #16]
 800681c:	b94b      	cbnz	r3, 8006832 <__swsetup_r+0x9a>
 800681e:	89a3      	ldrh	r3, [r4, #12]
 8006820:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006828:	d003      	beq.n	8006832 <__swsetup_r+0x9a>
 800682a:	4621      	mov	r1, r4
 800682c:	4630      	mov	r0, r6
 800682e:	f000 fd93 	bl	8007358 <__smakebuf_r>
 8006832:	89a0      	ldrh	r0, [r4, #12]
 8006834:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006838:	f010 0301 	ands.w	r3, r0, #1
 800683c:	d00a      	beq.n	8006854 <__swsetup_r+0xbc>
 800683e:	2300      	movs	r3, #0
 8006840:	60a3      	str	r3, [r4, #8]
 8006842:	6963      	ldr	r3, [r4, #20]
 8006844:	425b      	negs	r3, r3
 8006846:	61a3      	str	r3, [r4, #24]
 8006848:	6923      	ldr	r3, [r4, #16]
 800684a:	b943      	cbnz	r3, 800685e <__swsetup_r+0xc6>
 800684c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006850:	d1ba      	bne.n	80067c8 <__swsetup_r+0x30>
 8006852:	bd70      	pop	{r4, r5, r6, pc}
 8006854:	0781      	lsls	r1, r0, #30
 8006856:	bf58      	it	pl
 8006858:	6963      	ldrpl	r3, [r4, #20]
 800685a:	60a3      	str	r3, [r4, #8]
 800685c:	e7f4      	b.n	8006848 <__swsetup_r+0xb0>
 800685e:	2000      	movs	r0, #0
 8006860:	e7f7      	b.n	8006852 <__swsetup_r+0xba>
 8006862:	bf00      	nop
 8006864:	2000001c 	.word	0x2000001c
 8006868:	08009474 	.word	0x08009474
 800686c:	08009494 	.word	0x08009494
 8006870:	08009454 	.word	0x08009454

08006874 <_close_r>:
 8006874:	b538      	push	{r3, r4, r5, lr}
 8006876:	4d06      	ldr	r5, [pc, #24]	; (8006890 <_close_r+0x1c>)
 8006878:	2300      	movs	r3, #0
 800687a:	4604      	mov	r4, r0
 800687c:	4608      	mov	r0, r1
 800687e:	602b      	str	r3, [r5, #0]
 8006880:	f7fa ff7b 	bl	800177a <_close>
 8006884:	1c43      	adds	r3, r0, #1
 8006886:	d102      	bne.n	800688e <_close_r+0x1a>
 8006888:	682b      	ldr	r3, [r5, #0]
 800688a:	b103      	cbz	r3, 800688e <_close_r+0x1a>
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	bd38      	pop	{r3, r4, r5, pc}
 8006890:	200002f8 	.word	0x200002f8

08006894 <__sflush_r>:
 8006894:	898a      	ldrh	r2, [r1, #12]
 8006896:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689a:	4605      	mov	r5, r0
 800689c:	0710      	lsls	r0, r2, #28
 800689e:	460c      	mov	r4, r1
 80068a0:	d458      	bmi.n	8006954 <__sflush_r+0xc0>
 80068a2:	684b      	ldr	r3, [r1, #4]
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	dc05      	bgt.n	80068b4 <__sflush_r+0x20>
 80068a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	dc02      	bgt.n	80068b4 <__sflush_r+0x20>
 80068ae:	2000      	movs	r0, #0
 80068b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80068b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068b6:	2e00      	cmp	r6, #0
 80068b8:	d0f9      	beq.n	80068ae <__sflush_r+0x1a>
 80068ba:	2300      	movs	r3, #0
 80068bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80068c0:	682f      	ldr	r7, [r5, #0]
 80068c2:	602b      	str	r3, [r5, #0]
 80068c4:	d032      	beq.n	800692c <__sflush_r+0x98>
 80068c6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	075a      	lsls	r2, r3, #29
 80068cc:	d505      	bpl.n	80068da <__sflush_r+0x46>
 80068ce:	6863      	ldr	r3, [r4, #4]
 80068d0:	1ac0      	subs	r0, r0, r3
 80068d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068d4:	b10b      	cbz	r3, 80068da <__sflush_r+0x46>
 80068d6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80068d8:	1ac0      	subs	r0, r0, r3
 80068da:	2300      	movs	r3, #0
 80068dc:	4602      	mov	r2, r0
 80068de:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80068e0:	6a21      	ldr	r1, [r4, #32]
 80068e2:	4628      	mov	r0, r5
 80068e4:	47b0      	blx	r6
 80068e6:	1c43      	adds	r3, r0, #1
 80068e8:	89a3      	ldrh	r3, [r4, #12]
 80068ea:	d106      	bne.n	80068fa <__sflush_r+0x66>
 80068ec:	6829      	ldr	r1, [r5, #0]
 80068ee:	291d      	cmp	r1, #29
 80068f0:	d82c      	bhi.n	800694c <__sflush_r+0xb8>
 80068f2:	4a2a      	ldr	r2, [pc, #168]	; (800699c <__sflush_r+0x108>)
 80068f4:	40ca      	lsrs	r2, r1
 80068f6:	07d6      	lsls	r6, r2, #31
 80068f8:	d528      	bpl.n	800694c <__sflush_r+0xb8>
 80068fa:	2200      	movs	r2, #0
 80068fc:	6062      	str	r2, [r4, #4]
 80068fe:	04d9      	lsls	r1, r3, #19
 8006900:	6922      	ldr	r2, [r4, #16]
 8006902:	6022      	str	r2, [r4, #0]
 8006904:	d504      	bpl.n	8006910 <__sflush_r+0x7c>
 8006906:	1c42      	adds	r2, r0, #1
 8006908:	d101      	bne.n	800690e <__sflush_r+0x7a>
 800690a:	682b      	ldr	r3, [r5, #0]
 800690c:	b903      	cbnz	r3, 8006910 <__sflush_r+0x7c>
 800690e:	6560      	str	r0, [r4, #84]	; 0x54
 8006910:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006912:	602f      	str	r7, [r5, #0]
 8006914:	2900      	cmp	r1, #0
 8006916:	d0ca      	beq.n	80068ae <__sflush_r+0x1a>
 8006918:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800691c:	4299      	cmp	r1, r3
 800691e:	d002      	beq.n	8006926 <__sflush_r+0x92>
 8006920:	4628      	mov	r0, r5
 8006922:	f001 fa51 	bl	8007dc8 <_free_r>
 8006926:	2000      	movs	r0, #0
 8006928:	6360      	str	r0, [r4, #52]	; 0x34
 800692a:	e7c1      	b.n	80068b0 <__sflush_r+0x1c>
 800692c:	6a21      	ldr	r1, [r4, #32]
 800692e:	2301      	movs	r3, #1
 8006930:	4628      	mov	r0, r5
 8006932:	47b0      	blx	r6
 8006934:	1c41      	adds	r1, r0, #1
 8006936:	d1c7      	bne.n	80068c8 <__sflush_r+0x34>
 8006938:	682b      	ldr	r3, [r5, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d0c4      	beq.n	80068c8 <__sflush_r+0x34>
 800693e:	2b1d      	cmp	r3, #29
 8006940:	d001      	beq.n	8006946 <__sflush_r+0xb2>
 8006942:	2b16      	cmp	r3, #22
 8006944:	d101      	bne.n	800694a <__sflush_r+0xb6>
 8006946:	602f      	str	r7, [r5, #0]
 8006948:	e7b1      	b.n	80068ae <__sflush_r+0x1a>
 800694a:	89a3      	ldrh	r3, [r4, #12]
 800694c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006950:	81a3      	strh	r3, [r4, #12]
 8006952:	e7ad      	b.n	80068b0 <__sflush_r+0x1c>
 8006954:	690f      	ldr	r7, [r1, #16]
 8006956:	2f00      	cmp	r7, #0
 8006958:	d0a9      	beq.n	80068ae <__sflush_r+0x1a>
 800695a:	0793      	lsls	r3, r2, #30
 800695c:	680e      	ldr	r6, [r1, #0]
 800695e:	bf08      	it	eq
 8006960:	694b      	ldreq	r3, [r1, #20]
 8006962:	600f      	str	r7, [r1, #0]
 8006964:	bf18      	it	ne
 8006966:	2300      	movne	r3, #0
 8006968:	eba6 0807 	sub.w	r8, r6, r7
 800696c:	608b      	str	r3, [r1, #8]
 800696e:	f1b8 0f00 	cmp.w	r8, #0
 8006972:	dd9c      	ble.n	80068ae <__sflush_r+0x1a>
 8006974:	6a21      	ldr	r1, [r4, #32]
 8006976:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006978:	4643      	mov	r3, r8
 800697a:	463a      	mov	r2, r7
 800697c:	4628      	mov	r0, r5
 800697e:	47b0      	blx	r6
 8006980:	2800      	cmp	r0, #0
 8006982:	dc06      	bgt.n	8006992 <__sflush_r+0xfe>
 8006984:	89a3      	ldrh	r3, [r4, #12]
 8006986:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800698a:	81a3      	strh	r3, [r4, #12]
 800698c:	f04f 30ff 	mov.w	r0, #4294967295
 8006990:	e78e      	b.n	80068b0 <__sflush_r+0x1c>
 8006992:	4407      	add	r7, r0
 8006994:	eba8 0800 	sub.w	r8, r8, r0
 8006998:	e7e9      	b.n	800696e <__sflush_r+0xda>
 800699a:	bf00      	nop
 800699c:	20400001 	.word	0x20400001

080069a0 <_fflush_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	690b      	ldr	r3, [r1, #16]
 80069a4:	4605      	mov	r5, r0
 80069a6:	460c      	mov	r4, r1
 80069a8:	b913      	cbnz	r3, 80069b0 <_fflush_r+0x10>
 80069aa:	2500      	movs	r5, #0
 80069ac:	4628      	mov	r0, r5
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	b118      	cbz	r0, 80069ba <_fflush_r+0x1a>
 80069b2:	6983      	ldr	r3, [r0, #24]
 80069b4:	b90b      	cbnz	r3, 80069ba <_fflush_r+0x1a>
 80069b6:	f000 f887 	bl	8006ac8 <__sinit>
 80069ba:	4b14      	ldr	r3, [pc, #80]	; (8006a0c <_fflush_r+0x6c>)
 80069bc:	429c      	cmp	r4, r3
 80069be:	d11b      	bne.n	80069f8 <_fflush_r+0x58>
 80069c0:	686c      	ldr	r4, [r5, #4]
 80069c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0ef      	beq.n	80069aa <_fflush_r+0xa>
 80069ca:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80069cc:	07d0      	lsls	r0, r2, #31
 80069ce:	d404      	bmi.n	80069da <_fflush_r+0x3a>
 80069d0:	0599      	lsls	r1, r3, #22
 80069d2:	d402      	bmi.n	80069da <_fflush_r+0x3a>
 80069d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069d6:	f000 fc84 	bl	80072e2 <__retarget_lock_acquire_recursive>
 80069da:	4628      	mov	r0, r5
 80069dc:	4621      	mov	r1, r4
 80069de:	f7ff ff59 	bl	8006894 <__sflush_r>
 80069e2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80069e4:	07da      	lsls	r2, r3, #31
 80069e6:	4605      	mov	r5, r0
 80069e8:	d4e0      	bmi.n	80069ac <_fflush_r+0xc>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	059b      	lsls	r3, r3, #22
 80069ee:	d4dd      	bmi.n	80069ac <_fflush_r+0xc>
 80069f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80069f2:	f000 fc77 	bl	80072e4 <__retarget_lock_release_recursive>
 80069f6:	e7d9      	b.n	80069ac <_fflush_r+0xc>
 80069f8:	4b05      	ldr	r3, [pc, #20]	; (8006a10 <_fflush_r+0x70>)
 80069fa:	429c      	cmp	r4, r3
 80069fc:	d101      	bne.n	8006a02 <_fflush_r+0x62>
 80069fe:	68ac      	ldr	r4, [r5, #8]
 8006a00:	e7df      	b.n	80069c2 <_fflush_r+0x22>
 8006a02:	4b04      	ldr	r3, [pc, #16]	; (8006a14 <_fflush_r+0x74>)
 8006a04:	429c      	cmp	r4, r3
 8006a06:	bf08      	it	eq
 8006a08:	68ec      	ldreq	r4, [r5, #12]
 8006a0a:	e7da      	b.n	80069c2 <_fflush_r+0x22>
 8006a0c:	08009474 	.word	0x08009474
 8006a10:	08009494 	.word	0x08009494
 8006a14:	08009454 	.word	0x08009454

08006a18 <std>:
 8006a18:	2300      	movs	r3, #0
 8006a1a:	b510      	push	{r4, lr}
 8006a1c:	4604      	mov	r4, r0
 8006a1e:	e9c0 3300 	strd	r3, r3, [r0]
 8006a22:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a26:	6083      	str	r3, [r0, #8]
 8006a28:	8181      	strh	r1, [r0, #12]
 8006a2a:	6643      	str	r3, [r0, #100]	; 0x64
 8006a2c:	81c2      	strh	r2, [r0, #14]
 8006a2e:	6183      	str	r3, [r0, #24]
 8006a30:	4619      	mov	r1, r3
 8006a32:	2208      	movs	r2, #8
 8006a34:	305c      	adds	r0, #92	; 0x5c
 8006a36:	f7fe fcd9 	bl	80053ec <memset>
 8006a3a:	4b05      	ldr	r3, [pc, #20]	; (8006a50 <std+0x38>)
 8006a3c:	6263      	str	r3, [r4, #36]	; 0x24
 8006a3e:	4b05      	ldr	r3, [pc, #20]	; (8006a54 <std+0x3c>)
 8006a40:	62a3      	str	r3, [r4, #40]	; 0x28
 8006a42:	4b05      	ldr	r3, [pc, #20]	; (8006a58 <std+0x40>)
 8006a44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <std+0x44>)
 8006a48:	6224      	str	r4, [r4, #32]
 8006a4a:	6323      	str	r3, [r4, #48]	; 0x30
 8006a4c:	bd10      	pop	{r4, pc}
 8006a4e:	bf00      	nop
 8006a50:	080058c1 	.word	0x080058c1
 8006a54:	080058e7 	.word	0x080058e7
 8006a58:	0800591f 	.word	0x0800591f
 8006a5c:	08005943 	.word	0x08005943

08006a60 <_cleanup_r>:
 8006a60:	4901      	ldr	r1, [pc, #4]	; (8006a68 <_cleanup_r+0x8>)
 8006a62:	f000 b8af 	b.w	8006bc4 <_fwalk_reent>
 8006a66:	bf00      	nop
 8006a68:	080069a1 	.word	0x080069a1

08006a6c <__sfmoreglue>:
 8006a6c:	b570      	push	{r4, r5, r6, lr}
 8006a6e:	2268      	movs	r2, #104	; 0x68
 8006a70:	1e4d      	subs	r5, r1, #1
 8006a72:	4355      	muls	r5, r2
 8006a74:	460e      	mov	r6, r1
 8006a76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006a7a:	f001 fa11 	bl	8007ea0 <_malloc_r>
 8006a7e:	4604      	mov	r4, r0
 8006a80:	b140      	cbz	r0, 8006a94 <__sfmoreglue+0x28>
 8006a82:	2100      	movs	r1, #0
 8006a84:	e9c0 1600 	strd	r1, r6, [r0]
 8006a88:	300c      	adds	r0, #12
 8006a8a:	60a0      	str	r0, [r4, #8]
 8006a8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006a90:	f7fe fcac 	bl	80053ec <memset>
 8006a94:	4620      	mov	r0, r4
 8006a96:	bd70      	pop	{r4, r5, r6, pc}

08006a98 <__sfp_lock_acquire>:
 8006a98:	4801      	ldr	r0, [pc, #4]	; (8006aa0 <__sfp_lock_acquire+0x8>)
 8006a9a:	f000 bc22 	b.w	80072e2 <__retarget_lock_acquire_recursive>
 8006a9e:	bf00      	nop
 8006aa0:	200002ed 	.word	0x200002ed

08006aa4 <__sfp_lock_release>:
 8006aa4:	4801      	ldr	r0, [pc, #4]	; (8006aac <__sfp_lock_release+0x8>)
 8006aa6:	f000 bc1d 	b.w	80072e4 <__retarget_lock_release_recursive>
 8006aaa:	bf00      	nop
 8006aac:	200002ed 	.word	0x200002ed

08006ab0 <__sinit_lock_acquire>:
 8006ab0:	4801      	ldr	r0, [pc, #4]	; (8006ab8 <__sinit_lock_acquire+0x8>)
 8006ab2:	f000 bc16 	b.w	80072e2 <__retarget_lock_acquire_recursive>
 8006ab6:	bf00      	nop
 8006ab8:	200002ee 	.word	0x200002ee

08006abc <__sinit_lock_release>:
 8006abc:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <__sinit_lock_release+0x8>)
 8006abe:	f000 bc11 	b.w	80072e4 <__retarget_lock_release_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	200002ee 	.word	0x200002ee

08006ac8 <__sinit>:
 8006ac8:	b510      	push	{r4, lr}
 8006aca:	4604      	mov	r4, r0
 8006acc:	f7ff fff0 	bl	8006ab0 <__sinit_lock_acquire>
 8006ad0:	69a3      	ldr	r3, [r4, #24]
 8006ad2:	b11b      	cbz	r3, 8006adc <__sinit+0x14>
 8006ad4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ad8:	f7ff bff0 	b.w	8006abc <__sinit_lock_release>
 8006adc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006ae0:	6523      	str	r3, [r4, #80]	; 0x50
 8006ae2:	4b13      	ldr	r3, [pc, #76]	; (8006b30 <__sinit+0x68>)
 8006ae4:	4a13      	ldr	r2, [pc, #76]	; (8006b34 <__sinit+0x6c>)
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006aea:	42a3      	cmp	r3, r4
 8006aec:	bf04      	itt	eq
 8006aee:	2301      	moveq	r3, #1
 8006af0:	61a3      	streq	r3, [r4, #24]
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 f820 	bl	8006b38 <__sfp>
 8006af8:	6060      	str	r0, [r4, #4]
 8006afa:	4620      	mov	r0, r4
 8006afc:	f000 f81c 	bl	8006b38 <__sfp>
 8006b00:	60a0      	str	r0, [r4, #8]
 8006b02:	4620      	mov	r0, r4
 8006b04:	f000 f818 	bl	8006b38 <__sfp>
 8006b08:	2200      	movs	r2, #0
 8006b0a:	60e0      	str	r0, [r4, #12]
 8006b0c:	2104      	movs	r1, #4
 8006b0e:	6860      	ldr	r0, [r4, #4]
 8006b10:	f7ff ff82 	bl	8006a18 <std>
 8006b14:	68a0      	ldr	r0, [r4, #8]
 8006b16:	2201      	movs	r2, #1
 8006b18:	2109      	movs	r1, #9
 8006b1a:	f7ff ff7d 	bl	8006a18 <std>
 8006b1e:	68e0      	ldr	r0, [r4, #12]
 8006b20:	2202      	movs	r2, #2
 8006b22:	2112      	movs	r1, #18
 8006b24:	f7ff ff78 	bl	8006a18 <std>
 8006b28:	2301      	movs	r3, #1
 8006b2a:	61a3      	str	r3, [r4, #24]
 8006b2c:	e7d2      	b.n	8006ad4 <__sinit+0xc>
 8006b2e:	bf00      	nop
 8006b30:	080092e8 	.word	0x080092e8
 8006b34:	08006a61 	.word	0x08006a61

08006b38 <__sfp>:
 8006b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3a:	4607      	mov	r7, r0
 8006b3c:	f7ff ffac 	bl	8006a98 <__sfp_lock_acquire>
 8006b40:	4b1e      	ldr	r3, [pc, #120]	; (8006bbc <__sfp+0x84>)
 8006b42:	681e      	ldr	r6, [r3, #0]
 8006b44:	69b3      	ldr	r3, [r6, #24]
 8006b46:	b913      	cbnz	r3, 8006b4e <__sfp+0x16>
 8006b48:	4630      	mov	r0, r6
 8006b4a:	f7ff ffbd 	bl	8006ac8 <__sinit>
 8006b4e:	3648      	adds	r6, #72	; 0x48
 8006b50:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006b54:	3b01      	subs	r3, #1
 8006b56:	d503      	bpl.n	8006b60 <__sfp+0x28>
 8006b58:	6833      	ldr	r3, [r6, #0]
 8006b5a:	b30b      	cbz	r3, 8006ba0 <__sfp+0x68>
 8006b5c:	6836      	ldr	r6, [r6, #0]
 8006b5e:	e7f7      	b.n	8006b50 <__sfp+0x18>
 8006b60:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006b64:	b9d5      	cbnz	r5, 8006b9c <__sfp+0x64>
 8006b66:	4b16      	ldr	r3, [pc, #88]	; (8006bc0 <__sfp+0x88>)
 8006b68:	60e3      	str	r3, [r4, #12]
 8006b6a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006b6e:	6665      	str	r5, [r4, #100]	; 0x64
 8006b70:	f000 fbb6 	bl	80072e0 <__retarget_lock_init_recursive>
 8006b74:	f7ff ff96 	bl	8006aa4 <__sfp_lock_release>
 8006b78:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006b7c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006b80:	6025      	str	r5, [r4, #0]
 8006b82:	61a5      	str	r5, [r4, #24]
 8006b84:	2208      	movs	r2, #8
 8006b86:	4629      	mov	r1, r5
 8006b88:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006b8c:	f7fe fc2e 	bl	80053ec <memset>
 8006b90:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006b94:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006b98:	4620      	mov	r0, r4
 8006b9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b9c:	3468      	adds	r4, #104	; 0x68
 8006b9e:	e7d9      	b.n	8006b54 <__sfp+0x1c>
 8006ba0:	2104      	movs	r1, #4
 8006ba2:	4638      	mov	r0, r7
 8006ba4:	f7ff ff62 	bl	8006a6c <__sfmoreglue>
 8006ba8:	4604      	mov	r4, r0
 8006baa:	6030      	str	r0, [r6, #0]
 8006bac:	2800      	cmp	r0, #0
 8006bae:	d1d5      	bne.n	8006b5c <__sfp+0x24>
 8006bb0:	f7ff ff78 	bl	8006aa4 <__sfp_lock_release>
 8006bb4:	230c      	movs	r3, #12
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	e7ee      	b.n	8006b98 <__sfp+0x60>
 8006bba:	bf00      	nop
 8006bbc:	080092e8 	.word	0x080092e8
 8006bc0:	ffff0001 	.word	0xffff0001

08006bc4 <_fwalk_reent>:
 8006bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc8:	4606      	mov	r6, r0
 8006bca:	4688      	mov	r8, r1
 8006bcc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006bd0:	2700      	movs	r7, #0
 8006bd2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bd6:	f1b9 0901 	subs.w	r9, r9, #1
 8006bda:	d505      	bpl.n	8006be8 <_fwalk_reent+0x24>
 8006bdc:	6824      	ldr	r4, [r4, #0]
 8006bde:	2c00      	cmp	r4, #0
 8006be0:	d1f7      	bne.n	8006bd2 <_fwalk_reent+0xe>
 8006be2:	4638      	mov	r0, r7
 8006be4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be8:	89ab      	ldrh	r3, [r5, #12]
 8006bea:	2b01      	cmp	r3, #1
 8006bec:	d907      	bls.n	8006bfe <_fwalk_reent+0x3a>
 8006bee:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	d003      	beq.n	8006bfe <_fwalk_reent+0x3a>
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	47c0      	blx	r8
 8006bfc:	4307      	orrs	r7, r0
 8006bfe:	3568      	adds	r5, #104	; 0x68
 8006c00:	e7e9      	b.n	8006bd6 <_fwalk_reent+0x12>

08006c02 <rshift>:
 8006c02:	6903      	ldr	r3, [r0, #16]
 8006c04:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006c0c:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006c10:	f100 0414 	add.w	r4, r0, #20
 8006c14:	dd45      	ble.n	8006ca2 <rshift+0xa0>
 8006c16:	f011 011f 	ands.w	r1, r1, #31
 8006c1a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006c1e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006c22:	d10c      	bne.n	8006c3e <rshift+0x3c>
 8006c24:	f100 0710 	add.w	r7, r0, #16
 8006c28:	4629      	mov	r1, r5
 8006c2a:	42b1      	cmp	r1, r6
 8006c2c:	d334      	bcc.n	8006c98 <rshift+0x96>
 8006c2e:	1a9b      	subs	r3, r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	1eea      	subs	r2, r5, #3
 8006c34:	4296      	cmp	r6, r2
 8006c36:	bf38      	it	cc
 8006c38:	2300      	movcc	r3, #0
 8006c3a:	4423      	add	r3, r4
 8006c3c:	e015      	b.n	8006c6a <rshift+0x68>
 8006c3e:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006c42:	f1c1 0820 	rsb	r8, r1, #32
 8006c46:	40cf      	lsrs	r7, r1
 8006c48:	f105 0e04 	add.w	lr, r5, #4
 8006c4c:	46a1      	mov	r9, r4
 8006c4e:	4576      	cmp	r6, lr
 8006c50:	46f4      	mov	ip, lr
 8006c52:	d815      	bhi.n	8006c80 <rshift+0x7e>
 8006c54:	1a9a      	subs	r2, r3, r2
 8006c56:	0092      	lsls	r2, r2, #2
 8006c58:	3a04      	subs	r2, #4
 8006c5a:	3501      	adds	r5, #1
 8006c5c:	42ae      	cmp	r6, r5
 8006c5e:	bf38      	it	cc
 8006c60:	2200      	movcc	r2, #0
 8006c62:	18a3      	adds	r3, r4, r2
 8006c64:	50a7      	str	r7, [r4, r2]
 8006c66:	b107      	cbz	r7, 8006c6a <rshift+0x68>
 8006c68:	3304      	adds	r3, #4
 8006c6a:	1b1a      	subs	r2, r3, r4
 8006c6c:	42a3      	cmp	r3, r4
 8006c6e:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006c72:	bf08      	it	eq
 8006c74:	2300      	moveq	r3, #0
 8006c76:	6102      	str	r2, [r0, #16]
 8006c78:	bf08      	it	eq
 8006c7a:	6143      	streq	r3, [r0, #20]
 8006c7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c80:	f8dc c000 	ldr.w	ip, [ip]
 8006c84:	fa0c fc08 	lsl.w	ip, ip, r8
 8006c88:	ea4c 0707 	orr.w	r7, ip, r7
 8006c8c:	f849 7b04 	str.w	r7, [r9], #4
 8006c90:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006c94:	40cf      	lsrs	r7, r1
 8006c96:	e7da      	b.n	8006c4e <rshift+0x4c>
 8006c98:	f851 cb04 	ldr.w	ip, [r1], #4
 8006c9c:	f847 cf04 	str.w	ip, [r7, #4]!
 8006ca0:	e7c3      	b.n	8006c2a <rshift+0x28>
 8006ca2:	4623      	mov	r3, r4
 8006ca4:	e7e1      	b.n	8006c6a <rshift+0x68>

08006ca6 <__hexdig_fun>:
 8006ca6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8006caa:	2b09      	cmp	r3, #9
 8006cac:	d802      	bhi.n	8006cb4 <__hexdig_fun+0xe>
 8006cae:	3820      	subs	r0, #32
 8006cb0:	b2c0      	uxtb	r0, r0
 8006cb2:	4770      	bx	lr
 8006cb4:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8006cb8:	2b05      	cmp	r3, #5
 8006cba:	d801      	bhi.n	8006cc0 <__hexdig_fun+0x1a>
 8006cbc:	3847      	subs	r0, #71	; 0x47
 8006cbe:	e7f7      	b.n	8006cb0 <__hexdig_fun+0xa>
 8006cc0:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8006cc4:	2b05      	cmp	r3, #5
 8006cc6:	d801      	bhi.n	8006ccc <__hexdig_fun+0x26>
 8006cc8:	3827      	subs	r0, #39	; 0x27
 8006cca:	e7f1      	b.n	8006cb0 <__hexdig_fun+0xa>
 8006ccc:	2000      	movs	r0, #0
 8006cce:	4770      	bx	lr

08006cd0 <__gethex>:
 8006cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cd4:	ed2d 8b02 	vpush	{d8}
 8006cd8:	b089      	sub	sp, #36	; 0x24
 8006cda:	ee08 0a10 	vmov	s16, r0
 8006cde:	9304      	str	r3, [sp, #16]
 8006ce0:	4bb4      	ldr	r3, [pc, #720]	; (8006fb4 <__gethex+0x2e4>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	9301      	str	r3, [sp, #4]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	468b      	mov	fp, r1
 8006cea:	4690      	mov	r8, r2
 8006cec:	f7f9 fa90 	bl	8000210 <strlen>
 8006cf0:	9b01      	ldr	r3, [sp, #4]
 8006cf2:	f8db 2000 	ldr.w	r2, [fp]
 8006cf6:	4403      	add	r3, r0
 8006cf8:	4682      	mov	sl, r0
 8006cfa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8006cfe:	9305      	str	r3, [sp, #20]
 8006d00:	1c93      	adds	r3, r2, #2
 8006d02:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8006d06:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8006d0a:	32fe      	adds	r2, #254	; 0xfe
 8006d0c:	18d1      	adds	r1, r2, r3
 8006d0e:	461f      	mov	r7, r3
 8006d10:	f813 0b01 	ldrb.w	r0, [r3], #1
 8006d14:	9100      	str	r1, [sp, #0]
 8006d16:	2830      	cmp	r0, #48	; 0x30
 8006d18:	d0f8      	beq.n	8006d0c <__gethex+0x3c>
 8006d1a:	f7ff ffc4 	bl	8006ca6 <__hexdig_fun>
 8006d1e:	4604      	mov	r4, r0
 8006d20:	2800      	cmp	r0, #0
 8006d22:	d13a      	bne.n	8006d9a <__gethex+0xca>
 8006d24:	9901      	ldr	r1, [sp, #4]
 8006d26:	4652      	mov	r2, sl
 8006d28:	4638      	mov	r0, r7
 8006d2a:	f7fe fe0e 	bl	800594a <strncmp>
 8006d2e:	4605      	mov	r5, r0
 8006d30:	2800      	cmp	r0, #0
 8006d32:	d168      	bne.n	8006e06 <__gethex+0x136>
 8006d34:	f817 000a 	ldrb.w	r0, [r7, sl]
 8006d38:	eb07 060a 	add.w	r6, r7, sl
 8006d3c:	f7ff ffb3 	bl	8006ca6 <__hexdig_fun>
 8006d40:	2800      	cmp	r0, #0
 8006d42:	d062      	beq.n	8006e0a <__gethex+0x13a>
 8006d44:	4633      	mov	r3, r6
 8006d46:	7818      	ldrb	r0, [r3, #0]
 8006d48:	2830      	cmp	r0, #48	; 0x30
 8006d4a:	461f      	mov	r7, r3
 8006d4c:	f103 0301 	add.w	r3, r3, #1
 8006d50:	d0f9      	beq.n	8006d46 <__gethex+0x76>
 8006d52:	f7ff ffa8 	bl	8006ca6 <__hexdig_fun>
 8006d56:	2301      	movs	r3, #1
 8006d58:	fab0 f480 	clz	r4, r0
 8006d5c:	0964      	lsrs	r4, r4, #5
 8006d5e:	4635      	mov	r5, r6
 8006d60:	9300      	str	r3, [sp, #0]
 8006d62:	463a      	mov	r2, r7
 8006d64:	4616      	mov	r6, r2
 8006d66:	3201      	adds	r2, #1
 8006d68:	7830      	ldrb	r0, [r6, #0]
 8006d6a:	f7ff ff9c 	bl	8006ca6 <__hexdig_fun>
 8006d6e:	2800      	cmp	r0, #0
 8006d70:	d1f8      	bne.n	8006d64 <__gethex+0x94>
 8006d72:	9901      	ldr	r1, [sp, #4]
 8006d74:	4652      	mov	r2, sl
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7fe fde7 	bl	800594a <strncmp>
 8006d7c:	b980      	cbnz	r0, 8006da0 <__gethex+0xd0>
 8006d7e:	b94d      	cbnz	r5, 8006d94 <__gethex+0xc4>
 8006d80:	eb06 050a 	add.w	r5, r6, sl
 8006d84:	462a      	mov	r2, r5
 8006d86:	4616      	mov	r6, r2
 8006d88:	3201      	adds	r2, #1
 8006d8a:	7830      	ldrb	r0, [r6, #0]
 8006d8c:	f7ff ff8b 	bl	8006ca6 <__hexdig_fun>
 8006d90:	2800      	cmp	r0, #0
 8006d92:	d1f8      	bne.n	8006d86 <__gethex+0xb6>
 8006d94:	1bad      	subs	r5, r5, r6
 8006d96:	00ad      	lsls	r5, r5, #2
 8006d98:	e004      	b.n	8006da4 <__gethex+0xd4>
 8006d9a:	2400      	movs	r4, #0
 8006d9c:	4625      	mov	r5, r4
 8006d9e:	e7e0      	b.n	8006d62 <__gethex+0x92>
 8006da0:	2d00      	cmp	r5, #0
 8006da2:	d1f7      	bne.n	8006d94 <__gethex+0xc4>
 8006da4:	7833      	ldrb	r3, [r6, #0]
 8006da6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8006daa:	2b50      	cmp	r3, #80	; 0x50
 8006dac:	d13b      	bne.n	8006e26 <__gethex+0x156>
 8006dae:	7873      	ldrb	r3, [r6, #1]
 8006db0:	2b2b      	cmp	r3, #43	; 0x2b
 8006db2:	d02c      	beq.n	8006e0e <__gethex+0x13e>
 8006db4:	2b2d      	cmp	r3, #45	; 0x2d
 8006db6:	d02e      	beq.n	8006e16 <__gethex+0x146>
 8006db8:	1c71      	adds	r1, r6, #1
 8006dba:	f04f 0900 	mov.w	r9, #0
 8006dbe:	7808      	ldrb	r0, [r1, #0]
 8006dc0:	f7ff ff71 	bl	8006ca6 <__hexdig_fun>
 8006dc4:	1e43      	subs	r3, r0, #1
 8006dc6:	b2db      	uxtb	r3, r3
 8006dc8:	2b18      	cmp	r3, #24
 8006dca:	d82c      	bhi.n	8006e26 <__gethex+0x156>
 8006dcc:	f1a0 0210 	sub.w	r2, r0, #16
 8006dd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006dd4:	f7ff ff67 	bl	8006ca6 <__hexdig_fun>
 8006dd8:	1e43      	subs	r3, r0, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	2b18      	cmp	r3, #24
 8006dde:	d91d      	bls.n	8006e1c <__gethex+0x14c>
 8006de0:	f1b9 0f00 	cmp.w	r9, #0
 8006de4:	d000      	beq.n	8006de8 <__gethex+0x118>
 8006de6:	4252      	negs	r2, r2
 8006de8:	4415      	add	r5, r2
 8006dea:	f8cb 1000 	str.w	r1, [fp]
 8006dee:	b1e4      	cbz	r4, 8006e2a <__gethex+0x15a>
 8006df0:	9b00      	ldr	r3, [sp, #0]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	bf14      	ite	ne
 8006df6:	2700      	movne	r7, #0
 8006df8:	2706      	moveq	r7, #6
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	b009      	add	sp, #36	; 0x24
 8006dfe:	ecbd 8b02 	vpop	{d8}
 8006e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e06:	463e      	mov	r6, r7
 8006e08:	4625      	mov	r5, r4
 8006e0a:	2401      	movs	r4, #1
 8006e0c:	e7ca      	b.n	8006da4 <__gethex+0xd4>
 8006e0e:	f04f 0900 	mov.w	r9, #0
 8006e12:	1cb1      	adds	r1, r6, #2
 8006e14:	e7d3      	b.n	8006dbe <__gethex+0xee>
 8006e16:	f04f 0901 	mov.w	r9, #1
 8006e1a:	e7fa      	b.n	8006e12 <__gethex+0x142>
 8006e1c:	230a      	movs	r3, #10
 8006e1e:	fb03 0202 	mla	r2, r3, r2, r0
 8006e22:	3a10      	subs	r2, #16
 8006e24:	e7d4      	b.n	8006dd0 <__gethex+0x100>
 8006e26:	4631      	mov	r1, r6
 8006e28:	e7df      	b.n	8006dea <__gethex+0x11a>
 8006e2a:	1bf3      	subs	r3, r6, r7
 8006e2c:	3b01      	subs	r3, #1
 8006e2e:	4621      	mov	r1, r4
 8006e30:	2b07      	cmp	r3, #7
 8006e32:	dc0b      	bgt.n	8006e4c <__gethex+0x17c>
 8006e34:	ee18 0a10 	vmov	r0, s16
 8006e38:	f000 faee 	bl	8007418 <_Balloc>
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	b940      	cbnz	r0, 8006e52 <__gethex+0x182>
 8006e40:	4b5d      	ldr	r3, [pc, #372]	; (8006fb8 <__gethex+0x2e8>)
 8006e42:	4602      	mov	r2, r0
 8006e44:	21de      	movs	r1, #222	; 0xde
 8006e46:	485d      	ldr	r0, [pc, #372]	; (8006fbc <__gethex+0x2ec>)
 8006e48:	f001 ffd2 	bl	8008df0 <__assert_func>
 8006e4c:	3101      	adds	r1, #1
 8006e4e:	105b      	asrs	r3, r3, #1
 8006e50:	e7ee      	b.n	8006e30 <__gethex+0x160>
 8006e52:	f100 0914 	add.w	r9, r0, #20
 8006e56:	f04f 0b00 	mov.w	fp, #0
 8006e5a:	f1ca 0301 	rsb	r3, sl, #1
 8006e5e:	f8cd 9008 	str.w	r9, [sp, #8]
 8006e62:	f8cd b000 	str.w	fp, [sp]
 8006e66:	9306      	str	r3, [sp, #24]
 8006e68:	42b7      	cmp	r7, r6
 8006e6a:	d340      	bcc.n	8006eee <__gethex+0x21e>
 8006e6c:	9802      	ldr	r0, [sp, #8]
 8006e6e:	9b00      	ldr	r3, [sp, #0]
 8006e70:	f840 3b04 	str.w	r3, [r0], #4
 8006e74:	eba0 0009 	sub.w	r0, r0, r9
 8006e78:	1080      	asrs	r0, r0, #2
 8006e7a:	0146      	lsls	r6, r0, #5
 8006e7c:	6120      	str	r0, [r4, #16]
 8006e7e:	4618      	mov	r0, r3
 8006e80:	f000 fbbc 	bl	80075fc <__hi0bits>
 8006e84:	1a30      	subs	r0, r6, r0
 8006e86:	f8d8 6000 	ldr.w	r6, [r8]
 8006e8a:	42b0      	cmp	r0, r6
 8006e8c:	dd63      	ble.n	8006f56 <__gethex+0x286>
 8006e8e:	1b87      	subs	r7, r0, r6
 8006e90:	4639      	mov	r1, r7
 8006e92:	4620      	mov	r0, r4
 8006e94:	f000 ff60 	bl	8007d58 <__any_on>
 8006e98:	4682      	mov	sl, r0
 8006e9a:	b1a8      	cbz	r0, 8006ec8 <__gethex+0x1f8>
 8006e9c:	1e7b      	subs	r3, r7, #1
 8006e9e:	1159      	asrs	r1, r3, #5
 8006ea0:	f003 021f 	and.w	r2, r3, #31
 8006ea4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8006ea8:	f04f 0a01 	mov.w	sl, #1
 8006eac:	fa0a f202 	lsl.w	r2, sl, r2
 8006eb0:	420a      	tst	r2, r1
 8006eb2:	d009      	beq.n	8006ec8 <__gethex+0x1f8>
 8006eb4:	4553      	cmp	r3, sl
 8006eb6:	dd05      	ble.n	8006ec4 <__gethex+0x1f4>
 8006eb8:	1eb9      	subs	r1, r7, #2
 8006eba:	4620      	mov	r0, r4
 8006ebc:	f000 ff4c 	bl	8007d58 <__any_on>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	d145      	bne.n	8006f50 <__gethex+0x280>
 8006ec4:	f04f 0a02 	mov.w	sl, #2
 8006ec8:	4639      	mov	r1, r7
 8006eca:	4620      	mov	r0, r4
 8006ecc:	f7ff fe99 	bl	8006c02 <rshift>
 8006ed0:	443d      	add	r5, r7
 8006ed2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006ed6:	42ab      	cmp	r3, r5
 8006ed8:	da4c      	bge.n	8006f74 <__gethex+0x2a4>
 8006eda:	ee18 0a10 	vmov	r0, s16
 8006ede:	4621      	mov	r1, r4
 8006ee0:	f000 fada 	bl	8007498 <_Bfree>
 8006ee4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	6013      	str	r3, [r2, #0]
 8006eea:	27a3      	movs	r7, #163	; 0xa3
 8006eec:	e785      	b.n	8006dfa <__gethex+0x12a>
 8006eee:	1e73      	subs	r3, r6, #1
 8006ef0:	9a05      	ldr	r2, [sp, #20]
 8006ef2:	9303      	str	r3, [sp, #12]
 8006ef4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d019      	beq.n	8006f30 <__gethex+0x260>
 8006efc:	f1bb 0f20 	cmp.w	fp, #32
 8006f00:	d107      	bne.n	8006f12 <__gethex+0x242>
 8006f02:	9b02      	ldr	r3, [sp, #8]
 8006f04:	9a00      	ldr	r2, [sp, #0]
 8006f06:	f843 2b04 	str.w	r2, [r3], #4
 8006f0a:	9302      	str	r3, [sp, #8]
 8006f0c:	2300      	movs	r3, #0
 8006f0e:	9300      	str	r3, [sp, #0]
 8006f10:	469b      	mov	fp, r3
 8006f12:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8006f16:	f7ff fec6 	bl	8006ca6 <__hexdig_fun>
 8006f1a:	9b00      	ldr	r3, [sp, #0]
 8006f1c:	f000 000f 	and.w	r0, r0, #15
 8006f20:	fa00 f00b 	lsl.w	r0, r0, fp
 8006f24:	4303      	orrs	r3, r0
 8006f26:	9300      	str	r3, [sp, #0]
 8006f28:	f10b 0b04 	add.w	fp, fp, #4
 8006f2c:	9b03      	ldr	r3, [sp, #12]
 8006f2e:	e00d      	b.n	8006f4c <__gethex+0x27c>
 8006f30:	9b03      	ldr	r3, [sp, #12]
 8006f32:	9a06      	ldr	r2, [sp, #24]
 8006f34:	4413      	add	r3, r2
 8006f36:	42bb      	cmp	r3, r7
 8006f38:	d3e0      	bcc.n	8006efc <__gethex+0x22c>
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	9901      	ldr	r1, [sp, #4]
 8006f3e:	9307      	str	r3, [sp, #28]
 8006f40:	4652      	mov	r2, sl
 8006f42:	f7fe fd02 	bl	800594a <strncmp>
 8006f46:	9b07      	ldr	r3, [sp, #28]
 8006f48:	2800      	cmp	r0, #0
 8006f4a:	d1d7      	bne.n	8006efc <__gethex+0x22c>
 8006f4c:	461e      	mov	r6, r3
 8006f4e:	e78b      	b.n	8006e68 <__gethex+0x198>
 8006f50:	f04f 0a03 	mov.w	sl, #3
 8006f54:	e7b8      	b.n	8006ec8 <__gethex+0x1f8>
 8006f56:	da0a      	bge.n	8006f6e <__gethex+0x29e>
 8006f58:	1a37      	subs	r7, r6, r0
 8006f5a:	4621      	mov	r1, r4
 8006f5c:	ee18 0a10 	vmov	r0, s16
 8006f60:	463a      	mov	r2, r7
 8006f62:	f000 fcb5 	bl	80078d0 <__lshift>
 8006f66:	1bed      	subs	r5, r5, r7
 8006f68:	4604      	mov	r4, r0
 8006f6a:	f100 0914 	add.w	r9, r0, #20
 8006f6e:	f04f 0a00 	mov.w	sl, #0
 8006f72:	e7ae      	b.n	8006ed2 <__gethex+0x202>
 8006f74:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8006f78:	42a8      	cmp	r0, r5
 8006f7a:	dd72      	ble.n	8007062 <__gethex+0x392>
 8006f7c:	1b45      	subs	r5, r0, r5
 8006f7e:	42ae      	cmp	r6, r5
 8006f80:	dc36      	bgt.n	8006ff0 <__gethex+0x320>
 8006f82:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f86:	2b02      	cmp	r3, #2
 8006f88:	d02a      	beq.n	8006fe0 <__gethex+0x310>
 8006f8a:	2b03      	cmp	r3, #3
 8006f8c:	d02c      	beq.n	8006fe8 <__gethex+0x318>
 8006f8e:	2b01      	cmp	r3, #1
 8006f90:	d11c      	bne.n	8006fcc <__gethex+0x2fc>
 8006f92:	42ae      	cmp	r6, r5
 8006f94:	d11a      	bne.n	8006fcc <__gethex+0x2fc>
 8006f96:	2e01      	cmp	r6, #1
 8006f98:	d112      	bne.n	8006fc0 <__gethex+0x2f0>
 8006f9a:	9a04      	ldr	r2, [sp, #16]
 8006f9c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006fa0:	6013      	str	r3, [r2, #0]
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	6123      	str	r3, [r4, #16]
 8006fa6:	f8c9 3000 	str.w	r3, [r9]
 8006faa:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8006fac:	2762      	movs	r7, #98	; 0x62
 8006fae:	601c      	str	r4, [r3, #0]
 8006fb0:	e723      	b.n	8006dfa <__gethex+0x12a>
 8006fb2:	bf00      	nop
 8006fb4:	0800952c 	.word	0x0800952c
 8006fb8:	080094b4 	.word	0x080094b4
 8006fbc:	080094c5 	.word	0x080094c5
 8006fc0:	1e71      	subs	r1, r6, #1
 8006fc2:	4620      	mov	r0, r4
 8006fc4:	f000 fec8 	bl	8007d58 <__any_on>
 8006fc8:	2800      	cmp	r0, #0
 8006fca:	d1e6      	bne.n	8006f9a <__gethex+0x2ca>
 8006fcc:	ee18 0a10 	vmov	r0, s16
 8006fd0:	4621      	mov	r1, r4
 8006fd2:	f000 fa61 	bl	8007498 <_Bfree>
 8006fd6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8006fd8:	2300      	movs	r3, #0
 8006fda:	6013      	str	r3, [r2, #0]
 8006fdc:	2750      	movs	r7, #80	; 0x50
 8006fde:	e70c      	b.n	8006dfa <__gethex+0x12a>
 8006fe0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1f2      	bne.n	8006fcc <__gethex+0x2fc>
 8006fe6:	e7d8      	b.n	8006f9a <__gethex+0x2ca>
 8006fe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d1d5      	bne.n	8006f9a <__gethex+0x2ca>
 8006fee:	e7ed      	b.n	8006fcc <__gethex+0x2fc>
 8006ff0:	1e6f      	subs	r7, r5, #1
 8006ff2:	f1ba 0f00 	cmp.w	sl, #0
 8006ff6:	d131      	bne.n	800705c <__gethex+0x38c>
 8006ff8:	b127      	cbz	r7, 8007004 <__gethex+0x334>
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	4620      	mov	r0, r4
 8006ffe:	f000 feab 	bl	8007d58 <__any_on>
 8007002:	4682      	mov	sl, r0
 8007004:	117b      	asrs	r3, r7, #5
 8007006:	2101      	movs	r1, #1
 8007008:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800700c:	f007 071f 	and.w	r7, r7, #31
 8007010:	fa01 f707 	lsl.w	r7, r1, r7
 8007014:	421f      	tst	r7, r3
 8007016:	4629      	mov	r1, r5
 8007018:	4620      	mov	r0, r4
 800701a:	bf18      	it	ne
 800701c:	f04a 0a02 	orrne.w	sl, sl, #2
 8007020:	1b76      	subs	r6, r6, r5
 8007022:	f7ff fdee 	bl	8006c02 <rshift>
 8007026:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800702a:	2702      	movs	r7, #2
 800702c:	f1ba 0f00 	cmp.w	sl, #0
 8007030:	d048      	beq.n	80070c4 <__gethex+0x3f4>
 8007032:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007036:	2b02      	cmp	r3, #2
 8007038:	d015      	beq.n	8007066 <__gethex+0x396>
 800703a:	2b03      	cmp	r3, #3
 800703c:	d017      	beq.n	800706e <__gethex+0x39e>
 800703e:	2b01      	cmp	r3, #1
 8007040:	d109      	bne.n	8007056 <__gethex+0x386>
 8007042:	f01a 0f02 	tst.w	sl, #2
 8007046:	d006      	beq.n	8007056 <__gethex+0x386>
 8007048:	f8d9 0000 	ldr.w	r0, [r9]
 800704c:	ea4a 0a00 	orr.w	sl, sl, r0
 8007050:	f01a 0f01 	tst.w	sl, #1
 8007054:	d10e      	bne.n	8007074 <__gethex+0x3a4>
 8007056:	f047 0710 	orr.w	r7, r7, #16
 800705a:	e033      	b.n	80070c4 <__gethex+0x3f4>
 800705c:	f04f 0a01 	mov.w	sl, #1
 8007060:	e7d0      	b.n	8007004 <__gethex+0x334>
 8007062:	2701      	movs	r7, #1
 8007064:	e7e2      	b.n	800702c <__gethex+0x35c>
 8007066:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007068:	f1c3 0301 	rsb	r3, r3, #1
 800706c:	9315      	str	r3, [sp, #84]	; 0x54
 800706e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007070:	2b00      	cmp	r3, #0
 8007072:	d0f0      	beq.n	8007056 <__gethex+0x386>
 8007074:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8007078:	f104 0314 	add.w	r3, r4, #20
 800707c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8007080:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8007084:	f04f 0c00 	mov.w	ip, #0
 8007088:	4618      	mov	r0, r3
 800708a:	f853 2b04 	ldr.w	r2, [r3], #4
 800708e:	f1b2 3fff 	cmp.w	r2, #4294967295
 8007092:	d01c      	beq.n	80070ce <__gethex+0x3fe>
 8007094:	3201      	adds	r2, #1
 8007096:	6002      	str	r2, [r0, #0]
 8007098:	2f02      	cmp	r7, #2
 800709a:	f104 0314 	add.w	r3, r4, #20
 800709e:	d13f      	bne.n	8007120 <__gethex+0x450>
 80070a0:	f8d8 2000 	ldr.w	r2, [r8]
 80070a4:	3a01      	subs	r2, #1
 80070a6:	42b2      	cmp	r2, r6
 80070a8:	d10a      	bne.n	80070c0 <__gethex+0x3f0>
 80070aa:	1171      	asrs	r1, r6, #5
 80070ac:	2201      	movs	r2, #1
 80070ae:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80070b2:	f006 061f 	and.w	r6, r6, #31
 80070b6:	fa02 f606 	lsl.w	r6, r2, r6
 80070ba:	421e      	tst	r6, r3
 80070bc:	bf18      	it	ne
 80070be:	4617      	movne	r7, r2
 80070c0:	f047 0720 	orr.w	r7, r7, #32
 80070c4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070c6:	601c      	str	r4, [r3, #0]
 80070c8:	9b04      	ldr	r3, [sp, #16]
 80070ca:	601d      	str	r5, [r3, #0]
 80070cc:	e695      	b.n	8006dfa <__gethex+0x12a>
 80070ce:	4299      	cmp	r1, r3
 80070d0:	f843 cc04 	str.w	ip, [r3, #-4]
 80070d4:	d8d8      	bhi.n	8007088 <__gethex+0x3b8>
 80070d6:	68a3      	ldr	r3, [r4, #8]
 80070d8:	459b      	cmp	fp, r3
 80070da:	db19      	blt.n	8007110 <__gethex+0x440>
 80070dc:	6861      	ldr	r1, [r4, #4]
 80070de:	ee18 0a10 	vmov	r0, s16
 80070e2:	3101      	adds	r1, #1
 80070e4:	f000 f998 	bl	8007418 <_Balloc>
 80070e8:	4681      	mov	r9, r0
 80070ea:	b918      	cbnz	r0, 80070f4 <__gethex+0x424>
 80070ec:	4b1a      	ldr	r3, [pc, #104]	; (8007158 <__gethex+0x488>)
 80070ee:	4602      	mov	r2, r0
 80070f0:	2184      	movs	r1, #132	; 0x84
 80070f2:	e6a8      	b.n	8006e46 <__gethex+0x176>
 80070f4:	6922      	ldr	r2, [r4, #16]
 80070f6:	3202      	adds	r2, #2
 80070f8:	f104 010c 	add.w	r1, r4, #12
 80070fc:	0092      	lsls	r2, r2, #2
 80070fe:	300c      	adds	r0, #12
 8007100:	f000 f97c 	bl	80073fc <memcpy>
 8007104:	4621      	mov	r1, r4
 8007106:	ee18 0a10 	vmov	r0, s16
 800710a:	f000 f9c5 	bl	8007498 <_Bfree>
 800710e:	464c      	mov	r4, r9
 8007110:	6923      	ldr	r3, [r4, #16]
 8007112:	1c5a      	adds	r2, r3, #1
 8007114:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007118:	6122      	str	r2, [r4, #16]
 800711a:	2201      	movs	r2, #1
 800711c:	615a      	str	r2, [r3, #20]
 800711e:	e7bb      	b.n	8007098 <__gethex+0x3c8>
 8007120:	6922      	ldr	r2, [r4, #16]
 8007122:	455a      	cmp	r2, fp
 8007124:	dd0b      	ble.n	800713e <__gethex+0x46e>
 8007126:	2101      	movs	r1, #1
 8007128:	4620      	mov	r0, r4
 800712a:	f7ff fd6a 	bl	8006c02 <rshift>
 800712e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8007132:	3501      	adds	r5, #1
 8007134:	42ab      	cmp	r3, r5
 8007136:	f6ff aed0 	blt.w	8006eda <__gethex+0x20a>
 800713a:	2701      	movs	r7, #1
 800713c:	e7c0      	b.n	80070c0 <__gethex+0x3f0>
 800713e:	f016 061f 	ands.w	r6, r6, #31
 8007142:	d0fa      	beq.n	800713a <__gethex+0x46a>
 8007144:	4453      	add	r3, sl
 8007146:	f1c6 0620 	rsb	r6, r6, #32
 800714a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800714e:	f000 fa55 	bl	80075fc <__hi0bits>
 8007152:	42b0      	cmp	r0, r6
 8007154:	dbe7      	blt.n	8007126 <__gethex+0x456>
 8007156:	e7f0      	b.n	800713a <__gethex+0x46a>
 8007158:	080094b4 	.word	0x080094b4

0800715c <L_shift>:
 800715c:	f1c2 0208 	rsb	r2, r2, #8
 8007160:	0092      	lsls	r2, r2, #2
 8007162:	b570      	push	{r4, r5, r6, lr}
 8007164:	f1c2 0620 	rsb	r6, r2, #32
 8007168:	6843      	ldr	r3, [r0, #4]
 800716a:	6804      	ldr	r4, [r0, #0]
 800716c:	fa03 f506 	lsl.w	r5, r3, r6
 8007170:	432c      	orrs	r4, r5
 8007172:	40d3      	lsrs	r3, r2
 8007174:	6004      	str	r4, [r0, #0]
 8007176:	f840 3f04 	str.w	r3, [r0, #4]!
 800717a:	4288      	cmp	r0, r1
 800717c:	d3f4      	bcc.n	8007168 <L_shift+0xc>
 800717e:	bd70      	pop	{r4, r5, r6, pc}

08007180 <__match>:
 8007180:	b530      	push	{r4, r5, lr}
 8007182:	6803      	ldr	r3, [r0, #0]
 8007184:	3301      	adds	r3, #1
 8007186:	f811 4b01 	ldrb.w	r4, [r1], #1
 800718a:	b914      	cbnz	r4, 8007192 <__match+0x12>
 800718c:	6003      	str	r3, [r0, #0]
 800718e:	2001      	movs	r0, #1
 8007190:	bd30      	pop	{r4, r5, pc}
 8007192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007196:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800719a:	2d19      	cmp	r5, #25
 800719c:	bf98      	it	ls
 800719e:	3220      	addls	r2, #32
 80071a0:	42a2      	cmp	r2, r4
 80071a2:	d0f0      	beq.n	8007186 <__match+0x6>
 80071a4:	2000      	movs	r0, #0
 80071a6:	e7f3      	b.n	8007190 <__match+0x10>

080071a8 <__hexnan>:
 80071a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ac:	680b      	ldr	r3, [r1, #0]
 80071ae:	115e      	asrs	r6, r3, #5
 80071b0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80071b4:	f013 031f 	ands.w	r3, r3, #31
 80071b8:	b087      	sub	sp, #28
 80071ba:	bf18      	it	ne
 80071bc:	3604      	addne	r6, #4
 80071be:	2500      	movs	r5, #0
 80071c0:	1f37      	subs	r7, r6, #4
 80071c2:	4690      	mov	r8, r2
 80071c4:	6802      	ldr	r2, [r0, #0]
 80071c6:	9301      	str	r3, [sp, #4]
 80071c8:	4682      	mov	sl, r0
 80071ca:	f846 5c04 	str.w	r5, [r6, #-4]
 80071ce:	46b9      	mov	r9, r7
 80071d0:	463c      	mov	r4, r7
 80071d2:	9502      	str	r5, [sp, #8]
 80071d4:	46ab      	mov	fp, r5
 80071d6:	7851      	ldrb	r1, [r2, #1]
 80071d8:	1c53      	adds	r3, r2, #1
 80071da:	9303      	str	r3, [sp, #12]
 80071dc:	b341      	cbz	r1, 8007230 <__hexnan+0x88>
 80071de:	4608      	mov	r0, r1
 80071e0:	9205      	str	r2, [sp, #20]
 80071e2:	9104      	str	r1, [sp, #16]
 80071e4:	f7ff fd5f 	bl	8006ca6 <__hexdig_fun>
 80071e8:	2800      	cmp	r0, #0
 80071ea:	d14f      	bne.n	800728c <__hexnan+0xe4>
 80071ec:	9904      	ldr	r1, [sp, #16]
 80071ee:	9a05      	ldr	r2, [sp, #20]
 80071f0:	2920      	cmp	r1, #32
 80071f2:	d818      	bhi.n	8007226 <__hexnan+0x7e>
 80071f4:	9b02      	ldr	r3, [sp, #8]
 80071f6:	459b      	cmp	fp, r3
 80071f8:	dd13      	ble.n	8007222 <__hexnan+0x7a>
 80071fa:	454c      	cmp	r4, r9
 80071fc:	d206      	bcs.n	800720c <__hexnan+0x64>
 80071fe:	2d07      	cmp	r5, #7
 8007200:	dc04      	bgt.n	800720c <__hexnan+0x64>
 8007202:	462a      	mov	r2, r5
 8007204:	4649      	mov	r1, r9
 8007206:	4620      	mov	r0, r4
 8007208:	f7ff ffa8 	bl	800715c <L_shift>
 800720c:	4544      	cmp	r4, r8
 800720e:	d950      	bls.n	80072b2 <__hexnan+0x10a>
 8007210:	2300      	movs	r3, #0
 8007212:	f1a4 0904 	sub.w	r9, r4, #4
 8007216:	f844 3c04 	str.w	r3, [r4, #-4]
 800721a:	f8cd b008 	str.w	fp, [sp, #8]
 800721e:	464c      	mov	r4, r9
 8007220:	461d      	mov	r5, r3
 8007222:	9a03      	ldr	r2, [sp, #12]
 8007224:	e7d7      	b.n	80071d6 <__hexnan+0x2e>
 8007226:	2929      	cmp	r1, #41	; 0x29
 8007228:	d156      	bne.n	80072d8 <__hexnan+0x130>
 800722a:	3202      	adds	r2, #2
 800722c:	f8ca 2000 	str.w	r2, [sl]
 8007230:	f1bb 0f00 	cmp.w	fp, #0
 8007234:	d050      	beq.n	80072d8 <__hexnan+0x130>
 8007236:	454c      	cmp	r4, r9
 8007238:	d206      	bcs.n	8007248 <__hexnan+0xa0>
 800723a:	2d07      	cmp	r5, #7
 800723c:	dc04      	bgt.n	8007248 <__hexnan+0xa0>
 800723e:	462a      	mov	r2, r5
 8007240:	4649      	mov	r1, r9
 8007242:	4620      	mov	r0, r4
 8007244:	f7ff ff8a 	bl	800715c <L_shift>
 8007248:	4544      	cmp	r4, r8
 800724a:	d934      	bls.n	80072b6 <__hexnan+0x10e>
 800724c:	f1a8 0204 	sub.w	r2, r8, #4
 8007250:	4623      	mov	r3, r4
 8007252:	f853 1b04 	ldr.w	r1, [r3], #4
 8007256:	f842 1f04 	str.w	r1, [r2, #4]!
 800725a:	429f      	cmp	r7, r3
 800725c:	d2f9      	bcs.n	8007252 <__hexnan+0xaa>
 800725e:	1b3b      	subs	r3, r7, r4
 8007260:	f023 0303 	bic.w	r3, r3, #3
 8007264:	3304      	adds	r3, #4
 8007266:	3401      	adds	r4, #1
 8007268:	3e03      	subs	r6, #3
 800726a:	42b4      	cmp	r4, r6
 800726c:	bf88      	it	hi
 800726e:	2304      	movhi	r3, #4
 8007270:	4443      	add	r3, r8
 8007272:	2200      	movs	r2, #0
 8007274:	f843 2b04 	str.w	r2, [r3], #4
 8007278:	429f      	cmp	r7, r3
 800727a:	d2fb      	bcs.n	8007274 <__hexnan+0xcc>
 800727c:	683b      	ldr	r3, [r7, #0]
 800727e:	b91b      	cbnz	r3, 8007288 <__hexnan+0xe0>
 8007280:	4547      	cmp	r7, r8
 8007282:	d127      	bne.n	80072d4 <__hexnan+0x12c>
 8007284:	2301      	movs	r3, #1
 8007286:	603b      	str	r3, [r7, #0]
 8007288:	2005      	movs	r0, #5
 800728a:	e026      	b.n	80072da <__hexnan+0x132>
 800728c:	3501      	adds	r5, #1
 800728e:	2d08      	cmp	r5, #8
 8007290:	f10b 0b01 	add.w	fp, fp, #1
 8007294:	dd06      	ble.n	80072a4 <__hexnan+0xfc>
 8007296:	4544      	cmp	r4, r8
 8007298:	d9c3      	bls.n	8007222 <__hexnan+0x7a>
 800729a:	2300      	movs	r3, #0
 800729c:	f844 3c04 	str.w	r3, [r4, #-4]
 80072a0:	2501      	movs	r5, #1
 80072a2:	3c04      	subs	r4, #4
 80072a4:	6822      	ldr	r2, [r4, #0]
 80072a6:	f000 000f 	and.w	r0, r0, #15
 80072aa:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 80072ae:	6022      	str	r2, [r4, #0]
 80072b0:	e7b7      	b.n	8007222 <__hexnan+0x7a>
 80072b2:	2508      	movs	r5, #8
 80072b4:	e7b5      	b.n	8007222 <__hexnan+0x7a>
 80072b6:	9b01      	ldr	r3, [sp, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0df      	beq.n	800727c <__hexnan+0xd4>
 80072bc:	f04f 32ff 	mov.w	r2, #4294967295
 80072c0:	f1c3 0320 	rsb	r3, r3, #32
 80072c4:	fa22 f303 	lsr.w	r3, r2, r3
 80072c8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80072cc:	401a      	ands	r2, r3
 80072ce:	f846 2c04 	str.w	r2, [r6, #-4]
 80072d2:	e7d3      	b.n	800727c <__hexnan+0xd4>
 80072d4:	3f04      	subs	r7, #4
 80072d6:	e7d1      	b.n	800727c <__hexnan+0xd4>
 80072d8:	2004      	movs	r0, #4
 80072da:	b007      	add	sp, #28
 80072dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080072e0 <__retarget_lock_init_recursive>:
 80072e0:	4770      	bx	lr

080072e2 <__retarget_lock_acquire_recursive>:
 80072e2:	4770      	bx	lr

080072e4 <__retarget_lock_release_recursive>:
 80072e4:	4770      	bx	lr
	...

080072e8 <_lseek_r>:
 80072e8:	b538      	push	{r3, r4, r5, lr}
 80072ea:	4d07      	ldr	r5, [pc, #28]	; (8007308 <_lseek_r+0x20>)
 80072ec:	4604      	mov	r4, r0
 80072ee:	4608      	mov	r0, r1
 80072f0:	4611      	mov	r1, r2
 80072f2:	2200      	movs	r2, #0
 80072f4:	602a      	str	r2, [r5, #0]
 80072f6:	461a      	mov	r2, r3
 80072f8:	f7fa fa66 	bl	80017c8 <_lseek>
 80072fc:	1c43      	adds	r3, r0, #1
 80072fe:	d102      	bne.n	8007306 <_lseek_r+0x1e>
 8007300:	682b      	ldr	r3, [r5, #0]
 8007302:	b103      	cbz	r3, 8007306 <_lseek_r+0x1e>
 8007304:	6023      	str	r3, [r4, #0]
 8007306:	bd38      	pop	{r3, r4, r5, pc}
 8007308:	200002f8 	.word	0x200002f8

0800730c <__swhatbuf_r>:
 800730c:	b570      	push	{r4, r5, r6, lr}
 800730e:	460e      	mov	r6, r1
 8007310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007314:	2900      	cmp	r1, #0
 8007316:	b096      	sub	sp, #88	; 0x58
 8007318:	4614      	mov	r4, r2
 800731a:	461d      	mov	r5, r3
 800731c:	da08      	bge.n	8007330 <__swhatbuf_r+0x24>
 800731e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	602a      	str	r2, [r5, #0]
 8007326:	061a      	lsls	r2, r3, #24
 8007328:	d410      	bmi.n	800734c <__swhatbuf_r+0x40>
 800732a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800732e:	e00e      	b.n	800734e <__swhatbuf_r+0x42>
 8007330:	466a      	mov	r2, sp
 8007332:	f001 fd8d 	bl	8008e50 <_fstat_r>
 8007336:	2800      	cmp	r0, #0
 8007338:	dbf1      	blt.n	800731e <__swhatbuf_r+0x12>
 800733a:	9a01      	ldr	r2, [sp, #4]
 800733c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007344:	425a      	negs	r2, r3
 8007346:	415a      	adcs	r2, r3
 8007348:	602a      	str	r2, [r5, #0]
 800734a:	e7ee      	b.n	800732a <__swhatbuf_r+0x1e>
 800734c:	2340      	movs	r3, #64	; 0x40
 800734e:	2000      	movs	r0, #0
 8007350:	6023      	str	r3, [r4, #0]
 8007352:	b016      	add	sp, #88	; 0x58
 8007354:	bd70      	pop	{r4, r5, r6, pc}
	...

08007358 <__smakebuf_r>:
 8007358:	898b      	ldrh	r3, [r1, #12]
 800735a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800735c:	079d      	lsls	r5, r3, #30
 800735e:	4606      	mov	r6, r0
 8007360:	460c      	mov	r4, r1
 8007362:	d507      	bpl.n	8007374 <__smakebuf_r+0x1c>
 8007364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007368:	6023      	str	r3, [r4, #0]
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	2301      	movs	r3, #1
 800736e:	6163      	str	r3, [r4, #20]
 8007370:	b002      	add	sp, #8
 8007372:	bd70      	pop	{r4, r5, r6, pc}
 8007374:	ab01      	add	r3, sp, #4
 8007376:	466a      	mov	r2, sp
 8007378:	f7ff ffc8 	bl	800730c <__swhatbuf_r>
 800737c:	9900      	ldr	r1, [sp, #0]
 800737e:	4605      	mov	r5, r0
 8007380:	4630      	mov	r0, r6
 8007382:	f000 fd8d 	bl	8007ea0 <_malloc_r>
 8007386:	b948      	cbnz	r0, 800739c <__smakebuf_r+0x44>
 8007388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800738c:	059a      	lsls	r2, r3, #22
 800738e:	d4ef      	bmi.n	8007370 <__smakebuf_r+0x18>
 8007390:	f023 0303 	bic.w	r3, r3, #3
 8007394:	f043 0302 	orr.w	r3, r3, #2
 8007398:	81a3      	strh	r3, [r4, #12]
 800739a:	e7e3      	b.n	8007364 <__smakebuf_r+0xc>
 800739c:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <__smakebuf_r+0x7c>)
 800739e:	62b3      	str	r3, [r6, #40]	; 0x28
 80073a0:	89a3      	ldrh	r3, [r4, #12]
 80073a2:	6020      	str	r0, [r4, #0]
 80073a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073a8:	81a3      	strh	r3, [r4, #12]
 80073aa:	9b00      	ldr	r3, [sp, #0]
 80073ac:	6163      	str	r3, [r4, #20]
 80073ae:	9b01      	ldr	r3, [sp, #4]
 80073b0:	6120      	str	r0, [r4, #16]
 80073b2:	b15b      	cbz	r3, 80073cc <__smakebuf_r+0x74>
 80073b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073b8:	4630      	mov	r0, r6
 80073ba:	f001 fd5b 	bl	8008e74 <_isatty_r>
 80073be:	b128      	cbz	r0, 80073cc <__smakebuf_r+0x74>
 80073c0:	89a3      	ldrh	r3, [r4, #12]
 80073c2:	f023 0303 	bic.w	r3, r3, #3
 80073c6:	f043 0301 	orr.w	r3, r3, #1
 80073ca:	81a3      	strh	r3, [r4, #12]
 80073cc:	89a0      	ldrh	r0, [r4, #12]
 80073ce:	4305      	orrs	r5, r0
 80073d0:	81a5      	strh	r5, [r4, #12]
 80073d2:	e7cd      	b.n	8007370 <__smakebuf_r+0x18>
 80073d4:	08006a61 	.word	0x08006a61

080073d8 <__ascii_mbtowc>:
 80073d8:	b082      	sub	sp, #8
 80073da:	b901      	cbnz	r1, 80073de <__ascii_mbtowc+0x6>
 80073dc:	a901      	add	r1, sp, #4
 80073de:	b142      	cbz	r2, 80073f2 <__ascii_mbtowc+0x1a>
 80073e0:	b14b      	cbz	r3, 80073f6 <__ascii_mbtowc+0x1e>
 80073e2:	7813      	ldrb	r3, [r2, #0]
 80073e4:	600b      	str	r3, [r1, #0]
 80073e6:	7812      	ldrb	r2, [r2, #0]
 80073e8:	1e10      	subs	r0, r2, #0
 80073ea:	bf18      	it	ne
 80073ec:	2001      	movne	r0, #1
 80073ee:	b002      	add	sp, #8
 80073f0:	4770      	bx	lr
 80073f2:	4610      	mov	r0, r2
 80073f4:	e7fb      	b.n	80073ee <__ascii_mbtowc+0x16>
 80073f6:	f06f 0001 	mvn.w	r0, #1
 80073fa:	e7f8      	b.n	80073ee <__ascii_mbtowc+0x16>

080073fc <memcpy>:
 80073fc:	440a      	add	r2, r1
 80073fe:	4291      	cmp	r1, r2
 8007400:	f100 33ff 	add.w	r3, r0, #4294967295
 8007404:	d100      	bne.n	8007408 <memcpy+0xc>
 8007406:	4770      	bx	lr
 8007408:	b510      	push	{r4, lr}
 800740a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800740e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007412:	4291      	cmp	r1, r2
 8007414:	d1f9      	bne.n	800740a <memcpy+0xe>
 8007416:	bd10      	pop	{r4, pc}

08007418 <_Balloc>:
 8007418:	b570      	push	{r4, r5, r6, lr}
 800741a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800741c:	4604      	mov	r4, r0
 800741e:	460d      	mov	r5, r1
 8007420:	b976      	cbnz	r6, 8007440 <_Balloc+0x28>
 8007422:	2010      	movs	r0, #16
 8007424:	f001 fd36 	bl	8008e94 <malloc>
 8007428:	4602      	mov	r2, r0
 800742a:	6260      	str	r0, [r4, #36]	; 0x24
 800742c:	b920      	cbnz	r0, 8007438 <_Balloc+0x20>
 800742e:	4b18      	ldr	r3, [pc, #96]	; (8007490 <_Balloc+0x78>)
 8007430:	4818      	ldr	r0, [pc, #96]	; (8007494 <_Balloc+0x7c>)
 8007432:	2166      	movs	r1, #102	; 0x66
 8007434:	f001 fcdc 	bl	8008df0 <__assert_func>
 8007438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800743c:	6006      	str	r6, [r0, #0]
 800743e:	60c6      	str	r6, [r0, #12]
 8007440:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007442:	68f3      	ldr	r3, [r6, #12]
 8007444:	b183      	cbz	r3, 8007468 <_Balloc+0x50>
 8007446:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007448:	68db      	ldr	r3, [r3, #12]
 800744a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800744e:	b9b8      	cbnz	r0, 8007480 <_Balloc+0x68>
 8007450:	2101      	movs	r1, #1
 8007452:	fa01 f605 	lsl.w	r6, r1, r5
 8007456:	1d72      	adds	r2, r6, #5
 8007458:	0092      	lsls	r2, r2, #2
 800745a:	4620      	mov	r0, r4
 800745c:	f000 fc9d 	bl	8007d9a <_calloc_r>
 8007460:	b160      	cbz	r0, 800747c <_Balloc+0x64>
 8007462:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007466:	e00e      	b.n	8007486 <_Balloc+0x6e>
 8007468:	2221      	movs	r2, #33	; 0x21
 800746a:	2104      	movs	r1, #4
 800746c:	4620      	mov	r0, r4
 800746e:	f000 fc94 	bl	8007d9a <_calloc_r>
 8007472:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007474:	60f0      	str	r0, [r6, #12]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d1e4      	bne.n	8007446 <_Balloc+0x2e>
 800747c:	2000      	movs	r0, #0
 800747e:	bd70      	pop	{r4, r5, r6, pc}
 8007480:	6802      	ldr	r2, [r0, #0]
 8007482:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007486:	2300      	movs	r3, #0
 8007488:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800748c:	e7f7      	b.n	800747e <_Balloc+0x66>
 800748e:	bf00      	nop
 8007490:	08009540 	.word	0x08009540
 8007494:	08009557 	.word	0x08009557

08007498 <_Bfree>:
 8007498:	b570      	push	{r4, r5, r6, lr}
 800749a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800749c:	4605      	mov	r5, r0
 800749e:	460c      	mov	r4, r1
 80074a0:	b976      	cbnz	r6, 80074c0 <_Bfree+0x28>
 80074a2:	2010      	movs	r0, #16
 80074a4:	f001 fcf6 	bl	8008e94 <malloc>
 80074a8:	4602      	mov	r2, r0
 80074aa:	6268      	str	r0, [r5, #36]	; 0x24
 80074ac:	b920      	cbnz	r0, 80074b8 <_Bfree+0x20>
 80074ae:	4b09      	ldr	r3, [pc, #36]	; (80074d4 <_Bfree+0x3c>)
 80074b0:	4809      	ldr	r0, [pc, #36]	; (80074d8 <_Bfree+0x40>)
 80074b2:	218a      	movs	r1, #138	; 0x8a
 80074b4:	f001 fc9c 	bl	8008df0 <__assert_func>
 80074b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80074bc:	6006      	str	r6, [r0, #0]
 80074be:	60c6      	str	r6, [r0, #12]
 80074c0:	b13c      	cbz	r4, 80074d2 <_Bfree+0x3a>
 80074c2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80074c4:	6862      	ldr	r2, [r4, #4]
 80074c6:	68db      	ldr	r3, [r3, #12]
 80074c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80074cc:	6021      	str	r1, [r4, #0]
 80074ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80074d2:	bd70      	pop	{r4, r5, r6, pc}
 80074d4:	08009540 	.word	0x08009540
 80074d8:	08009557 	.word	0x08009557

080074dc <__multadd>:
 80074dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e0:	690d      	ldr	r5, [r1, #16]
 80074e2:	4607      	mov	r7, r0
 80074e4:	460c      	mov	r4, r1
 80074e6:	461e      	mov	r6, r3
 80074e8:	f101 0c14 	add.w	ip, r1, #20
 80074ec:	2000      	movs	r0, #0
 80074ee:	f8dc 3000 	ldr.w	r3, [ip]
 80074f2:	b299      	uxth	r1, r3
 80074f4:	fb02 6101 	mla	r1, r2, r1, r6
 80074f8:	0c1e      	lsrs	r6, r3, #16
 80074fa:	0c0b      	lsrs	r3, r1, #16
 80074fc:	fb02 3306 	mla	r3, r2, r6, r3
 8007500:	b289      	uxth	r1, r1
 8007502:	3001      	adds	r0, #1
 8007504:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007508:	4285      	cmp	r5, r0
 800750a:	f84c 1b04 	str.w	r1, [ip], #4
 800750e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007512:	dcec      	bgt.n	80074ee <__multadd+0x12>
 8007514:	b30e      	cbz	r6, 800755a <__multadd+0x7e>
 8007516:	68a3      	ldr	r3, [r4, #8]
 8007518:	42ab      	cmp	r3, r5
 800751a:	dc19      	bgt.n	8007550 <__multadd+0x74>
 800751c:	6861      	ldr	r1, [r4, #4]
 800751e:	4638      	mov	r0, r7
 8007520:	3101      	adds	r1, #1
 8007522:	f7ff ff79 	bl	8007418 <_Balloc>
 8007526:	4680      	mov	r8, r0
 8007528:	b928      	cbnz	r0, 8007536 <__multadd+0x5a>
 800752a:	4602      	mov	r2, r0
 800752c:	4b0c      	ldr	r3, [pc, #48]	; (8007560 <__multadd+0x84>)
 800752e:	480d      	ldr	r0, [pc, #52]	; (8007564 <__multadd+0x88>)
 8007530:	21b5      	movs	r1, #181	; 0xb5
 8007532:	f001 fc5d 	bl	8008df0 <__assert_func>
 8007536:	6922      	ldr	r2, [r4, #16]
 8007538:	3202      	adds	r2, #2
 800753a:	f104 010c 	add.w	r1, r4, #12
 800753e:	0092      	lsls	r2, r2, #2
 8007540:	300c      	adds	r0, #12
 8007542:	f7ff ff5b 	bl	80073fc <memcpy>
 8007546:	4621      	mov	r1, r4
 8007548:	4638      	mov	r0, r7
 800754a:	f7ff ffa5 	bl	8007498 <_Bfree>
 800754e:	4644      	mov	r4, r8
 8007550:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007554:	3501      	adds	r5, #1
 8007556:	615e      	str	r6, [r3, #20]
 8007558:	6125      	str	r5, [r4, #16]
 800755a:	4620      	mov	r0, r4
 800755c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007560:	080094b4 	.word	0x080094b4
 8007564:	08009557 	.word	0x08009557

08007568 <__s2b>:
 8007568:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800756c:	460c      	mov	r4, r1
 800756e:	4615      	mov	r5, r2
 8007570:	461f      	mov	r7, r3
 8007572:	2209      	movs	r2, #9
 8007574:	3308      	adds	r3, #8
 8007576:	4606      	mov	r6, r0
 8007578:	fb93 f3f2 	sdiv	r3, r3, r2
 800757c:	2100      	movs	r1, #0
 800757e:	2201      	movs	r2, #1
 8007580:	429a      	cmp	r2, r3
 8007582:	db09      	blt.n	8007598 <__s2b+0x30>
 8007584:	4630      	mov	r0, r6
 8007586:	f7ff ff47 	bl	8007418 <_Balloc>
 800758a:	b940      	cbnz	r0, 800759e <__s2b+0x36>
 800758c:	4602      	mov	r2, r0
 800758e:	4b19      	ldr	r3, [pc, #100]	; (80075f4 <__s2b+0x8c>)
 8007590:	4819      	ldr	r0, [pc, #100]	; (80075f8 <__s2b+0x90>)
 8007592:	21ce      	movs	r1, #206	; 0xce
 8007594:	f001 fc2c 	bl	8008df0 <__assert_func>
 8007598:	0052      	lsls	r2, r2, #1
 800759a:	3101      	adds	r1, #1
 800759c:	e7f0      	b.n	8007580 <__s2b+0x18>
 800759e:	9b08      	ldr	r3, [sp, #32]
 80075a0:	6143      	str	r3, [r0, #20]
 80075a2:	2d09      	cmp	r5, #9
 80075a4:	f04f 0301 	mov.w	r3, #1
 80075a8:	6103      	str	r3, [r0, #16]
 80075aa:	dd16      	ble.n	80075da <__s2b+0x72>
 80075ac:	f104 0909 	add.w	r9, r4, #9
 80075b0:	46c8      	mov	r8, r9
 80075b2:	442c      	add	r4, r5
 80075b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80075b8:	4601      	mov	r1, r0
 80075ba:	3b30      	subs	r3, #48	; 0x30
 80075bc:	220a      	movs	r2, #10
 80075be:	4630      	mov	r0, r6
 80075c0:	f7ff ff8c 	bl	80074dc <__multadd>
 80075c4:	45a0      	cmp	r8, r4
 80075c6:	d1f5      	bne.n	80075b4 <__s2b+0x4c>
 80075c8:	f1a5 0408 	sub.w	r4, r5, #8
 80075cc:	444c      	add	r4, r9
 80075ce:	1b2d      	subs	r5, r5, r4
 80075d0:	1963      	adds	r3, r4, r5
 80075d2:	42bb      	cmp	r3, r7
 80075d4:	db04      	blt.n	80075e0 <__s2b+0x78>
 80075d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80075da:	340a      	adds	r4, #10
 80075dc:	2509      	movs	r5, #9
 80075de:	e7f6      	b.n	80075ce <__s2b+0x66>
 80075e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80075e4:	4601      	mov	r1, r0
 80075e6:	3b30      	subs	r3, #48	; 0x30
 80075e8:	220a      	movs	r2, #10
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff76 	bl	80074dc <__multadd>
 80075f0:	e7ee      	b.n	80075d0 <__s2b+0x68>
 80075f2:	bf00      	nop
 80075f4:	080094b4 	.word	0x080094b4
 80075f8:	08009557 	.word	0x08009557

080075fc <__hi0bits>:
 80075fc:	0c03      	lsrs	r3, r0, #16
 80075fe:	041b      	lsls	r3, r3, #16
 8007600:	b9d3      	cbnz	r3, 8007638 <__hi0bits+0x3c>
 8007602:	0400      	lsls	r0, r0, #16
 8007604:	2310      	movs	r3, #16
 8007606:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800760a:	bf04      	itt	eq
 800760c:	0200      	lsleq	r0, r0, #8
 800760e:	3308      	addeq	r3, #8
 8007610:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007614:	bf04      	itt	eq
 8007616:	0100      	lsleq	r0, r0, #4
 8007618:	3304      	addeq	r3, #4
 800761a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800761e:	bf04      	itt	eq
 8007620:	0080      	lsleq	r0, r0, #2
 8007622:	3302      	addeq	r3, #2
 8007624:	2800      	cmp	r0, #0
 8007626:	db05      	blt.n	8007634 <__hi0bits+0x38>
 8007628:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800762c:	f103 0301 	add.w	r3, r3, #1
 8007630:	bf08      	it	eq
 8007632:	2320      	moveq	r3, #32
 8007634:	4618      	mov	r0, r3
 8007636:	4770      	bx	lr
 8007638:	2300      	movs	r3, #0
 800763a:	e7e4      	b.n	8007606 <__hi0bits+0xa>

0800763c <__lo0bits>:
 800763c:	6803      	ldr	r3, [r0, #0]
 800763e:	f013 0207 	ands.w	r2, r3, #7
 8007642:	4601      	mov	r1, r0
 8007644:	d00b      	beq.n	800765e <__lo0bits+0x22>
 8007646:	07da      	lsls	r2, r3, #31
 8007648:	d423      	bmi.n	8007692 <__lo0bits+0x56>
 800764a:	0798      	lsls	r0, r3, #30
 800764c:	bf49      	itett	mi
 800764e:	085b      	lsrmi	r3, r3, #1
 8007650:	089b      	lsrpl	r3, r3, #2
 8007652:	2001      	movmi	r0, #1
 8007654:	600b      	strmi	r3, [r1, #0]
 8007656:	bf5c      	itt	pl
 8007658:	600b      	strpl	r3, [r1, #0]
 800765a:	2002      	movpl	r0, #2
 800765c:	4770      	bx	lr
 800765e:	b298      	uxth	r0, r3
 8007660:	b9a8      	cbnz	r0, 800768e <__lo0bits+0x52>
 8007662:	0c1b      	lsrs	r3, r3, #16
 8007664:	2010      	movs	r0, #16
 8007666:	b2da      	uxtb	r2, r3
 8007668:	b90a      	cbnz	r2, 800766e <__lo0bits+0x32>
 800766a:	3008      	adds	r0, #8
 800766c:	0a1b      	lsrs	r3, r3, #8
 800766e:	071a      	lsls	r2, r3, #28
 8007670:	bf04      	itt	eq
 8007672:	091b      	lsreq	r3, r3, #4
 8007674:	3004      	addeq	r0, #4
 8007676:	079a      	lsls	r2, r3, #30
 8007678:	bf04      	itt	eq
 800767a:	089b      	lsreq	r3, r3, #2
 800767c:	3002      	addeq	r0, #2
 800767e:	07da      	lsls	r2, r3, #31
 8007680:	d403      	bmi.n	800768a <__lo0bits+0x4e>
 8007682:	085b      	lsrs	r3, r3, #1
 8007684:	f100 0001 	add.w	r0, r0, #1
 8007688:	d005      	beq.n	8007696 <__lo0bits+0x5a>
 800768a:	600b      	str	r3, [r1, #0]
 800768c:	4770      	bx	lr
 800768e:	4610      	mov	r0, r2
 8007690:	e7e9      	b.n	8007666 <__lo0bits+0x2a>
 8007692:	2000      	movs	r0, #0
 8007694:	4770      	bx	lr
 8007696:	2020      	movs	r0, #32
 8007698:	4770      	bx	lr
	...

0800769c <__i2b>:
 800769c:	b510      	push	{r4, lr}
 800769e:	460c      	mov	r4, r1
 80076a0:	2101      	movs	r1, #1
 80076a2:	f7ff feb9 	bl	8007418 <_Balloc>
 80076a6:	4602      	mov	r2, r0
 80076a8:	b928      	cbnz	r0, 80076b6 <__i2b+0x1a>
 80076aa:	4b05      	ldr	r3, [pc, #20]	; (80076c0 <__i2b+0x24>)
 80076ac:	4805      	ldr	r0, [pc, #20]	; (80076c4 <__i2b+0x28>)
 80076ae:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80076b2:	f001 fb9d 	bl	8008df0 <__assert_func>
 80076b6:	2301      	movs	r3, #1
 80076b8:	6144      	str	r4, [r0, #20]
 80076ba:	6103      	str	r3, [r0, #16]
 80076bc:	bd10      	pop	{r4, pc}
 80076be:	bf00      	nop
 80076c0:	080094b4 	.word	0x080094b4
 80076c4:	08009557 	.word	0x08009557

080076c8 <__multiply>:
 80076c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076cc:	4691      	mov	r9, r2
 80076ce:	690a      	ldr	r2, [r1, #16]
 80076d0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80076d4:	429a      	cmp	r2, r3
 80076d6:	bfb8      	it	lt
 80076d8:	460b      	movlt	r3, r1
 80076da:	460c      	mov	r4, r1
 80076dc:	bfbc      	itt	lt
 80076de:	464c      	movlt	r4, r9
 80076e0:	4699      	movlt	r9, r3
 80076e2:	6927      	ldr	r7, [r4, #16]
 80076e4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80076e8:	68a3      	ldr	r3, [r4, #8]
 80076ea:	6861      	ldr	r1, [r4, #4]
 80076ec:	eb07 060a 	add.w	r6, r7, sl
 80076f0:	42b3      	cmp	r3, r6
 80076f2:	b085      	sub	sp, #20
 80076f4:	bfb8      	it	lt
 80076f6:	3101      	addlt	r1, #1
 80076f8:	f7ff fe8e 	bl	8007418 <_Balloc>
 80076fc:	b930      	cbnz	r0, 800770c <__multiply+0x44>
 80076fe:	4602      	mov	r2, r0
 8007700:	4b44      	ldr	r3, [pc, #272]	; (8007814 <__multiply+0x14c>)
 8007702:	4845      	ldr	r0, [pc, #276]	; (8007818 <__multiply+0x150>)
 8007704:	f240 115d 	movw	r1, #349	; 0x15d
 8007708:	f001 fb72 	bl	8008df0 <__assert_func>
 800770c:	f100 0514 	add.w	r5, r0, #20
 8007710:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007714:	462b      	mov	r3, r5
 8007716:	2200      	movs	r2, #0
 8007718:	4543      	cmp	r3, r8
 800771a:	d321      	bcc.n	8007760 <__multiply+0x98>
 800771c:	f104 0314 	add.w	r3, r4, #20
 8007720:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007724:	f109 0314 	add.w	r3, r9, #20
 8007728:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800772c:	9202      	str	r2, [sp, #8]
 800772e:	1b3a      	subs	r2, r7, r4
 8007730:	3a15      	subs	r2, #21
 8007732:	f022 0203 	bic.w	r2, r2, #3
 8007736:	3204      	adds	r2, #4
 8007738:	f104 0115 	add.w	r1, r4, #21
 800773c:	428f      	cmp	r7, r1
 800773e:	bf38      	it	cc
 8007740:	2204      	movcc	r2, #4
 8007742:	9201      	str	r2, [sp, #4]
 8007744:	9a02      	ldr	r2, [sp, #8]
 8007746:	9303      	str	r3, [sp, #12]
 8007748:	429a      	cmp	r2, r3
 800774a:	d80c      	bhi.n	8007766 <__multiply+0x9e>
 800774c:	2e00      	cmp	r6, #0
 800774e:	dd03      	ble.n	8007758 <__multiply+0x90>
 8007750:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007754:	2b00      	cmp	r3, #0
 8007756:	d05a      	beq.n	800780e <__multiply+0x146>
 8007758:	6106      	str	r6, [r0, #16]
 800775a:	b005      	add	sp, #20
 800775c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007760:	f843 2b04 	str.w	r2, [r3], #4
 8007764:	e7d8      	b.n	8007718 <__multiply+0x50>
 8007766:	f8b3 a000 	ldrh.w	sl, [r3]
 800776a:	f1ba 0f00 	cmp.w	sl, #0
 800776e:	d024      	beq.n	80077ba <__multiply+0xf2>
 8007770:	f104 0e14 	add.w	lr, r4, #20
 8007774:	46a9      	mov	r9, r5
 8007776:	f04f 0c00 	mov.w	ip, #0
 800777a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800777e:	f8d9 1000 	ldr.w	r1, [r9]
 8007782:	fa1f fb82 	uxth.w	fp, r2
 8007786:	b289      	uxth	r1, r1
 8007788:	fb0a 110b 	mla	r1, sl, fp, r1
 800778c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007790:	f8d9 2000 	ldr.w	r2, [r9]
 8007794:	4461      	add	r1, ip
 8007796:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800779a:	fb0a c20b 	mla	r2, sl, fp, ip
 800779e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80077a2:	b289      	uxth	r1, r1
 80077a4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80077a8:	4577      	cmp	r7, lr
 80077aa:	f849 1b04 	str.w	r1, [r9], #4
 80077ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80077b2:	d8e2      	bhi.n	800777a <__multiply+0xb2>
 80077b4:	9a01      	ldr	r2, [sp, #4]
 80077b6:	f845 c002 	str.w	ip, [r5, r2]
 80077ba:	9a03      	ldr	r2, [sp, #12]
 80077bc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80077c0:	3304      	adds	r3, #4
 80077c2:	f1b9 0f00 	cmp.w	r9, #0
 80077c6:	d020      	beq.n	800780a <__multiply+0x142>
 80077c8:	6829      	ldr	r1, [r5, #0]
 80077ca:	f104 0c14 	add.w	ip, r4, #20
 80077ce:	46ae      	mov	lr, r5
 80077d0:	f04f 0a00 	mov.w	sl, #0
 80077d4:	f8bc b000 	ldrh.w	fp, [ip]
 80077d8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80077dc:	fb09 220b 	mla	r2, r9, fp, r2
 80077e0:	4492      	add	sl, r2
 80077e2:	b289      	uxth	r1, r1
 80077e4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80077e8:	f84e 1b04 	str.w	r1, [lr], #4
 80077ec:	f85c 2b04 	ldr.w	r2, [ip], #4
 80077f0:	f8be 1000 	ldrh.w	r1, [lr]
 80077f4:	0c12      	lsrs	r2, r2, #16
 80077f6:	fb09 1102 	mla	r1, r9, r2, r1
 80077fa:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 80077fe:	4567      	cmp	r7, ip
 8007800:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007804:	d8e6      	bhi.n	80077d4 <__multiply+0x10c>
 8007806:	9a01      	ldr	r2, [sp, #4]
 8007808:	50a9      	str	r1, [r5, r2]
 800780a:	3504      	adds	r5, #4
 800780c:	e79a      	b.n	8007744 <__multiply+0x7c>
 800780e:	3e01      	subs	r6, #1
 8007810:	e79c      	b.n	800774c <__multiply+0x84>
 8007812:	bf00      	nop
 8007814:	080094b4 	.word	0x080094b4
 8007818:	08009557 	.word	0x08009557

0800781c <__pow5mult>:
 800781c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007820:	4615      	mov	r5, r2
 8007822:	f012 0203 	ands.w	r2, r2, #3
 8007826:	4606      	mov	r6, r0
 8007828:	460f      	mov	r7, r1
 800782a:	d007      	beq.n	800783c <__pow5mult+0x20>
 800782c:	4c25      	ldr	r4, [pc, #148]	; (80078c4 <__pow5mult+0xa8>)
 800782e:	3a01      	subs	r2, #1
 8007830:	2300      	movs	r3, #0
 8007832:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007836:	f7ff fe51 	bl	80074dc <__multadd>
 800783a:	4607      	mov	r7, r0
 800783c:	10ad      	asrs	r5, r5, #2
 800783e:	d03d      	beq.n	80078bc <__pow5mult+0xa0>
 8007840:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007842:	b97c      	cbnz	r4, 8007864 <__pow5mult+0x48>
 8007844:	2010      	movs	r0, #16
 8007846:	f001 fb25 	bl	8008e94 <malloc>
 800784a:	4602      	mov	r2, r0
 800784c:	6270      	str	r0, [r6, #36]	; 0x24
 800784e:	b928      	cbnz	r0, 800785c <__pow5mult+0x40>
 8007850:	4b1d      	ldr	r3, [pc, #116]	; (80078c8 <__pow5mult+0xac>)
 8007852:	481e      	ldr	r0, [pc, #120]	; (80078cc <__pow5mult+0xb0>)
 8007854:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007858:	f001 faca 	bl	8008df0 <__assert_func>
 800785c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007860:	6004      	str	r4, [r0, #0]
 8007862:	60c4      	str	r4, [r0, #12]
 8007864:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007868:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800786c:	b94c      	cbnz	r4, 8007882 <__pow5mult+0x66>
 800786e:	f240 2171 	movw	r1, #625	; 0x271
 8007872:	4630      	mov	r0, r6
 8007874:	f7ff ff12 	bl	800769c <__i2b>
 8007878:	2300      	movs	r3, #0
 800787a:	f8c8 0008 	str.w	r0, [r8, #8]
 800787e:	4604      	mov	r4, r0
 8007880:	6003      	str	r3, [r0, #0]
 8007882:	f04f 0900 	mov.w	r9, #0
 8007886:	07eb      	lsls	r3, r5, #31
 8007888:	d50a      	bpl.n	80078a0 <__pow5mult+0x84>
 800788a:	4639      	mov	r1, r7
 800788c:	4622      	mov	r2, r4
 800788e:	4630      	mov	r0, r6
 8007890:	f7ff ff1a 	bl	80076c8 <__multiply>
 8007894:	4639      	mov	r1, r7
 8007896:	4680      	mov	r8, r0
 8007898:	4630      	mov	r0, r6
 800789a:	f7ff fdfd 	bl	8007498 <_Bfree>
 800789e:	4647      	mov	r7, r8
 80078a0:	106d      	asrs	r5, r5, #1
 80078a2:	d00b      	beq.n	80078bc <__pow5mult+0xa0>
 80078a4:	6820      	ldr	r0, [r4, #0]
 80078a6:	b938      	cbnz	r0, 80078b8 <__pow5mult+0x9c>
 80078a8:	4622      	mov	r2, r4
 80078aa:	4621      	mov	r1, r4
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ff0b 	bl	80076c8 <__multiply>
 80078b2:	6020      	str	r0, [r4, #0]
 80078b4:	f8c0 9000 	str.w	r9, [r0]
 80078b8:	4604      	mov	r4, r0
 80078ba:	e7e4      	b.n	8007886 <__pow5mult+0x6a>
 80078bc:	4638      	mov	r0, r7
 80078be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80078c2:	bf00      	nop
 80078c4:	080096a8 	.word	0x080096a8
 80078c8:	08009540 	.word	0x08009540
 80078cc:	08009557 	.word	0x08009557

080078d0 <__lshift>:
 80078d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078d4:	460c      	mov	r4, r1
 80078d6:	6849      	ldr	r1, [r1, #4]
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80078de:	68a3      	ldr	r3, [r4, #8]
 80078e0:	4607      	mov	r7, r0
 80078e2:	4691      	mov	r9, r2
 80078e4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80078e8:	f108 0601 	add.w	r6, r8, #1
 80078ec:	42b3      	cmp	r3, r6
 80078ee:	db0b      	blt.n	8007908 <__lshift+0x38>
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff fd91 	bl	8007418 <_Balloc>
 80078f6:	4605      	mov	r5, r0
 80078f8:	b948      	cbnz	r0, 800790e <__lshift+0x3e>
 80078fa:	4602      	mov	r2, r0
 80078fc:	4b2a      	ldr	r3, [pc, #168]	; (80079a8 <__lshift+0xd8>)
 80078fe:	482b      	ldr	r0, [pc, #172]	; (80079ac <__lshift+0xdc>)
 8007900:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007904:	f001 fa74 	bl	8008df0 <__assert_func>
 8007908:	3101      	adds	r1, #1
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	e7ee      	b.n	80078ec <__lshift+0x1c>
 800790e:	2300      	movs	r3, #0
 8007910:	f100 0114 	add.w	r1, r0, #20
 8007914:	f100 0210 	add.w	r2, r0, #16
 8007918:	4618      	mov	r0, r3
 800791a:	4553      	cmp	r3, sl
 800791c:	db37      	blt.n	800798e <__lshift+0xbe>
 800791e:	6920      	ldr	r0, [r4, #16]
 8007920:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007924:	f104 0314 	add.w	r3, r4, #20
 8007928:	f019 091f 	ands.w	r9, r9, #31
 800792c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007930:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007934:	d02f      	beq.n	8007996 <__lshift+0xc6>
 8007936:	f1c9 0e20 	rsb	lr, r9, #32
 800793a:	468a      	mov	sl, r1
 800793c:	f04f 0c00 	mov.w	ip, #0
 8007940:	681a      	ldr	r2, [r3, #0]
 8007942:	fa02 f209 	lsl.w	r2, r2, r9
 8007946:	ea42 020c 	orr.w	r2, r2, ip
 800794a:	f84a 2b04 	str.w	r2, [sl], #4
 800794e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007952:	4298      	cmp	r0, r3
 8007954:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007958:	d8f2      	bhi.n	8007940 <__lshift+0x70>
 800795a:	1b03      	subs	r3, r0, r4
 800795c:	3b15      	subs	r3, #21
 800795e:	f023 0303 	bic.w	r3, r3, #3
 8007962:	3304      	adds	r3, #4
 8007964:	f104 0215 	add.w	r2, r4, #21
 8007968:	4290      	cmp	r0, r2
 800796a:	bf38      	it	cc
 800796c:	2304      	movcc	r3, #4
 800796e:	f841 c003 	str.w	ip, [r1, r3]
 8007972:	f1bc 0f00 	cmp.w	ip, #0
 8007976:	d001      	beq.n	800797c <__lshift+0xac>
 8007978:	f108 0602 	add.w	r6, r8, #2
 800797c:	3e01      	subs	r6, #1
 800797e:	4638      	mov	r0, r7
 8007980:	612e      	str	r6, [r5, #16]
 8007982:	4621      	mov	r1, r4
 8007984:	f7ff fd88 	bl	8007498 <_Bfree>
 8007988:	4628      	mov	r0, r5
 800798a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800798e:	f842 0f04 	str.w	r0, [r2, #4]!
 8007992:	3301      	adds	r3, #1
 8007994:	e7c1      	b.n	800791a <__lshift+0x4a>
 8007996:	3904      	subs	r1, #4
 8007998:	f853 2b04 	ldr.w	r2, [r3], #4
 800799c:	f841 2f04 	str.w	r2, [r1, #4]!
 80079a0:	4298      	cmp	r0, r3
 80079a2:	d8f9      	bhi.n	8007998 <__lshift+0xc8>
 80079a4:	e7ea      	b.n	800797c <__lshift+0xac>
 80079a6:	bf00      	nop
 80079a8:	080094b4 	.word	0x080094b4
 80079ac:	08009557 	.word	0x08009557

080079b0 <__mcmp>:
 80079b0:	b530      	push	{r4, r5, lr}
 80079b2:	6902      	ldr	r2, [r0, #16]
 80079b4:	690c      	ldr	r4, [r1, #16]
 80079b6:	1b12      	subs	r2, r2, r4
 80079b8:	d10e      	bne.n	80079d8 <__mcmp+0x28>
 80079ba:	f100 0314 	add.w	r3, r0, #20
 80079be:	3114      	adds	r1, #20
 80079c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80079c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80079cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80079d0:	42a5      	cmp	r5, r4
 80079d2:	d003      	beq.n	80079dc <__mcmp+0x2c>
 80079d4:	d305      	bcc.n	80079e2 <__mcmp+0x32>
 80079d6:	2201      	movs	r2, #1
 80079d8:	4610      	mov	r0, r2
 80079da:	bd30      	pop	{r4, r5, pc}
 80079dc:	4283      	cmp	r3, r0
 80079de:	d3f3      	bcc.n	80079c8 <__mcmp+0x18>
 80079e0:	e7fa      	b.n	80079d8 <__mcmp+0x28>
 80079e2:	f04f 32ff 	mov.w	r2, #4294967295
 80079e6:	e7f7      	b.n	80079d8 <__mcmp+0x28>

080079e8 <__mdiff>:
 80079e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079ec:	460c      	mov	r4, r1
 80079ee:	4606      	mov	r6, r0
 80079f0:	4611      	mov	r1, r2
 80079f2:	4620      	mov	r0, r4
 80079f4:	4690      	mov	r8, r2
 80079f6:	f7ff ffdb 	bl	80079b0 <__mcmp>
 80079fa:	1e05      	subs	r5, r0, #0
 80079fc:	d110      	bne.n	8007a20 <__mdiff+0x38>
 80079fe:	4629      	mov	r1, r5
 8007a00:	4630      	mov	r0, r6
 8007a02:	f7ff fd09 	bl	8007418 <_Balloc>
 8007a06:	b930      	cbnz	r0, 8007a16 <__mdiff+0x2e>
 8007a08:	4b3a      	ldr	r3, [pc, #232]	; (8007af4 <__mdiff+0x10c>)
 8007a0a:	4602      	mov	r2, r0
 8007a0c:	f240 2132 	movw	r1, #562	; 0x232
 8007a10:	4839      	ldr	r0, [pc, #228]	; (8007af8 <__mdiff+0x110>)
 8007a12:	f001 f9ed 	bl	8008df0 <__assert_func>
 8007a16:	2301      	movs	r3, #1
 8007a18:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007a1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a20:	bfa4      	itt	ge
 8007a22:	4643      	movge	r3, r8
 8007a24:	46a0      	movge	r8, r4
 8007a26:	4630      	mov	r0, r6
 8007a28:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007a2c:	bfa6      	itte	ge
 8007a2e:	461c      	movge	r4, r3
 8007a30:	2500      	movge	r5, #0
 8007a32:	2501      	movlt	r5, #1
 8007a34:	f7ff fcf0 	bl	8007418 <_Balloc>
 8007a38:	b920      	cbnz	r0, 8007a44 <__mdiff+0x5c>
 8007a3a:	4b2e      	ldr	r3, [pc, #184]	; (8007af4 <__mdiff+0x10c>)
 8007a3c:	4602      	mov	r2, r0
 8007a3e:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007a42:	e7e5      	b.n	8007a10 <__mdiff+0x28>
 8007a44:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007a48:	6926      	ldr	r6, [r4, #16]
 8007a4a:	60c5      	str	r5, [r0, #12]
 8007a4c:	f104 0914 	add.w	r9, r4, #20
 8007a50:	f108 0514 	add.w	r5, r8, #20
 8007a54:	f100 0e14 	add.w	lr, r0, #20
 8007a58:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007a5c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007a60:	f108 0210 	add.w	r2, r8, #16
 8007a64:	46f2      	mov	sl, lr
 8007a66:	2100      	movs	r1, #0
 8007a68:	f859 3b04 	ldr.w	r3, [r9], #4
 8007a6c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007a70:	fa1f f883 	uxth.w	r8, r3
 8007a74:	fa11 f18b 	uxtah	r1, r1, fp
 8007a78:	0c1b      	lsrs	r3, r3, #16
 8007a7a:	eba1 0808 	sub.w	r8, r1, r8
 8007a7e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007a82:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8007a86:	fa1f f888 	uxth.w	r8, r8
 8007a8a:	1419      	asrs	r1, r3, #16
 8007a8c:	454e      	cmp	r6, r9
 8007a8e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007a92:	f84a 3b04 	str.w	r3, [sl], #4
 8007a96:	d8e7      	bhi.n	8007a68 <__mdiff+0x80>
 8007a98:	1b33      	subs	r3, r6, r4
 8007a9a:	3b15      	subs	r3, #21
 8007a9c:	f023 0303 	bic.w	r3, r3, #3
 8007aa0:	3304      	adds	r3, #4
 8007aa2:	3415      	adds	r4, #21
 8007aa4:	42a6      	cmp	r6, r4
 8007aa6:	bf38      	it	cc
 8007aa8:	2304      	movcc	r3, #4
 8007aaa:	441d      	add	r5, r3
 8007aac:	4473      	add	r3, lr
 8007aae:	469e      	mov	lr, r3
 8007ab0:	462e      	mov	r6, r5
 8007ab2:	4566      	cmp	r6, ip
 8007ab4:	d30e      	bcc.n	8007ad4 <__mdiff+0xec>
 8007ab6:	f10c 0203 	add.w	r2, ip, #3
 8007aba:	1b52      	subs	r2, r2, r5
 8007abc:	f022 0203 	bic.w	r2, r2, #3
 8007ac0:	3d03      	subs	r5, #3
 8007ac2:	45ac      	cmp	ip, r5
 8007ac4:	bf38      	it	cc
 8007ac6:	2200      	movcc	r2, #0
 8007ac8:	441a      	add	r2, r3
 8007aca:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8007ace:	b17b      	cbz	r3, 8007af0 <__mdiff+0x108>
 8007ad0:	6107      	str	r7, [r0, #16]
 8007ad2:	e7a3      	b.n	8007a1c <__mdiff+0x34>
 8007ad4:	f856 8b04 	ldr.w	r8, [r6], #4
 8007ad8:	fa11 f288 	uxtah	r2, r1, r8
 8007adc:	1414      	asrs	r4, r2, #16
 8007ade:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007ae2:	b292      	uxth	r2, r2
 8007ae4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007ae8:	f84e 2b04 	str.w	r2, [lr], #4
 8007aec:	1421      	asrs	r1, r4, #16
 8007aee:	e7e0      	b.n	8007ab2 <__mdiff+0xca>
 8007af0:	3f01      	subs	r7, #1
 8007af2:	e7ea      	b.n	8007aca <__mdiff+0xe2>
 8007af4:	080094b4 	.word	0x080094b4
 8007af8:	08009557 	.word	0x08009557

08007afc <__ulp>:
 8007afc:	b082      	sub	sp, #8
 8007afe:	ed8d 0b00 	vstr	d0, [sp]
 8007b02:	9b01      	ldr	r3, [sp, #4]
 8007b04:	4912      	ldr	r1, [pc, #72]	; (8007b50 <__ulp+0x54>)
 8007b06:	4019      	ands	r1, r3
 8007b08:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 8007b0c:	2900      	cmp	r1, #0
 8007b0e:	dd05      	ble.n	8007b1c <__ulp+0x20>
 8007b10:	2200      	movs	r2, #0
 8007b12:	460b      	mov	r3, r1
 8007b14:	ec43 2b10 	vmov	d0, r2, r3
 8007b18:	b002      	add	sp, #8
 8007b1a:	4770      	bx	lr
 8007b1c:	4249      	negs	r1, r1
 8007b1e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 8007b22:	ea4f 5021 	mov.w	r0, r1, asr #20
 8007b26:	f04f 0200 	mov.w	r2, #0
 8007b2a:	f04f 0300 	mov.w	r3, #0
 8007b2e:	da04      	bge.n	8007b3a <__ulp+0x3e>
 8007b30:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 8007b34:	fa41 f300 	asr.w	r3, r1, r0
 8007b38:	e7ec      	b.n	8007b14 <__ulp+0x18>
 8007b3a:	f1a0 0114 	sub.w	r1, r0, #20
 8007b3e:	291e      	cmp	r1, #30
 8007b40:	bfda      	itte	le
 8007b42:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 8007b46:	fa20 f101 	lsrle.w	r1, r0, r1
 8007b4a:	2101      	movgt	r1, #1
 8007b4c:	460a      	mov	r2, r1
 8007b4e:	e7e1      	b.n	8007b14 <__ulp+0x18>
 8007b50:	7ff00000 	.word	0x7ff00000

08007b54 <__b2d>:
 8007b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b56:	6905      	ldr	r5, [r0, #16]
 8007b58:	f100 0714 	add.w	r7, r0, #20
 8007b5c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8007b60:	1f2e      	subs	r6, r5, #4
 8007b62:	f855 4c04 	ldr.w	r4, [r5, #-4]
 8007b66:	4620      	mov	r0, r4
 8007b68:	f7ff fd48 	bl	80075fc <__hi0bits>
 8007b6c:	f1c0 0320 	rsb	r3, r0, #32
 8007b70:	280a      	cmp	r0, #10
 8007b72:	f8df c07c 	ldr.w	ip, [pc, #124]	; 8007bf0 <__b2d+0x9c>
 8007b76:	600b      	str	r3, [r1, #0]
 8007b78:	dc14      	bgt.n	8007ba4 <__b2d+0x50>
 8007b7a:	f1c0 0e0b 	rsb	lr, r0, #11
 8007b7e:	fa24 f10e 	lsr.w	r1, r4, lr
 8007b82:	42b7      	cmp	r7, r6
 8007b84:	ea41 030c 	orr.w	r3, r1, ip
 8007b88:	bf34      	ite	cc
 8007b8a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007b8e:	2100      	movcs	r1, #0
 8007b90:	3015      	adds	r0, #21
 8007b92:	fa04 f000 	lsl.w	r0, r4, r0
 8007b96:	fa21 f10e 	lsr.w	r1, r1, lr
 8007b9a:	ea40 0201 	orr.w	r2, r0, r1
 8007b9e:	ec43 2b10 	vmov	d0, r2, r3
 8007ba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007ba4:	42b7      	cmp	r7, r6
 8007ba6:	bf3a      	itte	cc
 8007ba8:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8007bac:	f1a5 0608 	subcc.w	r6, r5, #8
 8007bb0:	2100      	movcs	r1, #0
 8007bb2:	380b      	subs	r0, #11
 8007bb4:	d017      	beq.n	8007be6 <__b2d+0x92>
 8007bb6:	f1c0 0c20 	rsb	ip, r0, #32
 8007bba:	fa04 f500 	lsl.w	r5, r4, r0
 8007bbe:	42be      	cmp	r6, r7
 8007bc0:	fa21 f40c 	lsr.w	r4, r1, ip
 8007bc4:	ea45 0504 	orr.w	r5, r5, r4
 8007bc8:	bf8c      	ite	hi
 8007bca:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8007bce:	2400      	movls	r4, #0
 8007bd0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 8007bd4:	fa01 f000 	lsl.w	r0, r1, r0
 8007bd8:	fa24 f40c 	lsr.w	r4, r4, ip
 8007bdc:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8007be0:	ea40 0204 	orr.w	r2, r0, r4
 8007be4:	e7db      	b.n	8007b9e <__b2d+0x4a>
 8007be6:	ea44 030c 	orr.w	r3, r4, ip
 8007bea:	460a      	mov	r2, r1
 8007bec:	e7d7      	b.n	8007b9e <__b2d+0x4a>
 8007bee:	bf00      	nop
 8007bf0:	3ff00000 	.word	0x3ff00000

08007bf4 <__d2b>:
 8007bf4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007bf8:	4689      	mov	r9, r1
 8007bfa:	2101      	movs	r1, #1
 8007bfc:	ec57 6b10 	vmov	r6, r7, d0
 8007c00:	4690      	mov	r8, r2
 8007c02:	f7ff fc09 	bl	8007418 <_Balloc>
 8007c06:	4604      	mov	r4, r0
 8007c08:	b930      	cbnz	r0, 8007c18 <__d2b+0x24>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	4b25      	ldr	r3, [pc, #148]	; (8007ca4 <__d2b+0xb0>)
 8007c0e:	4826      	ldr	r0, [pc, #152]	; (8007ca8 <__d2b+0xb4>)
 8007c10:	f240 310a 	movw	r1, #778	; 0x30a
 8007c14:	f001 f8ec 	bl	8008df0 <__assert_func>
 8007c18:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8007c1c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007c20:	bb35      	cbnz	r5, 8007c70 <__d2b+0x7c>
 8007c22:	2e00      	cmp	r6, #0
 8007c24:	9301      	str	r3, [sp, #4]
 8007c26:	d028      	beq.n	8007c7a <__d2b+0x86>
 8007c28:	4668      	mov	r0, sp
 8007c2a:	9600      	str	r6, [sp, #0]
 8007c2c:	f7ff fd06 	bl	800763c <__lo0bits>
 8007c30:	9900      	ldr	r1, [sp, #0]
 8007c32:	b300      	cbz	r0, 8007c76 <__d2b+0x82>
 8007c34:	9a01      	ldr	r2, [sp, #4]
 8007c36:	f1c0 0320 	rsb	r3, r0, #32
 8007c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3e:	430b      	orrs	r3, r1
 8007c40:	40c2      	lsrs	r2, r0
 8007c42:	6163      	str	r3, [r4, #20]
 8007c44:	9201      	str	r2, [sp, #4]
 8007c46:	9b01      	ldr	r3, [sp, #4]
 8007c48:	61a3      	str	r3, [r4, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	bf14      	ite	ne
 8007c4e:	2202      	movne	r2, #2
 8007c50:	2201      	moveq	r2, #1
 8007c52:	6122      	str	r2, [r4, #16]
 8007c54:	b1d5      	cbz	r5, 8007c8c <__d2b+0x98>
 8007c56:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007c5a:	4405      	add	r5, r0
 8007c5c:	f8c9 5000 	str.w	r5, [r9]
 8007c60:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007c64:	f8c8 0000 	str.w	r0, [r8]
 8007c68:	4620      	mov	r0, r4
 8007c6a:	b003      	add	sp, #12
 8007c6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007c70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c74:	e7d5      	b.n	8007c22 <__d2b+0x2e>
 8007c76:	6161      	str	r1, [r4, #20]
 8007c78:	e7e5      	b.n	8007c46 <__d2b+0x52>
 8007c7a:	a801      	add	r0, sp, #4
 8007c7c:	f7ff fcde 	bl	800763c <__lo0bits>
 8007c80:	9b01      	ldr	r3, [sp, #4]
 8007c82:	6163      	str	r3, [r4, #20]
 8007c84:	2201      	movs	r2, #1
 8007c86:	6122      	str	r2, [r4, #16]
 8007c88:	3020      	adds	r0, #32
 8007c8a:	e7e3      	b.n	8007c54 <__d2b+0x60>
 8007c8c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007c90:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007c94:	f8c9 0000 	str.w	r0, [r9]
 8007c98:	6918      	ldr	r0, [r3, #16]
 8007c9a:	f7ff fcaf 	bl	80075fc <__hi0bits>
 8007c9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ca2:	e7df      	b.n	8007c64 <__d2b+0x70>
 8007ca4:	080094b4 	.word	0x080094b4
 8007ca8:	08009557 	.word	0x08009557

08007cac <__ratio>:
 8007cac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb0:	4688      	mov	r8, r1
 8007cb2:	4669      	mov	r1, sp
 8007cb4:	4681      	mov	r9, r0
 8007cb6:	f7ff ff4d 	bl	8007b54 <__b2d>
 8007cba:	a901      	add	r1, sp, #4
 8007cbc:	4640      	mov	r0, r8
 8007cbe:	ec55 4b10 	vmov	r4, r5, d0
 8007cc2:	f7ff ff47 	bl	8007b54 <__b2d>
 8007cc6:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007cca:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007cce:	eba3 0c02 	sub.w	ip, r3, r2
 8007cd2:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007cd6:	1a9b      	subs	r3, r3, r2
 8007cd8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007cdc:	ec51 0b10 	vmov	r0, r1, d0
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	bfd6      	itet	le
 8007ce4:	460a      	movle	r2, r1
 8007ce6:	462a      	movgt	r2, r5
 8007ce8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007cec:	468b      	mov	fp, r1
 8007cee:	462f      	mov	r7, r5
 8007cf0:	bfd4      	ite	le
 8007cf2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8007cf6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007cfa:	4620      	mov	r0, r4
 8007cfc:	ee10 2a10 	vmov	r2, s0
 8007d00:	465b      	mov	r3, fp
 8007d02:	4639      	mov	r1, r7
 8007d04:	f7f8 fdc2 	bl	800088c <__aeabi_ddiv>
 8007d08:	ec41 0b10 	vmov	d0, r0, r1
 8007d0c:	b003      	add	sp, #12
 8007d0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08007d12 <__copybits>:
 8007d12:	3901      	subs	r1, #1
 8007d14:	b570      	push	{r4, r5, r6, lr}
 8007d16:	1149      	asrs	r1, r1, #5
 8007d18:	6914      	ldr	r4, [r2, #16]
 8007d1a:	3101      	adds	r1, #1
 8007d1c:	f102 0314 	add.w	r3, r2, #20
 8007d20:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007d24:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007d28:	1f05      	subs	r5, r0, #4
 8007d2a:	42a3      	cmp	r3, r4
 8007d2c:	d30c      	bcc.n	8007d48 <__copybits+0x36>
 8007d2e:	1aa3      	subs	r3, r4, r2
 8007d30:	3b11      	subs	r3, #17
 8007d32:	f023 0303 	bic.w	r3, r3, #3
 8007d36:	3211      	adds	r2, #17
 8007d38:	42a2      	cmp	r2, r4
 8007d3a:	bf88      	it	hi
 8007d3c:	2300      	movhi	r3, #0
 8007d3e:	4418      	add	r0, r3
 8007d40:	2300      	movs	r3, #0
 8007d42:	4288      	cmp	r0, r1
 8007d44:	d305      	bcc.n	8007d52 <__copybits+0x40>
 8007d46:	bd70      	pop	{r4, r5, r6, pc}
 8007d48:	f853 6b04 	ldr.w	r6, [r3], #4
 8007d4c:	f845 6f04 	str.w	r6, [r5, #4]!
 8007d50:	e7eb      	b.n	8007d2a <__copybits+0x18>
 8007d52:	f840 3b04 	str.w	r3, [r0], #4
 8007d56:	e7f4      	b.n	8007d42 <__copybits+0x30>

08007d58 <__any_on>:
 8007d58:	f100 0214 	add.w	r2, r0, #20
 8007d5c:	6900      	ldr	r0, [r0, #16]
 8007d5e:	114b      	asrs	r3, r1, #5
 8007d60:	4298      	cmp	r0, r3
 8007d62:	b510      	push	{r4, lr}
 8007d64:	db11      	blt.n	8007d8a <__any_on+0x32>
 8007d66:	dd0a      	ble.n	8007d7e <__any_on+0x26>
 8007d68:	f011 011f 	ands.w	r1, r1, #31
 8007d6c:	d007      	beq.n	8007d7e <__any_on+0x26>
 8007d6e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007d72:	fa24 f001 	lsr.w	r0, r4, r1
 8007d76:	fa00 f101 	lsl.w	r1, r0, r1
 8007d7a:	428c      	cmp	r4, r1
 8007d7c:	d10b      	bne.n	8007d96 <__any_on+0x3e>
 8007d7e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d803      	bhi.n	8007d8e <__any_on+0x36>
 8007d86:	2000      	movs	r0, #0
 8007d88:	bd10      	pop	{r4, pc}
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	e7f7      	b.n	8007d7e <__any_on+0x26>
 8007d8e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007d92:	2900      	cmp	r1, #0
 8007d94:	d0f5      	beq.n	8007d82 <__any_on+0x2a>
 8007d96:	2001      	movs	r0, #1
 8007d98:	e7f6      	b.n	8007d88 <__any_on+0x30>

08007d9a <_calloc_r>:
 8007d9a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d9c:	fba1 2402 	umull	r2, r4, r1, r2
 8007da0:	b94c      	cbnz	r4, 8007db6 <_calloc_r+0x1c>
 8007da2:	4611      	mov	r1, r2
 8007da4:	9201      	str	r2, [sp, #4]
 8007da6:	f000 f87b 	bl	8007ea0 <_malloc_r>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	4605      	mov	r5, r0
 8007dae:	b930      	cbnz	r0, 8007dbe <_calloc_r+0x24>
 8007db0:	4628      	mov	r0, r5
 8007db2:	b003      	add	sp, #12
 8007db4:	bd30      	pop	{r4, r5, pc}
 8007db6:	220c      	movs	r2, #12
 8007db8:	6002      	str	r2, [r0, #0]
 8007dba:	2500      	movs	r5, #0
 8007dbc:	e7f8      	b.n	8007db0 <_calloc_r+0x16>
 8007dbe:	4621      	mov	r1, r4
 8007dc0:	f7fd fb14 	bl	80053ec <memset>
 8007dc4:	e7f4      	b.n	8007db0 <_calloc_r+0x16>
	...

08007dc8 <_free_r>:
 8007dc8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007dca:	2900      	cmp	r1, #0
 8007dcc:	d044      	beq.n	8007e58 <_free_r+0x90>
 8007dce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007dd2:	9001      	str	r0, [sp, #4]
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	f1a1 0404 	sub.w	r4, r1, #4
 8007dda:	bfb8      	it	lt
 8007ddc:	18e4      	addlt	r4, r4, r3
 8007dde:	f001 f87b 	bl	8008ed8 <__malloc_lock>
 8007de2:	4a1e      	ldr	r2, [pc, #120]	; (8007e5c <_free_r+0x94>)
 8007de4:	9801      	ldr	r0, [sp, #4]
 8007de6:	6813      	ldr	r3, [r2, #0]
 8007de8:	b933      	cbnz	r3, 8007df8 <_free_r+0x30>
 8007dea:	6063      	str	r3, [r4, #4]
 8007dec:	6014      	str	r4, [r2, #0]
 8007dee:	b003      	add	sp, #12
 8007df0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007df4:	f001 b876 	b.w	8008ee4 <__malloc_unlock>
 8007df8:	42a3      	cmp	r3, r4
 8007dfa:	d908      	bls.n	8007e0e <_free_r+0x46>
 8007dfc:	6825      	ldr	r5, [r4, #0]
 8007dfe:	1961      	adds	r1, r4, r5
 8007e00:	428b      	cmp	r3, r1
 8007e02:	bf01      	itttt	eq
 8007e04:	6819      	ldreq	r1, [r3, #0]
 8007e06:	685b      	ldreq	r3, [r3, #4]
 8007e08:	1949      	addeq	r1, r1, r5
 8007e0a:	6021      	streq	r1, [r4, #0]
 8007e0c:	e7ed      	b.n	8007dea <_free_r+0x22>
 8007e0e:	461a      	mov	r2, r3
 8007e10:	685b      	ldr	r3, [r3, #4]
 8007e12:	b10b      	cbz	r3, 8007e18 <_free_r+0x50>
 8007e14:	42a3      	cmp	r3, r4
 8007e16:	d9fa      	bls.n	8007e0e <_free_r+0x46>
 8007e18:	6811      	ldr	r1, [r2, #0]
 8007e1a:	1855      	adds	r5, r2, r1
 8007e1c:	42a5      	cmp	r5, r4
 8007e1e:	d10b      	bne.n	8007e38 <_free_r+0x70>
 8007e20:	6824      	ldr	r4, [r4, #0]
 8007e22:	4421      	add	r1, r4
 8007e24:	1854      	adds	r4, r2, r1
 8007e26:	42a3      	cmp	r3, r4
 8007e28:	6011      	str	r1, [r2, #0]
 8007e2a:	d1e0      	bne.n	8007dee <_free_r+0x26>
 8007e2c:	681c      	ldr	r4, [r3, #0]
 8007e2e:	685b      	ldr	r3, [r3, #4]
 8007e30:	6053      	str	r3, [r2, #4]
 8007e32:	4421      	add	r1, r4
 8007e34:	6011      	str	r1, [r2, #0]
 8007e36:	e7da      	b.n	8007dee <_free_r+0x26>
 8007e38:	d902      	bls.n	8007e40 <_free_r+0x78>
 8007e3a:	230c      	movs	r3, #12
 8007e3c:	6003      	str	r3, [r0, #0]
 8007e3e:	e7d6      	b.n	8007dee <_free_r+0x26>
 8007e40:	6825      	ldr	r5, [r4, #0]
 8007e42:	1961      	adds	r1, r4, r5
 8007e44:	428b      	cmp	r3, r1
 8007e46:	bf04      	itt	eq
 8007e48:	6819      	ldreq	r1, [r3, #0]
 8007e4a:	685b      	ldreq	r3, [r3, #4]
 8007e4c:	6063      	str	r3, [r4, #4]
 8007e4e:	bf04      	itt	eq
 8007e50:	1949      	addeq	r1, r1, r5
 8007e52:	6021      	streq	r1, [r4, #0]
 8007e54:	6054      	str	r4, [r2, #4]
 8007e56:	e7ca      	b.n	8007dee <_free_r+0x26>
 8007e58:	b003      	add	sp, #12
 8007e5a:	bd30      	pop	{r4, r5, pc}
 8007e5c:	200002f0 	.word	0x200002f0

08007e60 <sbrk_aligned>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4e0e      	ldr	r6, [pc, #56]	; (8007e9c <sbrk_aligned+0x3c>)
 8007e64:	460c      	mov	r4, r1
 8007e66:	6831      	ldr	r1, [r6, #0]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	b911      	cbnz	r1, 8007e72 <sbrk_aligned+0x12>
 8007e6c:	f000 febc 	bl	8008be8 <_sbrk_r>
 8007e70:	6030      	str	r0, [r6, #0]
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 feb7 	bl	8008be8 <_sbrk_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d00a      	beq.n	8007e94 <sbrk_aligned+0x34>
 8007e7e:	1cc4      	adds	r4, r0, #3
 8007e80:	f024 0403 	bic.w	r4, r4, #3
 8007e84:	42a0      	cmp	r0, r4
 8007e86:	d007      	beq.n	8007e98 <sbrk_aligned+0x38>
 8007e88:	1a21      	subs	r1, r4, r0
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 feac 	bl	8008be8 <_sbrk_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d101      	bne.n	8007e98 <sbrk_aligned+0x38>
 8007e94:	f04f 34ff 	mov.w	r4, #4294967295
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	200002f4 	.word	0x200002f4

08007ea0 <_malloc_r>:
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	1ccd      	adds	r5, r1, #3
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	db01      	blt.n	8007ebc <_malloc_r+0x1c>
 8007eb8:	42a9      	cmp	r1, r5
 8007eba:	d905      	bls.n	8007ec8 <_malloc_r+0x28>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec8:	4e2e      	ldr	r6, [pc, #184]	; (8007f84 <_malloc_r+0xe4>)
 8007eca:	f001 f805 	bl	8008ed8 <__malloc_lock>
 8007ece:	6833      	ldr	r3, [r6, #0]
 8007ed0:	461c      	mov	r4, r3
 8007ed2:	bb34      	cbnz	r4, 8007f22 <_malloc_r+0x82>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ffc2 	bl	8007e60 <sbrk_aligned>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	4604      	mov	r4, r0
 8007ee0:	d14d      	bne.n	8007f7e <_malloc_r+0xde>
 8007ee2:	6834      	ldr	r4, [r6, #0]
 8007ee4:	4626      	mov	r6, r4
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	d140      	bne.n	8007f6c <_malloc_r+0xcc>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	4631      	mov	r1, r6
 8007eee:	4638      	mov	r0, r7
 8007ef0:	eb04 0803 	add.w	r8, r4, r3
 8007ef4:	f000 fe78 	bl	8008be8 <_sbrk_r>
 8007ef8:	4580      	cmp	r8, r0
 8007efa:	d13a      	bne.n	8007f72 <_malloc_r+0xd2>
 8007efc:	6821      	ldr	r1, [r4, #0]
 8007efe:	3503      	adds	r5, #3
 8007f00:	1a6d      	subs	r5, r5, r1
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ffa5 	bl	8007e60 <sbrk_aligned>
 8007f16:	3001      	adds	r0, #1
 8007f18:	d02b      	beq.n	8007f72 <_malloc_r+0xd2>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	442b      	add	r3, r5
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	e00e      	b.n	8007f40 <_malloc_r+0xa0>
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	1b52      	subs	r2, r2, r5
 8007f26:	d41e      	bmi.n	8007f66 <_malloc_r+0xc6>
 8007f28:	2a0b      	cmp	r2, #11
 8007f2a:	d916      	bls.n	8007f5a <_malloc_r+0xba>
 8007f2c:	1961      	adds	r1, r4, r5
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	6025      	str	r5, [r4, #0]
 8007f32:	bf18      	it	ne
 8007f34:	6059      	strne	r1, [r3, #4]
 8007f36:	6863      	ldr	r3, [r4, #4]
 8007f38:	bf08      	it	eq
 8007f3a:	6031      	streq	r1, [r6, #0]
 8007f3c:	5162      	str	r2, [r4, r5]
 8007f3e:	604b      	str	r3, [r1, #4]
 8007f40:	4638      	mov	r0, r7
 8007f42:	f104 060b 	add.w	r6, r4, #11
 8007f46:	f000 ffcd 	bl	8008ee4 <__malloc_unlock>
 8007f4a:	f026 0607 	bic.w	r6, r6, #7
 8007f4e:	1d23      	adds	r3, r4, #4
 8007f50:	1af2      	subs	r2, r6, r3
 8007f52:	d0b6      	beq.n	8007ec2 <_malloc_r+0x22>
 8007f54:	1b9b      	subs	r3, r3, r6
 8007f56:	50a3      	str	r3, [r4, r2]
 8007f58:	e7b3      	b.n	8007ec2 <_malloc_r+0x22>
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	bf0c      	ite	eq
 8007f60:	6032      	streq	r2, [r6, #0]
 8007f62:	605a      	strne	r2, [r3, #4]
 8007f64:	e7ec      	b.n	8007f40 <_malloc_r+0xa0>
 8007f66:	4623      	mov	r3, r4
 8007f68:	6864      	ldr	r4, [r4, #4]
 8007f6a:	e7b2      	b.n	8007ed2 <_malloc_r+0x32>
 8007f6c:	4634      	mov	r4, r6
 8007f6e:	6876      	ldr	r6, [r6, #4]
 8007f70:	e7b9      	b.n	8007ee6 <_malloc_r+0x46>
 8007f72:	230c      	movs	r3, #12
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f000 ffb4 	bl	8008ee4 <__malloc_unlock>
 8007f7c:	e7a1      	b.n	8007ec2 <_malloc_r+0x22>
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	e7de      	b.n	8007f40 <_malloc_r+0xa0>
 8007f82:	bf00      	nop
 8007f84:	200002f0 	.word	0x200002f0

08007f88 <__ssputs_r>:
 8007f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f8c:	688e      	ldr	r6, [r1, #8]
 8007f8e:	429e      	cmp	r6, r3
 8007f90:	4682      	mov	sl, r0
 8007f92:	460c      	mov	r4, r1
 8007f94:	4690      	mov	r8, r2
 8007f96:	461f      	mov	r7, r3
 8007f98:	d838      	bhi.n	800800c <__ssputs_r+0x84>
 8007f9a:	898a      	ldrh	r2, [r1, #12]
 8007f9c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007fa0:	d032      	beq.n	8008008 <__ssputs_r+0x80>
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	6909      	ldr	r1, [r1, #16]
 8007fa6:	eba5 0901 	sub.w	r9, r5, r1
 8007faa:	6965      	ldr	r5, [r4, #20]
 8007fac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007fb0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	444b      	add	r3, r9
 8007fb8:	106d      	asrs	r5, r5, #1
 8007fba:	429d      	cmp	r5, r3
 8007fbc:	bf38      	it	cc
 8007fbe:	461d      	movcc	r5, r3
 8007fc0:	0553      	lsls	r3, r2, #21
 8007fc2:	d531      	bpl.n	8008028 <__ssputs_r+0xa0>
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	f7ff ff6b 	bl	8007ea0 <_malloc_r>
 8007fca:	4606      	mov	r6, r0
 8007fcc:	b950      	cbnz	r0, 8007fe4 <__ssputs_r+0x5c>
 8007fce:	230c      	movs	r3, #12
 8007fd0:	f8ca 3000 	str.w	r3, [sl]
 8007fd4:	89a3      	ldrh	r3, [r4, #12]
 8007fd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fe4:	6921      	ldr	r1, [r4, #16]
 8007fe6:	464a      	mov	r2, r9
 8007fe8:	f7ff fa08 	bl	80073fc <memcpy>
 8007fec:	89a3      	ldrh	r3, [r4, #12]
 8007fee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007ff2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ff6:	81a3      	strh	r3, [r4, #12]
 8007ff8:	6126      	str	r6, [r4, #16]
 8007ffa:	6165      	str	r5, [r4, #20]
 8007ffc:	444e      	add	r6, r9
 8007ffe:	eba5 0509 	sub.w	r5, r5, r9
 8008002:	6026      	str	r6, [r4, #0]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	463e      	mov	r6, r7
 8008008:	42be      	cmp	r6, r7
 800800a:	d900      	bls.n	800800e <__ssputs_r+0x86>
 800800c:	463e      	mov	r6, r7
 800800e:	6820      	ldr	r0, [r4, #0]
 8008010:	4632      	mov	r2, r6
 8008012:	4641      	mov	r1, r8
 8008014:	f000 ff46 	bl	8008ea4 <memmove>
 8008018:	68a3      	ldr	r3, [r4, #8]
 800801a:	1b9b      	subs	r3, r3, r6
 800801c:	60a3      	str	r3, [r4, #8]
 800801e:	6823      	ldr	r3, [r4, #0]
 8008020:	4433      	add	r3, r6
 8008022:	6023      	str	r3, [r4, #0]
 8008024:	2000      	movs	r0, #0
 8008026:	e7db      	b.n	8007fe0 <__ssputs_r+0x58>
 8008028:	462a      	mov	r2, r5
 800802a:	f000 ff61 	bl	8008ef0 <_realloc_r>
 800802e:	4606      	mov	r6, r0
 8008030:	2800      	cmp	r0, #0
 8008032:	d1e1      	bne.n	8007ff8 <__ssputs_r+0x70>
 8008034:	6921      	ldr	r1, [r4, #16]
 8008036:	4650      	mov	r0, sl
 8008038:	f7ff fec6 	bl	8007dc8 <_free_r>
 800803c:	e7c7      	b.n	8007fce <__ssputs_r+0x46>
	...

08008040 <_svfiprintf_r>:
 8008040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008044:	4698      	mov	r8, r3
 8008046:	898b      	ldrh	r3, [r1, #12]
 8008048:	061b      	lsls	r3, r3, #24
 800804a:	b09d      	sub	sp, #116	; 0x74
 800804c:	4607      	mov	r7, r0
 800804e:	460d      	mov	r5, r1
 8008050:	4614      	mov	r4, r2
 8008052:	d50e      	bpl.n	8008072 <_svfiprintf_r+0x32>
 8008054:	690b      	ldr	r3, [r1, #16]
 8008056:	b963      	cbnz	r3, 8008072 <_svfiprintf_r+0x32>
 8008058:	2140      	movs	r1, #64	; 0x40
 800805a:	f7ff ff21 	bl	8007ea0 <_malloc_r>
 800805e:	6028      	str	r0, [r5, #0]
 8008060:	6128      	str	r0, [r5, #16]
 8008062:	b920      	cbnz	r0, 800806e <_svfiprintf_r+0x2e>
 8008064:	230c      	movs	r3, #12
 8008066:	603b      	str	r3, [r7, #0]
 8008068:	f04f 30ff 	mov.w	r0, #4294967295
 800806c:	e0d1      	b.n	8008212 <_svfiprintf_r+0x1d2>
 800806e:	2340      	movs	r3, #64	; 0x40
 8008070:	616b      	str	r3, [r5, #20]
 8008072:	2300      	movs	r3, #0
 8008074:	9309      	str	r3, [sp, #36]	; 0x24
 8008076:	2320      	movs	r3, #32
 8008078:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800807c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008080:	2330      	movs	r3, #48	; 0x30
 8008082:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800822c <_svfiprintf_r+0x1ec>
 8008086:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800808a:	f04f 0901 	mov.w	r9, #1
 800808e:	4623      	mov	r3, r4
 8008090:	469a      	mov	sl, r3
 8008092:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008096:	b10a      	cbz	r2, 800809c <_svfiprintf_r+0x5c>
 8008098:	2a25      	cmp	r2, #37	; 0x25
 800809a:	d1f9      	bne.n	8008090 <_svfiprintf_r+0x50>
 800809c:	ebba 0b04 	subs.w	fp, sl, r4
 80080a0:	d00b      	beq.n	80080ba <_svfiprintf_r+0x7a>
 80080a2:	465b      	mov	r3, fp
 80080a4:	4622      	mov	r2, r4
 80080a6:	4629      	mov	r1, r5
 80080a8:	4638      	mov	r0, r7
 80080aa:	f7ff ff6d 	bl	8007f88 <__ssputs_r>
 80080ae:	3001      	adds	r0, #1
 80080b0:	f000 80aa 	beq.w	8008208 <_svfiprintf_r+0x1c8>
 80080b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80080b6:	445a      	add	r2, fp
 80080b8:	9209      	str	r2, [sp, #36]	; 0x24
 80080ba:	f89a 3000 	ldrb.w	r3, [sl]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	f000 80a2 	beq.w	8008208 <_svfiprintf_r+0x1c8>
 80080c4:	2300      	movs	r3, #0
 80080c6:	f04f 32ff 	mov.w	r2, #4294967295
 80080ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080ce:	f10a 0a01 	add.w	sl, sl, #1
 80080d2:	9304      	str	r3, [sp, #16]
 80080d4:	9307      	str	r3, [sp, #28]
 80080d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080da:	931a      	str	r3, [sp, #104]	; 0x68
 80080dc:	4654      	mov	r4, sl
 80080de:	2205      	movs	r2, #5
 80080e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080e4:	4851      	ldr	r0, [pc, #324]	; (800822c <_svfiprintf_r+0x1ec>)
 80080e6:	f7f8 f89b 	bl	8000220 <memchr>
 80080ea:	9a04      	ldr	r2, [sp, #16]
 80080ec:	b9d8      	cbnz	r0, 8008126 <_svfiprintf_r+0xe6>
 80080ee:	06d0      	lsls	r0, r2, #27
 80080f0:	bf44      	itt	mi
 80080f2:	2320      	movmi	r3, #32
 80080f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080f8:	0711      	lsls	r1, r2, #28
 80080fa:	bf44      	itt	mi
 80080fc:	232b      	movmi	r3, #43	; 0x2b
 80080fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008102:	f89a 3000 	ldrb.w	r3, [sl]
 8008106:	2b2a      	cmp	r3, #42	; 0x2a
 8008108:	d015      	beq.n	8008136 <_svfiprintf_r+0xf6>
 800810a:	9a07      	ldr	r2, [sp, #28]
 800810c:	4654      	mov	r4, sl
 800810e:	2000      	movs	r0, #0
 8008110:	f04f 0c0a 	mov.w	ip, #10
 8008114:	4621      	mov	r1, r4
 8008116:	f811 3b01 	ldrb.w	r3, [r1], #1
 800811a:	3b30      	subs	r3, #48	; 0x30
 800811c:	2b09      	cmp	r3, #9
 800811e:	d94e      	bls.n	80081be <_svfiprintf_r+0x17e>
 8008120:	b1b0      	cbz	r0, 8008150 <_svfiprintf_r+0x110>
 8008122:	9207      	str	r2, [sp, #28]
 8008124:	e014      	b.n	8008150 <_svfiprintf_r+0x110>
 8008126:	eba0 0308 	sub.w	r3, r0, r8
 800812a:	fa09 f303 	lsl.w	r3, r9, r3
 800812e:	4313      	orrs	r3, r2
 8008130:	9304      	str	r3, [sp, #16]
 8008132:	46a2      	mov	sl, r4
 8008134:	e7d2      	b.n	80080dc <_svfiprintf_r+0x9c>
 8008136:	9b03      	ldr	r3, [sp, #12]
 8008138:	1d19      	adds	r1, r3, #4
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	9103      	str	r1, [sp, #12]
 800813e:	2b00      	cmp	r3, #0
 8008140:	bfbb      	ittet	lt
 8008142:	425b      	neglt	r3, r3
 8008144:	f042 0202 	orrlt.w	r2, r2, #2
 8008148:	9307      	strge	r3, [sp, #28]
 800814a:	9307      	strlt	r3, [sp, #28]
 800814c:	bfb8      	it	lt
 800814e:	9204      	strlt	r2, [sp, #16]
 8008150:	7823      	ldrb	r3, [r4, #0]
 8008152:	2b2e      	cmp	r3, #46	; 0x2e
 8008154:	d10c      	bne.n	8008170 <_svfiprintf_r+0x130>
 8008156:	7863      	ldrb	r3, [r4, #1]
 8008158:	2b2a      	cmp	r3, #42	; 0x2a
 800815a:	d135      	bne.n	80081c8 <_svfiprintf_r+0x188>
 800815c:	9b03      	ldr	r3, [sp, #12]
 800815e:	1d1a      	adds	r2, r3, #4
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	9203      	str	r2, [sp, #12]
 8008164:	2b00      	cmp	r3, #0
 8008166:	bfb8      	it	lt
 8008168:	f04f 33ff 	movlt.w	r3, #4294967295
 800816c:	3402      	adds	r4, #2
 800816e:	9305      	str	r3, [sp, #20]
 8008170:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800823c <_svfiprintf_r+0x1fc>
 8008174:	7821      	ldrb	r1, [r4, #0]
 8008176:	2203      	movs	r2, #3
 8008178:	4650      	mov	r0, sl
 800817a:	f7f8 f851 	bl	8000220 <memchr>
 800817e:	b140      	cbz	r0, 8008192 <_svfiprintf_r+0x152>
 8008180:	2340      	movs	r3, #64	; 0x40
 8008182:	eba0 000a 	sub.w	r0, r0, sl
 8008186:	fa03 f000 	lsl.w	r0, r3, r0
 800818a:	9b04      	ldr	r3, [sp, #16]
 800818c:	4303      	orrs	r3, r0
 800818e:	3401      	adds	r4, #1
 8008190:	9304      	str	r3, [sp, #16]
 8008192:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008196:	4826      	ldr	r0, [pc, #152]	; (8008230 <_svfiprintf_r+0x1f0>)
 8008198:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800819c:	2206      	movs	r2, #6
 800819e:	f7f8 f83f 	bl	8000220 <memchr>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d038      	beq.n	8008218 <_svfiprintf_r+0x1d8>
 80081a6:	4b23      	ldr	r3, [pc, #140]	; (8008234 <_svfiprintf_r+0x1f4>)
 80081a8:	bb1b      	cbnz	r3, 80081f2 <_svfiprintf_r+0x1b2>
 80081aa:	9b03      	ldr	r3, [sp, #12]
 80081ac:	3307      	adds	r3, #7
 80081ae:	f023 0307 	bic.w	r3, r3, #7
 80081b2:	3308      	adds	r3, #8
 80081b4:	9303      	str	r3, [sp, #12]
 80081b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80081b8:	4433      	add	r3, r6
 80081ba:	9309      	str	r3, [sp, #36]	; 0x24
 80081bc:	e767      	b.n	800808e <_svfiprintf_r+0x4e>
 80081be:	fb0c 3202 	mla	r2, ip, r2, r3
 80081c2:	460c      	mov	r4, r1
 80081c4:	2001      	movs	r0, #1
 80081c6:	e7a5      	b.n	8008114 <_svfiprintf_r+0xd4>
 80081c8:	2300      	movs	r3, #0
 80081ca:	3401      	adds	r4, #1
 80081cc:	9305      	str	r3, [sp, #20]
 80081ce:	4619      	mov	r1, r3
 80081d0:	f04f 0c0a 	mov.w	ip, #10
 80081d4:	4620      	mov	r0, r4
 80081d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081da:	3a30      	subs	r2, #48	; 0x30
 80081dc:	2a09      	cmp	r2, #9
 80081de:	d903      	bls.n	80081e8 <_svfiprintf_r+0x1a8>
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d0c5      	beq.n	8008170 <_svfiprintf_r+0x130>
 80081e4:	9105      	str	r1, [sp, #20]
 80081e6:	e7c3      	b.n	8008170 <_svfiprintf_r+0x130>
 80081e8:	fb0c 2101 	mla	r1, ip, r1, r2
 80081ec:	4604      	mov	r4, r0
 80081ee:	2301      	movs	r3, #1
 80081f0:	e7f0      	b.n	80081d4 <_svfiprintf_r+0x194>
 80081f2:	ab03      	add	r3, sp, #12
 80081f4:	9300      	str	r3, [sp, #0]
 80081f6:	462a      	mov	r2, r5
 80081f8:	4b0f      	ldr	r3, [pc, #60]	; (8008238 <_svfiprintf_r+0x1f8>)
 80081fa:	a904      	add	r1, sp, #16
 80081fc:	4638      	mov	r0, r7
 80081fe:	f3af 8000 	nop.w
 8008202:	1c42      	adds	r2, r0, #1
 8008204:	4606      	mov	r6, r0
 8008206:	d1d6      	bne.n	80081b6 <_svfiprintf_r+0x176>
 8008208:	89ab      	ldrh	r3, [r5, #12]
 800820a:	065b      	lsls	r3, r3, #25
 800820c:	f53f af2c 	bmi.w	8008068 <_svfiprintf_r+0x28>
 8008210:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008212:	b01d      	add	sp, #116	; 0x74
 8008214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008218:	ab03      	add	r3, sp, #12
 800821a:	9300      	str	r3, [sp, #0]
 800821c:	462a      	mov	r2, r5
 800821e:	4b06      	ldr	r3, [pc, #24]	; (8008238 <_svfiprintf_r+0x1f8>)
 8008220:	a904      	add	r1, sp, #16
 8008222:	4638      	mov	r0, r7
 8008224:	f000 fa4c 	bl	80086c0 <_printf_i>
 8008228:	e7eb      	b.n	8008202 <_svfiprintf_r+0x1c2>
 800822a:	bf00      	nop
 800822c:	080096b4 	.word	0x080096b4
 8008230:	080096be 	.word	0x080096be
 8008234:	00000000 	.word	0x00000000
 8008238:	08007f89 	.word	0x08007f89
 800823c:	080096ba 	.word	0x080096ba

08008240 <_sungetc_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	1c4b      	adds	r3, r1, #1
 8008244:	4614      	mov	r4, r2
 8008246:	d103      	bne.n	8008250 <_sungetc_r+0x10>
 8008248:	f04f 35ff 	mov.w	r5, #4294967295
 800824c:	4628      	mov	r0, r5
 800824e:	bd38      	pop	{r3, r4, r5, pc}
 8008250:	8993      	ldrh	r3, [r2, #12]
 8008252:	f023 0320 	bic.w	r3, r3, #32
 8008256:	8193      	strh	r3, [r2, #12]
 8008258:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800825a:	6852      	ldr	r2, [r2, #4]
 800825c:	b2cd      	uxtb	r5, r1
 800825e:	b18b      	cbz	r3, 8008284 <_sungetc_r+0x44>
 8008260:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008262:	4293      	cmp	r3, r2
 8008264:	dd08      	ble.n	8008278 <_sungetc_r+0x38>
 8008266:	6823      	ldr	r3, [r4, #0]
 8008268:	1e5a      	subs	r2, r3, #1
 800826a:	6022      	str	r2, [r4, #0]
 800826c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008270:	6863      	ldr	r3, [r4, #4]
 8008272:	3301      	adds	r3, #1
 8008274:	6063      	str	r3, [r4, #4]
 8008276:	e7e9      	b.n	800824c <_sungetc_r+0xc>
 8008278:	4621      	mov	r1, r4
 800827a:	f000 fd71 	bl	8008d60 <__submore>
 800827e:	2800      	cmp	r0, #0
 8008280:	d0f1      	beq.n	8008266 <_sungetc_r+0x26>
 8008282:	e7e1      	b.n	8008248 <_sungetc_r+0x8>
 8008284:	6921      	ldr	r1, [r4, #16]
 8008286:	6823      	ldr	r3, [r4, #0]
 8008288:	b151      	cbz	r1, 80082a0 <_sungetc_r+0x60>
 800828a:	4299      	cmp	r1, r3
 800828c:	d208      	bcs.n	80082a0 <_sungetc_r+0x60>
 800828e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008292:	42a9      	cmp	r1, r5
 8008294:	d104      	bne.n	80082a0 <_sungetc_r+0x60>
 8008296:	3b01      	subs	r3, #1
 8008298:	3201      	adds	r2, #1
 800829a:	6023      	str	r3, [r4, #0]
 800829c:	6062      	str	r2, [r4, #4]
 800829e:	e7d5      	b.n	800824c <_sungetc_r+0xc>
 80082a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80082a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082a8:	6363      	str	r3, [r4, #52]	; 0x34
 80082aa:	2303      	movs	r3, #3
 80082ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80082ae:	4623      	mov	r3, r4
 80082b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80082b4:	6023      	str	r3, [r4, #0]
 80082b6:	2301      	movs	r3, #1
 80082b8:	e7dc      	b.n	8008274 <_sungetc_r+0x34>

080082ba <__ssrefill_r>:
 80082ba:	b510      	push	{r4, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082c0:	b169      	cbz	r1, 80082de <__ssrefill_r+0x24>
 80082c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082c6:	4299      	cmp	r1, r3
 80082c8:	d001      	beq.n	80082ce <__ssrefill_r+0x14>
 80082ca:	f7ff fd7d 	bl	8007dc8 <_free_r>
 80082ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082d0:	6063      	str	r3, [r4, #4]
 80082d2:	2000      	movs	r0, #0
 80082d4:	6360      	str	r0, [r4, #52]	; 0x34
 80082d6:	b113      	cbz	r3, 80082de <__ssrefill_r+0x24>
 80082d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082da:	6023      	str	r3, [r4, #0]
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	6923      	ldr	r3, [r4, #16]
 80082e0:	6023      	str	r3, [r4, #0]
 80082e2:	2300      	movs	r3, #0
 80082e4:	6063      	str	r3, [r4, #4]
 80082e6:	89a3      	ldrh	r3, [r4, #12]
 80082e8:	f043 0320 	orr.w	r3, r3, #32
 80082ec:	81a3      	strh	r3, [r4, #12]
 80082ee:	f04f 30ff 	mov.w	r0, #4294967295
 80082f2:	e7f3      	b.n	80082dc <__ssrefill_r+0x22>

080082f4 <__ssvfiscanf_r>:
 80082f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082f8:	460c      	mov	r4, r1
 80082fa:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80082fe:	2100      	movs	r1, #0
 8008300:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008304:	49a6      	ldr	r1, [pc, #664]	; (80085a0 <__ssvfiscanf_r+0x2ac>)
 8008306:	91a0      	str	r1, [sp, #640]	; 0x280
 8008308:	f10d 0804 	add.w	r8, sp, #4
 800830c:	49a5      	ldr	r1, [pc, #660]	; (80085a4 <__ssvfiscanf_r+0x2b0>)
 800830e:	4fa6      	ldr	r7, [pc, #664]	; (80085a8 <__ssvfiscanf_r+0x2b4>)
 8008310:	f8df 9298 	ldr.w	r9, [pc, #664]	; 80085ac <__ssvfiscanf_r+0x2b8>
 8008314:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8008318:	4606      	mov	r6, r0
 800831a:	91a1      	str	r1, [sp, #644]	; 0x284
 800831c:	9300      	str	r3, [sp, #0]
 800831e:	7813      	ldrb	r3, [r2, #0]
 8008320:	2b00      	cmp	r3, #0
 8008322:	f000 815a 	beq.w	80085da <__ssvfiscanf_r+0x2e6>
 8008326:	5dd9      	ldrb	r1, [r3, r7]
 8008328:	f011 0108 	ands.w	r1, r1, #8
 800832c:	f102 0501 	add.w	r5, r2, #1
 8008330:	d019      	beq.n	8008366 <__ssvfiscanf_r+0x72>
 8008332:	6863      	ldr	r3, [r4, #4]
 8008334:	2b00      	cmp	r3, #0
 8008336:	dd0f      	ble.n	8008358 <__ssvfiscanf_r+0x64>
 8008338:	6823      	ldr	r3, [r4, #0]
 800833a:	781a      	ldrb	r2, [r3, #0]
 800833c:	5cba      	ldrb	r2, [r7, r2]
 800833e:	0712      	lsls	r2, r2, #28
 8008340:	d401      	bmi.n	8008346 <__ssvfiscanf_r+0x52>
 8008342:	462a      	mov	r2, r5
 8008344:	e7eb      	b.n	800831e <__ssvfiscanf_r+0x2a>
 8008346:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008348:	3201      	adds	r2, #1
 800834a:	9245      	str	r2, [sp, #276]	; 0x114
 800834c:	6862      	ldr	r2, [r4, #4]
 800834e:	3301      	adds	r3, #1
 8008350:	3a01      	subs	r2, #1
 8008352:	6062      	str	r2, [r4, #4]
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	e7ec      	b.n	8008332 <__ssvfiscanf_r+0x3e>
 8008358:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800835a:	4621      	mov	r1, r4
 800835c:	4630      	mov	r0, r6
 800835e:	4798      	blx	r3
 8008360:	2800      	cmp	r0, #0
 8008362:	d0e9      	beq.n	8008338 <__ssvfiscanf_r+0x44>
 8008364:	e7ed      	b.n	8008342 <__ssvfiscanf_r+0x4e>
 8008366:	2b25      	cmp	r3, #37	; 0x25
 8008368:	d012      	beq.n	8008390 <__ssvfiscanf_r+0x9c>
 800836a:	469a      	mov	sl, r3
 800836c:	6863      	ldr	r3, [r4, #4]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f340 8091 	ble.w	8008496 <__ssvfiscanf_r+0x1a2>
 8008374:	6822      	ldr	r2, [r4, #0]
 8008376:	7813      	ldrb	r3, [r2, #0]
 8008378:	4553      	cmp	r3, sl
 800837a:	f040 812e 	bne.w	80085da <__ssvfiscanf_r+0x2e6>
 800837e:	6863      	ldr	r3, [r4, #4]
 8008380:	3b01      	subs	r3, #1
 8008382:	6063      	str	r3, [r4, #4]
 8008384:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008386:	3201      	adds	r2, #1
 8008388:	3301      	adds	r3, #1
 800838a:	6022      	str	r2, [r4, #0]
 800838c:	9345      	str	r3, [sp, #276]	; 0x114
 800838e:	e7d8      	b.n	8008342 <__ssvfiscanf_r+0x4e>
 8008390:	9141      	str	r1, [sp, #260]	; 0x104
 8008392:	9143      	str	r1, [sp, #268]	; 0x10c
 8008394:	7853      	ldrb	r3, [r2, #1]
 8008396:	2b2a      	cmp	r3, #42	; 0x2a
 8008398:	bf02      	ittt	eq
 800839a:	2310      	moveq	r3, #16
 800839c:	1c95      	addeq	r5, r2, #2
 800839e:	9341      	streq	r3, [sp, #260]	; 0x104
 80083a0:	220a      	movs	r2, #10
 80083a2:	46aa      	mov	sl, r5
 80083a4:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80083a8:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80083ac:	2b09      	cmp	r3, #9
 80083ae:	d91d      	bls.n	80083ec <__ssvfiscanf_r+0xf8>
 80083b0:	487e      	ldr	r0, [pc, #504]	; (80085ac <__ssvfiscanf_r+0x2b8>)
 80083b2:	2203      	movs	r2, #3
 80083b4:	f7f7 ff34 	bl	8000220 <memchr>
 80083b8:	b140      	cbz	r0, 80083cc <__ssvfiscanf_r+0xd8>
 80083ba:	2301      	movs	r3, #1
 80083bc:	eba0 0009 	sub.w	r0, r0, r9
 80083c0:	fa03 f000 	lsl.w	r0, r3, r0
 80083c4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80083c6:	4318      	orrs	r0, r3
 80083c8:	9041      	str	r0, [sp, #260]	; 0x104
 80083ca:	4655      	mov	r5, sl
 80083cc:	f815 3b01 	ldrb.w	r3, [r5], #1
 80083d0:	2b78      	cmp	r3, #120	; 0x78
 80083d2:	d806      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 80083d4:	2b57      	cmp	r3, #87	; 0x57
 80083d6:	d810      	bhi.n	80083fa <__ssvfiscanf_r+0x106>
 80083d8:	2b25      	cmp	r3, #37	; 0x25
 80083da:	d0c6      	beq.n	800836a <__ssvfiscanf_r+0x76>
 80083dc:	d856      	bhi.n	800848c <__ssvfiscanf_r+0x198>
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d064      	beq.n	80084ac <__ssvfiscanf_r+0x1b8>
 80083e2:	2303      	movs	r3, #3
 80083e4:	9347      	str	r3, [sp, #284]	; 0x11c
 80083e6:	230a      	movs	r3, #10
 80083e8:	9342      	str	r3, [sp, #264]	; 0x108
 80083ea:	e071      	b.n	80084d0 <__ssvfiscanf_r+0x1dc>
 80083ec:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80083ee:	fb02 1103 	mla	r1, r2, r3, r1
 80083f2:	3930      	subs	r1, #48	; 0x30
 80083f4:	9143      	str	r1, [sp, #268]	; 0x10c
 80083f6:	4655      	mov	r5, sl
 80083f8:	e7d3      	b.n	80083a2 <__ssvfiscanf_r+0xae>
 80083fa:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80083fe:	2a20      	cmp	r2, #32
 8008400:	d8ef      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 8008402:	a101      	add	r1, pc, #4	; (adr r1, 8008408 <__ssvfiscanf_r+0x114>)
 8008404:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008408:	080084bb 	.word	0x080084bb
 800840c:	080083e3 	.word	0x080083e3
 8008410:	080083e3 	.word	0x080083e3
 8008414:	08008519 	.word	0x08008519
 8008418:	080083e3 	.word	0x080083e3
 800841c:	080083e3 	.word	0x080083e3
 8008420:	080083e3 	.word	0x080083e3
 8008424:	080083e3 	.word	0x080083e3
 8008428:	080083e3 	.word	0x080083e3
 800842c:	080083e3 	.word	0x080083e3
 8008430:	080083e3 	.word	0x080083e3
 8008434:	0800852f 	.word	0x0800852f
 8008438:	08008505 	.word	0x08008505
 800843c:	08008493 	.word	0x08008493
 8008440:	08008493 	.word	0x08008493
 8008444:	08008493 	.word	0x08008493
 8008448:	080083e3 	.word	0x080083e3
 800844c:	08008509 	.word	0x08008509
 8008450:	080083e3 	.word	0x080083e3
 8008454:	080083e3 	.word	0x080083e3
 8008458:	080083e3 	.word	0x080083e3
 800845c:	080083e3 	.word	0x080083e3
 8008460:	0800853f 	.word	0x0800853f
 8008464:	08008511 	.word	0x08008511
 8008468:	080084b3 	.word	0x080084b3
 800846c:	080083e3 	.word	0x080083e3
 8008470:	080083e3 	.word	0x080083e3
 8008474:	0800853b 	.word	0x0800853b
 8008478:	080083e3 	.word	0x080083e3
 800847c:	08008505 	.word	0x08008505
 8008480:	080083e3 	.word	0x080083e3
 8008484:	080083e3 	.word	0x080083e3
 8008488:	080084bb 	.word	0x080084bb
 800848c:	3b45      	subs	r3, #69	; 0x45
 800848e:	2b02      	cmp	r3, #2
 8008490:	d8a7      	bhi.n	80083e2 <__ssvfiscanf_r+0xee>
 8008492:	2305      	movs	r3, #5
 8008494:	e01b      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 8008496:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008498:	4621      	mov	r1, r4
 800849a:	4630      	mov	r0, r6
 800849c:	4798      	blx	r3
 800849e:	2800      	cmp	r0, #0
 80084a0:	f43f af68 	beq.w	8008374 <__ssvfiscanf_r+0x80>
 80084a4:	9844      	ldr	r0, [sp, #272]	; 0x110
 80084a6:	2800      	cmp	r0, #0
 80084a8:	f040 808d 	bne.w	80085c6 <__ssvfiscanf_r+0x2d2>
 80084ac:	f04f 30ff 	mov.w	r0, #4294967295
 80084b0:	e08f      	b.n	80085d2 <__ssvfiscanf_r+0x2de>
 80084b2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80084b4:	f042 0220 	orr.w	r2, r2, #32
 80084b8:	9241      	str	r2, [sp, #260]	; 0x104
 80084ba:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80084bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084c0:	9241      	str	r2, [sp, #260]	; 0x104
 80084c2:	2210      	movs	r2, #16
 80084c4:	2b6f      	cmp	r3, #111	; 0x6f
 80084c6:	9242      	str	r2, [sp, #264]	; 0x108
 80084c8:	bf34      	ite	cc
 80084ca:	2303      	movcc	r3, #3
 80084cc:	2304      	movcs	r3, #4
 80084ce:	9347      	str	r3, [sp, #284]	; 0x11c
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	dd42      	ble.n	800855c <__ssvfiscanf_r+0x268>
 80084d6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084d8:	0659      	lsls	r1, r3, #25
 80084da:	d404      	bmi.n	80084e6 <__ssvfiscanf_r+0x1f2>
 80084dc:	6823      	ldr	r3, [r4, #0]
 80084de:	781a      	ldrb	r2, [r3, #0]
 80084e0:	5cba      	ldrb	r2, [r7, r2]
 80084e2:	0712      	lsls	r2, r2, #28
 80084e4:	d441      	bmi.n	800856a <__ssvfiscanf_r+0x276>
 80084e6:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80084e8:	2b02      	cmp	r3, #2
 80084ea:	dc50      	bgt.n	800858e <__ssvfiscanf_r+0x29a>
 80084ec:	466b      	mov	r3, sp
 80084ee:	4622      	mov	r2, r4
 80084f0:	a941      	add	r1, sp, #260	; 0x104
 80084f2:	4630      	mov	r0, r6
 80084f4:	f000 fa0a 	bl	800890c <_scanf_chars>
 80084f8:	2801      	cmp	r0, #1
 80084fa:	d06e      	beq.n	80085da <__ssvfiscanf_r+0x2e6>
 80084fc:	2802      	cmp	r0, #2
 80084fe:	f47f af20 	bne.w	8008342 <__ssvfiscanf_r+0x4e>
 8008502:	e7cf      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 8008504:	220a      	movs	r2, #10
 8008506:	e7dd      	b.n	80084c4 <__ssvfiscanf_r+0x1d0>
 8008508:	2300      	movs	r3, #0
 800850a:	9342      	str	r3, [sp, #264]	; 0x108
 800850c:	2303      	movs	r3, #3
 800850e:	e7de      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 8008510:	2308      	movs	r3, #8
 8008512:	9342      	str	r3, [sp, #264]	; 0x108
 8008514:	2304      	movs	r3, #4
 8008516:	e7da      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 8008518:	4629      	mov	r1, r5
 800851a:	4640      	mov	r0, r8
 800851c:	f000 fb74 	bl	8008c08 <__sccl>
 8008520:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008522:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008526:	9341      	str	r3, [sp, #260]	; 0x104
 8008528:	4605      	mov	r5, r0
 800852a:	2301      	movs	r3, #1
 800852c:	e7cf      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 800852e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008530:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008534:	9341      	str	r3, [sp, #260]	; 0x104
 8008536:	2300      	movs	r3, #0
 8008538:	e7c9      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 800853a:	2302      	movs	r3, #2
 800853c:	e7c7      	b.n	80084ce <__ssvfiscanf_r+0x1da>
 800853e:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008540:	06c3      	lsls	r3, r0, #27
 8008542:	f53f aefe 	bmi.w	8008342 <__ssvfiscanf_r+0x4e>
 8008546:	9b00      	ldr	r3, [sp, #0]
 8008548:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800854a:	1d19      	adds	r1, r3, #4
 800854c:	9100      	str	r1, [sp, #0]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f010 0f01 	tst.w	r0, #1
 8008554:	bf14      	ite	ne
 8008556:	801a      	strhne	r2, [r3, #0]
 8008558:	601a      	streq	r2, [r3, #0]
 800855a:	e6f2      	b.n	8008342 <__ssvfiscanf_r+0x4e>
 800855c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800855e:	4621      	mov	r1, r4
 8008560:	4630      	mov	r0, r6
 8008562:	4798      	blx	r3
 8008564:	2800      	cmp	r0, #0
 8008566:	d0b6      	beq.n	80084d6 <__ssvfiscanf_r+0x1e2>
 8008568:	e79c      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 800856a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800856c:	3201      	adds	r2, #1
 800856e:	9245      	str	r2, [sp, #276]	; 0x114
 8008570:	6862      	ldr	r2, [r4, #4]
 8008572:	3a01      	subs	r2, #1
 8008574:	2a00      	cmp	r2, #0
 8008576:	6062      	str	r2, [r4, #4]
 8008578:	dd02      	ble.n	8008580 <__ssvfiscanf_r+0x28c>
 800857a:	3301      	adds	r3, #1
 800857c:	6023      	str	r3, [r4, #0]
 800857e:	e7ad      	b.n	80084dc <__ssvfiscanf_r+0x1e8>
 8008580:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008582:	4621      	mov	r1, r4
 8008584:	4630      	mov	r0, r6
 8008586:	4798      	blx	r3
 8008588:	2800      	cmp	r0, #0
 800858a:	d0a7      	beq.n	80084dc <__ssvfiscanf_r+0x1e8>
 800858c:	e78a      	b.n	80084a4 <__ssvfiscanf_r+0x1b0>
 800858e:	2b04      	cmp	r3, #4
 8008590:	dc0e      	bgt.n	80085b0 <__ssvfiscanf_r+0x2bc>
 8008592:	466b      	mov	r3, sp
 8008594:	4622      	mov	r2, r4
 8008596:	a941      	add	r1, sp, #260	; 0x104
 8008598:	4630      	mov	r0, r6
 800859a:	f000 fa11 	bl	80089c0 <_scanf_i>
 800859e:	e7ab      	b.n	80084f8 <__ssvfiscanf_r+0x204>
 80085a0:	08008241 	.word	0x08008241
 80085a4:	080082bb 	.word	0x080082bb
 80085a8:	08009351 	.word	0x08009351
 80085ac:	080096ba 	.word	0x080096ba
 80085b0:	4b0b      	ldr	r3, [pc, #44]	; (80085e0 <__ssvfiscanf_r+0x2ec>)
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	f43f aec5 	beq.w	8008342 <__ssvfiscanf_r+0x4e>
 80085b8:	466b      	mov	r3, sp
 80085ba:	4622      	mov	r2, r4
 80085bc:	a941      	add	r1, sp, #260	; 0x104
 80085be:	4630      	mov	r0, r6
 80085c0:	f7fc ff1c 	bl	80053fc <_scanf_float>
 80085c4:	e798      	b.n	80084f8 <__ssvfiscanf_r+0x204>
 80085c6:	89a3      	ldrh	r3, [r4, #12]
 80085c8:	f013 0f40 	tst.w	r3, #64	; 0x40
 80085cc:	bf18      	it	ne
 80085ce:	f04f 30ff 	movne.w	r0, #4294967295
 80085d2:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	9844      	ldr	r0, [sp, #272]	; 0x110
 80085dc:	e7f9      	b.n	80085d2 <__ssvfiscanf_r+0x2de>
 80085de:	bf00      	nop
 80085e0:	080053fd 	.word	0x080053fd

080085e4 <_printf_common>:
 80085e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085e8:	4616      	mov	r6, r2
 80085ea:	4699      	mov	r9, r3
 80085ec:	688a      	ldr	r2, [r1, #8]
 80085ee:	690b      	ldr	r3, [r1, #16]
 80085f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085f4:	4293      	cmp	r3, r2
 80085f6:	bfb8      	it	lt
 80085f8:	4613      	movlt	r3, r2
 80085fa:	6033      	str	r3, [r6, #0]
 80085fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008600:	4607      	mov	r7, r0
 8008602:	460c      	mov	r4, r1
 8008604:	b10a      	cbz	r2, 800860a <_printf_common+0x26>
 8008606:	3301      	adds	r3, #1
 8008608:	6033      	str	r3, [r6, #0]
 800860a:	6823      	ldr	r3, [r4, #0]
 800860c:	0699      	lsls	r1, r3, #26
 800860e:	bf42      	ittt	mi
 8008610:	6833      	ldrmi	r3, [r6, #0]
 8008612:	3302      	addmi	r3, #2
 8008614:	6033      	strmi	r3, [r6, #0]
 8008616:	6825      	ldr	r5, [r4, #0]
 8008618:	f015 0506 	ands.w	r5, r5, #6
 800861c:	d106      	bne.n	800862c <_printf_common+0x48>
 800861e:	f104 0a19 	add.w	sl, r4, #25
 8008622:	68e3      	ldr	r3, [r4, #12]
 8008624:	6832      	ldr	r2, [r6, #0]
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	42ab      	cmp	r3, r5
 800862a:	dc26      	bgt.n	800867a <_printf_common+0x96>
 800862c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008630:	1e13      	subs	r3, r2, #0
 8008632:	6822      	ldr	r2, [r4, #0]
 8008634:	bf18      	it	ne
 8008636:	2301      	movne	r3, #1
 8008638:	0692      	lsls	r2, r2, #26
 800863a:	d42b      	bmi.n	8008694 <_printf_common+0xb0>
 800863c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008640:	4649      	mov	r1, r9
 8008642:	4638      	mov	r0, r7
 8008644:	47c0      	blx	r8
 8008646:	3001      	adds	r0, #1
 8008648:	d01e      	beq.n	8008688 <_printf_common+0xa4>
 800864a:	6823      	ldr	r3, [r4, #0]
 800864c:	68e5      	ldr	r5, [r4, #12]
 800864e:	6832      	ldr	r2, [r6, #0]
 8008650:	f003 0306 	and.w	r3, r3, #6
 8008654:	2b04      	cmp	r3, #4
 8008656:	bf08      	it	eq
 8008658:	1aad      	subeq	r5, r5, r2
 800865a:	68a3      	ldr	r3, [r4, #8]
 800865c:	6922      	ldr	r2, [r4, #16]
 800865e:	bf0c      	ite	eq
 8008660:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008664:	2500      	movne	r5, #0
 8008666:	4293      	cmp	r3, r2
 8008668:	bfc4      	itt	gt
 800866a:	1a9b      	subgt	r3, r3, r2
 800866c:	18ed      	addgt	r5, r5, r3
 800866e:	2600      	movs	r6, #0
 8008670:	341a      	adds	r4, #26
 8008672:	42b5      	cmp	r5, r6
 8008674:	d11a      	bne.n	80086ac <_printf_common+0xc8>
 8008676:	2000      	movs	r0, #0
 8008678:	e008      	b.n	800868c <_printf_common+0xa8>
 800867a:	2301      	movs	r3, #1
 800867c:	4652      	mov	r2, sl
 800867e:	4649      	mov	r1, r9
 8008680:	4638      	mov	r0, r7
 8008682:	47c0      	blx	r8
 8008684:	3001      	adds	r0, #1
 8008686:	d103      	bne.n	8008690 <_printf_common+0xac>
 8008688:	f04f 30ff 	mov.w	r0, #4294967295
 800868c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008690:	3501      	adds	r5, #1
 8008692:	e7c6      	b.n	8008622 <_printf_common+0x3e>
 8008694:	18e1      	adds	r1, r4, r3
 8008696:	1c5a      	adds	r2, r3, #1
 8008698:	2030      	movs	r0, #48	; 0x30
 800869a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800869e:	4422      	add	r2, r4
 80086a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80086a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80086a8:	3302      	adds	r3, #2
 80086aa:	e7c7      	b.n	800863c <_printf_common+0x58>
 80086ac:	2301      	movs	r3, #1
 80086ae:	4622      	mov	r2, r4
 80086b0:	4649      	mov	r1, r9
 80086b2:	4638      	mov	r0, r7
 80086b4:	47c0      	blx	r8
 80086b6:	3001      	adds	r0, #1
 80086b8:	d0e6      	beq.n	8008688 <_printf_common+0xa4>
 80086ba:	3601      	adds	r6, #1
 80086bc:	e7d9      	b.n	8008672 <_printf_common+0x8e>
	...

080086c0 <_printf_i>:
 80086c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086c4:	7e0f      	ldrb	r7, [r1, #24]
 80086c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80086c8:	2f78      	cmp	r7, #120	; 0x78
 80086ca:	4691      	mov	r9, r2
 80086cc:	4680      	mov	r8, r0
 80086ce:	460c      	mov	r4, r1
 80086d0:	469a      	mov	sl, r3
 80086d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80086d6:	d807      	bhi.n	80086e8 <_printf_i+0x28>
 80086d8:	2f62      	cmp	r7, #98	; 0x62
 80086da:	d80a      	bhi.n	80086f2 <_printf_i+0x32>
 80086dc:	2f00      	cmp	r7, #0
 80086de:	f000 80d8 	beq.w	8008892 <_printf_i+0x1d2>
 80086e2:	2f58      	cmp	r7, #88	; 0x58
 80086e4:	f000 80a3 	beq.w	800882e <_printf_i+0x16e>
 80086e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086f0:	e03a      	b.n	8008768 <_printf_i+0xa8>
 80086f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086f6:	2b15      	cmp	r3, #21
 80086f8:	d8f6      	bhi.n	80086e8 <_printf_i+0x28>
 80086fa:	a101      	add	r1, pc, #4	; (adr r1, 8008700 <_printf_i+0x40>)
 80086fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008700:	08008759 	.word	0x08008759
 8008704:	0800876d 	.word	0x0800876d
 8008708:	080086e9 	.word	0x080086e9
 800870c:	080086e9 	.word	0x080086e9
 8008710:	080086e9 	.word	0x080086e9
 8008714:	080086e9 	.word	0x080086e9
 8008718:	0800876d 	.word	0x0800876d
 800871c:	080086e9 	.word	0x080086e9
 8008720:	080086e9 	.word	0x080086e9
 8008724:	080086e9 	.word	0x080086e9
 8008728:	080086e9 	.word	0x080086e9
 800872c:	08008879 	.word	0x08008879
 8008730:	0800879d 	.word	0x0800879d
 8008734:	0800885b 	.word	0x0800885b
 8008738:	080086e9 	.word	0x080086e9
 800873c:	080086e9 	.word	0x080086e9
 8008740:	0800889b 	.word	0x0800889b
 8008744:	080086e9 	.word	0x080086e9
 8008748:	0800879d 	.word	0x0800879d
 800874c:	080086e9 	.word	0x080086e9
 8008750:	080086e9 	.word	0x080086e9
 8008754:	08008863 	.word	0x08008863
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	602a      	str	r2, [r5, #0]
 8008760:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008764:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008768:	2301      	movs	r3, #1
 800876a:	e0a3      	b.n	80088b4 <_printf_i+0x1f4>
 800876c:	6820      	ldr	r0, [r4, #0]
 800876e:	6829      	ldr	r1, [r5, #0]
 8008770:	0606      	lsls	r6, r0, #24
 8008772:	f101 0304 	add.w	r3, r1, #4
 8008776:	d50a      	bpl.n	800878e <_printf_i+0xce>
 8008778:	680e      	ldr	r6, [r1, #0]
 800877a:	602b      	str	r3, [r5, #0]
 800877c:	2e00      	cmp	r6, #0
 800877e:	da03      	bge.n	8008788 <_printf_i+0xc8>
 8008780:	232d      	movs	r3, #45	; 0x2d
 8008782:	4276      	negs	r6, r6
 8008784:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008788:	485e      	ldr	r0, [pc, #376]	; (8008904 <_printf_i+0x244>)
 800878a:	230a      	movs	r3, #10
 800878c:	e019      	b.n	80087c2 <_printf_i+0x102>
 800878e:	680e      	ldr	r6, [r1, #0]
 8008790:	602b      	str	r3, [r5, #0]
 8008792:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008796:	bf18      	it	ne
 8008798:	b236      	sxthne	r6, r6
 800879a:	e7ef      	b.n	800877c <_printf_i+0xbc>
 800879c:	682b      	ldr	r3, [r5, #0]
 800879e:	6820      	ldr	r0, [r4, #0]
 80087a0:	1d19      	adds	r1, r3, #4
 80087a2:	6029      	str	r1, [r5, #0]
 80087a4:	0601      	lsls	r1, r0, #24
 80087a6:	d501      	bpl.n	80087ac <_printf_i+0xec>
 80087a8:	681e      	ldr	r6, [r3, #0]
 80087aa:	e002      	b.n	80087b2 <_printf_i+0xf2>
 80087ac:	0646      	lsls	r6, r0, #25
 80087ae:	d5fb      	bpl.n	80087a8 <_printf_i+0xe8>
 80087b0:	881e      	ldrh	r6, [r3, #0]
 80087b2:	4854      	ldr	r0, [pc, #336]	; (8008904 <_printf_i+0x244>)
 80087b4:	2f6f      	cmp	r7, #111	; 0x6f
 80087b6:	bf0c      	ite	eq
 80087b8:	2308      	moveq	r3, #8
 80087ba:	230a      	movne	r3, #10
 80087bc:	2100      	movs	r1, #0
 80087be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087c2:	6865      	ldr	r5, [r4, #4]
 80087c4:	60a5      	str	r5, [r4, #8]
 80087c6:	2d00      	cmp	r5, #0
 80087c8:	bfa2      	ittt	ge
 80087ca:	6821      	ldrge	r1, [r4, #0]
 80087cc:	f021 0104 	bicge.w	r1, r1, #4
 80087d0:	6021      	strge	r1, [r4, #0]
 80087d2:	b90e      	cbnz	r6, 80087d8 <_printf_i+0x118>
 80087d4:	2d00      	cmp	r5, #0
 80087d6:	d04d      	beq.n	8008874 <_printf_i+0x1b4>
 80087d8:	4615      	mov	r5, r2
 80087da:	fbb6 f1f3 	udiv	r1, r6, r3
 80087de:	fb03 6711 	mls	r7, r3, r1, r6
 80087e2:	5dc7      	ldrb	r7, [r0, r7]
 80087e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80087e8:	4637      	mov	r7, r6
 80087ea:	42bb      	cmp	r3, r7
 80087ec:	460e      	mov	r6, r1
 80087ee:	d9f4      	bls.n	80087da <_printf_i+0x11a>
 80087f0:	2b08      	cmp	r3, #8
 80087f2:	d10b      	bne.n	800880c <_printf_i+0x14c>
 80087f4:	6823      	ldr	r3, [r4, #0]
 80087f6:	07de      	lsls	r6, r3, #31
 80087f8:	d508      	bpl.n	800880c <_printf_i+0x14c>
 80087fa:	6923      	ldr	r3, [r4, #16]
 80087fc:	6861      	ldr	r1, [r4, #4]
 80087fe:	4299      	cmp	r1, r3
 8008800:	bfde      	ittt	le
 8008802:	2330      	movle	r3, #48	; 0x30
 8008804:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008808:	f105 35ff 	addle.w	r5, r5, #4294967295
 800880c:	1b52      	subs	r2, r2, r5
 800880e:	6122      	str	r2, [r4, #16]
 8008810:	f8cd a000 	str.w	sl, [sp]
 8008814:	464b      	mov	r3, r9
 8008816:	aa03      	add	r2, sp, #12
 8008818:	4621      	mov	r1, r4
 800881a:	4640      	mov	r0, r8
 800881c:	f7ff fee2 	bl	80085e4 <_printf_common>
 8008820:	3001      	adds	r0, #1
 8008822:	d14c      	bne.n	80088be <_printf_i+0x1fe>
 8008824:	f04f 30ff 	mov.w	r0, #4294967295
 8008828:	b004      	add	sp, #16
 800882a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800882e:	4835      	ldr	r0, [pc, #212]	; (8008904 <_printf_i+0x244>)
 8008830:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008834:	6829      	ldr	r1, [r5, #0]
 8008836:	6823      	ldr	r3, [r4, #0]
 8008838:	f851 6b04 	ldr.w	r6, [r1], #4
 800883c:	6029      	str	r1, [r5, #0]
 800883e:	061d      	lsls	r5, r3, #24
 8008840:	d514      	bpl.n	800886c <_printf_i+0x1ac>
 8008842:	07df      	lsls	r7, r3, #31
 8008844:	bf44      	itt	mi
 8008846:	f043 0320 	orrmi.w	r3, r3, #32
 800884a:	6023      	strmi	r3, [r4, #0]
 800884c:	b91e      	cbnz	r6, 8008856 <_printf_i+0x196>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	f023 0320 	bic.w	r3, r3, #32
 8008854:	6023      	str	r3, [r4, #0]
 8008856:	2310      	movs	r3, #16
 8008858:	e7b0      	b.n	80087bc <_printf_i+0xfc>
 800885a:	6823      	ldr	r3, [r4, #0]
 800885c:	f043 0320 	orr.w	r3, r3, #32
 8008860:	6023      	str	r3, [r4, #0]
 8008862:	2378      	movs	r3, #120	; 0x78
 8008864:	4828      	ldr	r0, [pc, #160]	; (8008908 <_printf_i+0x248>)
 8008866:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800886a:	e7e3      	b.n	8008834 <_printf_i+0x174>
 800886c:	0659      	lsls	r1, r3, #25
 800886e:	bf48      	it	mi
 8008870:	b2b6      	uxthmi	r6, r6
 8008872:	e7e6      	b.n	8008842 <_printf_i+0x182>
 8008874:	4615      	mov	r5, r2
 8008876:	e7bb      	b.n	80087f0 <_printf_i+0x130>
 8008878:	682b      	ldr	r3, [r5, #0]
 800887a:	6826      	ldr	r6, [r4, #0]
 800887c:	6961      	ldr	r1, [r4, #20]
 800887e:	1d18      	adds	r0, r3, #4
 8008880:	6028      	str	r0, [r5, #0]
 8008882:	0635      	lsls	r5, r6, #24
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	d501      	bpl.n	800888c <_printf_i+0x1cc>
 8008888:	6019      	str	r1, [r3, #0]
 800888a:	e002      	b.n	8008892 <_printf_i+0x1d2>
 800888c:	0670      	lsls	r0, r6, #25
 800888e:	d5fb      	bpl.n	8008888 <_printf_i+0x1c8>
 8008890:	8019      	strh	r1, [r3, #0]
 8008892:	2300      	movs	r3, #0
 8008894:	6123      	str	r3, [r4, #16]
 8008896:	4615      	mov	r5, r2
 8008898:	e7ba      	b.n	8008810 <_printf_i+0x150>
 800889a:	682b      	ldr	r3, [r5, #0]
 800889c:	1d1a      	adds	r2, r3, #4
 800889e:	602a      	str	r2, [r5, #0]
 80088a0:	681d      	ldr	r5, [r3, #0]
 80088a2:	6862      	ldr	r2, [r4, #4]
 80088a4:	2100      	movs	r1, #0
 80088a6:	4628      	mov	r0, r5
 80088a8:	f7f7 fcba 	bl	8000220 <memchr>
 80088ac:	b108      	cbz	r0, 80088b2 <_printf_i+0x1f2>
 80088ae:	1b40      	subs	r0, r0, r5
 80088b0:	6060      	str	r0, [r4, #4]
 80088b2:	6863      	ldr	r3, [r4, #4]
 80088b4:	6123      	str	r3, [r4, #16]
 80088b6:	2300      	movs	r3, #0
 80088b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088bc:	e7a8      	b.n	8008810 <_printf_i+0x150>
 80088be:	6923      	ldr	r3, [r4, #16]
 80088c0:	462a      	mov	r2, r5
 80088c2:	4649      	mov	r1, r9
 80088c4:	4640      	mov	r0, r8
 80088c6:	47d0      	blx	sl
 80088c8:	3001      	adds	r0, #1
 80088ca:	d0ab      	beq.n	8008824 <_printf_i+0x164>
 80088cc:	6823      	ldr	r3, [r4, #0]
 80088ce:	079b      	lsls	r3, r3, #30
 80088d0:	d413      	bmi.n	80088fa <_printf_i+0x23a>
 80088d2:	68e0      	ldr	r0, [r4, #12]
 80088d4:	9b03      	ldr	r3, [sp, #12]
 80088d6:	4298      	cmp	r0, r3
 80088d8:	bfb8      	it	lt
 80088da:	4618      	movlt	r0, r3
 80088dc:	e7a4      	b.n	8008828 <_printf_i+0x168>
 80088de:	2301      	movs	r3, #1
 80088e0:	4632      	mov	r2, r6
 80088e2:	4649      	mov	r1, r9
 80088e4:	4640      	mov	r0, r8
 80088e6:	47d0      	blx	sl
 80088e8:	3001      	adds	r0, #1
 80088ea:	d09b      	beq.n	8008824 <_printf_i+0x164>
 80088ec:	3501      	adds	r5, #1
 80088ee:	68e3      	ldr	r3, [r4, #12]
 80088f0:	9903      	ldr	r1, [sp, #12]
 80088f2:	1a5b      	subs	r3, r3, r1
 80088f4:	42ab      	cmp	r3, r5
 80088f6:	dcf2      	bgt.n	80088de <_printf_i+0x21e>
 80088f8:	e7eb      	b.n	80088d2 <_printf_i+0x212>
 80088fa:	2500      	movs	r5, #0
 80088fc:	f104 0619 	add.w	r6, r4, #25
 8008900:	e7f5      	b.n	80088ee <_printf_i+0x22e>
 8008902:	bf00      	nop
 8008904:	080096c5 	.word	0x080096c5
 8008908:	080096d6 	.word	0x080096d6

0800890c <_scanf_chars>:
 800890c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008910:	4615      	mov	r5, r2
 8008912:	688a      	ldr	r2, [r1, #8]
 8008914:	4680      	mov	r8, r0
 8008916:	460c      	mov	r4, r1
 8008918:	b932      	cbnz	r2, 8008928 <_scanf_chars+0x1c>
 800891a:	698a      	ldr	r2, [r1, #24]
 800891c:	2a00      	cmp	r2, #0
 800891e:	bf0c      	ite	eq
 8008920:	2201      	moveq	r2, #1
 8008922:	f04f 32ff 	movne.w	r2, #4294967295
 8008926:	608a      	str	r2, [r1, #8]
 8008928:	6822      	ldr	r2, [r4, #0]
 800892a:	f8df 9090 	ldr.w	r9, [pc, #144]	; 80089bc <_scanf_chars+0xb0>
 800892e:	06d1      	lsls	r1, r2, #27
 8008930:	bf5f      	itttt	pl
 8008932:	681a      	ldrpl	r2, [r3, #0]
 8008934:	1d11      	addpl	r1, r2, #4
 8008936:	6019      	strpl	r1, [r3, #0]
 8008938:	6816      	ldrpl	r6, [r2, #0]
 800893a:	2700      	movs	r7, #0
 800893c:	69a0      	ldr	r0, [r4, #24]
 800893e:	b188      	cbz	r0, 8008964 <_scanf_chars+0x58>
 8008940:	2801      	cmp	r0, #1
 8008942:	d107      	bne.n	8008954 <_scanf_chars+0x48>
 8008944:	682a      	ldr	r2, [r5, #0]
 8008946:	7811      	ldrb	r1, [r2, #0]
 8008948:	6962      	ldr	r2, [r4, #20]
 800894a:	5c52      	ldrb	r2, [r2, r1]
 800894c:	b952      	cbnz	r2, 8008964 <_scanf_chars+0x58>
 800894e:	2f00      	cmp	r7, #0
 8008950:	d031      	beq.n	80089b6 <_scanf_chars+0xaa>
 8008952:	e022      	b.n	800899a <_scanf_chars+0x8e>
 8008954:	2802      	cmp	r0, #2
 8008956:	d120      	bne.n	800899a <_scanf_chars+0x8e>
 8008958:	682b      	ldr	r3, [r5, #0]
 800895a:	781b      	ldrb	r3, [r3, #0]
 800895c:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008960:	071b      	lsls	r3, r3, #28
 8008962:	d41a      	bmi.n	800899a <_scanf_chars+0x8e>
 8008964:	6823      	ldr	r3, [r4, #0]
 8008966:	06da      	lsls	r2, r3, #27
 8008968:	bf5e      	ittt	pl
 800896a:	682b      	ldrpl	r3, [r5, #0]
 800896c:	781b      	ldrbpl	r3, [r3, #0]
 800896e:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008972:	682a      	ldr	r2, [r5, #0]
 8008974:	686b      	ldr	r3, [r5, #4]
 8008976:	3201      	adds	r2, #1
 8008978:	602a      	str	r2, [r5, #0]
 800897a:	68a2      	ldr	r2, [r4, #8]
 800897c:	3b01      	subs	r3, #1
 800897e:	3a01      	subs	r2, #1
 8008980:	606b      	str	r3, [r5, #4]
 8008982:	3701      	adds	r7, #1
 8008984:	60a2      	str	r2, [r4, #8]
 8008986:	b142      	cbz	r2, 800899a <_scanf_chars+0x8e>
 8008988:	2b00      	cmp	r3, #0
 800898a:	dcd7      	bgt.n	800893c <_scanf_chars+0x30>
 800898c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008990:	4629      	mov	r1, r5
 8008992:	4640      	mov	r0, r8
 8008994:	4798      	blx	r3
 8008996:	2800      	cmp	r0, #0
 8008998:	d0d0      	beq.n	800893c <_scanf_chars+0x30>
 800899a:	6823      	ldr	r3, [r4, #0]
 800899c:	f013 0310 	ands.w	r3, r3, #16
 80089a0:	d105      	bne.n	80089ae <_scanf_chars+0xa2>
 80089a2:	68e2      	ldr	r2, [r4, #12]
 80089a4:	3201      	adds	r2, #1
 80089a6:	60e2      	str	r2, [r4, #12]
 80089a8:	69a2      	ldr	r2, [r4, #24]
 80089aa:	b102      	cbz	r2, 80089ae <_scanf_chars+0xa2>
 80089ac:	7033      	strb	r3, [r6, #0]
 80089ae:	6923      	ldr	r3, [r4, #16]
 80089b0:	443b      	add	r3, r7
 80089b2:	6123      	str	r3, [r4, #16]
 80089b4:	2000      	movs	r0, #0
 80089b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089ba:	bf00      	nop
 80089bc:	08009351 	.word	0x08009351

080089c0 <_scanf_i>:
 80089c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c4:	4698      	mov	r8, r3
 80089c6:	4b76      	ldr	r3, [pc, #472]	; (8008ba0 <_scanf_i+0x1e0>)
 80089c8:	460c      	mov	r4, r1
 80089ca:	4682      	mov	sl, r0
 80089cc:	4616      	mov	r6, r2
 80089ce:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089d2:	b087      	sub	sp, #28
 80089d4:	ab03      	add	r3, sp, #12
 80089d6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089da:	4b72      	ldr	r3, [pc, #456]	; (8008ba4 <_scanf_i+0x1e4>)
 80089dc:	69a1      	ldr	r1, [r4, #24]
 80089de:	4a72      	ldr	r2, [pc, #456]	; (8008ba8 <_scanf_i+0x1e8>)
 80089e0:	2903      	cmp	r1, #3
 80089e2:	bf18      	it	ne
 80089e4:	461a      	movne	r2, r3
 80089e6:	68a3      	ldr	r3, [r4, #8]
 80089e8:	9201      	str	r2, [sp, #4]
 80089ea:	1e5a      	subs	r2, r3, #1
 80089ec:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089f0:	bf88      	it	hi
 80089f2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089f6:	4627      	mov	r7, r4
 80089f8:	bf82      	ittt	hi
 80089fa:	eb03 0905 	addhi.w	r9, r3, r5
 80089fe:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008a02:	60a3      	strhi	r3, [r4, #8]
 8008a04:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008a08:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008a0c:	bf98      	it	ls
 8008a0e:	f04f 0900 	movls.w	r9, #0
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	463d      	mov	r5, r7
 8008a16:	f04f 0b00 	mov.w	fp, #0
 8008a1a:	6831      	ldr	r1, [r6, #0]
 8008a1c:	ab03      	add	r3, sp, #12
 8008a1e:	7809      	ldrb	r1, [r1, #0]
 8008a20:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a24:	2202      	movs	r2, #2
 8008a26:	f7f7 fbfb 	bl	8000220 <memchr>
 8008a2a:	b328      	cbz	r0, 8008a78 <_scanf_i+0xb8>
 8008a2c:	f1bb 0f01 	cmp.w	fp, #1
 8008a30:	d159      	bne.n	8008ae6 <_scanf_i+0x126>
 8008a32:	6862      	ldr	r2, [r4, #4]
 8008a34:	b92a      	cbnz	r2, 8008a42 <_scanf_i+0x82>
 8008a36:	6822      	ldr	r2, [r4, #0]
 8008a38:	2308      	movs	r3, #8
 8008a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a3e:	6063      	str	r3, [r4, #4]
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	6822      	ldr	r2, [r4, #0]
 8008a44:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a48:	6022      	str	r2, [r4, #0]
 8008a4a:	68a2      	ldr	r2, [r4, #8]
 8008a4c:	1e51      	subs	r1, r2, #1
 8008a4e:	60a1      	str	r1, [r4, #8]
 8008a50:	b192      	cbz	r2, 8008a78 <_scanf_i+0xb8>
 8008a52:	6832      	ldr	r2, [r6, #0]
 8008a54:	1c51      	adds	r1, r2, #1
 8008a56:	6031      	str	r1, [r6, #0]
 8008a58:	7812      	ldrb	r2, [r2, #0]
 8008a5a:	f805 2b01 	strb.w	r2, [r5], #1
 8008a5e:	6872      	ldr	r2, [r6, #4]
 8008a60:	3a01      	subs	r2, #1
 8008a62:	2a00      	cmp	r2, #0
 8008a64:	6072      	str	r2, [r6, #4]
 8008a66:	dc07      	bgt.n	8008a78 <_scanf_i+0xb8>
 8008a68:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a6c:	4631      	mov	r1, r6
 8008a6e:	4650      	mov	r0, sl
 8008a70:	4790      	blx	r2
 8008a72:	2800      	cmp	r0, #0
 8008a74:	f040 8085 	bne.w	8008b82 <_scanf_i+0x1c2>
 8008a78:	f10b 0b01 	add.w	fp, fp, #1
 8008a7c:	f1bb 0f03 	cmp.w	fp, #3
 8008a80:	d1cb      	bne.n	8008a1a <_scanf_i+0x5a>
 8008a82:	6863      	ldr	r3, [r4, #4]
 8008a84:	b90b      	cbnz	r3, 8008a8a <_scanf_i+0xca>
 8008a86:	230a      	movs	r3, #10
 8008a88:	6063      	str	r3, [r4, #4]
 8008a8a:	6863      	ldr	r3, [r4, #4]
 8008a8c:	4947      	ldr	r1, [pc, #284]	; (8008bac <_scanf_i+0x1ec>)
 8008a8e:	6960      	ldr	r0, [r4, #20]
 8008a90:	1ac9      	subs	r1, r1, r3
 8008a92:	f000 f8b9 	bl	8008c08 <__sccl>
 8008a96:	f04f 0b00 	mov.w	fp, #0
 8008a9a:	68a3      	ldr	r3, [r4, #8]
 8008a9c:	6822      	ldr	r2, [r4, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d03d      	beq.n	8008b1e <_scanf_i+0x15e>
 8008aa2:	6831      	ldr	r1, [r6, #0]
 8008aa4:	6960      	ldr	r0, [r4, #20]
 8008aa6:	f891 c000 	ldrb.w	ip, [r1]
 8008aaa:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008aae:	2800      	cmp	r0, #0
 8008ab0:	d035      	beq.n	8008b1e <_scanf_i+0x15e>
 8008ab2:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008ab6:	d124      	bne.n	8008b02 <_scanf_i+0x142>
 8008ab8:	0510      	lsls	r0, r2, #20
 8008aba:	d522      	bpl.n	8008b02 <_scanf_i+0x142>
 8008abc:	f10b 0b01 	add.w	fp, fp, #1
 8008ac0:	f1b9 0f00 	cmp.w	r9, #0
 8008ac4:	d003      	beq.n	8008ace <_scanf_i+0x10e>
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008acc:	60a3      	str	r3, [r4, #8]
 8008ace:	6873      	ldr	r3, [r6, #4]
 8008ad0:	3b01      	subs	r3, #1
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	6073      	str	r3, [r6, #4]
 8008ad6:	dd1b      	ble.n	8008b10 <_scanf_i+0x150>
 8008ad8:	6833      	ldr	r3, [r6, #0]
 8008ada:	3301      	adds	r3, #1
 8008adc:	6033      	str	r3, [r6, #0]
 8008ade:	68a3      	ldr	r3, [r4, #8]
 8008ae0:	3b01      	subs	r3, #1
 8008ae2:	60a3      	str	r3, [r4, #8]
 8008ae4:	e7d9      	b.n	8008a9a <_scanf_i+0xda>
 8008ae6:	f1bb 0f02 	cmp.w	fp, #2
 8008aea:	d1ae      	bne.n	8008a4a <_scanf_i+0x8a>
 8008aec:	6822      	ldr	r2, [r4, #0]
 8008aee:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008af2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008af6:	d1bf      	bne.n	8008a78 <_scanf_i+0xb8>
 8008af8:	2310      	movs	r3, #16
 8008afa:	6063      	str	r3, [r4, #4]
 8008afc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b00:	e7a2      	b.n	8008a48 <_scanf_i+0x88>
 8008b02:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008b06:	6022      	str	r2, [r4, #0]
 8008b08:	780b      	ldrb	r3, [r1, #0]
 8008b0a:	f805 3b01 	strb.w	r3, [r5], #1
 8008b0e:	e7de      	b.n	8008ace <_scanf_i+0x10e>
 8008b10:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b14:	4631      	mov	r1, r6
 8008b16:	4650      	mov	r0, sl
 8008b18:	4798      	blx	r3
 8008b1a:	2800      	cmp	r0, #0
 8008b1c:	d0df      	beq.n	8008ade <_scanf_i+0x11e>
 8008b1e:	6823      	ldr	r3, [r4, #0]
 8008b20:	05db      	lsls	r3, r3, #23
 8008b22:	d50d      	bpl.n	8008b40 <_scanf_i+0x180>
 8008b24:	42bd      	cmp	r5, r7
 8008b26:	d909      	bls.n	8008b3c <_scanf_i+0x17c>
 8008b28:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b30:	4632      	mov	r2, r6
 8008b32:	4650      	mov	r0, sl
 8008b34:	4798      	blx	r3
 8008b36:	f105 39ff 	add.w	r9, r5, #4294967295
 8008b3a:	464d      	mov	r5, r9
 8008b3c:	42bd      	cmp	r5, r7
 8008b3e:	d02d      	beq.n	8008b9c <_scanf_i+0x1dc>
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f012 0210 	ands.w	r2, r2, #16
 8008b46:	d113      	bne.n	8008b70 <_scanf_i+0x1b0>
 8008b48:	702a      	strb	r2, [r5, #0]
 8008b4a:	6863      	ldr	r3, [r4, #4]
 8008b4c:	9e01      	ldr	r6, [sp, #4]
 8008b4e:	4639      	mov	r1, r7
 8008b50:	4650      	mov	r0, sl
 8008b52:	47b0      	blx	r6
 8008b54:	6821      	ldr	r1, [r4, #0]
 8008b56:	f8d8 3000 	ldr.w	r3, [r8]
 8008b5a:	f011 0f20 	tst.w	r1, #32
 8008b5e:	d013      	beq.n	8008b88 <_scanf_i+0x1c8>
 8008b60:	1d1a      	adds	r2, r3, #4
 8008b62:	f8c8 2000 	str.w	r2, [r8]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	6018      	str	r0, [r3, #0]
 8008b6a:	68e3      	ldr	r3, [r4, #12]
 8008b6c:	3301      	adds	r3, #1
 8008b6e:	60e3      	str	r3, [r4, #12]
 8008b70:	1bed      	subs	r5, r5, r7
 8008b72:	44ab      	add	fp, r5
 8008b74:	6925      	ldr	r5, [r4, #16]
 8008b76:	445d      	add	r5, fp
 8008b78:	6125      	str	r5, [r4, #16]
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	b007      	add	sp, #28
 8008b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b82:	f04f 0b00 	mov.w	fp, #0
 8008b86:	e7ca      	b.n	8008b1e <_scanf_i+0x15e>
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	f8c8 2000 	str.w	r2, [r8]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	f011 0f01 	tst.w	r1, #1
 8008b94:	bf14      	ite	ne
 8008b96:	8018      	strhne	r0, [r3, #0]
 8008b98:	6018      	streq	r0, [r3, #0]
 8008b9a:	e7e6      	b.n	8008b6a <_scanf_i+0x1aa>
 8008b9c:	2001      	movs	r0, #1
 8008b9e:	e7ed      	b.n	8008b7c <_scanf_i+0x1bc>
 8008ba0:	080092c4 	.word	0x080092c4
 8008ba4:	08008d5d 	.word	0x08008d5d
 8008ba8:	080066cd 	.word	0x080066cd
 8008bac:	08009700 	.word	0x08009700

08008bb0 <_read_r>:
 8008bb0:	b538      	push	{r3, r4, r5, lr}
 8008bb2:	4d07      	ldr	r5, [pc, #28]	; (8008bd0 <_read_r+0x20>)
 8008bb4:	4604      	mov	r4, r0
 8008bb6:	4608      	mov	r0, r1
 8008bb8:	4611      	mov	r1, r2
 8008bba:	2200      	movs	r2, #0
 8008bbc:	602a      	str	r2, [r5, #0]
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	f7f8 fda2 	bl	8001708 <_read>
 8008bc4:	1c43      	adds	r3, r0, #1
 8008bc6:	d102      	bne.n	8008bce <_read_r+0x1e>
 8008bc8:	682b      	ldr	r3, [r5, #0]
 8008bca:	b103      	cbz	r3, 8008bce <_read_r+0x1e>
 8008bcc:	6023      	str	r3, [r4, #0]
 8008bce:	bd38      	pop	{r3, r4, r5, pc}
 8008bd0:	200002f8 	.word	0x200002f8
 8008bd4:	00000000 	.word	0x00000000

08008bd8 <nan>:
 8008bd8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008be0 <nan+0x8>
 8008bdc:	4770      	bx	lr
 8008bde:	bf00      	nop
 8008be0:	00000000 	.word	0x00000000
 8008be4:	7ff80000 	.word	0x7ff80000

08008be8 <_sbrk_r>:
 8008be8:	b538      	push	{r3, r4, r5, lr}
 8008bea:	4d06      	ldr	r5, [pc, #24]	; (8008c04 <_sbrk_r+0x1c>)
 8008bec:	2300      	movs	r3, #0
 8008bee:	4604      	mov	r4, r0
 8008bf0:	4608      	mov	r0, r1
 8008bf2:	602b      	str	r3, [r5, #0]
 8008bf4:	f7f8 fdf6 	bl	80017e4 <_sbrk>
 8008bf8:	1c43      	adds	r3, r0, #1
 8008bfa:	d102      	bne.n	8008c02 <_sbrk_r+0x1a>
 8008bfc:	682b      	ldr	r3, [r5, #0]
 8008bfe:	b103      	cbz	r3, 8008c02 <_sbrk_r+0x1a>
 8008c00:	6023      	str	r3, [r4, #0]
 8008c02:	bd38      	pop	{r3, r4, r5, pc}
 8008c04:	200002f8 	.word	0x200002f8

08008c08 <__sccl>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	780b      	ldrb	r3, [r1, #0]
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	2b5e      	cmp	r3, #94	; 0x5e
 8008c10:	bf0b      	itete	eq
 8008c12:	784b      	ldrbeq	r3, [r1, #1]
 8008c14:	1c48      	addne	r0, r1, #1
 8008c16:	1c88      	addeq	r0, r1, #2
 8008c18:	2200      	movne	r2, #0
 8008c1a:	bf08      	it	eq
 8008c1c:	2201      	moveq	r2, #1
 8008c1e:	1e61      	subs	r1, r4, #1
 8008c20:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008c24:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008c28:	42a9      	cmp	r1, r5
 8008c2a:	d1fb      	bne.n	8008c24 <__sccl+0x1c>
 8008c2c:	b90b      	cbnz	r3, 8008c32 <__sccl+0x2a>
 8008c2e:	3801      	subs	r0, #1
 8008c30:	bd70      	pop	{r4, r5, r6, pc}
 8008c32:	f082 0201 	eor.w	r2, r2, #1
 8008c36:	54e2      	strb	r2, [r4, r3]
 8008c38:	4605      	mov	r5, r0
 8008c3a:	4628      	mov	r0, r5
 8008c3c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008c40:	292d      	cmp	r1, #45	; 0x2d
 8008c42:	d006      	beq.n	8008c52 <__sccl+0x4a>
 8008c44:	295d      	cmp	r1, #93	; 0x5d
 8008c46:	d0f3      	beq.n	8008c30 <__sccl+0x28>
 8008c48:	b909      	cbnz	r1, 8008c4e <__sccl+0x46>
 8008c4a:	4628      	mov	r0, r5
 8008c4c:	e7f0      	b.n	8008c30 <__sccl+0x28>
 8008c4e:	460b      	mov	r3, r1
 8008c50:	e7f1      	b.n	8008c36 <__sccl+0x2e>
 8008c52:	786e      	ldrb	r6, [r5, #1]
 8008c54:	2e5d      	cmp	r6, #93	; 0x5d
 8008c56:	d0fa      	beq.n	8008c4e <__sccl+0x46>
 8008c58:	42b3      	cmp	r3, r6
 8008c5a:	dcf8      	bgt.n	8008c4e <__sccl+0x46>
 8008c5c:	3502      	adds	r5, #2
 8008c5e:	4619      	mov	r1, r3
 8008c60:	3101      	adds	r1, #1
 8008c62:	428e      	cmp	r6, r1
 8008c64:	5462      	strb	r2, [r4, r1]
 8008c66:	dcfb      	bgt.n	8008c60 <__sccl+0x58>
 8008c68:	1af1      	subs	r1, r6, r3
 8008c6a:	3901      	subs	r1, #1
 8008c6c:	1c58      	adds	r0, r3, #1
 8008c6e:	42b3      	cmp	r3, r6
 8008c70:	bfa8      	it	ge
 8008c72:	2100      	movge	r1, #0
 8008c74:	1843      	adds	r3, r0, r1
 8008c76:	e7e0      	b.n	8008c3a <__sccl+0x32>

08008c78 <_strtoul_l.constprop.0>:
 8008c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008c7c:	4f36      	ldr	r7, [pc, #216]	; (8008d58 <_strtoul_l.constprop.0+0xe0>)
 8008c7e:	4686      	mov	lr, r0
 8008c80:	460d      	mov	r5, r1
 8008c82:	4628      	mov	r0, r5
 8008c84:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c88:	5de6      	ldrb	r6, [r4, r7]
 8008c8a:	f016 0608 	ands.w	r6, r6, #8
 8008c8e:	d1f8      	bne.n	8008c82 <_strtoul_l.constprop.0+0xa>
 8008c90:	2c2d      	cmp	r4, #45	; 0x2d
 8008c92:	d12f      	bne.n	8008cf4 <_strtoul_l.constprop.0+0x7c>
 8008c94:	782c      	ldrb	r4, [r5, #0]
 8008c96:	2601      	movs	r6, #1
 8008c98:	1c85      	adds	r5, r0, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d057      	beq.n	8008d4e <_strtoul_l.constprop.0+0xd6>
 8008c9e:	2b10      	cmp	r3, #16
 8008ca0:	d109      	bne.n	8008cb6 <_strtoul_l.constprop.0+0x3e>
 8008ca2:	2c30      	cmp	r4, #48	; 0x30
 8008ca4:	d107      	bne.n	8008cb6 <_strtoul_l.constprop.0+0x3e>
 8008ca6:	7828      	ldrb	r0, [r5, #0]
 8008ca8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008cac:	2858      	cmp	r0, #88	; 0x58
 8008cae:	d149      	bne.n	8008d44 <_strtoul_l.constprop.0+0xcc>
 8008cb0:	786c      	ldrb	r4, [r5, #1]
 8008cb2:	2310      	movs	r3, #16
 8008cb4:	3502      	adds	r5, #2
 8008cb6:	f04f 38ff 	mov.w	r8, #4294967295
 8008cba:	2700      	movs	r7, #0
 8008cbc:	fbb8 f8f3 	udiv	r8, r8, r3
 8008cc0:	fb03 f908 	mul.w	r9, r3, r8
 8008cc4:	ea6f 0909 	mvn.w	r9, r9
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008cce:	f1bc 0f09 	cmp.w	ip, #9
 8008cd2:	d814      	bhi.n	8008cfe <_strtoul_l.constprop.0+0x86>
 8008cd4:	4664      	mov	r4, ip
 8008cd6:	42a3      	cmp	r3, r4
 8008cd8:	dd22      	ble.n	8008d20 <_strtoul_l.constprop.0+0xa8>
 8008cda:	2f00      	cmp	r7, #0
 8008cdc:	db1d      	blt.n	8008d1a <_strtoul_l.constprop.0+0xa2>
 8008cde:	4580      	cmp	r8, r0
 8008ce0:	d31b      	bcc.n	8008d1a <_strtoul_l.constprop.0+0xa2>
 8008ce2:	d101      	bne.n	8008ce8 <_strtoul_l.constprop.0+0x70>
 8008ce4:	45a1      	cmp	r9, r4
 8008ce6:	db18      	blt.n	8008d1a <_strtoul_l.constprop.0+0xa2>
 8008ce8:	fb00 4003 	mla	r0, r0, r3, r4
 8008cec:	2701      	movs	r7, #1
 8008cee:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cf2:	e7ea      	b.n	8008cca <_strtoul_l.constprop.0+0x52>
 8008cf4:	2c2b      	cmp	r4, #43	; 0x2b
 8008cf6:	bf04      	itt	eq
 8008cf8:	782c      	ldrbeq	r4, [r5, #0]
 8008cfa:	1c85      	addeq	r5, r0, #2
 8008cfc:	e7cd      	b.n	8008c9a <_strtoul_l.constprop.0+0x22>
 8008cfe:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008d02:	f1bc 0f19 	cmp.w	ip, #25
 8008d06:	d801      	bhi.n	8008d0c <_strtoul_l.constprop.0+0x94>
 8008d08:	3c37      	subs	r4, #55	; 0x37
 8008d0a:	e7e4      	b.n	8008cd6 <_strtoul_l.constprop.0+0x5e>
 8008d0c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008d10:	f1bc 0f19 	cmp.w	ip, #25
 8008d14:	d804      	bhi.n	8008d20 <_strtoul_l.constprop.0+0xa8>
 8008d16:	3c57      	subs	r4, #87	; 0x57
 8008d18:	e7dd      	b.n	8008cd6 <_strtoul_l.constprop.0+0x5e>
 8008d1a:	f04f 37ff 	mov.w	r7, #4294967295
 8008d1e:	e7e6      	b.n	8008cee <_strtoul_l.constprop.0+0x76>
 8008d20:	2f00      	cmp	r7, #0
 8008d22:	da07      	bge.n	8008d34 <_strtoul_l.constprop.0+0xbc>
 8008d24:	2322      	movs	r3, #34	; 0x22
 8008d26:	f8ce 3000 	str.w	r3, [lr]
 8008d2a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d2e:	b932      	cbnz	r2, 8008d3e <_strtoul_l.constprop.0+0xc6>
 8008d30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d34:	b106      	cbz	r6, 8008d38 <_strtoul_l.constprop.0+0xc0>
 8008d36:	4240      	negs	r0, r0
 8008d38:	2a00      	cmp	r2, #0
 8008d3a:	d0f9      	beq.n	8008d30 <_strtoul_l.constprop.0+0xb8>
 8008d3c:	b107      	cbz	r7, 8008d40 <_strtoul_l.constprop.0+0xc8>
 8008d3e:	1e69      	subs	r1, r5, #1
 8008d40:	6011      	str	r1, [r2, #0]
 8008d42:	e7f5      	b.n	8008d30 <_strtoul_l.constprop.0+0xb8>
 8008d44:	2430      	movs	r4, #48	; 0x30
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1b5      	bne.n	8008cb6 <_strtoul_l.constprop.0+0x3e>
 8008d4a:	2308      	movs	r3, #8
 8008d4c:	e7b3      	b.n	8008cb6 <_strtoul_l.constprop.0+0x3e>
 8008d4e:	2c30      	cmp	r4, #48	; 0x30
 8008d50:	d0a9      	beq.n	8008ca6 <_strtoul_l.constprop.0+0x2e>
 8008d52:	230a      	movs	r3, #10
 8008d54:	e7af      	b.n	8008cb6 <_strtoul_l.constprop.0+0x3e>
 8008d56:	bf00      	nop
 8008d58:	08009351 	.word	0x08009351

08008d5c <_strtoul_r>:
 8008d5c:	f7ff bf8c 	b.w	8008c78 <_strtoul_l.constprop.0>

08008d60 <__submore>:
 8008d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d64:	460c      	mov	r4, r1
 8008d66:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008d68:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008d6c:	4299      	cmp	r1, r3
 8008d6e:	d11d      	bne.n	8008dac <__submore+0x4c>
 8008d70:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008d74:	f7ff f894 	bl	8007ea0 <_malloc_r>
 8008d78:	b918      	cbnz	r0, 8008d82 <__submore+0x22>
 8008d7a:	f04f 30ff 	mov.w	r0, #4294967295
 8008d7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d86:	63a3      	str	r3, [r4, #56]	; 0x38
 8008d88:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008d8c:	6360      	str	r0, [r4, #52]	; 0x34
 8008d8e:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008d92:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008d96:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008d9a:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008d9e:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008da2:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	2000      	movs	r0, #0
 8008daa:	e7e8      	b.n	8008d7e <__submore+0x1e>
 8008dac:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008dae:	0077      	lsls	r7, r6, #1
 8008db0:	463a      	mov	r2, r7
 8008db2:	f000 f89d 	bl	8008ef0 <_realloc_r>
 8008db6:	4605      	mov	r5, r0
 8008db8:	2800      	cmp	r0, #0
 8008dba:	d0de      	beq.n	8008d7a <__submore+0x1a>
 8008dbc:	eb00 0806 	add.w	r8, r0, r6
 8008dc0:	4601      	mov	r1, r0
 8008dc2:	4632      	mov	r2, r6
 8008dc4:	4640      	mov	r0, r8
 8008dc6:	f7fe fb19 	bl	80073fc <memcpy>
 8008dca:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008dce:	f8c4 8000 	str.w	r8, [r4]
 8008dd2:	e7e9      	b.n	8008da8 <__submore+0x48>

08008dd4 <__ascii_wctomb>:
 8008dd4:	b149      	cbz	r1, 8008dea <__ascii_wctomb+0x16>
 8008dd6:	2aff      	cmp	r2, #255	; 0xff
 8008dd8:	bf85      	ittet	hi
 8008dda:	238a      	movhi	r3, #138	; 0x8a
 8008ddc:	6003      	strhi	r3, [r0, #0]
 8008dde:	700a      	strbls	r2, [r1, #0]
 8008de0:	f04f 30ff 	movhi.w	r0, #4294967295
 8008de4:	bf98      	it	ls
 8008de6:	2001      	movls	r0, #1
 8008de8:	4770      	bx	lr
 8008dea:	4608      	mov	r0, r1
 8008dec:	4770      	bx	lr
	...

08008df0 <__assert_func>:
 8008df0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008df2:	4614      	mov	r4, r2
 8008df4:	461a      	mov	r2, r3
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <__assert_func+0x2c>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4605      	mov	r5, r0
 8008dfc:	68d8      	ldr	r0, [r3, #12]
 8008dfe:	b14c      	cbz	r4, 8008e14 <__assert_func+0x24>
 8008e00:	4b07      	ldr	r3, [pc, #28]	; (8008e20 <__assert_func+0x30>)
 8008e02:	9100      	str	r1, [sp, #0]
 8008e04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008e08:	4906      	ldr	r1, [pc, #24]	; (8008e24 <__assert_func+0x34>)
 8008e0a:	462b      	mov	r3, r5
 8008e0c:	f000 f80e 	bl	8008e2c <fiprintf>
 8008e10:	f000 f9f6 	bl	8009200 <abort>
 8008e14:	4b04      	ldr	r3, [pc, #16]	; (8008e28 <__assert_func+0x38>)
 8008e16:	461c      	mov	r4, r3
 8008e18:	e7f3      	b.n	8008e02 <__assert_func+0x12>
 8008e1a:	bf00      	nop
 8008e1c:	2000001c 	.word	0x2000001c
 8008e20:	08009702 	.word	0x08009702
 8008e24:	0800970f 	.word	0x0800970f
 8008e28:	0800973d 	.word	0x0800973d

08008e2c <fiprintf>:
 8008e2c:	b40e      	push	{r1, r2, r3}
 8008e2e:	b503      	push	{r0, r1, lr}
 8008e30:	4601      	mov	r1, r0
 8008e32:	ab03      	add	r3, sp, #12
 8008e34:	4805      	ldr	r0, [pc, #20]	; (8008e4c <fiprintf+0x20>)
 8008e36:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e3a:	6800      	ldr	r0, [r0, #0]
 8008e3c:	9301      	str	r3, [sp, #4]
 8008e3e:	f000 f8af 	bl	8008fa0 <_vfiprintf_r>
 8008e42:	b002      	add	sp, #8
 8008e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e48:	b003      	add	sp, #12
 8008e4a:	4770      	bx	lr
 8008e4c:	2000001c 	.word	0x2000001c

08008e50 <_fstat_r>:
 8008e50:	b538      	push	{r3, r4, r5, lr}
 8008e52:	4d07      	ldr	r5, [pc, #28]	; (8008e70 <_fstat_r+0x20>)
 8008e54:	2300      	movs	r3, #0
 8008e56:	4604      	mov	r4, r0
 8008e58:	4608      	mov	r0, r1
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	602b      	str	r3, [r5, #0]
 8008e5e:	f7f8 fc98 	bl	8001792 <_fstat>
 8008e62:	1c43      	adds	r3, r0, #1
 8008e64:	d102      	bne.n	8008e6c <_fstat_r+0x1c>
 8008e66:	682b      	ldr	r3, [r5, #0]
 8008e68:	b103      	cbz	r3, 8008e6c <_fstat_r+0x1c>
 8008e6a:	6023      	str	r3, [r4, #0]
 8008e6c:	bd38      	pop	{r3, r4, r5, pc}
 8008e6e:	bf00      	nop
 8008e70:	200002f8 	.word	0x200002f8

08008e74 <_isatty_r>:
 8008e74:	b538      	push	{r3, r4, r5, lr}
 8008e76:	4d06      	ldr	r5, [pc, #24]	; (8008e90 <_isatty_r+0x1c>)
 8008e78:	2300      	movs	r3, #0
 8008e7a:	4604      	mov	r4, r0
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	602b      	str	r3, [r5, #0]
 8008e80:	f7f8 fc97 	bl	80017b2 <_isatty>
 8008e84:	1c43      	adds	r3, r0, #1
 8008e86:	d102      	bne.n	8008e8e <_isatty_r+0x1a>
 8008e88:	682b      	ldr	r3, [r5, #0]
 8008e8a:	b103      	cbz	r3, 8008e8e <_isatty_r+0x1a>
 8008e8c:	6023      	str	r3, [r4, #0]
 8008e8e:	bd38      	pop	{r3, r4, r5, pc}
 8008e90:	200002f8 	.word	0x200002f8

08008e94 <malloc>:
 8008e94:	4b02      	ldr	r3, [pc, #8]	; (8008ea0 <malloc+0xc>)
 8008e96:	4601      	mov	r1, r0
 8008e98:	6818      	ldr	r0, [r3, #0]
 8008e9a:	f7ff b801 	b.w	8007ea0 <_malloc_r>
 8008e9e:	bf00      	nop
 8008ea0:	2000001c 	.word	0x2000001c

08008ea4 <memmove>:
 8008ea4:	4288      	cmp	r0, r1
 8008ea6:	b510      	push	{r4, lr}
 8008ea8:	eb01 0402 	add.w	r4, r1, r2
 8008eac:	d902      	bls.n	8008eb4 <memmove+0x10>
 8008eae:	4284      	cmp	r4, r0
 8008eb0:	4623      	mov	r3, r4
 8008eb2:	d807      	bhi.n	8008ec4 <memmove+0x20>
 8008eb4:	1e43      	subs	r3, r0, #1
 8008eb6:	42a1      	cmp	r1, r4
 8008eb8:	d008      	beq.n	8008ecc <memmove+0x28>
 8008eba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ebe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ec2:	e7f8      	b.n	8008eb6 <memmove+0x12>
 8008ec4:	4402      	add	r2, r0
 8008ec6:	4601      	mov	r1, r0
 8008ec8:	428a      	cmp	r2, r1
 8008eca:	d100      	bne.n	8008ece <memmove+0x2a>
 8008ecc:	bd10      	pop	{r4, pc}
 8008ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ed2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008ed6:	e7f7      	b.n	8008ec8 <memmove+0x24>

08008ed8 <__malloc_lock>:
 8008ed8:	4801      	ldr	r0, [pc, #4]	; (8008ee0 <__malloc_lock+0x8>)
 8008eda:	f7fe ba02 	b.w	80072e2 <__retarget_lock_acquire_recursive>
 8008ede:	bf00      	nop
 8008ee0:	200002ec 	.word	0x200002ec

08008ee4 <__malloc_unlock>:
 8008ee4:	4801      	ldr	r0, [pc, #4]	; (8008eec <__malloc_unlock+0x8>)
 8008ee6:	f7fe b9fd 	b.w	80072e4 <__retarget_lock_release_recursive>
 8008eea:	bf00      	nop
 8008eec:	200002ec 	.word	0x200002ec

08008ef0 <_realloc_r>:
 8008ef0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ef4:	4680      	mov	r8, r0
 8008ef6:	4614      	mov	r4, r2
 8008ef8:	460e      	mov	r6, r1
 8008efa:	b921      	cbnz	r1, 8008f06 <_realloc_r+0x16>
 8008efc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f00:	4611      	mov	r1, r2
 8008f02:	f7fe bfcd 	b.w	8007ea0 <_malloc_r>
 8008f06:	b92a      	cbnz	r2, 8008f14 <_realloc_r+0x24>
 8008f08:	f7fe ff5e 	bl	8007dc8 <_free_r>
 8008f0c:	4625      	mov	r5, r4
 8008f0e:	4628      	mov	r0, r5
 8008f10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f14:	f000 f97b 	bl	800920e <_malloc_usable_size_r>
 8008f18:	4284      	cmp	r4, r0
 8008f1a:	4607      	mov	r7, r0
 8008f1c:	d802      	bhi.n	8008f24 <_realloc_r+0x34>
 8008f1e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f22:	d812      	bhi.n	8008f4a <_realloc_r+0x5a>
 8008f24:	4621      	mov	r1, r4
 8008f26:	4640      	mov	r0, r8
 8008f28:	f7fe ffba 	bl	8007ea0 <_malloc_r>
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	d0ed      	beq.n	8008f0e <_realloc_r+0x1e>
 8008f32:	42bc      	cmp	r4, r7
 8008f34:	4622      	mov	r2, r4
 8008f36:	4631      	mov	r1, r6
 8008f38:	bf28      	it	cs
 8008f3a:	463a      	movcs	r2, r7
 8008f3c:	f7fe fa5e 	bl	80073fc <memcpy>
 8008f40:	4631      	mov	r1, r6
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7fe ff40 	bl	8007dc8 <_free_r>
 8008f48:	e7e1      	b.n	8008f0e <_realloc_r+0x1e>
 8008f4a:	4635      	mov	r5, r6
 8008f4c:	e7df      	b.n	8008f0e <_realloc_r+0x1e>

08008f4e <__sfputc_r>:
 8008f4e:	6893      	ldr	r3, [r2, #8]
 8008f50:	3b01      	subs	r3, #1
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	b410      	push	{r4}
 8008f56:	6093      	str	r3, [r2, #8]
 8008f58:	da08      	bge.n	8008f6c <__sfputc_r+0x1e>
 8008f5a:	6994      	ldr	r4, [r2, #24]
 8008f5c:	42a3      	cmp	r3, r4
 8008f5e:	db01      	blt.n	8008f64 <__sfputc_r+0x16>
 8008f60:	290a      	cmp	r1, #10
 8008f62:	d103      	bne.n	8008f6c <__sfputc_r+0x1e>
 8008f64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f68:	f7fd bbb2 	b.w	80066d0 <__swbuf_r>
 8008f6c:	6813      	ldr	r3, [r2, #0]
 8008f6e:	1c58      	adds	r0, r3, #1
 8008f70:	6010      	str	r0, [r2, #0]
 8008f72:	7019      	strb	r1, [r3, #0]
 8008f74:	4608      	mov	r0, r1
 8008f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008f7a:	4770      	bx	lr

08008f7c <__sfputs_r>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	4606      	mov	r6, r0
 8008f80:	460f      	mov	r7, r1
 8008f82:	4614      	mov	r4, r2
 8008f84:	18d5      	adds	r5, r2, r3
 8008f86:	42ac      	cmp	r4, r5
 8008f88:	d101      	bne.n	8008f8e <__sfputs_r+0x12>
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	e007      	b.n	8008f9e <__sfputs_r+0x22>
 8008f8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f92:	463a      	mov	r2, r7
 8008f94:	4630      	mov	r0, r6
 8008f96:	f7ff ffda 	bl	8008f4e <__sfputc_r>
 8008f9a:	1c43      	adds	r3, r0, #1
 8008f9c:	d1f3      	bne.n	8008f86 <__sfputs_r+0xa>
 8008f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008fa0 <_vfiprintf_r>:
 8008fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fa4:	460d      	mov	r5, r1
 8008fa6:	b09d      	sub	sp, #116	; 0x74
 8008fa8:	4614      	mov	r4, r2
 8008faa:	4698      	mov	r8, r3
 8008fac:	4606      	mov	r6, r0
 8008fae:	b118      	cbz	r0, 8008fb8 <_vfiprintf_r+0x18>
 8008fb0:	6983      	ldr	r3, [r0, #24]
 8008fb2:	b90b      	cbnz	r3, 8008fb8 <_vfiprintf_r+0x18>
 8008fb4:	f7fd fd88 	bl	8006ac8 <__sinit>
 8008fb8:	4b89      	ldr	r3, [pc, #548]	; (80091e0 <_vfiprintf_r+0x240>)
 8008fba:	429d      	cmp	r5, r3
 8008fbc:	d11b      	bne.n	8008ff6 <_vfiprintf_r+0x56>
 8008fbe:	6875      	ldr	r5, [r6, #4]
 8008fc0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fc2:	07d9      	lsls	r1, r3, #31
 8008fc4:	d405      	bmi.n	8008fd2 <_vfiprintf_r+0x32>
 8008fc6:	89ab      	ldrh	r3, [r5, #12]
 8008fc8:	059a      	lsls	r2, r3, #22
 8008fca:	d402      	bmi.n	8008fd2 <_vfiprintf_r+0x32>
 8008fcc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008fce:	f7fe f988 	bl	80072e2 <__retarget_lock_acquire_recursive>
 8008fd2:	89ab      	ldrh	r3, [r5, #12]
 8008fd4:	071b      	lsls	r3, r3, #28
 8008fd6:	d501      	bpl.n	8008fdc <_vfiprintf_r+0x3c>
 8008fd8:	692b      	ldr	r3, [r5, #16]
 8008fda:	b9eb      	cbnz	r3, 8009018 <_vfiprintf_r+0x78>
 8008fdc:	4629      	mov	r1, r5
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f7fd fbda 	bl	8006798 <__swsetup_r>
 8008fe4:	b1c0      	cbz	r0, 8009018 <_vfiprintf_r+0x78>
 8008fe6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008fe8:	07dc      	lsls	r4, r3, #31
 8008fea:	d50e      	bpl.n	800900a <_vfiprintf_r+0x6a>
 8008fec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ff0:	b01d      	add	sp, #116	; 0x74
 8008ff2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008ff6:	4b7b      	ldr	r3, [pc, #492]	; (80091e4 <_vfiprintf_r+0x244>)
 8008ff8:	429d      	cmp	r5, r3
 8008ffa:	d101      	bne.n	8009000 <_vfiprintf_r+0x60>
 8008ffc:	68b5      	ldr	r5, [r6, #8]
 8008ffe:	e7df      	b.n	8008fc0 <_vfiprintf_r+0x20>
 8009000:	4b79      	ldr	r3, [pc, #484]	; (80091e8 <_vfiprintf_r+0x248>)
 8009002:	429d      	cmp	r5, r3
 8009004:	bf08      	it	eq
 8009006:	68f5      	ldreq	r5, [r6, #12]
 8009008:	e7da      	b.n	8008fc0 <_vfiprintf_r+0x20>
 800900a:	89ab      	ldrh	r3, [r5, #12]
 800900c:	0598      	lsls	r0, r3, #22
 800900e:	d4ed      	bmi.n	8008fec <_vfiprintf_r+0x4c>
 8009010:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009012:	f7fe f967 	bl	80072e4 <__retarget_lock_release_recursive>
 8009016:	e7e9      	b.n	8008fec <_vfiprintf_r+0x4c>
 8009018:	2300      	movs	r3, #0
 800901a:	9309      	str	r3, [sp, #36]	; 0x24
 800901c:	2320      	movs	r3, #32
 800901e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009022:	f8cd 800c 	str.w	r8, [sp, #12]
 8009026:	2330      	movs	r3, #48	; 0x30
 8009028:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80091ec <_vfiprintf_r+0x24c>
 800902c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009030:	f04f 0901 	mov.w	r9, #1
 8009034:	4623      	mov	r3, r4
 8009036:	469a      	mov	sl, r3
 8009038:	f813 2b01 	ldrb.w	r2, [r3], #1
 800903c:	b10a      	cbz	r2, 8009042 <_vfiprintf_r+0xa2>
 800903e:	2a25      	cmp	r2, #37	; 0x25
 8009040:	d1f9      	bne.n	8009036 <_vfiprintf_r+0x96>
 8009042:	ebba 0b04 	subs.w	fp, sl, r4
 8009046:	d00b      	beq.n	8009060 <_vfiprintf_r+0xc0>
 8009048:	465b      	mov	r3, fp
 800904a:	4622      	mov	r2, r4
 800904c:	4629      	mov	r1, r5
 800904e:	4630      	mov	r0, r6
 8009050:	f7ff ff94 	bl	8008f7c <__sfputs_r>
 8009054:	3001      	adds	r0, #1
 8009056:	f000 80aa 	beq.w	80091ae <_vfiprintf_r+0x20e>
 800905a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800905c:	445a      	add	r2, fp
 800905e:	9209      	str	r2, [sp, #36]	; 0x24
 8009060:	f89a 3000 	ldrb.w	r3, [sl]
 8009064:	2b00      	cmp	r3, #0
 8009066:	f000 80a2 	beq.w	80091ae <_vfiprintf_r+0x20e>
 800906a:	2300      	movs	r3, #0
 800906c:	f04f 32ff 	mov.w	r2, #4294967295
 8009070:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009074:	f10a 0a01 	add.w	sl, sl, #1
 8009078:	9304      	str	r3, [sp, #16]
 800907a:	9307      	str	r3, [sp, #28]
 800907c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009080:	931a      	str	r3, [sp, #104]	; 0x68
 8009082:	4654      	mov	r4, sl
 8009084:	2205      	movs	r2, #5
 8009086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800908a:	4858      	ldr	r0, [pc, #352]	; (80091ec <_vfiprintf_r+0x24c>)
 800908c:	f7f7 f8c8 	bl	8000220 <memchr>
 8009090:	9a04      	ldr	r2, [sp, #16]
 8009092:	b9d8      	cbnz	r0, 80090cc <_vfiprintf_r+0x12c>
 8009094:	06d1      	lsls	r1, r2, #27
 8009096:	bf44      	itt	mi
 8009098:	2320      	movmi	r3, #32
 800909a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800909e:	0713      	lsls	r3, r2, #28
 80090a0:	bf44      	itt	mi
 80090a2:	232b      	movmi	r3, #43	; 0x2b
 80090a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80090a8:	f89a 3000 	ldrb.w	r3, [sl]
 80090ac:	2b2a      	cmp	r3, #42	; 0x2a
 80090ae:	d015      	beq.n	80090dc <_vfiprintf_r+0x13c>
 80090b0:	9a07      	ldr	r2, [sp, #28]
 80090b2:	4654      	mov	r4, sl
 80090b4:	2000      	movs	r0, #0
 80090b6:	f04f 0c0a 	mov.w	ip, #10
 80090ba:	4621      	mov	r1, r4
 80090bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80090c0:	3b30      	subs	r3, #48	; 0x30
 80090c2:	2b09      	cmp	r3, #9
 80090c4:	d94e      	bls.n	8009164 <_vfiprintf_r+0x1c4>
 80090c6:	b1b0      	cbz	r0, 80090f6 <_vfiprintf_r+0x156>
 80090c8:	9207      	str	r2, [sp, #28]
 80090ca:	e014      	b.n	80090f6 <_vfiprintf_r+0x156>
 80090cc:	eba0 0308 	sub.w	r3, r0, r8
 80090d0:	fa09 f303 	lsl.w	r3, r9, r3
 80090d4:	4313      	orrs	r3, r2
 80090d6:	9304      	str	r3, [sp, #16]
 80090d8:	46a2      	mov	sl, r4
 80090da:	e7d2      	b.n	8009082 <_vfiprintf_r+0xe2>
 80090dc:	9b03      	ldr	r3, [sp, #12]
 80090de:	1d19      	adds	r1, r3, #4
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	9103      	str	r1, [sp, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	bfbb      	ittet	lt
 80090e8:	425b      	neglt	r3, r3
 80090ea:	f042 0202 	orrlt.w	r2, r2, #2
 80090ee:	9307      	strge	r3, [sp, #28]
 80090f0:	9307      	strlt	r3, [sp, #28]
 80090f2:	bfb8      	it	lt
 80090f4:	9204      	strlt	r2, [sp, #16]
 80090f6:	7823      	ldrb	r3, [r4, #0]
 80090f8:	2b2e      	cmp	r3, #46	; 0x2e
 80090fa:	d10c      	bne.n	8009116 <_vfiprintf_r+0x176>
 80090fc:	7863      	ldrb	r3, [r4, #1]
 80090fe:	2b2a      	cmp	r3, #42	; 0x2a
 8009100:	d135      	bne.n	800916e <_vfiprintf_r+0x1ce>
 8009102:	9b03      	ldr	r3, [sp, #12]
 8009104:	1d1a      	adds	r2, r3, #4
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	9203      	str	r2, [sp, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	bfb8      	it	lt
 800910e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009112:	3402      	adds	r4, #2
 8009114:	9305      	str	r3, [sp, #20]
 8009116:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80091fc <_vfiprintf_r+0x25c>
 800911a:	7821      	ldrb	r1, [r4, #0]
 800911c:	2203      	movs	r2, #3
 800911e:	4650      	mov	r0, sl
 8009120:	f7f7 f87e 	bl	8000220 <memchr>
 8009124:	b140      	cbz	r0, 8009138 <_vfiprintf_r+0x198>
 8009126:	2340      	movs	r3, #64	; 0x40
 8009128:	eba0 000a 	sub.w	r0, r0, sl
 800912c:	fa03 f000 	lsl.w	r0, r3, r0
 8009130:	9b04      	ldr	r3, [sp, #16]
 8009132:	4303      	orrs	r3, r0
 8009134:	3401      	adds	r4, #1
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	f814 1b01 	ldrb.w	r1, [r4], #1
 800913c:	482c      	ldr	r0, [pc, #176]	; (80091f0 <_vfiprintf_r+0x250>)
 800913e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009142:	2206      	movs	r2, #6
 8009144:	f7f7 f86c 	bl	8000220 <memchr>
 8009148:	2800      	cmp	r0, #0
 800914a:	d03f      	beq.n	80091cc <_vfiprintf_r+0x22c>
 800914c:	4b29      	ldr	r3, [pc, #164]	; (80091f4 <_vfiprintf_r+0x254>)
 800914e:	bb1b      	cbnz	r3, 8009198 <_vfiprintf_r+0x1f8>
 8009150:	9b03      	ldr	r3, [sp, #12]
 8009152:	3307      	adds	r3, #7
 8009154:	f023 0307 	bic.w	r3, r3, #7
 8009158:	3308      	adds	r3, #8
 800915a:	9303      	str	r3, [sp, #12]
 800915c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800915e:	443b      	add	r3, r7
 8009160:	9309      	str	r3, [sp, #36]	; 0x24
 8009162:	e767      	b.n	8009034 <_vfiprintf_r+0x94>
 8009164:	fb0c 3202 	mla	r2, ip, r2, r3
 8009168:	460c      	mov	r4, r1
 800916a:	2001      	movs	r0, #1
 800916c:	e7a5      	b.n	80090ba <_vfiprintf_r+0x11a>
 800916e:	2300      	movs	r3, #0
 8009170:	3401      	adds	r4, #1
 8009172:	9305      	str	r3, [sp, #20]
 8009174:	4619      	mov	r1, r3
 8009176:	f04f 0c0a 	mov.w	ip, #10
 800917a:	4620      	mov	r0, r4
 800917c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009180:	3a30      	subs	r2, #48	; 0x30
 8009182:	2a09      	cmp	r2, #9
 8009184:	d903      	bls.n	800918e <_vfiprintf_r+0x1ee>
 8009186:	2b00      	cmp	r3, #0
 8009188:	d0c5      	beq.n	8009116 <_vfiprintf_r+0x176>
 800918a:	9105      	str	r1, [sp, #20]
 800918c:	e7c3      	b.n	8009116 <_vfiprintf_r+0x176>
 800918e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009192:	4604      	mov	r4, r0
 8009194:	2301      	movs	r3, #1
 8009196:	e7f0      	b.n	800917a <_vfiprintf_r+0x1da>
 8009198:	ab03      	add	r3, sp, #12
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	462a      	mov	r2, r5
 800919e:	4b16      	ldr	r3, [pc, #88]	; (80091f8 <_vfiprintf_r+0x258>)
 80091a0:	a904      	add	r1, sp, #16
 80091a2:	4630      	mov	r0, r6
 80091a4:	f3af 8000 	nop.w
 80091a8:	4607      	mov	r7, r0
 80091aa:	1c78      	adds	r0, r7, #1
 80091ac:	d1d6      	bne.n	800915c <_vfiprintf_r+0x1bc>
 80091ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80091b0:	07d9      	lsls	r1, r3, #31
 80091b2:	d405      	bmi.n	80091c0 <_vfiprintf_r+0x220>
 80091b4:	89ab      	ldrh	r3, [r5, #12]
 80091b6:	059a      	lsls	r2, r3, #22
 80091b8:	d402      	bmi.n	80091c0 <_vfiprintf_r+0x220>
 80091ba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80091bc:	f7fe f892 	bl	80072e4 <__retarget_lock_release_recursive>
 80091c0:	89ab      	ldrh	r3, [r5, #12]
 80091c2:	065b      	lsls	r3, r3, #25
 80091c4:	f53f af12 	bmi.w	8008fec <_vfiprintf_r+0x4c>
 80091c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091ca:	e711      	b.n	8008ff0 <_vfiprintf_r+0x50>
 80091cc:	ab03      	add	r3, sp, #12
 80091ce:	9300      	str	r3, [sp, #0]
 80091d0:	462a      	mov	r2, r5
 80091d2:	4b09      	ldr	r3, [pc, #36]	; (80091f8 <_vfiprintf_r+0x258>)
 80091d4:	a904      	add	r1, sp, #16
 80091d6:	4630      	mov	r0, r6
 80091d8:	f7ff fa72 	bl	80086c0 <_printf_i>
 80091dc:	e7e4      	b.n	80091a8 <_vfiprintf_r+0x208>
 80091de:	bf00      	nop
 80091e0:	08009474 	.word	0x08009474
 80091e4:	08009494 	.word	0x08009494
 80091e8:	08009454 	.word	0x08009454
 80091ec:	080096b4 	.word	0x080096b4
 80091f0:	080096be 	.word	0x080096be
 80091f4:	00000000 	.word	0x00000000
 80091f8:	08008f7d 	.word	0x08008f7d
 80091fc:	080096ba 	.word	0x080096ba

08009200 <abort>:
 8009200:	b508      	push	{r3, lr}
 8009202:	2006      	movs	r0, #6
 8009204:	f000 f834 	bl	8009270 <raise>
 8009208:	2001      	movs	r0, #1
 800920a:	f7f8 fa73 	bl	80016f4 <_exit>

0800920e <_malloc_usable_size_r>:
 800920e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009212:	1f18      	subs	r0, r3, #4
 8009214:	2b00      	cmp	r3, #0
 8009216:	bfbc      	itt	lt
 8009218:	580b      	ldrlt	r3, [r1, r0]
 800921a:	18c0      	addlt	r0, r0, r3
 800921c:	4770      	bx	lr

0800921e <_raise_r>:
 800921e:	291f      	cmp	r1, #31
 8009220:	b538      	push	{r3, r4, r5, lr}
 8009222:	4604      	mov	r4, r0
 8009224:	460d      	mov	r5, r1
 8009226:	d904      	bls.n	8009232 <_raise_r+0x14>
 8009228:	2316      	movs	r3, #22
 800922a:	6003      	str	r3, [r0, #0]
 800922c:	f04f 30ff 	mov.w	r0, #4294967295
 8009230:	bd38      	pop	{r3, r4, r5, pc}
 8009232:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009234:	b112      	cbz	r2, 800923c <_raise_r+0x1e>
 8009236:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800923a:	b94b      	cbnz	r3, 8009250 <_raise_r+0x32>
 800923c:	4620      	mov	r0, r4
 800923e:	f000 f831 	bl	80092a4 <_getpid_r>
 8009242:	462a      	mov	r2, r5
 8009244:	4601      	mov	r1, r0
 8009246:	4620      	mov	r0, r4
 8009248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800924c:	f000 b818 	b.w	8009280 <_kill_r>
 8009250:	2b01      	cmp	r3, #1
 8009252:	d00a      	beq.n	800926a <_raise_r+0x4c>
 8009254:	1c59      	adds	r1, r3, #1
 8009256:	d103      	bne.n	8009260 <_raise_r+0x42>
 8009258:	2316      	movs	r3, #22
 800925a:	6003      	str	r3, [r0, #0]
 800925c:	2001      	movs	r0, #1
 800925e:	e7e7      	b.n	8009230 <_raise_r+0x12>
 8009260:	2400      	movs	r4, #0
 8009262:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009266:	4628      	mov	r0, r5
 8009268:	4798      	blx	r3
 800926a:	2000      	movs	r0, #0
 800926c:	e7e0      	b.n	8009230 <_raise_r+0x12>
	...

08009270 <raise>:
 8009270:	4b02      	ldr	r3, [pc, #8]	; (800927c <raise+0xc>)
 8009272:	4601      	mov	r1, r0
 8009274:	6818      	ldr	r0, [r3, #0]
 8009276:	f7ff bfd2 	b.w	800921e <_raise_r>
 800927a:	bf00      	nop
 800927c:	2000001c 	.word	0x2000001c

08009280 <_kill_r>:
 8009280:	b538      	push	{r3, r4, r5, lr}
 8009282:	4d07      	ldr	r5, [pc, #28]	; (80092a0 <_kill_r+0x20>)
 8009284:	2300      	movs	r3, #0
 8009286:	4604      	mov	r4, r0
 8009288:	4608      	mov	r0, r1
 800928a:	4611      	mov	r1, r2
 800928c:	602b      	str	r3, [r5, #0]
 800928e:	f7f8 fa21 	bl	80016d4 <_kill>
 8009292:	1c43      	adds	r3, r0, #1
 8009294:	d102      	bne.n	800929c <_kill_r+0x1c>
 8009296:	682b      	ldr	r3, [r5, #0]
 8009298:	b103      	cbz	r3, 800929c <_kill_r+0x1c>
 800929a:	6023      	str	r3, [r4, #0]
 800929c:	bd38      	pop	{r3, r4, r5, pc}
 800929e:	bf00      	nop
 80092a0:	200002f8 	.word	0x200002f8

080092a4 <_getpid_r>:
 80092a4:	f7f8 ba0e 	b.w	80016c4 <_getpid>

080092a8 <_init>:
 80092a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092aa:	bf00      	nop
 80092ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ae:	bc08      	pop	{r3}
 80092b0:	469e      	mov	lr, r3
 80092b2:	4770      	bx	lr

080092b4 <_fini>:
 80092b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092b6:	bf00      	nop
 80092b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80092ba:	bc08      	pop	{r3}
 80092bc:	469e      	mov	lr, r3
 80092be:	4770      	bx	lr
